; ModuleID = 'main'
source_filename = "main"

%t_struct_mimcfeistel = type { %t_struct_param_mimcfeistel*, void (%t_struct_mimcfeistel*)*, i128, i128, i128, i128, i128 }
%t_struct_param_mimcfeistel = type { i128 }

@constraint = external global i1*
@constraint.1 = external global i1*
@constraint.2 = external global i1*
@constraint.3 = external global i1*
@constraint.4 = external global i1*
@constraint.5 = external global i1*

define void @intrinsic_add_constraint(i128 %0, i128 %1, i1* %2) {
entry:
  %constraint = icmp eq i128 %0, %1
  store i1 %constraint, i1* %2, align 1
}

define i128 @intrinsic_inline_switch(i1 %0, i128 %1, i128 %2) {
entry:
  br i1 %0, label %if.true, label %if.false

if.true:                                          ; preds = %entry
  ret i128 %1

if.false:                                         ; preds = %entry
  ret i128 %2
}

define void @t_fn_init_mimcfeistel(%t_struct_mimcfeistel* %0) {
entry:
  %struct_ptr = getelementptr inbounds %t_struct_mimcfeistel, %t_struct_mimcfeistel* %0, i32 0, i32 0
  %param = load %t_struct_param_mimcfeistel*, %t_struct_param_mimcfeistel** %struct_ptr, align 8
  %struct_ptr1 = getelementptr inbounds %t_struct_param_mimcfeistel, %t_struct_param_mimcfeistel* %param, i32 0, i32 0
  %params.nrounds = load i128, i128* %struct_ptr1, align 4
  %struct_ptr2 = getelementptr inbounds %t_struct_mimcfeistel, %t_struct_mimcfeistel* %0, i32 0, i32 2
  %read_signal_input.xL_in = load i128, i128* %struct_ptr2, align 4
  %struct_ptr3 = getelementptr inbounds %t_struct_mimcfeistel, %t_struct_mimcfeistel* %0, i32 0, i32 3
  %read_signal_input.xR_in = load i128, i128* %struct_ptr3, align 4
  %struct_ptr4 = getelementptr inbounds %t_struct_mimcfeistel, %t_struct_mimcfeistel* %0, i32 0, i32 4
  %read_signal_input.k = load i128, i128* %struct_ptr4, align 4
  %xR = alloca i128, i32 256, align 8
  %t2 = alloca i128, i32 256, align 8
  %xL = alloca i128, i32 256, align 8
  %t4 = alloca i128, i32 256, align 8
  %inlinearray = alloca i128, i32 218, align 8
  store [218 x i128] [i128 -6220679170417918400113403766400039468, i128 -44714556622326317557415045586675056183, i128 -66716848608669609332841552937593836296, i128 38886745835419070156553160171321000146, i128 153500493935553123709963561064601060711, i128 -108261379997812500237972379817868354769, i128 -110283655830832926194523211223834604492, i128 -138254651801834697604191654599664071715, i128 -137038518517032820346394381692075427890, i128 -83512503081084231701934507507008366091, i128 119014626535805125892414228102611414134, i128 724580679705763667176610042844252950, i128 -67136373541222449782144513797667650214, i128 -55047258570393144885723689631918684321, i128 -160421298715631223346182723351166451350, i128 81956002502352564203796617783869647459, i128 150437071463673197541595787660515628367, i128 79868401475986491252817125279121186991, i128 -37442881825989028830757571580469972735, i128 -167033025549873050442598529955069477252, i128 2752384467767402222022366315108523013, i128 57405998904381582542382260214225485037, i128 41281466459128820773567396149853263296, i128 -22413223640669331011257565285765174731, i128 104456960455126251287075173062704258983, i128 40692507112199282373369612646264597364, i128 112039921053363760696388910478410257295, i128 1773067811651339006717689238528364106, i128 137705109377407761052639306606691070053, i128 -119734920711917434644662388178951492530, i128 -3302629616148482700519935659093898071, i128 136018454081178194963457995892694437440, i128 61200707239003959712204328603610978367, i128 156464128854166361063145646508682101581, i128 162841022648568438865913321247068736850, i128 61997755780743969238898519404864104182, i128 156135515892337388772826395941577520881, i128 -10201887089248238428415746779891108732, i128 -60674912206717275026450715135185362551, i128 145796465874352572448325056623218946798, i128 87835340611842988773116805169621102201, i128 -164559781017877728264955190267879369999, i128 135039441179587426195437131219205646714, i128 -144367754988644814179561464472213242383, i128 40855020697464292964429223081943388127, i128 104276715910838839449355707257826198552, i128 18471580499212112140496896278170913230, i128 157755090726422432722212629396116875468, i128 152935091709583455563360297962951423851, i128 117380777742991216912023969950137554552, i128 68042354508944365000362648273499091169, i128 16394310705283085126036996537665195049, i128 -5347621838449246297154596658171479192, i128 5923742582244373066097846037023295792, i128 -119808168102011258177061869780938380303, i128 -96194655392556440765982614057577459681, i128 -37107141629993164506349639566034949034, i128 -55243946088586646090212105687060002267, i128 81525831565059178646970506630724740145, i128 -107095885278888218800677204138312832645, i128 41088783034602756548618878517722754330, i128 89452093364796643015187332095978955668, i128 -4320350578925158406419643775889879149, i128 73373983502768495762840082748431269474, i128 4720040744019842132100838525226866867, i128 9635464886604523443506195395129952396, i128 -126762355798983052294079348465001209120, i128 -164318103555565024476266275707177554472, i128 115017805622240211406261822977175449672, i128 55602317428461571061446964895226521862, i128 188920898671319984584147479088693108, i128 -91896924505756979406298422348244895067, i128 -16174365422907940999214428080906541117, i128 94218998107696820503951430636779751936, i128 -60725083839908888205312183085237644796, i128 -16623877740553319282108113488606052163, i128 23876969937164470462764256523062694321, i128 -105436804008784476345938949355887016259, i128 38592790341135287774436958092343175287, i128 133289282741570057166981840974542932315, i128 145426735300613241152502971698560751657, i128 -20014712883483791737739215392667121606, i128 26523279983097758042239953369756318962, i128 82983482793285858468132655084011472474, i128 144440332004708373662127182806272103541, i128 -3081961702765088816445899441961610080, i128 139463881222877387630231447993317667186, i128 48288785532206031658384383490692975629, i128 134445531864061782166475059983736293872, i128 169147488280257733014257534614455185749, i128 135424661497771778269118288075979670732, i128 137455437451893068255369014146898679941, i128 149308904709092818005481726701049345513, i128 -88229483578537348624881167174767885525, i128 -161124397229068837740675297834816881028, i128 159784063519610293334157906611212705162, i128 -36730890711142721182902974617731876704, i128 -105409136428251621499143109414398293662, i128 84261633740970476418147882185139702279, i128 -51492562442698479777337931610870575338, i128 -123723212443319225341704049728345191953, i128 13156560763161688131638488462429647968, i128 -66652529196043966008032118566383326434, i128 66826581917963838433748566992857418943, i128 12273258497589881939973620938220844724, i128 152485226152440936881869153507566351686, i128 40832122212280658047311580781665029218, i128 -146275737980630871560423942703989821702, i128 -88564763418449012788322973325680809547, i128 -54871122536577374002384502148508578910, i128 95895643835195816149075086744929812634, i128 61869192609939021337518424531240617139, i128 -17388417263485946952560099800053295874, i128 -79556542086027569266839829614468366925, i128 64935078423199787589395577974972386245, i128 104465272731046918425484736613704148464, i128 -145640495583592220064591710541540253852, i128 108615108377930219761344348264717264364, i128 -80829862638340790000912788974161730375, i128 90323134954217457696959451135018454247, i128 -127334859784941251026432750323598504618, i128 140166257014018864911515580821761145855, i128 -147980707216510429105902152081465308577, i128 61355571867150307714926916591840887718, i128 4619651679912807906434954362165016757, i128 -70205270093676589203540762577887247562, i128 100471854543899739092010645000864442301, i128 151655534176150029246387005314155749188, i128 -164410221912290620767088172016162052327, i128 53581368837326614994925848973801094332, i128 140020584605540320570006906499872541515, i128 8278467293075599232973357742044436877, i128 -141991617479888431417533330974268089360, i128 17197501319156235591315495450186209137, i128 -129120395657956658798312294723858707580, i128 -119982615672590873008483791982913120144, i128 -118352778502484054772628742675077893977, i128 13031640345794642427034572385187045413, i128 -169305451980425300827787163867449775875, i128 165525306204759513603496624739348745507, i128 -28127989875886244238511029848629584139, i128 108470832117326883088734936474228493357, i128 92843071880389937897376984878844385436, i128 129461263670257622307734170660211799648, i128 42901925915300595509696589471337356034, i128 71853796090012716916173713979669351569, i128 -49941653485038701354525148996915129346, i128 -73164333272135885037161627565120824974, i128 80819952746794999563480590224304131529, i128 -100143275169836189823406317746159222105, i128 -121385994523965988943551534586536369418, i128 99909169787324286450049976830515128853, i128 67246425216577878119185313554121398361, i128 -80927597332325327833221897406716932424, i128 142855921871559801892221567326431084454, i128 126666318245342232989713932656305701528, i128 145543210659941707673741278807663112400, i128 49718521699805589447412455836079369976, i128 104182101391992839863165297968197013369, i128 -59151848526526705047406764631577317076, i128 -12545948522322520254786503518380943343, i128 -163367033514114315804923369736954793299, i128 -96890473125033916715900575765356751064, i128 -118537171927840819771183755133354796289, i128 -11980154630424157339087085018034892985, i128 -95603115970666886664764408268528450177, i128 121347516684676536259594240446093045890, i128 79751243329629837794698429825895525682, i128 -92355351689482723230125367575760748228, i128 -134166085838026454306612605670151449951, i128 -62706441063454971521084156135526529763, i128 115288188464575703104048799859887465358, i128 -86554688957570465569900096227349040211, i128 158350452295663690925929738504409044980, i128 -124839731245915362822317938167503312370, i128 -40060366195535424825517250315063439875, i128 -12093781765732137461050572545838229082, i128 105167347021307247623663294216119440964, i128 -81557439956375762824119783328083178888, i128 158468250413328839047390599704053988547, i128 -145897460311099435656131924841017220459, i128 -163310245109583225644951950585391879183, i128 110044183706884645370686232435155675129, i128 149523728087424443114051219300779418022, i128 50122155295456496387110531064113759552, i128 123866479390235329996114939197732384969, i128 117544772035213147654364812848573434996, i128 91214279370798991475636377422399253855, i128 112063793149515391127456406286052262051, i128 -65723916741923494990605896872012610515, i128 -118521054056004172180063032625928609010, i128 66581121637097640089050173385021922374, i128 105878310379839427553599372385452387017, i128 -25196371821724778536211319971527641335, i128 20088934507849154407569230345379960510, i128 114209262482110340323307709230735519043, i128 -55409426419513636065968085750487245604, i128 -70985230855990493032240924862854446706, i128 50334228867940625669907559572507714588, i128 89759630280352830184383742277806051492, i128 84529774522459532866359144402200921626, i128 85838765321512806671792368402520737715, i128 -13965060609580748122979832960382457063, i128 159082909861171732672320660646875874428, i128 128125163822835526153752509102035466359, i128 -67867737436117049348668779154085619369, i128 136669049714134603037955102759991080606, i128 -38319528571611926378839108388390632805, i128 -126081592411947537618893866000630439255, i128 77159439820590767886838501750868665888, i128 -68806333016309214013765833765857805928, i128 21786314829673943422043452968149656162, i128 43527087097997287070788539571183077436, i128 70650391323233315478288836979101599009, i128 91024953202206907616702309667441059554, i128 -49794822210973800208843707707287034733, i128 -81500532211872469615294495121497623415, i128 123623316048179843776109627960696376331], i128* %inlinearray, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %loop.i = phi i128 [ 0, %entry ], [ %add58, %loop.latch ]
  %eq = icmp eq i128 %loop.i, 0
  %sub = sub i128 %params.nrounds, 1
  %sub.mod = srem i128 %sub, 12539295309507511577697735
  %eq5 = icmp eq i128 %loop.i, %sub.mod
  %or = and i1 %eq, %eq5
  %or.mod = srem i1 %or, i128 12539295309507511577697735
  br i1 %or.mod, label %if.body, label %if.else
  br label %loop.latch

if.body:                                          ; preds = %loop.body
  br label %if.end

if.else:                                          ; preds = %loop.body
  %sub6 = sub i128 %loop.i, 1
  %sub6.mod = srem i128 %sub6, 12539295309507511577697735
  %array_ptr = getelementptr inbounds i128, i128* %inlinearray, i128 %sub6.mod
  %c_partial = load i128, i128* %array_ptr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.body
  %eq7 = icmp eq i128 %loop.i, 0
  %add = add i128 %read_signal_input.k, %read_signal_input.xL_in
  %add.mod = srem i128 %add, 12539295309507511577697735
  %sub8 = sub i128 %loop.i, 1
  %sub8.mod = srem i128 %sub8, 12539295309507511577697735
  %array_ptr9 = getelementptr inbounds i128, i128* %xL, i128 %sub8.mod
  %xL10 = load i128, i128* %array_ptr9, align 4
  %add11 = add i128 %read_signal_input.k, %xL10
  %add11.mod = srem i128 %add11, 12539295309507511577697735
  %add12 = add i128 %add11.mod, %c_partial
  %add12.mod = srem i128 %add12, 12539295309507511577697735
  %inlineswitch = call i128 @intrinsic_inline_switch(i1 %eq7, i128 %add.mod, i128 %add12.mod)
  %mul = mul i128 %inlineswitch, %inlineswitch
  %mul.mod = srem i128 %mul, 12539295309507511577697735
  %t213 = getelementptr inbounds i128, i128* %t2, i128 %loop.i
  store i128 %mul.mod, i128* %t213, align 4
  %array_ptr14 = getelementptr inbounds i128, i128* %t2, i128 %loop.i
  %t215 = load i128, i128* %array_ptr14, align 4
  call void @intrinsic_add_constraint(i128 %t215, i128 %mul.mod)
  %array_ptr16 = getelementptr inbounds i128, i128* %t2, i128 %loop.i
  %t217 = load i128, i128* %array_ptr16, align 4
  %array_ptr18 = getelementptr inbounds i128, i128* %t2, i128 %loop.i
  %t219 = load i128, i128* %array_ptr18, align 4
  %mul20 = mul i128 %t217, %t219
  %mul20.mod = srem i128 %mul20, 12539295309507511577697735
  %t421 = getelementptr inbounds i128, i128* %t4, i128 %loop.i
  store i128 %mul20.mod, i128* %t421, align 4
  %array_ptr22 = getelementptr inbounds i128, i128* %t4, i128 %loop.i
  %t423 = load i128, i128* %array_ptr22, align 4
  call void @intrinsic_add_constraint(i128 %t423, i128 %mul20.mod)
  %sub27 = sub i128 %params.nrounds, 1
  %sub27.mod = srem i128 %sub27, 12539295309507511577697735
  %slt = icmp slt i128 %loop.i, %sub27.mod
  br i1 %slt, label %if.body24, label %if.else25

if.body24:                                        ; preds = %if.end
  %eq28 = icmp eq i128 %loop.i, 0
  %sub29 = sub i128 %loop.i, 1
  %sub29.mod = srem i128 %sub29, 12539295309507511577697735
  %array_ptr30 = getelementptr inbounds i128, i128* %xR, i128 %sub29.mod
  %xR31 = load i128, i128* %array_ptr30, align 4
  %inlineswitch32 = call i128 @intrinsic_inline_switch(i1 %eq28, i128 %read_signal_input.xR_in, i128 %xR31)
  %array_ptr33 = getelementptr inbounds i128, i128* %t4, i128 %loop.i
  %t434 = load i128, i128* %array_ptr33, align 4
  %mul35 = mul i128 %t434, %inlineswitch
  %mul35.mod = srem i128 %mul35, 12539295309507511577697735
  %add36 = add i128 %inlineswitch32, %mul35.mod
  %add36.mod = srem i128 %add36, 12539295309507511577697735
  %xL37 = getelementptr inbounds i128, i128* %xL, i128 %loop.i
  store i128 %add36.mod, i128* %xL37, align 4
  %array_ptr38 = getelementptr inbounds i128, i128* %xL, i128 %loop.i
  %xL39 = load i128, i128* %array_ptr38, align 4
  call void @intrinsic_add_constraint(i128 %xL39, i128 %add36.mod)
  %eq40 = icmp eq i128 %loop.i, 0
  %sub41 = sub i128 %loop.i, 1
  %sub41.mod = srem i128 %sub41, 12539295309507511577697735
  %array_ptr42 = getelementptr inbounds i128, i128* %xL, i128 %sub41.mod
  %xL43 = load i128, i128* %array_ptr42, align 4
  %inlineswitch44 = call i128 @intrinsic_inline_switch(i1 %eq40, i128 %read_signal_input.xL_in, i128 %xL43)
  %xR45 = getelementptr inbounds i128, i128* %xR, i128 %loop.i
  store i128 %inlineswitch44, i128* %xR45, align 4
  %array_ptr46 = getelementptr inbounds i128, i128* %xR, i128 %loop.i
  %xR47 = load i128, i128* %array_ptr46, align 4
  call void @intrinsic_add_constraint(i128 %xR47, i128 %inlineswitch44)
  br label %if.end26

if.else25:                                        ; preds = %if.end
  %sub48 = sub i128 %loop.i, 1
  %sub48.mod = srem i128 %sub48, 12539295309507511577697735
  %array_ptr49 = getelementptr inbounds i128, i128* %xR, i128 %sub48.mod
  %xR50 = load i128, i128* %array_ptr49, align 4
  %array_ptr51 = getelementptr inbounds i128, i128* %t4, i128 %loop.i
  %t452 = load i128, i128* %array_ptr51, align 4
  %mul53 = mul i128 %t452, %inlineswitch
  %mul53.mod = srem i128 %mul53, 12539295309507511577697735
  %add54 = add i128 %xR50, %mul53.mod
  %add54.mod = srem i128 %add54, 12539295309507511577697735
  call void @intrinsic_add_constraint(i128 %add54.mod, i128 %add54.mod)
  %sub55 = sub i128 %loop.i, 1
  %sub55.mod = srem i128 %sub55, 12539295309507511577697735
  %array_ptr56 = getelementptr inbounds i128, i128* %xL, i128 %sub55.mod
  %xL57 = load i128, i128* %array_ptr56, align 4
  call void @intrinsic_add_constraint(i128 %xL57, i128 %xL57)
  br label %if.end26

if.end26:                                         ; preds = %if.else25, %if.body24

loop.latch:                                       ; preds = %loop.body
  %add58 = add i128 %loop.i, 1
  %slt59 = icmp slt i128 %add58, %params.nrounds
  br i1 %slt59, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch

exit:                                             ; No predecessors!
  %write_signal_output.xL_out = getelementptr inbounds %t_struct_mimcfeistel, %t_struct_mimcfeistel* %0, i32 0, i32 5
  store i128 %xL57, i128* %write_signal_output.xL_out, align 4
  %write_signal_output.xR_out = getelementptr inbounds %t_struct_mimcfeistel, %t_struct_mimcfeistel* %0, i32 0, i32 6
  store i128 %add54.mod, i128* %write_signal_output.xR_out, align 4
}

define %t_struct_mimcfeistel @t_fn_build_mimcfeistel(%t_struct_param_mimcfeistel* %0) {
entry:
  %1 = alloca %t_struct_mimcfeistel, align 8
  %param = getelementptr inbounds %t_struct_mimcfeistel, %t_struct_mimcfeistel* %1, i32 0, i32 0
  store %t_struct_param_mimcfeistel* %0, %t_struct_param_mimcfeistel** %param, align 8
  %init_fn = getelementptr inbounds %t_struct_mimcfeistel, %t_struct_mimcfeistel* %1, i32 0, i32 1
  store void (%t_struct_mimcfeistel*)* @t_fn_init_mimcfeistel, void (%t_struct_mimcfeistel*)** %init_fn, align 8
  ret %t_struct_mimcfeistel* %1
}
