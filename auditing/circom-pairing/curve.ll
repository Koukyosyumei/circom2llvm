; ModuleID = 'curve.circom'
source_filename = "/Users/hongbo/code/circom-pairing/circuits/curve.circom"

%struct_template_circuit_iszero = type { i128, i128, i128 }
%struct_template_circuit_not = type { i128, i128 }
%struct_template_circuit_and = type { i128, i128, i128 }
%struct_template_circuit_bigmultshortlong2dunequal = type { i128, i128, i128, i128, i128, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_bigiszero = type { i128, [256 x i128]*, i128 }
%struct_template_circuit_forceequalifenabled = type { i128, [256 x i128]* }
%struct_template_circuit_bigmultshortlongunequal = type { i128, i128, i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_multiand = type { i128, [256 x i128]*, i128 }
%struct_template_circuit_num2bitsneg = type { i128, i128, [256 x i128]* }
%struct_template_circuit_or = type { i128, i128, i128 }
%struct_template_circuit_bits2num = type { i128, [256 x i128]*, i128 }
%struct_template_circuit_bigmultshortlong = type { i128, i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_xor = type { i128, i128, i128 }
%struct_template_circuit_nand = type { i128, i128, i128 }
%struct_template_circuit_isequal = type { [256 x i128]*, i128 }
%struct_template_circuit_nor = type { i128, i128, i128 }
%struct_template_circuit_num2bits = type { i128, i128, [256 x i128]* }
%struct_template_circuit_compconstant = type { i128, [256 x i128]*, [256 x i128]*, i128, i128 }
%struct_template_circuit_bigmultshortlong2d = type { i128, i128, i128, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_binsum = type { i128, i128, [256 x [256 x i128]]*, [256 x i128]* }
%struct_template_circuit_checkcarrytozero = type { i128, i128, i128, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_modsumthree = type { i128, i128, i128, i128, i128, i128 }
%struct_template_circuit_aliascheck = type { [256 x i128]* }
%struct_template_circuit_signedfp2multiplynocarryunequal = type { i128, i128, i128, i128, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_signedfp2multiplynocarry = type { i128, i128, i128, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_split = type { i128, i128, i128, i128, i128 }
%struct_template_circuit_checkcarrymodp = type { i128, i128, i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_lessthan = type { i128, [256 x i128]*, i128 }
%struct_template_circuit_lesseqthan = type { i128, [256 x i128]*, i128 }
%struct_template_circuit_longtoshortnoendcarry = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_modsum = type { i128, i128, i128, i128, i128 }
%struct_template_circuit_modsubthree = type { i128, i128, i128, i128, i128, i128, i128 }
%struct_template_circuit_modsub = type { i128, i128, i128, i128, i128 }
%struct_template_circuit_bigmult = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_rangecheck2d = type { i128, i128, [256 x [256 x i128]]* }
%struct_template_circuit_modprod = type { i128, i128, i128, i128, i128 }
%struct_template_circuit_modsumfour = type { i128, i128, i128, i128, i128, i128, i128 }
%struct_template_circuit_bigisequal = type { i128, [256 x i128]*, [256 x i128]*, i128 }
%struct_template_circuit_splitthree = type { i128, i128, i128, i128, i128, i128, i128 }
%struct_template_circuit_bigsub = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, i128 }
%struct_template_circuit_greaterthan = type { i128, [256 x i128]*, i128 }
%struct_template_circuit_num2bits_strict = type { i128, [256 x i128]* }
%struct_template_circuit_fpnegate = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_bits2num_strict = type { [256 x i128]*, i128 }
%struct_template_circuit_fp2frobeniusmap = type { i128, i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_biglessthan = type { i128, i128, [256 x i128]*, [256 x i128]*, i128 }
%struct_template_circuit_greatereqthan = type { i128, [256 x i128]*, i128 }
%struct_template_circuit_bigadd = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_bigaddmodp = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_fpisequal = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, i128 }
%struct_template_circuit_fpsubtract = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, i128, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_fpadd = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_fpsgn0 = type { i128, i128, [256 x i128]*, [256 x i128]*, i128, i128 }
%struct_template_circuit_fp2conjugate = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_fpiszero = type { i128, i128, [256 x i128]*, [256 x i128]*, i128 }
%struct_template_circuit_fp2negate = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_fp2add = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_fp2iszero = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, i128 }
%struct_template_circuit_signedcheckcarrymodtozero = type { i128, i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_fp2isequal = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, i128 }
%struct_template_circuit_bigmod2 = type { i128, i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_bigsubmodp = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, i128, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_fp2subtract = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_bigmod = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_bigmultmodp = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_signedfpcarrymodp = type { i128, i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_primereduce = type { i128, i128, i128, [256 x i128]*, i128, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_pointonline = type { i128, i128, [256 x i128]*, [256 x [256 x [256 x i128]]]* }
%struct_template_circuit_fp2sgn0 = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, i128, i128 }
%struct_template_circuit_signedfp2carrymodp = type { i128, i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_pointontangent = type { i128, i128, i128, [256 x i128]*, [256 x [256 x [256 x i128]]]* }
%struct_template_circuit_fpmultiply = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_fp2compress = type { i128, i128, i128, [256 x i128]*, i128, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_pointoncurve = type { i128, i128, i128, i128, [256 x i128]*, [256 x [256 x i128]]* }
%struct_template_circuit_signedfp2multiplynocarrycompressthree = type { i128, i128, [256 x i128]*, i128, i128, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_ellipticcurveaddunequal = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_bigmodinv = type { i128, i128, [256 x i128]*, [256 x i128]*, [256 x i128]* }
%struct_template_circuit_fp2multiplythree = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_signedfp2compresscarry = type { i128, i128, i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_signedfp2multiplynocarrycompress = type { i128, i128, [256 x i128]*, i128, i128, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_ellipticcurvedouble = type { i128, i128, i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_signedfp2divide = type { i128, i128, i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_fp2multiply = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_ellipticcurveadd = type { i128, i128, i128, i128, [256 x i128]*, [256 x [256 x i128]]*, i128, [256 x [256 x i128]]*, i128, i128, i128, i128, [256 x [256 x [256 x i128]]]*, [256 x [256 x i128]]*, i128 }
%struct_template_circuit_ellipticcurvescalarmultiplyunequal = type { i128, i128, i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x [256 x i128]]]*, [256 x [256 x i128]]* }
%struct_template_circuit_fp2invert = type { i128, i128, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]* }
%struct_template_circuit_ellipticcurvescalarmultiply = type { i128, i128, i128, i128, [256 x i128]*, [256 x [256 x i128]]*, i128, [256 x [256 x [256 x i128]]]*, [256 x i128]*, [256 x [256 x i128]]*, [256 x [256 x i128]]*, i128 }

@constraint = external global i1
@constraint.1 = external global i1
@constraint.2 = external global i1
@constraint.3 = external global i1
@constraint.4 = external global i1
@constraint.5 = external global i1
@constraint.6 = external global i1
@constraint.7 = external global i1
@constraint.8 = external global i1
@constraint.9 = external global i1
@constraint.10 = external global i1
@constraint.11 = external global i1
@constraint.12 = external global i1
@constraint.13 = external global i1
@constraint.14 = external global i1
@constraint.15 = external global i1
@constraint.16 = external global i1
@constraint.17 = external global i1
@constraint.18 = external global i1
@constraint.19 = external global i1
@constraint.20 = external global i1
@constraint.21 = external global i1
@constraint.22 = external global i1
@constraint.23 = external global i1
@constraint.24 = external global i1
@constraint.25 = external global i1
@constraint.26 = external global i1
@constraint.27 = external global i1
@constraint.28 = external global i1
@constraint.29 = external global i1
@constraint.30 = external global i1
@constraint.31 = external global i1
@constraint.32 = external global i1
@constraint.33 = external global i1
@constraint.34 = external global i1
@constraint.35 = external global i1
@constraint.36 = external global i1
@constraint.37 = external global i1
@constraint.38 = external global i1
@constraint.39 = external global i1
@constraint.40 = external global i1
@constraint.41 = external global i1
@constraint.42 = external global i1
@constraint.43 = external global i1
@constraint.44 = external global i1
@constraint.45 = external global i1
@constraint.46 = external global i1
@constraint.47 = external global i1
@constraint.48 = external global i1
@constraint.49 = external global i1
@constraint.50 = external global i1
@constraint.51 = external global i1
@constraint.52 = external global i1
@constraint.53 = external global i1
@constraint.54 = external global i1
@constraint.55 = external global i1
@constraint.56 = external global i1
@constraint.57 = external global i1
@constraint.58 = external global i1
@constraint.59 = external global i1
@constraint.60 = external global i1
@constraint.61 = external global i1
@constraint.62 = external global i1
@constraint.63 = external global i1
@constraint.64 = external global i1
@constraint.65 = external global i1
@constraint.66 = external global i1
@constraint.67 = external global i1
@constraint.68 = external global i1
@constraint.69 = external global i1
@constraint.70 = external global i1
@constraint.71 = external global i1
@constraint.72 = external global i1
@constraint.73 = external global i1
@constraint.74 = external global i1
@constraint.75 = external global i1
@constraint.76 = external global i1
@constraint.77 = external global i1
@constraint.78 = external global i1
@constraint.79 = external global i1
@constraint.80 = external global i1
@constraint.81 = external global i1
@constraint.82 = external global i1
@constraint.83 = external global i1
@constraint.84 = external global i1
@constraint.85 = external global i1
@constraint.86 = external global i1
@constraint.87 = external global i1
@constraint.88 = external global i1
@constraint.89 = external global i1
@constraint.90 = external global i1
@constraint.91 = external global i1
@constraint.92 = external global i1
@constraint.93 = external global i1
@constraint.94 = external global i1
@constraint.95 = external global i1
@constraint.96 = external global i1
@constraint.97 = external global i1
@constraint.98 = external global i1
@constraint.99 = external global i1
@constraint.100 = external global i1
@constraint.101 = external global i1
@constraint.102 = external global i1
@constraint.103 = external global i1
@constraint.104 = external global i1
@constraint.105 = external global i1
@constraint.106 = external global i1
@constraint.107 = external global i1
@constraint.108 = external global i1
@constraint.109 = external global i1
@constraint.110 = external global i1
@constraint.111 = external global i1
@constraint.112 = external global i1
@constraint.113 = external global i1
@constraint.114 = external global i1
@constraint.115 = external global i1
@constraint.116 = external global i1
@constraint.117 = external global i1
@constraint.118 = external global i1
@constraint.119 = external global i1
@constraint.120 = external global i1
@constraint.121 = external global i1
@constraint.122 = external global i1
@constraint.123 = external global i1
@constraint.124 = external global i1
@constraint.125 = external global i1
@constraint.126 = external global i1
@constraint.127 = external global i1
@constraint.128 = external global i1
@constraint.129 = external global i1
@constraint.130 = external global i1
@constraint.131 = external global i1
@constraint.132 = external global i1
@constraint.133 = external global i1
@constraint.134 = external global i1
@constraint.135 = external global i1
@constraint.136 = external global i1
@constraint.137 = external global i1
@constraint.138 = external global i1
@constraint.139 = external global i1
@constraint.140 = external global i1
@constraint.141 = external global i1
@constraint.142 = external global i1
@constraint.143 = external global i1
@constraint.144 = external global i1
@constraint.145 = external global i1
@constraint.146 = external global i1
@constraint.147 = external global i1
@constraint.148 = external global i1
@constraint.149 = external global i1
@constraint.150 = external global i1
@constraint.151 = external global i1
@constraint.152 = external global i1
@constraint.153 = external global i1
@constraint.154 = external global i1
@constraint.155 = external global i1
@constraint.156 = external global i1
@constraint.157 = external global i1
@constraint.158 = external global i1
@constraint.159 = external global i1
@constraint.160 = external global i1
@constraint.161 = external global i1
@constraint.162 = external global i1
@constraint.163 = external global i1
@constraint.164 = external global i1
@constraint.165 = external global i1
@constraint.166 = external global i1
@constraint.167 = external global i1
@constraint.168 = external global i1
@constraint.169 = external global i1
@constraint.170 = external global i1
@constraint.171 = external global i1
@constraint.172 = external global i1
@constraint.173 = external global i1
@constraint.174 = external global i1
@constraint.175 = external global i1
@constraint.176 = external global i1
@constraint.177 = external global i1
@constraint.178 = external global i1
@constraint.179 = external global i1
@constraint.180 = external global i1
@constraint.181 = external global i1
@constraint.182 = external global i1
@constraint.183 = external global i1
@constraint.184 = external global i1
@constraint.185 = external global i1
@constraint.186 = external global i1
@constraint.187 = external global i1
@constraint.188 = external global i1
@constraint.189 = external global i1
@constraint.190 = external global i1
@constraint.191 = external global i1
@constraint.192 = external global i1
@constraint.193 = external global i1
@constraint.194 = external global i1
@constraint.195 = external global i1
@constraint.196 = external global i1
@constraint.197 = external global i1
@constraint.198 = external global i1
@constraint.199 = external global i1
@constraint.200 = external global i1
@constraint.201 = external global i1
@constraint.202 = external global i1
@constraint.203 = external global i1
@constraint.204 = external global i1
@constraint.205 = external global i1
@constraint.206 = external global i1
@constraint.207 = external global i1
@constraint.208 = external global i1
@constraint.209 = external global i1
@constraint.210 = external global i1
@constraint.211 = external global i1
@constraint.212 = external global i1
@constraint.213 = external global i1
@constraint.214 = external global i1
@constraint.215 = external global i1
@constraint.216 = external global i1
@constraint.217 = external global i1
@constraint.218 = external global i1
@constraint.219 = external global i1
@constraint.220 = external global i1
@constraint.221 = external global i1
@constraint.222 = external global i1
@constraint.223 = external global i1
@constraint.224 = external global i1
@constraint.225 = external global i1
@constraint.226 = external global i1
@constraint.227 = external global i1
@constraint.228 = external global i1
@constraint.229 = external global i1
@constraint.230 = external global i1
@constraint.231 = external global i1
@constraint.232 = external global i1
@constraint.233 = external global i1
@constraint.234 = external global i1
@constraint.235 = external global i1
@constraint.236 = external global i1
@constraint.237 = external global i1
@constraint.238 = external global i1
@constraint.239 = external global i1
@constraint.240 = external global i1
@constraint.241 = external global i1
@constraint.242 = external global i1
@constraint.243 = external global i1
@constraint.244 = external global i1
@constraint.245 = external global i1
@constraint.246 = external global i1
@constraint.247 = external global i1
@constraint.248 = external global i1
@constraint.249 = external global i1
@constraint.250 = external global i1
@constraint.251 = external global i1
@constraint.252 = external global i1
@constraint.253 = external global i1
@constraint.254 = external global i1
@constraint.255 = external global i1
@constraint.256 = external global i1
@constraint.257 = external global i1
@constraint.258 = external global i1
@constraint.259 = external global i1
@constraint.260 = external global i1
@constraint.261 = external global i1
@constraint.262 = external global i1
@constraint.263 = external global i1
@constraint.264 = external global i1
@constraint.265 = external global i1
@constraint.266 = external global i1
@constraint.267 = external global i1
@constraint.268 = external global i1
@constraint.269 = external global i1
@constraint.270 = external global i1
@constraint.271 = external global i1
@constraint.272 = external global i1
@constraint.273 = external global i1
@constraint.274 = external global i1
@constraint.275 = external global i1
@constraint.276 = external global i1
@constraint.277 = external global i1
@constraint.278 = external global i1
@constraint.279 = external global i1
@constraint.280 = external global i1
@constraint.281 = external global i1
@constraint.282 = external global i1
@constraint.283 = external global i1
@constraint.284 = external global i1
@constraint.285 = external global i1
@constraint.286 = external global i1
@constraint.287 = external global i1
@constraint.288 = external global i1
@constraint.289 = external global i1
@constraint.290 = external global i1
@constraint.291 = external global i1
@constraint.292 = external global i1
@constraint.293 = external global i1
@constraint.294 = external global i1
@constraint.295 = external global i1
@constraint.296 = external global i1
@constraint.297 = external global i1
@constraint.298 = external global i1
@constraint.299 = external global i1
@constraint.300 = external global i1
@constraint.301 = external global i1
@constraint.302 = external global i1
@constraint.303 = external global i1
@constraint.304 = external global i1
@constraint.305 = external global i1
@constraint.306 = external global i1
@constraint.307 = external global i1
@constraint.308 = external global i1
@constraint.309 = external global i1
@constraint.310 = external global i1
@constraint.311 = external global i1
@constraint.312 = external global i1
@constraint.313 = external global i1
@constraint.314 = external global i1
@constraint.315 = external global i1
@constraint.316 = external global i1
@constraint.317 = external global i1
@constraint.318 = external global i1
@constraint.319 = external global i1
@constraint.320 = external global i1
@constraint.321 = external global i1
@constraint.322 = external global i1
@constraint.323 = external global i1
@constraint.324 = external global i1
@constraint.325 = external global i1
@constraint.326 = external global i1
@constraint.327 = external global i1
@constraint.328 = external global i1
@constraint.329 = external global i1
@constraint.330 = external global i1
@constraint.331 = external global i1
@constraint.332 = external global i1
@constraint.333 = external global i1
@constraint.334 = external global i1
@constraint.335 = external global i1
@constraint.336 = external global i1
@constraint.337 = external global i1
@constraint.338 = external global i1
@constraint.339 = external global i1
@constraint.340 = external global i1
@constraint.341 = external global i1
@constraint.342 = external global i1
@constraint.343 = external global i1
@constraint.344 = external global i1
@constraint.345 = external global i1
@constraint.346 = external global i1
@constraint.347 = external global i1
@constraint.348 = external global i1
@constraint.349 = external global i1
@constraint.350 = external global i1
@constraint.351 = external global i1
@constraint.352 = external global i1
@constraint.353 = external global i1
@constraint.354 = external global i1
@constraint.355 = external global i1
@constraint.356 = external global i1
@constraint.357 = external global i1
@constraint.358 = external global i1
@constraint.359 = external global i1
@constraint.360 = external global i1
@constraint.361 = external global i1
@constraint.362 = external global i1
@constraint.363 = external global i1
@constraint.364 = external global i1
@constraint.365 = external global i1
@constraint.366 = external global i1
@constraint.367 = external global i1
@constraint.368 = external global i1
@constraint.369 = external global i1
@constraint.370 = external global i1
@constraint.371 = external global i1
@constraint.372 = external global i1
@constraint.373 = external global i1
@constraint.374 = external global i1
@constraint.375 = external global i1
@constraint.376 = external global i1
@constraint.377 = external global i1
@constraint.378 = external global i1
@constraint.379 = external global i1
@constraint.380 = external global i1
@constraint.381 = external global i1
@constraint.382 = external global i1
@constraint.383 = external global i1
@constraint.384 = external global i1
@constraint.385 = external global i1
@constraint.386 = external global i1
@constraint.387 = external global i1
@constraint.388 = external global i1
@constraint.389 = external global i1
@constraint.390 = external global i1
@constraint.391 = external global i1
@constraint.392 = external global i1
@constraint.393 = external global i1
@constraint.394 = external global i1
@constraint.395 = external global i1
@constraint.396 = external global i1
@constraint.397 = external global i1
@constraint.398 = external global i1
@constraint.399 = external global i1
@constraint.400 = external global i1
@constraint.401 = external global i1
@constraint.402 = external global i1
@constraint.403 = external global i1
@constraint.404 = external global i1
@constraint.405 = external global i1
@constraint.406 = external global i1
@constraint.407 = external global i1
@constraint.408 = external global i1
@constraint.409 = external global i1
@constraint.410 = external global i1
@constraint.411 = external global i1
@constraint.412 = external global i1
@constraint.413 = external global i1
@constraint.414 = external global i1
@constraint.415 = external global i1
@constraint.416 = external global i1
@constraint.417 = external global i1
@constraint.418 = external global i1
@constraint.419 = external global i1
@constraint.420 = external global i1
@constraint.421 = external global i1
@constraint.422 = external global i1
@constraint.423 = external global i1
@constraint.424 = external global i1
@constraint.425 = external global i1
@constraint.426 = external global i1
@constraint.427 = external global i1
@constraint.428 = external global i1
@constraint.429 = external global i1
@constraint.430 = external global i1
@constraint.431 = external global i1
@constraint.432 = external global i1
@constraint.433 = external global i1
@constraint.434 = external global i1
@constraint.435 = external global i1
@constraint.436 = external global i1
@constraint.437 = external global i1
@constraint.438 = external global i1
@constraint.439 = external global i1
@constraint.440 = external global i1
@constraint.441 = external global i1
@constraint.442 = external global i1
@constraint.443 = external global i1
@constraint.444 = external global i1
@constraint.445 = external global i1
@constraint.446 = external global i1

define void @fn_intrinsic_add_constraint(i128 %0, i128 %1, i1* %2) {
entry:
  %constraint = icmp eq i128 %0, %1
  store i1 %constraint, i1* %2, align 1
  ret void
}

define i128 @fn_intrinsic_inline_switch(i1 %0, i128 %1, i128 %2) {
entry:
  br i1 %0, label %if.true, label %if.false

if.true:                                          ; preds = %entry
  ret i128 %1

if.false:                                         ; preds = %entry
  ret i128 %2
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare fp128 @llvm.powi.f128.i32(fp128, i32) #0

define i128 @fn_intrinsic_inline_powi(i128 %0, i128 %1) {
entry:
  %inline_powi.base = uitofp i128 %0 to fp128
  %inline_powi.power = trunc i128 %1 to i32
  %inline_powi.cal = call fp128 @llvm.powi.f128.i32(fp128 %inline_powi.base, i32 %inline_powi.power)
  %inline_powi.ret = fptoui fp128 %inline_powi.cal to i128
  ret i128 %inline_powi.ret
}

define i128 @fn_intrinsic_inline_init() {
entry:
  ret i128 0
}

define void @fn_template_init_iszero(%struct_template_circuit_iszero* %0) {
entry:
  %IsZero = alloca %struct_template_circuit_iszero*, align 8
  store %struct_template_circuit_iszero* %0, %struct_template_circuit_iszero** %IsZero, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %0, i32 0, i32 0
  %iszero.in.read_input_inner = load i128, i128* %struct_getter, align 4
  %iszero.in.declare_input = alloca i128, align 8
  store i128 %iszero.in.read_input_inner, i128* %iszero.in.declare_input, align 4
  %iszero.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %iszero.out.declare_output, align 4
  %iszero.inv.declare_inter = alloca i128, align 8
  %inv = call i128 @fn_intrinsic_inline_init()
  store i128 %inv, i128* %iszero.inv.declare_inter, align 4
  %in = load i128, i128* %iszero.in.declare_input, align 4
  %ne = icmp ne i128 %in, 0
  %in1 = load i128, i128* %iszero.in.declare_input, align 4
  %sdiv = sdiv i128 1, %in1
  %inline_switch = call i128 @fn_intrinsic_inline_switch(i1 %ne, i128 %sdiv, i128 0)
  %ptr_getter = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %IsZero, align 8
  %iszero.inv.write_inter_inner = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %ptr_getter, i32 0, i32 1
  store i128 %inline_switch, i128* %iszero.inv.write_inter_inner, align 4
  %IsZero2 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %IsZero, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %IsZero2, i32 0, i32 1
  %iszero.inv.read_inter_inner = load i128, i128* %struct_getter3, align 4
  store i128 %iszero.inv.read_inter_inner, i128* %iszero.inv.declare_inter, align 4
  %in4 = load i128, i128* %iszero.in.declare_input, align 4
  %neg = sub i128 0, %in4
  %inv5 = load i128, i128* %iszero.inv.declare_inter, align 4
  %mul = mul i128 %neg, %inv5
  %add = add i128 %mul, 1
  %out6 = load i128, i128* %iszero.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out6, i128 %add, i1* @constraint)
  %ptr_getter7 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %IsZero, align 8
  %iszero.out.write_output_inner = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %ptr_getter7, i32 0, i32 2
  store i128 %add, i128* %iszero.out.write_output_inner, align 4
  %IsZero8 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %IsZero, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %IsZero8, i32 0, i32 2
  %iszero.out.read_output_inner = load i128, i128* %struct_getter9, align 4
  store i128 %iszero.out.read_output_inner, i128* %iszero.out.declare_output, align 4
  %in10 = load i128, i128* %iszero.in.declare_input, align 4
  %out11 = load i128, i128* %iszero.out.declare_output, align 4
  %mul12 = mul i128 %in10, %out11
  call void @fn_intrinsic_add_constraint(i128 %mul12, i128 0, i1* @constraint.1)
  br label %exit

exit:                                             ; preds = %entry
  %inv13 = load i128, i128* %iszero.inv.declare_inter, align 4
  %iszero.inv.write_inter_inner14 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %0, i32 0, i32 1
  store i128 %inv13, i128* %iszero.inv.write_inter_inner14, align 4
  %out15 = load i128, i128* %iszero.out.declare_output, align 4
  %iszero.out.write_output_inner16 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %0, i32 0, i32 2
  store i128 %out15, i128* %iszero.out.write_output_inner16, align 4
  ret void
}

define %struct_template_circuit_iszero* @fn_template_build_iszero() {
entry:
  %struct_template_circuit_iszero = alloca %struct_template_circuit_iszero, align 8
  ret %struct_template_circuit_iszero* %struct_template_circuit_iszero
}

define [2 x i128]* @SplitFn(i128 %0, i128 %1, i128 %2) {
entry:
  %splitfn.in.declare_arg = alloca i128, align 8
  store i128 %0, i128* %splitfn.in.declare_arg, align 4
  %splitfn.n.declare_arg = alloca i128, align 8
  store i128 %1, i128* %splitfn.n.declare_arg, align 4
  %splitfn.m.declare_arg = alloca i128, align 8
  store i128 %2, i128* %splitfn.m.declare_arg, align 4
  %var_inline_array = alloca [2 x i128], align 8
  %in = load i128, i128* %splitfn.in.declare_arg, align 4
  %n = load i128, i128* %splitfn.n.declare_arg, align 4
  %lshift = shl i128 1, %n
  %mod = srem i128 %in, %lshift
  %var_inline_array1 = getelementptr inbounds [2 x i128], [2 x i128]* %var_inline_array, i128 0, i128 0
  store i128 %mod, i128* %var_inline_array1, align 4
  %in2 = load i128, i128* %splitfn.in.declare_arg, align 4
  %n3 = load i128, i128* %splitfn.n.declare_arg, align 4
  %lshift4 = shl i128 1, %n3
  %sdiv = sdiv i128 %in2, %lshift4
  %m = load i128, i128* %splitfn.m.declare_arg, align 4
  %lshift5 = shl i128 1, %m
  %mod6 = srem i128 %sdiv, %lshift5
  %var_inline_array7 = getelementptr inbounds [2 x i128], [2 x i128]* %var_inline_array, i128 0, i128 1
  store i128 %mod6, i128* %var_inline_array7, align 4
  ret [2 x i128]* %var_inline_array
}

define void @fn_template_init_not(%struct_template_circuit_not* %0) {
entry:
  %NOT = alloca %struct_template_circuit_not*, align 8
  store %struct_template_circuit_not* %0, %struct_template_circuit_not** %NOT, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_not, %struct_template_circuit_not* %0, i32 0, i32 0
  %not.in.read_input_inner = load i128, i128* %struct_getter, align 4
  %not.in.declare_input = alloca i128, align 8
  store i128 %not.in.read_input_inner, i128* %not.in.declare_input, align 4
  %not.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %not.out.declare_output, align 4
  %in = load i128, i128* %not.in.declare_input, align 4
  %add = add i128 1, %in
  %in1 = load i128, i128* %not.in.declare_input, align 4
  %mul = mul i128 2, %in1
  %sub = sub i128 %add, %mul
  %out2 = load i128, i128* %not.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out2, i128 %sub, i1* @constraint.2)
  %ptr_getter = load %struct_template_circuit_not*, %struct_template_circuit_not** %NOT, align 8
  %not.out.write_output_inner = getelementptr inbounds %struct_template_circuit_not, %struct_template_circuit_not* %ptr_getter, i32 0, i32 1
  store i128 %sub, i128* %not.out.write_output_inner, align 4
  %NOT3 = load %struct_template_circuit_not*, %struct_template_circuit_not** %NOT, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_not, %struct_template_circuit_not* %NOT3, i32 0, i32 1
  %not.out.read_output_inner = load i128, i128* %struct_getter4, align 4
  store i128 %not.out.read_output_inner, i128* %not.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out5 = load i128, i128* %not.out.declare_output, align 4
  %not.out.write_output_inner6 = getelementptr inbounds %struct_template_circuit_not, %struct_template_circuit_not* %0, i32 0, i32 1
  store i128 %out5, i128* %not.out.write_output_inner6, align 4
  ret void
}

define %struct_template_circuit_not* @fn_template_build_not() {
entry:
  %struct_template_circuit_not = alloca %struct_template_circuit_not, align 8
  ret %struct_template_circuit_not* %struct_template_circuit_not
}

define [256 x i128]* @long_add4(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3, [256 x i128]* %4, [256 x i128]* %5) {
entry:
  %long_add4.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_add4.n.declare_arg, align 4
  %long_add4.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %long_add4.k.declare_arg, align 4
  %long_add4.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %long_add4.a.declare_arg, align 8
  %long_add4.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %long_add4.b.declare_arg, align 8
  %long_add4.c.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %long_add4.c.declare_arg, align 8
  %long_add4.d.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %5, [256 x i128]** %long_add4.d.declare_arg, align 8
  %i = alloca i128, align 8
  %i1 = call i128 @fn_intrinsic_inline_init()
  store i128 %i1, i128* %i, align 4
  %carry = alloca i128, align 8
  %carry2 = call i128 @fn_intrinsic_inline_init()
  store i128 %carry2, i128* %carry, align 4
  %sum = alloca [256 x i128]*, align 8
  %sum3 = alloca [256 x i128], align 8
  store [256 x i128]* %sum3, [256 x i128]** %sum, align 8
  %sumAndCarry = alloca [256 x i128]*, align 8
  %sumAndCarry4 = alloca [256 x i128], align 8
  store [256 x i128]* %sumAndCarry4, [256 x i128]** %sumAndCarry, align 8
  store i128 0, i128* %carry, align 4
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %sum, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %long_add4.a.declare_arg, align 8
  %i5 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i5
  %a6 = load i128, i128* %array_getter, align 4
  %b = load [256 x i128]*, [256 x i128]** %long_add4.b.declare_arg, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter8 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i7
  %b9 = load i128, i128* %array_getter8, align 4
  %add = add i128 %a6, %b9
  %c = load [256 x i128]*, [256 x i128]** %long_add4.c.declare_arg, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter11 = getelementptr inbounds [256 x i128], [256 x i128]* %c, i128 0, i128 %i10
  %c12 = load i128, i128* %array_getter11, align 4
  %add13 = add i128 %add, %c12
  %d = load [256 x i128]*, [256 x i128]** %long_add4.d.declare_arg, align 8
  %i14 = load i128, i128* %i, align 4
  %array_getter15 = getelementptr inbounds [256 x i128], [256 x i128]* %d, i128 0, i128 %i14
  %d16 = load i128, i128* %array_getter15, align 4
  %add17 = add i128 %add13, %d16
  %carry18 = load i128, i128* %carry, align 4
  %add19 = add i128 %add17, %carry18
  %n = load i128, i128* %long_add4.n.declare_arg, align 4
  %n20 = load i128, i128* %long_add4.n.declare_arg, align 4
  %call = call [2 x i128]* @SplitFn(i128 %add19, i128 %n, i128 %n20)
  %memcpy_ptr = getelementptr inbounds [256 x i128]*, [256 x i128]** %sumAndCarry, i128 0
  %6 = bitcast [256 x i128]** %memcpy_ptr to i8*
  %7 = bitcast [2 x i128]* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 ptrtoint ([2 x i128]* getelementptr ([2 x i128], [2 x i128]* null, i32 1) to i64), i1 false)
  %sumAndCarry21 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter22 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry21, i128 0, i128 0
  %sumAndCarry23 = load i128, i128* %array_getter22, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %sum, align 8
  %i24 = load i128, i128* %i, align 4
  %sum25 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i24
  store i128 %sumAndCarry23, i128* %sum25, align 4
  %sumAndCarry26 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter27 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry26, i128 0, i128 1
  %sumAndCarry28 = load i128, i128* %array_getter27, align 4
  store i128 %sumAndCarry28, i128* %carry, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i29 = load i128, i128* %i, align 4
  %add30 = add i128 %i29, 1
  store i128 %add30, i128* %i, align 4
  %i31 = load i128, i128* %i, align 4
  %k = load i128, i128* %long_add4.k.declare_arg, align 4
  %slt = icmp slt i128 %i31, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %carry32 = load i128, i128* %carry, align 4
  %ptr_getter33 = load [256 x i128]*, [256 x i128]** %sum, align 8
  %k34 = load i128, i128* %long_add4.k.declare_arg, align 4
  %sum35 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter33, i128 0, i128 %k34
  store i128 %carry32, i128* %sum35, align 4
  %sum36 = load [256 x i128]*, [256 x i128]** %sum, align 8
  ret [256 x i128]* %sum36
}

define void @fn_template_init_and(%struct_template_circuit_and* %0) {
entry:
  %AND = alloca %struct_template_circuit_and*, align 8
  store %struct_template_circuit_and* %0, %struct_template_circuit_and** %AND, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %0, i32 0, i32 0
  %and.a.read_input_inner = load i128, i128* %struct_getter, align 4
  %and.a.declare_input = alloca i128, align 8
  store i128 %and.a.read_input_inner, i128* %and.a.declare_input, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %0, i32 0, i32 1
  %and.b.read_input_inner = load i128, i128* %struct_getter1, align 4
  %and.b.declare_input = alloca i128, align 8
  store i128 %and.b.read_input_inner, i128* %and.b.declare_input, align 4
  %and.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %and.out.declare_output, align 4
  %a = load i128, i128* %and.a.declare_input, align 4
  %b = load i128, i128* %and.b.declare_input, align 4
  %mul = mul i128 %a, %b
  %out2 = load i128, i128* %and.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out2, i128 %mul, i1* @constraint.3)
  %ptr_getter = load %struct_template_circuit_and*, %struct_template_circuit_and** %AND, align 8
  %and.out.write_output_inner = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ptr_getter, i32 0, i32 2
  store i128 %mul, i128* %and.out.write_output_inner, align 4
  %AND3 = load %struct_template_circuit_and*, %struct_template_circuit_and** %AND, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %AND3, i32 0, i32 2
  %and.out.read_output_inner = load i128, i128* %struct_getter4, align 4
  store i128 %and.out.read_output_inner, i128* %and.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out5 = load i128, i128* %and.out.declare_output, align 4
  %and.out.write_output_inner6 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %0, i32 0, i32 2
  store i128 %out5, i128* %and.out.write_output_inner6, align 4
  ret void
}

define %struct_template_circuit_and* @fn_template_build_and() {
entry:
  %struct_template_circuit_and = alloca %struct_template_circuit_and, align 8
  ret %struct_template_circuit_and* %struct_template_circuit_and
}

define void @fn_template_init_bigmultshortlong2dunequal(%struct_template_circuit_bigmultshortlong2dunequal* %0) {
entry:
  %BigMultShortLong2DUnequal = alloca %struct_template_circuit_bigmultshortlong2dunequal*, align 8
  store %struct_template_circuit_bigmultshortlong2dunequal* %0, %struct_template_circuit_bigmultshortlong2dunequal** %BigMultShortLong2DUnequal, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %0, i32 0, i32 0
  %bigmultshortlong2dunequal.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigmultshortlong2dunequal.n.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong2dunequal.n.read_arg_inner, i128* %bigmultshortlong2dunequal.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %0, i32 0, i32 1
  %bigmultshortlong2dunequal.ka.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigmultshortlong2dunequal.ka.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong2dunequal.ka.read_arg_inner, i128* %bigmultshortlong2dunequal.ka.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %0, i32 0, i32 2
  %bigmultshortlong2dunequal.kb.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %bigmultshortlong2dunequal.kb.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong2dunequal.kb.read_arg_inner, i128* %bigmultshortlong2dunequal.kb.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %0, i32 0, i32 3
  %bigmultshortlong2dunequal.la.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %bigmultshortlong2dunequal.la.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong2dunequal.la.read_arg_inner, i128* %bigmultshortlong2dunequal.la.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %0, i32 0, i32 4
  %bigmultshortlong2dunequal.lb.read_arg_inner = load i128, i128* %struct_getter4, align 4
  %bigmultshortlong2dunequal.lb.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong2dunequal.lb.read_arg_inner, i128* %bigmultshortlong2dunequal.lb.declare_arg, align 4
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %0, i32 0, i32 5
  %bigmultshortlong2dunequal.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %bigmultshortlong2dunequal.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %bigmultshortlong2dunequal.a.read_input_inner, [256 x [256 x i128]]** %bigmultshortlong2dunequal.a.declare_input, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %0, i32 0, i32 6
  %bigmultshortlong2dunequal.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter6, align 8
  %bigmultshortlong2dunequal.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %bigmultshortlong2dunequal.b.read_input_inner, [256 x [256 x i128]]** %bigmultshortlong2dunequal.b.declare_input, align 8
  %pow = alloca [256 x [256 x i128]]*, align 8
  %pow7 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %pow7, [256 x [256 x i128]]** %pow, align 8
  %i2 = alloca i128, align 8
  %i28 = call i128 @fn_intrinsic_inline_init()
  store i128 %i28, i128* %i2, align 4
  %a_poly = alloca [256 x [256 x i128]]*, align 8
  %a_poly9 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %a_poly9, [256 x [256 x i128]]** %a_poly, align 8
  %i1 = alloca i128, align 8
  %i110 = call i128 @fn_intrinsic_inline_init()
  store i128 %i110, i128* %i1, align 4
  %out_poly = alloca [256 x [256 x i128]]*, align 8
  %out_poly11 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out_poly11, [256 x [256 x i128]]** %out_poly, align 8
  %prod_val = alloca [256 x [256 x i128]]*, align 8
  %prod_val12 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %prod_val12, [256 x [256 x i128]]** %prod_val, align 8
  %k2 = alloca i128, align 8
  %k213 = call i128 @fn_intrinsic_inline_init()
  store i128 %k213, i128* %k2, align 4
  %j1 = alloca i128, align 8
  %j114 = call i128 @fn_intrinsic_inline_init()
  store i128 %j114, i128* %j1, align 4
  %j = alloca i128, align 8
  %j15 = call i128 @fn_intrinsic_inline_init()
  store i128 %j15, i128* %j, align 4
  %j2 = alloca i128, align 8
  %j216 = call i128 @fn_intrinsic_inline_init()
  store i128 %j216, i128* %j2, align 4
  %deg2 = alloca i128, align 8
  %deg217 = call i128 @fn_intrinsic_inline_init()
  store i128 %deg217, i128* %deg2, align 4
  %deg1 = alloca i128, align 8
  %deg118 = call i128 @fn_intrinsic_inline_init()
  store i128 %deg118, i128* %deg1, align 4
  %b_poly = alloca [256 x [256 x i128]]*, align 8
  %b_poly19 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %b_poly19, [256 x [256 x i128]]** %b_poly, align 8
  %i = alloca i128, align 8
  %i20 = call i128 @fn_intrinsic_inline_init()
  store i128 %i20, i128* %i, align 4
  %bigmultshortlong2dunequal.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %bigmultshortlong2dunequal.out.declare_output, align 8
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %prod_val, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch28, %entry
  store i128 0, i128* %j, align 4
  br label %loop.body21

loop.body21:                                      ; preds = %loop.latch, %loop.body
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %i22 = load i128, i128* %i, align 4
  %j23 = load i128, i128* %j, align 4
  %prod_val24 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 %i22, i128 %j23
  store i128 0, i128* %prod_val24, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body21
  %j25 = load i128, i128* %j, align 4
  %add = add i128 %j25, 1
  store i128 %add, i128* %j, align 4
  %j26 = load i128, i128* %j, align 4
  %ka = load i128, i128* %bigmultshortlong2dunequal.ka.declare_arg, align 4
  %kb = load i128, i128* %bigmultshortlong2dunequal.kb.declare_arg, align 4
  %add27 = add i128 %ka, %kb
  %sub = sub i128 %add27, 1
  %slt = icmp slt i128 %j26, %sub
  br i1 %slt, label %loop.body21, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch28

loop.latch28:                                     ; preds = %loop.exit
  %i29 = load i128, i128* %i, align 4
  %add30 = add i128 %i29, 1
  store i128 %add30, i128* %i, align 4
  %i31 = load i128, i128* %i, align 4
  %la = load i128, i128* %bigmultshortlong2dunequal.la.declare_arg, align 4
  %lb = load i128, i128* %bigmultshortlong2dunequal.lb.declare_arg, align 4
  %add32 = add i128 %la, %lb
  %sub33 = sub i128 %add32, 1
  %slt34 = icmp slt i128 %i31, %sub33
  br i1 %slt34, label %loop.body, label %loop.exit35

loop.exit35:                                      ; preds = %loop.latch28
  store i128 0, i128* %i1, align 4
  br label %loop.body36

loop.body36:                                      ; preds = %loop.latch84, %loop.exit35
  store i128 0, i128* %i2, align 4
  br label %loop.body37

loop.body37:                                      ; preds = %loop.latch77, %loop.body36
  store i128 0, i128* %j1, align 4
  br label %loop.body38

loop.body38:                                      ; preds = %loop.latch70, %loop.body37
  store i128 0, i128* %j2, align 4
  br label %loop.body39

loop.body39:                                      ; preds = %loop.latch63, %loop.body38
  %i140 = load i128, i128* %i1, align 4
  %i241 = load i128, i128* %i2, align 4
  %add42 = add i128 %i140, %i241
  store i128 %add42, i128* %i, align 4
  %j143 = load i128, i128* %j1, align 4
  %j244 = load i128, i128* %j2, align 4
  %add45 = add i128 %j143, %j244
  store i128 %add45, i128* %j, align 4
  %prod_val46 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %i47 = load i128, i128* %i, align 4
  %j48 = load i128, i128* %j, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %prod_val46, i128 0, i128 %i47, i128 %j48
  %prod_val49 = load i128, i128* %array_getter, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2dunequal.a.declare_input, align 8
  %i150 = load i128, i128* %i1, align 4
  %j151 = load i128, i128* %j1, align 4
  %array_getter52 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i150, i128 %j151
  %a53 = load i128, i128* %array_getter52, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2dunequal.b.declare_input, align 8
  %i254 = load i128, i128* %i2, align 4
  %j255 = load i128, i128* %j2, align 4
  %array_getter56 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %i254, i128 %j255
  %b57 = load i128, i128* %array_getter56, align 4
  %mul = mul i128 %a53, %b57
  %add58 = add i128 %prod_val49, %mul
  %ptr_getter59 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %i60 = load i128, i128* %i, align 4
  %j61 = load i128, i128* %j, align 4
  %prod_val62 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter59, i128 0, i128 %i60, i128 %j61
  store i128 %add58, i128* %prod_val62, align 4
  br label %loop.latch63

loop.latch63:                                     ; preds = %loop.body39
  %j264 = load i128, i128* %j2, align 4
  %add65 = add i128 %j264, 1
  store i128 %add65, i128* %j2, align 4
  %j266 = load i128, i128* %j2, align 4
  %kb67 = load i128, i128* %bigmultshortlong2dunequal.kb.declare_arg, align 4
  %slt68 = icmp slt i128 %j266, %kb67
  br i1 %slt68, label %loop.body39, label %loop.exit69

loop.exit69:                                      ; preds = %loop.latch63
  br label %loop.latch70

loop.latch70:                                     ; preds = %loop.exit69
  %j171 = load i128, i128* %j1, align 4
  %add72 = add i128 %j171, 1
  store i128 %add72, i128* %j1, align 4
  %j173 = load i128, i128* %j1, align 4
  %ka74 = load i128, i128* %bigmultshortlong2dunequal.ka.declare_arg, align 4
  %slt75 = icmp slt i128 %j173, %ka74
  br i1 %slt75, label %loop.body38, label %loop.exit76

loop.exit76:                                      ; preds = %loop.latch70
  br label %loop.latch77

loop.latch77:                                     ; preds = %loop.exit76
  %i278 = load i128, i128* %i2, align 4
  %add79 = add i128 %i278, 1
  store i128 %add79, i128* %i2, align 4
  %i280 = load i128, i128* %i2, align 4
  %lb81 = load i128, i128* %bigmultshortlong2dunequal.lb.declare_arg, align 4
  %slt82 = icmp slt i128 %i280, %lb81
  br i1 %slt82, label %loop.body37, label %loop.exit83

loop.exit83:                                      ; preds = %loop.latch77
  br label %loop.latch84

loop.latch84:                                     ; preds = %loop.exit83
  %i185 = load i128, i128* %i1, align 4
  %add86 = add i128 %i185, 1
  store i128 %add86, i128* %i1, align 4
  %i187 = load i128, i128* %i1, align 4
  %la88 = load i128, i128* %bigmultshortlong2dunequal.la.declare_arg, align 4
  %slt89 = icmp slt i128 %i187, %la88
  br i1 %slt89, label %loop.body36, label %loop.exit90

loop.exit90:                                      ; preds = %loop.latch84
  store i128 0, i128* %i, align 4
  br label %loop.body91

loop.body91:                                      ; preds = %loop.latch112, %loop.exit90
  store i128 0, i128* %j, align 4
  br label %loop.body92

loop.body92:                                      ; preds = %loop.latch102, %loop.body91
  %prod_val93 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %i94 = load i128, i128* %i, align 4
  %j95 = load i128, i128* %j, align 4
  %array_getter96 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %prod_val93, i128 0, i128 %i94, i128 %j95
  %prod_val97 = load i128, i128* %array_getter96, align 4
  %ptr_getter98 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2dunequal.out.declare_output, align 8
  %i99 = load i128, i128* %i, align 4
  %j100 = load i128, i128* %j, align 4
  %out101 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter98, i128 0, i128 %i99, i128 %j100
  store i128 %prod_val97, i128* %out101, align 4
  br label %loop.latch102

loop.latch102:                                    ; preds = %loop.body92
  %j103 = load i128, i128* %j, align 4
  %add104 = add i128 %j103, 1
  store i128 %add104, i128* %j, align 4
  %j105 = load i128, i128* %j, align 4
  %ka106 = load i128, i128* %bigmultshortlong2dunequal.ka.declare_arg, align 4
  %kb107 = load i128, i128* %bigmultshortlong2dunequal.kb.declare_arg, align 4
  %add108 = add i128 %ka106, %kb107
  %sub109 = sub i128 %add108, 1
  %slt110 = icmp slt i128 %j105, %sub109
  br i1 %slt110, label %loop.body92, label %loop.exit111

loop.exit111:                                     ; preds = %loop.latch102
  br label %loop.latch112

loop.latch112:                                    ; preds = %loop.exit111
  %i113 = load i128, i128* %i, align 4
  %add114 = add i128 %i113, 1
  store i128 %add114, i128* %i, align 4
  %i115 = load i128, i128* %i, align 4
  %la116 = load i128, i128* %bigmultshortlong2dunequal.la.declare_arg, align 4
  %lb117 = load i128, i128* %bigmultshortlong2dunequal.lb.declare_arg, align 4
  %add118 = add i128 %la116, %lb117
  %sub119 = sub i128 %add118, 1
  %slt120 = icmp slt i128 %i115, %sub119
  br i1 %slt120, label %loop.body91, label %loop.exit121

loop.exit121:                                     ; preds = %loop.latch112
  %ka122 = load i128, i128* %bigmultshortlong2dunequal.ka.declare_arg, align 4
  %kb123 = load i128, i128* %bigmultshortlong2dunequal.kb.declare_arg, align 4
  %add124 = add i128 %ka122, %kb123
  %sub125 = sub i128 %add124, 1
  %la126 = load i128, i128* %bigmultshortlong2dunequal.la.declare_arg, align 4
  %lb127 = load i128, i128* %bigmultshortlong2dunequal.lb.declare_arg, align 4
  %add128 = add i128 %la126, %lb127
  %sub129 = sub i128 %add128, 1
  %sgt = icmp sgt i128 %sub125, %sub129
  %ka130 = load i128, i128* %bigmultshortlong2dunequal.ka.declare_arg, align 4
  %kb131 = load i128, i128* %bigmultshortlong2dunequal.kb.declare_arg, align 4
  %add132 = add i128 %ka130, %kb131
  %sub133 = sub i128 %add132, 1
  %la134 = load i128, i128* %bigmultshortlong2dunequal.la.declare_arg, align 4
  %lb135 = load i128, i128* %bigmultshortlong2dunequal.lb.declare_arg, align 4
  %add136 = add i128 %la134, %lb135
  %sub137 = sub i128 %add136, 1
  %inline_switch = call i128 @fn_intrinsic_inline_switch(i1 %sgt, i128 %sub133, i128 %sub137)
  store i128 %inline_switch, i128* %k2, align 4
  %uniform_array138 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array138, [256 x [256 x i128]]** %pow, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body139

loop.body139:                                     ; preds = %loop.latch156, %loop.exit121
  store i128 0, i128* %j, align 4
  br label %loop.body140

loop.body140:                                     ; preds = %loop.latch148, %loop.body139
  %i141 = load i128, i128* %i, align 4
  %j142 = load i128, i128* %j, align 4
  %pow143 = call i128 @fn_intrinsic_inline_powi(i128 %i141, i128 %j142)
  %ptr_getter144 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i145 = load i128, i128* %i, align 4
  %j146 = load i128, i128* %j, align 4
  %pow147 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter144, i128 0, i128 %i145, i128 %j146
  store i128 %pow143, i128* %pow147, align 4
  br label %loop.latch148

loop.latch148:                                    ; preds = %loop.body140
  %j149 = load i128, i128* %j, align 4
  %add150 = add i128 %j149, 1
  store i128 %add150, i128* %j, align 4
  %j152 = load i128, i128* %j, align 4
  %k2153 = load i128, i128* %k2, align 4
  %slt154 = icmp slt i128 %j152, %k2153
  br i1 %slt154, label %loop.body140, label %loop.exit155

loop.exit155:                                     ; preds = %loop.latch148
  br label %loop.latch156

loop.latch156:                                    ; preds = %loop.exit155
  %i157 = load i128, i128* %i, align 4
  %add158 = add i128 %i157, 1
  store i128 %add158, i128* %i, align 4
  %i159 = load i128, i128* %i, align 4
  %k2160 = load i128, i128* %k2, align 4
  %slt161 = icmp slt i128 %i159, %k2160
  br i1 %slt161, label %loop.body139, label %loop.exit162

loop.exit162:                                     ; preds = %loop.latch156
  %uniform_array163 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array163, [256 x [256 x i128]]** %a_poly, align 8
  %uniform_array164 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array164, [256 x [256 x i128]]** %b_poly, align 8
  %uniform_array165 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array165, [256 x [256 x i128]]** %out_poly, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body166

loop.body166:                                     ; preds = %loop.latch318, %loop.exit162
  store i128 0, i128* %j, align 4
  br label %loop.body167

loop.body167:                                     ; preds = %loop.latch308, %loop.body166
  %ptr_getter168 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %a_poly, align 8
  %i169 = load i128, i128* %i, align 4
  %j170 = load i128, i128* %j, align 4
  %a_poly171 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter168, i128 0, i128 %i169, i128 %j170
  store i128 0, i128* %a_poly171, align 4
  %ptr_getter172 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_poly, align 8
  %i173 = load i128, i128* %i, align 4
  %j174 = load i128, i128* %j, align 4
  %b_poly175 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter172, i128 0, i128 %i173, i128 %j174
  store i128 0, i128* %b_poly175, align 4
  %ptr_getter176 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out_poly, align 8
  %i177 = load i128, i128* %i, align 4
  %j178 = load i128, i128* %j, align 4
  %out_poly179 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter176, i128 0, i128 %i177, i128 %j178
  store i128 0, i128* %out_poly179, align 4
  store i128 0, i128* %deg1, align 4
  br label %loop.body180

loop.body180:                                     ; preds = %loop.latch298, %loop.body167
  %deg1181 = load i128, i128* %deg1, align 4
  %la182 = load i128, i128* %bigmultshortlong2dunequal.la.declare_arg, align 4
  %slt183 = icmp slt i128 %deg1181, %la182
  br i1 %slt183, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body180
  store i128 0, i128* %deg2, align 4
  br label %loop.body184

if.false:                                         ; preds = %loop.body180
  br label %if.exit

loop.body184:                                     ; preds = %loop.latch212, %if.true
  %a_poly185 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %a_poly, align 8
  %i186 = load i128, i128* %i, align 4
  %j187 = load i128, i128* %j, align 4
  %array_getter188 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a_poly185, i128 0, i128 %i186, i128 %j187
  %a_poly189 = load i128, i128* %array_getter188, align 4
  %a190 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2dunequal.a.declare_input, align 8
  %deg1191 = load i128, i128* %deg1, align 4
  %deg2192 = load i128, i128* %deg2, align 4
  %array_getter193 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a190, i128 0, i128 %deg1191, i128 %deg2192
  %a194 = load i128, i128* %array_getter193, align 4
  %pow195 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i196 = load i128, i128* %i, align 4
  %deg1197 = load i128, i128* %deg1, align 4
  %array_getter198 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow195, i128 0, i128 %i196, i128 %deg1197
  %pow199 = load i128, i128* %array_getter198, align 4
  %mul200 = mul i128 %a194, %pow199
  %pow201 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %j202 = load i128, i128* %j, align 4
  %deg2203 = load i128, i128* %deg2, align 4
  %array_getter204 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow201, i128 0, i128 %j202, i128 %deg2203
  %pow205 = load i128, i128* %array_getter204, align 4
  %mul206 = mul i128 %mul200, %pow205
  %add207 = add i128 %a_poly189, %mul206
  %ptr_getter208 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %a_poly, align 8
  %i209 = load i128, i128* %i, align 4
  %j210 = load i128, i128* %j, align 4
  %a_poly211 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter208, i128 0, i128 %i209, i128 %j210
  store i128 %add207, i128* %a_poly211, align 4
  br label %loop.latch212

loop.latch212:                                    ; preds = %loop.body184
  %deg2213 = load i128, i128* %deg2, align 4
  %add214 = add i128 %deg2213, 1
  store i128 %add214, i128* %deg2, align 4
  %deg2215 = load i128, i128* %deg2, align 4
  %ka216 = load i128, i128* %bigmultshortlong2dunequal.ka.declare_arg, align 4
  %slt217 = icmp slt i128 %deg2215, %ka216
  br i1 %slt217, label %loop.body184, label %loop.exit218

loop.exit218:                                     ; preds = %loop.latch212
  br label %if.exit

if.exit:                                          ; preds = %if.false, %loop.exit218
  %deg1221 = load i128, i128* %deg1, align 4
  %lb222 = load i128, i128* %bigmultshortlong2dunequal.lb.declare_arg, align 4
  %slt223 = icmp slt i128 %deg1221, %lb222
  br i1 %slt223, label %if.true219, label %if.false220

if.true219:                                       ; preds = %if.exit
  store i128 0, i128* %deg2, align 4
  br label %loop.body224

if.false220:                                      ; preds = %if.exit
  br label %if.exit259

loop.body224:                                     ; preds = %loop.latch252, %if.true219
  %b_poly225 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_poly, align 8
  %i226 = load i128, i128* %i, align 4
  %j227 = load i128, i128* %j, align 4
  %array_getter228 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b_poly225, i128 0, i128 %i226, i128 %j227
  %b_poly229 = load i128, i128* %array_getter228, align 4
  %b230 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2dunequal.b.declare_input, align 8
  %deg1231 = load i128, i128* %deg1, align 4
  %deg2232 = load i128, i128* %deg2, align 4
  %array_getter233 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b230, i128 0, i128 %deg1231, i128 %deg2232
  %b234 = load i128, i128* %array_getter233, align 4
  %pow235 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i236 = load i128, i128* %i, align 4
  %deg1237 = load i128, i128* %deg1, align 4
  %array_getter238 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow235, i128 0, i128 %i236, i128 %deg1237
  %pow239 = load i128, i128* %array_getter238, align 4
  %mul240 = mul i128 %b234, %pow239
  %pow241 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %j242 = load i128, i128* %j, align 4
  %deg2243 = load i128, i128* %deg2, align 4
  %array_getter244 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow241, i128 0, i128 %j242, i128 %deg2243
  %pow245 = load i128, i128* %array_getter244, align 4
  %mul246 = mul i128 %mul240, %pow245
  %add247 = add i128 %b_poly229, %mul246
  %ptr_getter248 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_poly, align 8
  %i249 = load i128, i128* %i, align 4
  %j250 = load i128, i128* %j, align 4
  %b_poly251 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter248, i128 0, i128 %i249, i128 %j250
  store i128 %add247, i128* %b_poly251, align 4
  br label %loop.latch252

loop.latch252:                                    ; preds = %loop.body224
  %deg2253 = load i128, i128* %deg2, align 4
  %add254 = add i128 %deg2253, 1
  store i128 %add254, i128* %deg2, align 4
  %deg2255 = load i128, i128* %deg2, align 4
  %kb256 = load i128, i128* %bigmultshortlong2dunequal.kb.declare_arg, align 4
  %slt257 = icmp slt i128 %deg2255, %kb256
  br i1 %slt257, label %loop.body224, label %loop.exit258

loop.exit258:                                     ; preds = %loop.latch252
  br label %if.exit259

if.exit259:                                       ; preds = %if.false220, %loop.exit258
  store i128 0, i128* %deg2, align 4
  br label %loop.body260

loop.body260:                                     ; preds = %loop.latch288, %if.exit259
  %out_poly261 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out_poly, align 8
  %i262 = load i128, i128* %i, align 4
  %j263 = load i128, i128* %j, align 4
  %array_getter264 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out_poly261, i128 0, i128 %i262, i128 %j263
  %out_poly265 = load i128, i128* %array_getter264, align 4
  %out266 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2dunequal.out.declare_output, align 8
  %deg1267 = load i128, i128* %deg1, align 4
  %deg2268 = load i128, i128* %deg2, align 4
  %array_getter269 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out266, i128 0, i128 %deg1267, i128 %deg2268
  %out270 = load i128, i128* %array_getter269, align 4
  %pow271 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i272 = load i128, i128* %i, align 4
  %deg1273 = load i128, i128* %deg1, align 4
  %array_getter274 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow271, i128 0, i128 %i272, i128 %deg1273
  %pow275 = load i128, i128* %array_getter274, align 4
  %mul276 = mul i128 %out270, %pow275
  %pow277 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %j278 = load i128, i128* %j, align 4
  %deg2279 = load i128, i128* %deg2, align 4
  %array_getter280 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow277, i128 0, i128 %j278, i128 %deg2279
  %pow281 = load i128, i128* %array_getter280, align 4
  %mul282 = mul i128 %mul276, %pow281
  %add283 = add i128 %out_poly265, %mul282
  %ptr_getter284 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out_poly, align 8
  %i285 = load i128, i128* %i, align 4
  %j286 = load i128, i128* %j, align 4
  %out_poly287 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter284, i128 0, i128 %i285, i128 %j286
  store i128 %add283, i128* %out_poly287, align 4
  br label %loop.latch288

loop.latch288:                                    ; preds = %loop.body260
  %deg2289 = load i128, i128* %deg2, align 4
  %add290 = add i128 %deg2289, 1
  store i128 %add290, i128* %deg2, align 4
  %deg2291 = load i128, i128* %deg2, align 4
  %ka292 = load i128, i128* %bigmultshortlong2dunequal.ka.declare_arg, align 4
  %kb293 = load i128, i128* %bigmultshortlong2dunequal.kb.declare_arg, align 4
  %add294 = add i128 %ka292, %kb293
  %sub295 = sub i128 %add294, 1
  %slt296 = icmp slt i128 %deg2291, %sub295
  br i1 %slt296, label %loop.body260, label %loop.exit297

loop.exit297:                                     ; preds = %loop.latch288
  br label %loop.latch298

loop.latch298:                                    ; preds = %loop.exit297
  %deg1299 = load i128, i128* %deg1, align 4
  %add300 = add i128 %deg1299, 1
  store i128 %add300, i128* %deg1, align 4
  %deg1301 = load i128, i128* %deg1, align 4
  %la302 = load i128, i128* %bigmultshortlong2dunequal.la.declare_arg, align 4
  %lb303 = load i128, i128* %bigmultshortlong2dunequal.lb.declare_arg, align 4
  %add304 = add i128 %la302, %lb303
  %sub305 = sub i128 %add304, 1
  %slt306 = icmp slt i128 %deg1301, %sub305
  br i1 %slt306, label %loop.body180, label %loop.exit307

loop.exit307:                                     ; preds = %loop.latch298
  br label %loop.latch308

loop.latch308:                                    ; preds = %loop.exit307
  %j309 = load i128, i128* %j, align 4
  %add310 = add i128 %j309, 1
  store i128 %add310, i128* %j, align 4
  %j311 = load i128, i128* %j, align 4
  %ka312 = load i128, i128* %bigmultshortlong2dunequal.ka.declare_arg, align 4
  %kb313 = load i128, i128* %bigmultshortlong2dunequal.kb.declare_arg, align 4
  %add314 = add i128 %ka312, %kb313
  %sub315 = sub i128 %add314, 1
  %slt316 = icmp slt i128 %j311, %sub315
  br i1 %slt316, label %loop.body167, label %loop.exit317

loop.exit317:                                     ; preds = %loop.latch308
  br label %loop.latch318

loop.latch318:                                    ; preds = %loop.exit317
  %i319 = load i128, i128* %i, align 4
  %add320 = add i128 %i319, 1
  store i128 %add320, i128* %i, align 4
  %i321 = load i128, i128* %i, align 4
  %la322 = load i128, i128* %bigmultshortlong2dunequal.la.declare_arg, align 4
  %lb323 = load i128, i128* %bigmultshortlong2dunequal.lb.declare_arg, align 4
  %add324 = add i128 %la322, %lb323
  %sub325 = sub i128 %add324, 1
  %slt326 = icmp slt i128 %i321, %sub325
  br i1 %slt326, label %loop.body166, label %loop.exit327

loop.exit327:                                     ; preds = %loop.latch318
  store i128 0, i128* %i, align 4
  br label %loop.body328

loop.body328:                                     ; preds = %loop.latch356, %loop.exit327
  store i128 0, i128* %j, align 4
  br label %loop.body329

loop.body329:                                     ; preds = %loop.latch346, %loop.body328
  %out_poly330 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out_poly, align 8
  %i331 = load i128, i128* %i, align 4
  %j332 = load i128, i128* %j, align 4
  %array_getter333 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out_poly330, i128 0, i128 %i331, i128 %j332
  %out_poly334 = load i128, i128* %array_getter333, align 4
  %a_poly335 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %a_poly, align 8
  %i336 = load i128, i128* %i, align 4
  %j337 = load i128, i128* %j, align 4
  %array_getter338 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a_poly335, i128 0, i128 %i336, i128 %j337
  %a_poly339 = load i128, i128* %array_getter338, align 4
  %b_poly340 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_poly, align 8
  %i341 = load i128, i128* %i, align 4
  %j342 = load i128, i128* %j, align 4
  %array_getter343 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b_poly340, i128 0, i128 %i341, i128 %j342
  %b_poly344 = load i128, i128* %array_getter343, align 4
  %mul345 = mul i128 %a_poly339, %b_poly344
  call void @fn_intrinsic_add_constraint(i128 %out_poly334, i128 %mul345, i1* @constraint.4)
  br label %loop.latch346

loop.latch346:                                    ; preds = %loop.body329
  %j347 = load i128, i128* %j, align 4
  %add348 = add i128 %j347, 1
  store i128 %add348, i128* %j, align 4
  %j349 = load i128, i128* %j, align 4
  %ka350 = load i128, i128* %bigmultshortlong2dunequal.ka.declare_arg, align 4
  %kb351 = load i128, i128* %bigmultshortlong2dunequal.kb.declare_arg, align 4
  %add352 = add i128 %ka350, %kb351
  %sub353 = sub i128 %add352, 1
  %slt354 = icmp slt i128 %j349, %sub353
  br i1 %slt354, label %loop.body329, label %loop.exit355

loop.exit355:                                     ; preds = %loop.latch346
  br label %loop.latch356

loop.latch356:                                    ; preds = %loop.exit355
  %i357 = load i128, i128* %i, align 4
  %add358 = add i128 %i357, 1
  store i128 %add358, i128* %i, align 4
  %i359 = load i128, i128* %i, align 4
  %la360 = load i128, i128* %bigmultshortlong2dunequal.la.declare_arg, align 4
  %lb361 = load i128, i128* %bigmultshortlong2dunequal.lb.declare_arg, align 4
  %add362 = add i128 %la360, %lb361
  %sub363 = sub i128 %add362, 1
  %slt364 = icmp slt i128 %i359, %sub363
  br i1 %slt364, label %loop.body328, label %loop.exit365

loop.exit365:                                     ; preds = %loop.latch356
  br label %exit

exit:                                             ; preds = %loop.exit365
  %out366 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2dunequal.out.declare_output, align 8
  %bigmultshortlong2dunequal.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %0, i32 0, i32 7
  store [256 x [256 x i128]]* %out366, [256 x [256 x i128]]** %bigmultshortlong2dunequal.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigmultshortlong2dunequal* @fn_template_build_bigmultshortlong2dunequal(i128 %0, i128 %1, i128 %2, i128 %3, i128 %4) {
entry:
  %struct_template_circuit_bigmultshortlong2dunequal = alloca %struct_template_circuit_bigmultshortlong2dunequal, align 8
  %bigmultshortlong2dunequal.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %struct_template_circuit_bigmultshortlong2dunequal, i32 0, i32 0
  store i128 %0, i128* %bigmultshortlong2dunequal.n.write_arg_inner, align 4
  %bigmultshortlong2dunequal.ka.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %struct_template_circuit_bigmultshortlong2dunequal, i32 0, i32 1
  store i128 %1, i128* %bigmultshortlong2dunequal.ka.write_arg_inner, align 4
  %bigmultshortlong2dunequal.kb.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %struct_template_circuit_bigmultshortlong2dunequal, i32 0, i32 2
  store i128 %2, i128* %bigmultshortlong2dunequal.kb.write_arg_inner, align 4
  %bigmultshortlong2dunequal.la.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %struct_template_circuit_bigmultshortlong2dunequal, i32 0, i32 3
  store i128 %3, i128* %bigmultshortlong2dunequal.la.write_arg_inner, align 4
  %bigmultshortlong2dunequal.lb.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong2dunequal, %struct_template_circuit_bigmultshortlong2dunequal* %struct_template_circuit_bigmultshortlong2dunequal, i32 0, i32 4
  store i128 %4, i128* %bigmultshortlong2dunequal.lb.write_arg_inner, align 4
  ret %struct_template_circuit_bigmultshortlong2dunequal* %struct_template_circuit_bigmultshortlong2dunequal
}

define void @fn_template_init_bigiszero(%struct_template_circuit_bigiszero* %0) {
entry:
  %BigIsZero = alloca %struct_template_circuit_bigiszero*, align 8
  store %struct_template_circuit_bigiszero* %0, %struct_template_circuit_bigiszero** %BigIsZero, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %0, i32 0, i32 0
  %bigiszero.k.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigiszero.k.declare_arg = alloca i128, align 8
  store i128 %bigiszero.k.read_arg_inner, i128* %bigiszero.k.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %0, i32 0, i32 1
  %bigiszero.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter1, align 8
  %bigiszero.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigiszero.in.read_input_inner, [256 x i128]** %bigiszero.in.declare_input, align 8
  %checkZero = alloca %struct_template_circuit_iszero*, align 8
  %total = alloca i128, align 8
  %total2 = call i128 @fn_intrinsic_inline_init()
  store i128 %total2, i128* %total, align 4
  %bigiszero.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %bigiszero.out.declare_output, align 4
  %isZeros = alloca [256 x %struct_template_circuit_iszero*]*, align 8
  %isZeros3 = alloca [256 x %struct_template_circuit_iszero*], align 8
  store [256 x %struct_template_circuit_iszero*]* %isZeros3, [256 x %struct_template_circuit_iszero*]** %isZeros, align 8
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %k = load i128, i128* %bigiszero.k.declare_arg, align 4
  store i128 %k, i128* %total, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %call = call %struct_template_circuit_iszero* @fn_template_build_iszero()
  %ptr_getter = load [256 x %struct_template_circuit_iszero*]*, [256 x %struct_template_circuit_iszero*]** %isZeros, align 8
  %i5 = load i128, i128* %i, align 4
  %isZeros6 = getelementptr inbounds [256 x %struct_template_circuit_iszero*], [256 x %struct_template_circuit_iszero*]* %ptr_getter, i128 0, i128 %i5
  store %struct_template_circuit_iszero* %call, %struct_template_circuit_iszero** %isZeros6, align 8
  %in = load [256 x i128]*, [256 x i128]** %bigiszero.in.declare_input, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %i7
  %in8 = load i128, i128* %array_getter, align 4
  %isZeros9 = load [256 x %struct_template_circuit_iszero*]*, [256 x %struct_template_circuit_iszero*]** %isZeros, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter11 = getelementptr inbounds [256 x %struct_template_circuit_iszero*], [256 x %struct_template_circuit_iszero*]* %isZeros9, i128 0, i128 %i10
  %isZeros12 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %array_getter11, align 8
  %struct_getter13 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isZeros12, i32 0, i32 0
  %iszero.in.read_input_outter = load i128, i128* %struct_getter13, align 4
  call void @fn_intrinsic_add_constraint(i128 %iszero.in.read_input_outter, i128 %in8, i1* @constraint.5)
  %ptr_getter14 = load [256 x %struct_template_circuit_iszero*]*, [256 x %struct_template_circuit_iszero*]** %isZeros, align 8
  %i15 = load i128, i128* %i, align 4
  %array_getter16 = getelementptr inbounds [256 x %struct_template_circuit_iszero*], [256 x %struct_template_circuit_iszero*]* %ptr_getter14, i128 0, i128 %i15
  %isZeros17 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %array_getter16, align 8
  %iszero.in.write_input_outter = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isZeros17, i32 0, i32 0
  store i128 %in8, i128* %iszero.in.write_input_outter, align 4
  %total18 = load i128, i128* %total, align 4
  %isZeros19 = load [256 x %struct_template_circuit_iszero*]*, [256 x %struct_template_circuit_iszero*]** %isZeros, align 8
  %i20 = load i128, i128* %i, align 4
  %array_getter21 = getelementptr inbounds [256 x %struct_template_circuit_iszero*], [256 x %struct_template_circuit_iszero*]* %isZeros19, i128 0, i128 %i20
  %isZeros22 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %array_getter21, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isZeros22, i32 0, i32 2
  %iszero.out.read_output_outter = load i128, i128* %struct_getter23, align 4
  %sub = sub i128 %total18, %iszero.out.read_output_outter
  store i128 %sub, i128* %total, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i24 = load i128, i128* %i, align 4
  %add = add i128 %i24, 1
  store i128 %add, i128* %i, align 4
  %i25 = load i128, i128* %i, align 4
  %k26 = load i128, i128* %bigiszero.k.declare_arg, align 4
  %slt = icmp slt i128 %i25, %k26
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %call27 = call %struct_template_circuit_iszero* @fn_template_build_iszero()
  store %struct_template_circuit_iszero* %call27, %struct_template_circuit_iszero** %checkZero, align 8
  %total28 = load i128, i128* %total, align 4
  %checkZero29 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %struct_getter30 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %checkZero29, i32 0, i32 0
  %iszero.in.read_input_outter31 = load i128, i128* %struct_getter30, align 4
  call void @fn_intrinsic_add_constraint(i128 %iszero.in.read_input_outter31, i128 %total28, i1* @constraint.6)
  %ptr_getter32 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %iszero.in.write_input_outter33 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %ptr_getter32, i32 0, i32 0
  store i128 %total28, i128* %iszero.in.write_input_outter33, align 4
  %checkZero34 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %struct_getter35 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %checkZero34, i32 0, i32 2
  %iszero.out.read_output_outter36 = load i128, i128* %struct_getter35, align 4
  %out37 = load i128, i128* %bigiszero.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out37, i128 %iszero.out.read_output_outter36, i1* @constraint.7)
  %ptr_getter38 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %BigIsZero, align 8
  %bigiszero.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %ptr_getter38, i32 0, i32 2
  store i128 %iszero.out.read_output_outter36, i128* %bigiszero.out.write_output_inner, align 4
  %BigIsZero39 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %BigIsZero, align 8
  %struct_getter40 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %BigIsZero39, i32 0, i32 2
  %bigiszero.out.read_output_inner = load i128, i128* %struct_getter40, align 4
  store i128 %bigiszero.out.read_output_inner, i128* %bigiszero.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit
  %out41 = load i128, i128* %bigiszero.out.declare_output, align 4
  %bigiszero.out.write_output_inner42 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %0, i32 0, i32 2
  store i128 %out41, i128* %bigiszero.out.write_output_inner42, align 4
  ret void
}

define %struct_template_circuit_bigiszero* @fn_template_build_bigiszero(i128 %0) {
entry:
  %struct_template_circuit_bigiszero = alloca %struct_template_circuit_bigiszero, align 8
  %bigiszero.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %struct_template_circuit_bigiszero, i32 0, i32 0
  store i128 %0, i128* %bigiszero.k.write_arg_inner, align 4
  ret %struct_template_circuit_bigiszero* %struct_template_circuit_bigiszero
}

define i128 @max(i128 %0, i128 %1) {
entry:
  %max.a.declare_arg = alloca i128, align 8
  store i128 %0, i128* %max.a.declare_arg, align 4
  %max.b.declare_arg = alloca i128, align 8
  store i128 %1, i128* %max.b.declare_arg, align 4
  %a = load i128, i128* %max.a.declare_arg, align 4
  %b = load i128, i128* %max.b.declare_arg, align 4
  %sgt = icmp sgt i128 %a, %b
  br i1 %sgt, label %if.true, label %if.false

if.true:                                          ; preds = %entry
  %a1 = load i128, i128* %max.a.declare_arg, align 4
  ret i128 %a1

if.false:                                         ; preds = %entry
  br label %if.exit

if.exit:                                          ; preds = %if.false
  %b2 = load i128, i128* %max.b.declare_arg, align 4
  ret i128 %b2
}

define i128 @long_gt(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3) {
entry:
  %long_gt.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_gt.n.declare_arg, align 4
  %long_gt.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %long_gt.k.declare_arg, align 4
  %long_gt.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %long_gt.a.declare_arg, align 8
  %long_gt.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %long_gt.b.declare_arg, align 8
  %i = alloca i128, align 8
  %i1 = call i128 @fn_intrinsic_inline_init()
  store i128 %i1, i128* %i, align 4
  %k = load i128, i128* %long_gt.k.declare_arg, align 4
  %sub = sub i128 %k, 1
  store i128 %sub, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %long_gt.a.declare_arg, align 8
  %i2 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i2
  %a3 = load i128, i128* %array_getter, align 4
  %b = load [256 x i128]*, [256 x i128]** %long_gt.b.declare_arg, align 8
  %i4 = load i128, i128* %i, align 4
  %array_getter5 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i4
  %b6 = load i128, i128* %array_getter5, align 4
  %sgt = icmp sgt i128 %a3, %b6
  br i1 %sgt, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  ret i128 1

if.false:                                         ; preds = %loop.body
  br label %if.exit

if.exit:                                          ; preds = %if.false
  %a9 = load [256 x i128]*, [256 x i128]** %long_gt.a.declare_arg, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter11 = getelementptr inbounds [256 x i128], [256 x i128]* %a9, i128 0, i128 %i10
  %a12 = load i128, i128* %array_getter11, align 4
  %b13 = load [256 x i128]*, [256 x i128]** %long_gt.b.declare_arg, align 8
  %i14 = load i128, i128* %i, align 4
  %array_getter15 = getelementptr inbounds [256 x i128], [256 x i128]* %b13, i128 0, i128 %i14
  %b16 = load i128, i128* %array_getter15, align 4
  %slt = icmp slt i128 %a12, %b16
  br i1 %slt, label %if.true7, label %if.false8

if.true7:                                         ; preds = %if.exit
  ret i128 0

if.false8:                                        ; preds = %if.exit
  br label %if.exit17

if.exit17:                                        ; preds = %if.false8
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit17
  %i18 = load i128, i128* %i, align 4
  %sub19 = sub i128 %i18, 1
  store i128 %sub19, i128* %i, align 4
  %i20 = load i128, i128* %i, align 4
  %sge = icmp sge i128 %i20, 0
  br i1 %sge, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  ret i128 0
}

define void @fn_template_init_forceequalifenabled(%struct_template_circuit_forceequalifenabled* %0) {
entry:
  %ForceEqualIfEnabled = alloca %struct_template_circuit_forceequalifenabled*, align 8
  store %struct_template_circuit_forceequalifenabled* %0, %struct_template_circuit_forceequalifenabled** %ForceEqualIfEnabled, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_forceequalifenabled, %struct_template_circuit_forceequalifenabled* %0, i32 0, i32 0
  %forceequalifenabled.enabled.read_input_inner = load i128, i128* %struct_getter, align 4
  %forceequalifenabled.enabled.declare_input = alloca i128, align 8
  store i128 %forceequalifenabled.enabled.read_input_inner, i128* %forceequalifenabled.enabled.declare_input, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_forceequalifenabled, %struct_template_circuit_forceequalifenabled* %0, i32 0, i32 1
  %forceequalifenabled.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter1, align 8
  %forceequalifenabled.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %forceequalifenabled.in.read_input_inner, [256 x i128]** %forceequalifenabled.in.declare_input, align 8
  %isz = alloca %struct_template_circuit_iszero*, align 8
  %call = call %struct_template_circuit_iszero* @fn_template_build_iszero()
  store %struct_template_circuit_iszero* %call, %struct_template_circuit_iszero** %isz, align 8
  %in = load [256 x i128]*, [256 x i128]** %forceequalifenabled.in.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 1
  %in2 = load i128, i128* %array_getter, align 4
  %in3 = load [256 x i128]*, [256 x i128]** %forceequalifenabled.in.declare_input, align 8
  %array_getter4 = getelementptr inbounds [256 x i128], [256 x i128]* %in3, i128 0, i128 0
  %in5 = load i128, i128* %array_getter4, align 4
  %sub = sub i128 %in2, %in5
  %isz6 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %isz, align 8
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isz6, i32 0, i32 0
  %iszero.in.read_input_outter = load i128, i128* %struct_getter7, align 4
  call void @fn_intrinsic_add_constraint(i128 %iszero.in.read_input_outter, i128 %sub, i1* @constraint.8)
  %ptr_getter = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %isz, align 8
  %iszero.in.write_input_outter = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %ptr_getter, i32 0, i32 0
  store i128 %sub, i128* %iszero.in.write_input_outter, align 4
  %isz8 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %isz, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isz8, i32 0, i32 2
  %iszero.out.read_output_outter = load i128, i128* %struct_getter9, align 4
  %sub10 = sub i128 1, %iszero.out.read_output_outter
  %enabled = load i128, i128* %forceequalifenabled.enabled.declare_input, align 4
  %mul = mul i128 %sub10, %enabled
  call void @fn_intrinsic_add_constraint(i128 %mul, i128 0, i1* @constraint.9)
  br label %exit

exit:                                             ; preds = %entry
  ret void
}

define %struct_template_circuit_forceequalifenabled* @fn_template_build_forceequalifenabled() {
entry:
  %struct_template_circuit_forceequalifenabled = alloca %struct_template_circuit_forceequalifenabled, align 8
  ret %struct_template_circuit_forceequalifenabled* %struct_template_circuit_forceequalifenabled
}

define [256 x i128]* @long_scalar_mult(i128 %0, i128 %1, i128 %2, [256 x i128]* %3) {
entry:
  %long_scalar_mult.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_scalar_mult.n.declare_arg, align 4
  %long_scalar_mult.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %long_scalar_mult.k.declare_arg, align 4
  %long_scalar_mult.a.declare_arg = alloca i128, align 8
  store i128 %2, i128* %long_scalar_mult.a.declare_arg, align 4
  %long_scalar_mult.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %long_scalar_mult.b.declare_arg, align 8
  %temp = alloca i128, align 8
  %temp1 = call i128 @fn_intrinsic_inline_init()
  store i128 %temp1, i128* %temp, align 4
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %out = alloca [256 x i128]*, align 8
  %out3 = alloca [256 x i128], align 8
  store [256 x i128]* %out3, [256 x i128]** %out, align 8
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %out, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %ptr_getter = load [256 x i128]*, [256 x i128]** %out, align 8
  %i4 = load i128, i128* %i, align 4
  %out5 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i4
  store i128 0, i128* %out5, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i6 = load i128, i128* %i, align 4
  %add = add i128 %i6, 1
  store i128 %add, i128* %i, align 4
  %i7 = load i128, i128* %i, align 4
  %slt = icmp slt i128 %i7, 50
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %i, align 4
  br label %loop.body8

loop.body8:                                       ; preds = %loop.latch33, %loop.exit
  %out9 = load [256 x i128]*, [256 x i128]** %out, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %out9, i128 0, i128 %i10
  %out11 = load i128, i128* %array_getter, align 4
  %a = load i128, i128* %long_scalar_mult.a.declare_arg, align 4
  %b = load [256 x i128]*, [256 x i128]** %long_scalar_mult.b.declare_arg, align 8
  %i12 = load i128, i128* %i, align 4
  %array_getter13 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i12
  %b14 = load i128, i128* %array_getter13, align 4
  %mul = mul i128 %a, %b14
  %add15 = add i128 %out11, %mul
  store i128 %add15, i128* %temp, align 4
  %temp16 = load i128, i128* %temp, align 4
  %n = load i128, i128* %long_scalar_mult.n.declare_arg, align 4
  %lshift = shl i128 1, %n
  %mod = srem i128 %temp16, %lshift
  %ptr_getter17 = load [256 x i128]*, [256 x i128]** %out, align 8
  %i18 = load i128, i128* %i, align 4
  %out19 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter17, i128 0, i128 %i18
  store i128 %mod, i128* %out19, align 4
  %out20 = load [256 x i128]*, [256 x i128]** %out, align 8
  %i21 = load i128, i128* %i, align 4
  %add22 = add i128 %i21, 1
  %array_getter23 = getelementptr inbounds [256 x i128], [256 x i128]* %out20, i128 0, i128 %add22
  %out24 = load i128, i128* %array_getter23, align 4
  %temp25 = load i128, i128* %temp, align 4
  %n26 = load i128, i128* %long_scalar_mult.n.declare_arg, align 4
  %lshift27 = shl i128 1, %n26
  %sdiv = sdiv i128 %temp25, %lshift27
  %add28 = add i128 %out24, %sdiv
  %ptr_getter29 = load [256 x i128]*, [256 x i128]** %out, align 8
  %i30 = load i128, i128* %i, align 4
  %add31 = add i128 %i30, 1
  %out32 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter29, i128 0, i128 %add31
  store i128 %add28, i128* %out32, align 4
  br label %loop.latch33

loop.latch33:                                     ; preds = %loop.body8
  %i34 = load i128, i128* %i, align 4
  %add35 = add i128 %i34, 1
  store i128 %add35, i128* %i, align 4
  %i36 = load i128, i128* %i, align 4
  %k = load i128, i128* %long_scalar_mult.k.declare_arg, align 4
  %slt37 = icmp slt i128 %i36, %k
  br i1 %slt37, label %loop.body8, label %loop.exit38

loop.exit38:                                      ; preds = %loop.latch33
  %out39 = load [256 x i128]*, [256 x i128]** %out, align 8
  ret [256 x i128]* %out39
}

define void @fn_template_init_bigmultshortlongunequal(%struct_template_circuit_bigmultshortlongunequal* %0) {
entry:
  %BigMultShortLongUnequal = alloca %struct_template_circuit_bigmultshortlongunequal*, align 8
  store %struct_template_circuit_bigmultshortlongunequal* %0, %struct_template_circuit_bigmultshortlongunequal** %BigMultShortLongUnequal, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %0, i32 0, i32 0
  %bigmultshortlongunequal.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigmultshortlongunequal.n.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlongunequal.n.read_arg_inner, i128* %bigmultshortlongunequal.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %0, i32 0, i32 1
  %bigmultshortlongunequal.ka.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigmultshortlongunequal.ka.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlongunequal.ka.read_arg_inner, i128* %bigmultshortlongunequal.ka.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %0, i32 0, i32 2
  %bigmultshortlongunequal.kb.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %bigmultshortlongunequal.kb.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlongunequal.kb.read_arg_inner, i128* %bigmultshortlongunequal.kb.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %0, i32 0, i32 3
  %bigmultshortlongunequal.m_out.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %bigmultshortlongunequal.m_out.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlongunequal.m_out.read_arg_inner, i128* %bigmultshortlongunequal.m_out.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %0, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %bigmultshortlongunequal.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmultshortlongunequal.a.read_input_inner, [256 x i128]** %bigmultshortlongunequal.a.declare_input, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %0, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter5, align 8
  %bigmultshortlongunequal.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmultshortlongunequal.b.read_input_inner, [256 x i128]** %bigmultshortlongunequal.b.declare_input, align 8
  %k2 = alloca i128, align 8
  %k26 = call i128 @fn_intrinsic_inline_init()
  store i128 %k26, i128* %k2, align 4
  %out_poly = alloca [256 x i128]*, align 8
  %out_poly7 = alloca [256 x i128], align 8
  store [256 x i128]* %out_poly7, [256 x i128]** %out_poly, align 8
  %a_poly = alloca [256 x i128]*, align 8
  %a_poly8 = alloca [256 x i128], align 8
  store [256 x i128]* %a_poly8, [256 x i128]** %a_poly, align 8
  %prod_val = alloca [256 x i128]*, align 8
  %prod_val9 = alloca [256 x i128], align 8
  store [256 x i128]* %prod_val9, [256 x i128]** %prod_val, align 8
  %b_poly = alloca [256 x i128]*, align 8
  %b_poly10 = alloca [256 x i128], align 8
  store [256 x i128]* %b_poly10, [256 x i128]** %b_poly, align 8
  %i = alloca i128, align 8
  %i11 = call i128 @fn_intrinsic_inline_init()
  store i128 %i11, i128* %i, align 4
  %j = alloca i128, align 8
  %j12 = call i128 @fn_intrinsic_inline_init()
  store i128 %j12, i128* %j, align 4
  %bigmultshortlongunequal.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %bigmultshortlongunequal.out.declare_output, align 8
  %pow = alloca [256 x [256 x i128]]*, align 8
  %pow13 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %pow13, [256 x [256 x i128]]** %pow, align 8
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %prod_val, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %ptr_getter = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i14 = load i128, i128* %i, align 4
  %prod_val15 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i14
  store i128 0, i128* %prod_val15, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i16 = load i128, i128* %i, align 4
  %add = add i128 %i16, 1
  store i128 %add, i128* %i, align 4
  %i17 = load i128, i128* %i, align 4
  %ka = load i128, i128* %bigmultshortlongunequal.ka.declare_arg, align 4
  %kb = load i128, i128* %bigmultshortlongunequal.kb.declare_arg, align 4
  %add18 = add i128 %ka, %kb
  %sub = sub i128 %add18, 1
  %slt = icmp slt i128 %i17, %sub
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %i, align 4
  br label %loop.body19

loop.body19:                                      ; preds = %loop.latch45, %loop.exit
  store i128 0, i128* %j, align 4
  br label %loop.body20

loop.body20:                                      ; preds = %loop.latch38, %loop.body19
  %prod_val21 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i22 = load i128, i128* %i, align 4
  %j23 = load i128, i128* %j, align 4
  %add24 = add i128 %i22, %j23
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %prod_val21, i128 0, i128 %add24
  %prod_val25 = load i128, i128* %array_getter, align 4
  %a = load [256 x i128]*, [256 x i128]** %bigmultshortlongunequal.a.declare_input, align 8
  %i26 = load i128, i128* %i, align 4
  %array_getter27 = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i26
  %a28 = load i128, i128* %array_getter27, align 4
  %b = load [256 x i128]*, [256 x i128]** %bigmultshortlongunequal.b.declare_input, align 8
  %j29 = load i128, i128* %j, align 4
  %array_getter30 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %j29
  %b31 = load i128, i128* %array_getter30, align 4
  %mul = mul i128 %a28, %b31
  %add32 = add i128 %prod_val25, %mul
  %ptr_getter33 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i34 = load i128, i128* %i, align 4
  %j35 = load i128, i128* %j, align 4
  %add36 = add i128 %i34, %j35
  %prod_val37 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter33, i128 0, i128 %add36
  store i128 %add32, i128* %prod_val37, align 4
  br label %loop.latch38

loop.latch38:                                     ; preds = %loop.body20
  %j39 = load i128, i128* %j, align 4
  %add40 = add i128 %j39, 1
  store i128 %add40, i128* %j, align 4
  %j41 = load i128, i128* %j, align 4
  %kb42 = load i128, i128* %bigmultshortlongunequal.kb.declare_arg, align 4
  %slt43 = icmp slt i128 %j41, %kb42
  br i1 %slt43, label %loop.body20, label %loop.exit44

loop.exit44:                                      ; preds = %loop.latch38
  br label %loop.latch45

loop.latch45:                                     ; preds = %loop.exit44
  %i46 = load i128, i128* %i, align 4
  %add47 = add i128 %i46, 1
  store i128 %add47, i128* %i, align 4
  %i48 = load i128, i128* %i, align 4
  %ka49 = load i128, i128* %bigmultshortlongunequal.ka.declare_arg, align 4
  %slt50 = icmp slt i128 %i48, %ka49
  br i1 %slt50, label %loop.body19, label %loop.exit51

loop.exit51:                                      ; preds = %loop.latch45
  store i128 0, i128* %i, align 4
  br label %loop.body52

loop.body52:                                      ; preds = %loop.latch60, %loop.exit51
  %prod_val53 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i54 = load i128, i128* %i, align 4
  %array_getter55 = getelementptr inbounds [256 x i128], [256 x i128]* %prod_val53, i128 0, i128 %i54
  %prod_val56 = load i128, i128* %array_getter55, align 4
  %ptr_getter57 = load [256 x i128]*, [256 x i128]** %bigmultshortlongunequal.out.declare_output, align 8
  %i58 = load i128, i128* %i, align 4
  %out59 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter57, i128 0, i128 %i58
  store i128 %prod_val56, i128* %out59, align 4
  br label %loop.latch60

loop.latch60:                                     ; preds = %loop.body52
  %i61 = load i128, i128* %i, align 4
  %add62 = add i128 %i61, 1
  store i128 %add62, i128* %i, align 4
  %i63 = load i128, i128* %i, align 4
  %ka64 = load i128, i128* %bigmultshortlongunequal.ka.declare_arg, align 4
  %kb65 = load i128, i128* %bigmultshortlongunequal.kb.declare_arg, align 4
  %add66 = add i128 %ka64, %kb65
  %sub67 = sub i128 %add66, 1
  %slt68 = icmp slt i128 %i63, %sub67
  br i1 %slt68, label %loop.body52, label %loop.exit69

loop.exit69:                                      ; preds = %loop.latch60
  %ka70 = load i128, i128* %bigmultshortlongunequal.ka.declare_arg, align 4
  %kb71 = load i128, i128* %bigmultshortlongunequal.kb.declare_arg, align 4
  %add72 = add i128 %ka70, %kb71
  %sub73 = sub i128 %add72, 1
  store i128 %sub73, i128* %k2, align 4
  %uniform_array74 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array74, [256 x [256 x i128]]** %pow, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body75

loop.body75:                                      ; preds = %loop.latch91, %loop.exit69
  store i128 0, i128* %j, align 4
  br label %loop.body76

loop.body76:                                      ; preds = %loop.latch84, %loop.body75
  %i77 = load i128, i128* %i, align 4
  %j78 = load i128, i128* %j, align 4
  %pow79 = call i128 @fn_intrinsic_inline_powi(i128 %i77, i128 %j78)
  %ptr_getter80 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i81 = load i128, i128* %i, align 4
  %j82 = load i128, i128* %j, align 4
  %pow83 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter80, i128 0, i128 %i81, i128 %j82
  store i128 %pow79, i128* %pow83, align 4
  br label %loop.latch84

loop.latch84:                                     ; preds = %loop.body76
  %j85 = load i128, i128* %j, align 4
  %add86 = add i128 %j85, 1
  store i128 %add86, i128* %j, align 4
  %j87 = load i128, i128* %j, align 4
  %k288 = load i128, i128* %k2, align 4
  %slt89 = icmp slt i128 %j87, %k288
  br i1 %slt89, label %loop.body76, label %loop.exit90

loop.exit90:                                      ; preds = %loop.latch84
  br label %loop.latch91

loop.latch91:                                     ; preds = %loop.exit90
  %i92 = load i128, i128* %i, align 4
  %add93 = add i128 %i92, 1
  store i128 %add93, i128* %i, align 4
  %i94 = load i128, i128* %i, align 4
  %k295 = load i128, i128* %k2, align 4
  %slt96 = icmp slt i128 %i94, %k295
  br i1 %slt96, label %loop.body75, label %loop.exit97

loop.exit97:                                      ; preds = %loop.latch91
  %uniform_array98 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array98, [256 x i128]** %a_poly, align 8
  %uniform_array99 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array99, [256 x i128]** %b_poly, align 8
  %uniform_array100 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array100, [256 x i128]** %out_poly, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body101

loop.body101:                                     ; preds = %loop.latch192, %loop.exit97
  %ptr_getter102 = load [256 x i128]*, [256 x i128]** %out_poly, align 8
  %i103 = load i128, i128* %i, align 4
  %out_poly104 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter102, i128 0, i128 %i103
  store i128 0, i128* %out_poly104, align 4
  %ptr_getter105 = load [256 x i128]*, [256 x i128]** %a_poly, align 8
  %i106 = load i128, i128* %i, align 4
  %a_poly107 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter105, i128 0, i128 %i106
  store i128 0, i128* %a_poly107, align 4
  %ptr_getter108 = load [256 x i128]*, [256 x i128]** %b_poly, align 8
  %i109 = load i128, i128* %i, align 4
  %b_poly110 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter108, i128 0, i128 %i109
  store i128 0, i128* %b_poly110, align 4
  store i128 0, i128* %j, align 4
  br label %loop.body111

loop.body111:                                     ; preds = %loop.latch130, %loop.body101
  %out_poly112 = load [256 x i128]*, [256 x i128]** %out_poly, align 8
  %i113 = load i128, i128* %i, align 4
  %array_getter114 = getelementptr inbounds [256 x i128], [256 x i128]* %out_poly112, i128 0, i128 %i113
  %out_poly115 = load i128, i128* %array_getter114, align 4
  %out116 = load [256 x i128]*, [256 x i128]** %bigmultshortlongunequal.out.declare_output, align 8
  %j117 = load i128, i128* %j, align 4
  %array_getter118 = getelementptr inbounds [256 x i128], [256 x i128]* %out116, i128 0, i128 %j117
  %out119 = load i128, i128* %array_getter118, align 4
  %pow120 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i121 = load i128, i128* %i, align 4
  %j122 = load i128, i128* %j, align 4
  %array_getter123 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow120, i128 0, i128 %i121, i128 %j122
  %pow124 = load i128, i128* %array_getter123, align 4
  %mul125 = mul i128 %out119, %pow124
  %add126 = add i128 %out_poly115, %mul125
  %ptr_getter127 = load [256 x i128]*, [256 x i128]** %out_poly, align 8
  %i128 = load i128, i128* %i, align 4
  %out_poly129 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter127, i128 0, i128 %i128
  store i128 %add126, i128* %out_poly129, align 4
  br label %loop.latch130

loop.latch130:                                    ; preds = %loop.body111
  %j131 = load i128, i128* %j, align 4
  %add132 = add i128 %j131, 1
  store i128 %add132, i128* %j, align 4
  %j133 = load i128, i128* %j, align 4
  %ka134 = load i128, i128* %bigmultshortlongunequal.ka.declare_arg, align 4
  %kb135 = load i128, i128* %bigmultshortlongunequal.kb.declare_arg, align 4
  %add136 = add i128 %ka134, %kb135
  %sub137 = sub i128 %add136, 1
  %slt138 = icmp slt i128 %j133, %sub137
  br i1 %slt138, label %loop.body111, label %loop.exit139

loop.exit139:                                     ; preds = %loop.latch130
  store i128 0, i128* %j, align 4
  br label %loop.body140

loop.body140:                                     ; preds = %loop.latch159, %loop.exit139
  %a_poly141 = load [256 x i128]*, [256 x i128]** %a_poly, align 8
  %i142 = load i128, i128* %i, align 4
  %array_getter143 = getelementptr inbounds [256 x i128], [256 x i128]* %a_poly141, i128 0, i128 %i142
  %a_poly144 = load i128, i128* %array_getter143, align 4
  %a145 = load [256 x i128]*, [256 x i128]** %bigmultshortlongunequal.a.declare_input, align 8
  %j146 = load i128, i128* %j, align 4
  %array_getter147 = getelementptr inbounds [256 x i128], [256 x i128]* %a145, i128 0, i128 %j146
  %a148 = load i128, i128* %array_getter147, align 4
  %pow149 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i150 = load i128, i128* %i, align 4
  %j151 = load i128, i128* %j, align 4
  %array_getter152 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow149, i128 0, i128 %i150, i128 %j151
  %pow153 = load i128, i128* %array_getter152, align 4
  %mul154 = mul i128 %a148, %pow153
  %add155 = add i128 %a_poly144, %mul154
  %ptr_getter156 = load [256 x i128]*, [256 x i128]** %a_poly, align 8
  %i157 = load i128, i128* %i, align 4
  %a_poly158 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter156, i128 0, i128 %i157
  store i128 %add155, i128* %a_poly158, align 4
  br label %loop.latch159

loop.latch159:                                    ; preds = %loop.body140
  %j160 = load i128, i128* %j, align 4
  %add161 = add i128 %j160, 1
  store i128 %add161, i128* %j, align 4
  %j162 = load i128, i128* %j, align 4
  %ka163 = load i128, i128* %bigmultshortlongunequal.ka.declare_arg, align 4
  %slt164 = icmp slt i128 %j162, %ka163
  br i1 %slt164, label %loop.body140, label %loop.exit165

loop.exit165:                                     ; preds = %loop.latch159
  store i128 0, i128* %j, align 4
  br label %loop.body166

loop.body166:                                     ; preds = %loop.latch185, %loop.exit165
  %b_poly167 = load [256 x i128]*, [256 x i128]** %b_poly, align 8
  %i168 = load i128, i128* %i, align 4
  %array_getter169 = getelementptr inbounds [256 x i128], [256 x i128]* %b_poly167, i128 0, i128 %i168
  %b_poly170 = load i128, i128* %array_getter169, align 4
  %b171 = load [256 x i128]*, [256 x i128]** %bigmultshortlongunequal.b.declare_input, align 8
  %j172 = load i128, i128* %j, align 4
  %array_getter173 = getelementptr inbounds [256 x i128], [256 x i128]* %b171, i128 0, i128 %j172
  %b174 = load i128, i128* %array_getter173, align 4
  %pow175 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i176 = load i128, i128* %i, align 4
  %j177 = load i128, i128* %j, align 4
  %array_getter178 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow175, i128 0, i128 %i176, i128 %j177
  %pow179 = load i128, i128* %array_getter178, align 4
  %mul180 = mul i128 %b174, %pow179
  %add181 = add i128 %b_poly170, %mul180
  %ptr_getter182 = load [256 x i128]*, [256 x i128]** %b_poly, align 8
  %i183 = load i128, i128* %i, align 4
  %b_poly184 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter182, i128 0, i128 %i183
  store i128 %add181, i128* %b_poly184, align 4
  br label %loop.latch185

loop.latch185:                                    ; preds = %loop.body166
  %j186 = load i128, i128* %j, align 4
  %add187 = add i128 %j186, 1
  store i128 %add187, i128* %j, align 4
  %j188 = load i128, i128* %j, align 4
  %kb189 = load i128, i128* %bigmultshortlongunequal.kb.declare_arg, align 4
  %slt190 = icmp slt i128 %j188, %kb189
  br i1 %slt190, label %loop.body166, label %loop.exit191

loop.exit191:                                     ; preds = %loop.latch185
  br label %loop.latch192

loop.latch192:                                    ; preds = %loop.exit191
  %i193 = load i128, i128* %i, align 4
  %add194 = add i128 %i193, 1
  store i128 %add194, i128* %i, align 4
  %i195 = load i128, i128* %i, align 4
  %ka196 = load i128, i128* %bigmultshortlongunequal.ka.declare_arg, align 4
  %kb197 = load i128, i128* %bigmultshortlongunequal.kb.declare_arg, align 4
  %add198 = add i128 %ka196, %kb197
  %sub199 = sub i128 %add198, 1
  %slt200 = icmp slt i128 %i195, %sub199
  br i1 %slt200, label %loop.body101, label %loop.exit201

loop.exit201:                                     ; preds = %loop.latch192
  store i128 0, i128* %i, align 4
  br label %loop.body202

loop.body202:                                     ; preds = %loop.latch216, %loop.exit201
  %out_poly203 = load [256 x i128]*, [256 x i128]** %out_poly, align 8
  %i204 = load i128, i128* %i, align 4
  %array_getter205 = getelementptr inbounds [256 x i128], [256 x i128]* %out_poly203, i128 0, i128 %i204
  %out_poly206 = load i128, i128* %array_getter205, align 4
  %a_poly207 = load [256 x i128]*, [256 x i128]** %a_poly, align 8
  %i208 = load i128, i128* %i, align 4
  %array_getter209 = getelementptr inbounds [256 x i128], [256 x i128]* %a_poly207, i128 0, i128 %i208
  %a_poly210 = load i128, i128* %array_getter209, align 4
  %b_poly211 = load [256 x i128]*, [256 x i128]** %b_poly, align 8
  %i212 = load i128, i128* %i, align 4
  %array_getter213 = getelementptr inbounds [256 x i128], [256 x i128]* %b_poly211, i128 0, i128 %i212
  %b_poly214 = load i128, i128* %array_getter213, align 4
  %mul215 = mul i128 %a_poly210, %b_poly214
  call void @fn_intrinsic_add_constraint(i128 %out_poly206, i128 %mul215, i1* @constraint.10)
  br label %loop.latch216

loop.latch216:                                    ; preds = %loop.body202
  %i217 = load i128, i128* %i, align 4
  %add218 = add i128 %i217, 1
  store i128 %add218, i128* %i, align 4
  %i219 = load i128, i128* %i, align 4
  %ka220 = load i128, i128* %bigmultshortlongunequal.ka.declare_arg, align 4
  %kb221 = load i128, i128* %bigmultshortlongunequal.kb.declare_arg, align 4
  %add222 = add i128 %ka220, %kb221
  %sub223 = sub i128 %add222, 1
  %slt224 = icmp slt i128 %i219, %sub223
  br i1 %slt224, label %loop.body202, label %loop.exit225

loop.exit225:                                     ; preds = %loop.latch216
  br label %exit

exit:                                             ; preds = %loop.exit225
  %out226 = load [256 x i128]*, [256 x i128]** %bigmultshortlongunequal.out.declare_output, align 8
  %bigmultshortlongunequal.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %0, i32 0, i32 6
  store [256 x i128]* %out226, [256 x i128]** %bigmultshortlongunequal.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigmultshortlongunequal* @fn_template_build_bigmultshortlongunequal(i128 %0, i128 %1, i128 %2, i128 %3) {
entry:
  %struct_template_circuit_bigmultshortlongunequal = alloca %struct_template_circuit_bigmultshortlongunequal, align 8
  %bigmultshortlongunequal.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %struct_template_circuit_bigmultshortlongunequal, i32 0, i32 0
  store i128 %0, i128* %bigmultshortlongunequal.n.write_arg_inner, align 4
  %bigmultshortlongunequal.ka.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %struct_template_circuit_bigmultshortlongunequal, i32 0, i32 1
  store i128 %1, i128* %bigmultshortlongunequal.ka.write_arg_inner, align 4
  %bigmultshortlongunequal.kb.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %struct_template_circuit_bigmultshortlongunequal, i32 0, i32 2
  store i128 %2, i128* %bigmultshortlongunequal.kb.write_arg_inner, align 4
  %bigmultshortlongunequal.m_out.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %struct_template_circuit_bigmultshortlongunequal, i32 0, i32 3
  store i128 %3, i128* %bigmultshortlongunequal.m_out.write_arg_inner, align 4
  ret %struct_template_circuit_bigmultshortlongunequal* %struct_template_circuit_bigmultshortlongunequal
}

define void @fn_template_init_multiand(%struct_template_circuit_multiand* %0) {
entry:
  %MultiAND = alloca %struct_template_circuit_multiand*, align 8
  store %struct_template_circuit_multiand* %0, %struct_template_circuit_multiand** %MultiAND, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %0, i32 0, i32 0
  %multiand.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %multiand.n.declare_arg = alloca i128, align 8
  store i128 %multiand.n.read_arg_inner, i128* %multiand.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %0, i32 0, i32 1
  %multiand.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter1, align 8
  %multiand.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %multiand.in.read_input_inner, [256 x i128]** %multiand.in.declare_input, align 8
  %and2 = alloca %struct_template_circuit_and*, align 8
  %n1 = alloca i128, align 8
  %n12 = call i128 @fn_intrinsic_inline_init()
  store i128 %n12, i128* %n1, align 4
  %n2 = alloca i128, align 8
  %n23 = call i128 @fn_intrinsic_inline_init()
  store i128 %n23, i128* %n2, align 4
  %ands = alloca [256 x %struct_template_circuit_multiand*]*, align 8
  %ands4 = alloca [256 x %struct_template_circuit_multiand*], align 8
  store [256 x %struct_template_circuit_multiand*]* %ands4, [256 x %struct_template_circuit_multiand*]** %ands, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %and1 = alloca %struct_template_circuit_and*, align 8
  %multiand.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %multiand.out.declare_output, align 4
  %n = load i128, i128* %multiand.n.declare_arg, align 4
  %eq = icmp eq i128 %n, 1
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %entry
  %in = load [256 x i128]*, [256 x i128]** %multiand.in.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 0
  %in6 = load i128, i128* %array_getter, align 4
  %out7 = load i128, i128* %multiand.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out7, i128 %in6, i1* @constraint.11)
  %ptr_getter = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %MultiAND, align 8
  %multiand.out.write_output_inner = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %ptr_getter, i32 0, i32 2
  store i128 %in6, i128* %multiand.out.write_output_inner, align 4
  %MultiAND8 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %MultiAND, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %MultiAND8, i32 0, i32 2
  %multiand.out.read_output_inner = load i128, i128* %struct_getter9, align 4
  store i128 %multiand.out.read_output_inner, i128* %multiand.out.declare_output, align 4
  br label %if.exit133

if.false:                                         ; preds = %entry
  %n13 = load i128, i128* %multiand.n.declare_arg, align 4
  %eq14 = icmp eq i128 %n13, 2
  br i1 %eq14, label %if.true10, label %if.false11

if.true10:                                        ; preds = %if.false
  %call = call %struct_template_circuit_and* @fn_template_build_and()
  store %struct_template_circuit_and* %call, %struct_template_circuit_and** %and1, align 8
  %in15 = load [256 x i128]*, [256 x i128]** %multiand.in.declare_input, align 8
  %array_getter16 = getelementptr inbounds [256 x i128], [256 x i128]* %in15, i128 0, i128 0
  %in17 = load i128, i128* %array_getter16, align 4
  %and118 = load %struct_template_circuit_and*, %struct_template_circuit_and** %and1, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %and118, i32 0, i32 0
  %and.a.read_input_outter = load i128, i128* %struct_getter19, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.a.read_input_outter, i128 %in17, i1* @constraint.12)
  %ptr_getter20 = load %struct_template_circuit_and*, %struct_template_circuit_and** %and1, align 8
  %and.a.write_input_outter = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ptr_getter20, i32 0, i32 0
  store i128 %in17, i128* %and.a.write_input_outter, align 4
  %in21 = load [256 x i128]*, [256 x i128]** %multiand.in.declare_input, align 8
  %array_getter22 = getelementptr inbounds [256 x i128], [256 x i128]* %in21, i128 0, i128 1
  %in23 = load i128, i128* %array_getter22, align 4
  %and124 = load %struct_template_circuit_and*, %struct_template_circuit_and** %and1, align 8
  %struct_getter25 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %and124, i32 0, i32 1
  %and.b.read_input_outter = load i128, i128* %struct_getter25, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.b.read_input_outter, i128 %in23, i1* @constraint.13)
  %ptr_getter26 = load %struct_template_circuit_and*, %struct_template_circuit_and** %and1, align 8
  %and.b.write_input_outter = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ptr_getter26, i32 0, i32 1
  store i128 %in23, i128* %and.b.write_input_outter, align 4
  %and127 = load %struct_template_circuit_and*, %struct_template_circuit_and** %and1, align 8
  %struct_getter28 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %and127, i32 0, i32 2
  %and.out.read_output_outter = load i128, i128* %struct_getter28, align 4
  %out29 = load i128, i128* %multiand.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out29, i128 %and.out.read_output_outter, i1* @constraint.14)
  %ptr_getter30 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %MultiAND, align 8
  %multiand.out.write_output_inner31 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %ptr_getter30, i32 0, i32 2
  store i128 %and.out.read_output_outter, i128* %multiand.out.write_output_inner31, align 4
  %MultiAND32 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %MultiAND, align 8
  %struct_getter33 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %MultiAND32, i32 0, i32 2
  %multiand.out.read_output_inner34 = load i128, i128* %struct_getter33, align 4
  store i128 %multiand.out.read_output_inner34, i128* %multiand.out.declare_output, align 4
  br label %if.exit

if.false11:                                       ; preds = %if.false
  %call35 = call %struct_template_circuit_and* @fn_template_build_and()
  store %struct_template_circuit_and* %call35, %struct_template_circuit_and** %and2, align 8
  %n36 = load i128, i128* %multiand.n.declare_arg, align 4
  %sdiv = sdiv i128 %n36, 2
  store i128 %sdiv, i128* %n1, align 4
  %n37 = load i128, i128* %multiand.n.declare_arg, align 4
  %n38 = load i128, i128* %multiand.n.declare_arg, align 4
  %sdiv39 = sdiv i128 %n38, 2
  %sub = sub i128 %n37, %sdiv39
  store i128 %sub, i128* %n2, align 4
  %n140 = load i128, i128* %n1, align 4
  %call41 = call %struct_template_circuit_multiand* @fn_template_build_multiand(i128 %n140)
  %ptr_getter42 = load [256 x %struct_template_circuit_multiand*]*, [256 x %struct_template_circuit_multiand*]** %ands, align 8
  %ands43 = getelementptr inbounds [256 x %struct_template_circuit_multiand*], [256 x %struct_template_circuit_multiand*]* %ptr_getter42, i128 0, i128 0
  store %struct_template_circuit_multiand* %call41, %struct_template_circuit_multiand** %ands43, align 8
  %n244 = load i128, i128* %n2, align 4
  %call45 = call %struct_template_circuit_multiand* @fn_template_build_multiand(i128 %n244)
  %ptr_getter46 = load [256 x %struct_template_circuit_multiand*]*, [256 x %struct_template_circuit_multiand*]** %ands, align 8
  %ands47 = getelementptr inbounds [256 x %struct_template_circuit_multiand*], [256 x %struct_template_circuit_multiand*]* %ptr_getter46, i128 0, i128 1
  store %struct_template_circuit_multiand* %call45, %struct_template_circuit_multiand** %ands47, align 8
  store i128 0, i128* %i, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %if.false11
  %in48 = load [256 x i128]*, [256 x i128]** %multiand.in.declare_input, align 8
  %i49 = load i128, i128* %i, align 4
  %array_getter50 = getelementptr inbounds [256 x i128], [256 x i128]* %in48, i128 0, i128 %i49
  %in51 = load i128, i128* %array_getter50, align 4
  %ands52 = load [256 x %struct_template_circuit_multiand*]*, [256 x %struct_template_circuit_multiand*]** %ands, align 8
  %array_getter53 = getelementptr inbounds [256 x %struct_template_circuit_multiand*], [256 x %struct_template_circuit_multiand*]* %ands52, i128 0, i128 0
  %ands54 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %array_getter53, align 8
  %ptr_cast = bitcast %struct_template_circuit_multiand* %ands54 to %struct_template_circuit_multiand*
  %struct_getter55 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %ptr_cast, i32 0, i32 1
  %multiand.in.read_input_inner56 = load [256 x i128]*, [256 x i128]** %struct_getter55, align 8
  %i57 = load i128, i128* %i, align 4
  %array_getter58 = getelementptr inbounds [256 x i128], [256 x i128]* %multiand.in.read_input_inner56, i128 0, i128 %i57
  %ands59 = load i128, i128* %array_getter58, align 4
  call void @fn_intrinsic_add_constraint(i128 %ands59, i128 %in51, i1* @constraint.15)
  %ptr_getter60 = load [256 x %struct_template_circuit_multiand*]*, [256 x %struct_template_circuit_multiand*]** %ands, align 8
  %array_getter61 = getelementptr inbounds [256 x %struct_template_circuit_multiand*], [256 x %struct_template_circuit_multiand*]* %ptr_getter60, i128 0, i128 0
  %ands62 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %array_getter61, align 8
  %ptr_cast63 = bitcast %struct_template_circuit_multiand* %ands62 to %struct_template_circuit_multiand*
  %struct_getter64 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %ptr_cast63, i32 0, i32 1
  %multiand.in.read_input_inner65 = load [256 x i128]*, [256 x i128]** %struct_getter64, align 8
  %i66 = load i128, i128* %i, align 4
  %ands67 = getelementptr inbounds [256 x i128], [256 x i128]* %multiand.in.read_input_inner65, i128 0, i128 %i66
  store i128 %in51, i128* %ands67, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i68 = load i128, i128* %i, align 4
  %add = add i128 %i68, 1
  store i128 %add, i128* %i, align 4
  %i69 = load i128, i128* %i, align 4
  %n170 = load i128, i128* %n1, align 4
  %slt = icmp slt i128 %i69, %n170
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %i, align 4
  br label %loop.body71

loop.body71:                                      ; preds = %loop.latch95, %loop.exit
  %in72 = load [256 x i128]*, [256 x i128]** %multiand.in.declare_input, align 8
  %n173 = load i128, i128* %n1, align 4
  %i74 = load i128, i128* %i, align 4
  %add75 = add i128 %n173, %i74
  %array_getter76 = getelementptr inbounds [256 x i128], [256 x i128]* %in72, i128 0, i128 %add75
  %in77 = load i128, i128* %array_getter76, align 4
  %ands78 = load [256 x %struct_template_circuit_multiand*]*, [256 x %struct_template_circuit_multiand*]** %ands, align 8
  %array_getter79 = getelementptr inbounds [256 x %struct_template_circuit_multiand*], [256 x %struct_template_circuit_multiand*]* %ands78, i128 0, i128 1
  %ands80 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %array_getter79, align 8
  %ptr_cast81 = bitcast %struct_template_circuit_multiand* %ands80 to %struct_template_circuit_multiand*
  %struct_getter82 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %ptr_cast81, i32 0, i32 1
  %multiand.in.read_input_inner83 = load [256 x i128]*, [256 x i128]** %struct_getter82, align 8
  %i84 = load i128, i128* %i, align 4
  %array_getter85 = getelementptr inbounds [256 x i128], [256 x i128]* %multiand.in.read_input_inner83, i128 0, i128 %i84
  %ands86 = load i128, i128* %array_getter85, align 4
  call void @fn_intrinsic_add_constraint(i128 %ands86, i128 %in77, i1* @constraint.16)
  %ptr_getter87 = load [256 x %struct_template_circuit_multiand*]*, [256 x %struct_template_circuit_multiand*]** %ands, align 8
  %array_getter88 = getelementptr inbounds [256 x %struct_template_circuit_multiand*], [256 x %struct_template_circuit_multiand*]* %ptr_getter87, i128 0, i128 1
  %ands89 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %array_getter88, align 8
  %ptr_cast90 = bitcast %struct_template_circuit_multiand* %ands89 to %struct_template_circuit_multiand*
  %struct_getter91 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %ptr_cast90, i32 0, i32 1
  %multiand.in.read_input_inner92 = load [256 x i128]*, [256 x i128]** %struct_getter91, align 8
  %i93 = load i128, i128* %i, align 4
  %ands94 = getelementptr inbounds [256 x i128], [256 x i128]* %multiand.in.read_input_inner92, i128 0, i128 %i93
  store i128 %in77, i128* %ands94, align 4
  br label %loop.latch95

loop.latch95:                                     ; preds = %loop.body71
  %i96 = load i128, i128* %i, align 4
  %add97 = add i128 %i96, 1
  store i128 %add97, i128* %i, align 4
  %i98 = load i128, i128* %i, align 4
  %n299 = load i128, i128* %n2, align 4
  %slt100 = icmp slt i128 %i98, %n299
  br i1 %slt100, label %loop.body71, label %loop.exit101

loop.exit101:                                     ; preds = %loop.latch95
  %ands102 = load [256 x %struct_template_circuit_multiand*]*, [256 x %struct_template_circuit_multiand*]** %ands, align 8
  %array_getter103 = getelementptr inbounds [256 x %struct_template_circuit_multiand*], [256 x %struct_template_circuit_multiand*]* %ands102, i128 0, i128 0
  %ands104 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %array_getter103, align 8
  %ptr_cast105 = bitcast %struct_template_circuit_multiand* %ands104 to %struct_template_circuit_multiand*
  %struct_getter106 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %ptr_cast105, i32 0, i32 2
  %multiand.out.read_output_inner107 = load i128, i128* %struct_getter106, align 4
  %and2108 = load %struct_template_circuit_and*, %struct_template_circuit_and** %and2, align 8
  %struct_getter109 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %and2108, i32 0, i32 0
  %and.a.read_input_outter110 = load i128, i128* %struct_getter109, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.a.read_input_outter110, i128 %multiand.out.read_output_inner107, i1* @constraint.17)
  %ptr_getter111 = load %struct_template_circuit_and*, %struct_template_circuit_and** %and2, align 8
  %and.a.write_input_outter112 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ptr_getter111, i32 0, i32 0
  store i128 %multiand.out.read_output_inner107, i128* %and.a.write_input_outter112, align 4
  %ands113 = load [256 x %struct_template_circuit_multiand*]*, [256 x %struct_template_circuit_multiand*]** %ands, align 8
  %array_getter114 = getelementptr inbounds [256 x %struct_template_circuit_multiand*], [256 x %struct_template_circuit_multiand*]* %ands113, i128 0, i128 1
  %ands115 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %array_getter114, align 8
  %ptr_cast116 = bitcast %struct_template_circuit_multiand* %ands115 to %struct_template_circuit_multiand*
  %struct_getter117 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %ptr_cast116, i32 0, i32 2
  %multiand.out.read_output_inner118 = load i128, i128* %struct_getter117, align 4
  %and2119 = load %struct_template_circuit_and*, %struct_template_circuit_and** %and2, align 8
  %struct_getter120 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %and2119, i32 0, i32 1
  %and.b.read_input_outter121 = load i128, i128* %struct_getter120, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.b.read_input_outter121, i128 %multiand.out.read_output_inner118, i1* @constraint.18)
  %ptr_getter122 = load %struct_template_circuit_and*, %struct_template_circuit_and** %and2, align 8
  %and.b.write_input_outter123 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ptr_getter122, i32 0, i32 1
  store i128 %multiand.out.read_output_inner118, i128* %and.b.write_input_outter123, align 4
  %and2124 = load %struct_template_circuit_and*, %struct_template_circuit_and** %and2, align 8
  %struct_getter125 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %and2124, i32 0, i32 2
  %and.out.read_output_outter126 = load i128, i128* %struct_getter125, align 4
  %out127 = load i128, i128* %multiand.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out127, i128 %and.out.read_output_outter126, i1* @constraint.19)
  %ptr_getter128 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %MultiAND, align 8
  %multiand.out.write_output_inner129 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %ptr_getter128, i32 0, i32 2
  store i128 %and.out.read_output_outter126, i128* %multiand.out.write_output_inner129, align 4
  %MultiAND130 = load %struct_template_circuit_multiand*, %struct_template_circuit_multiand** %MultiAND, align 8
  %struct_getter131 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %MultiAND130, i32 0, i32 2
  %multiand.out.read_output_inner132 = load i128, i128* %struct_getter131, align 4
  store i128 %multiand.out.read_output_inner132, i128* %multiand.out.declare_output, align 4
  br label %if.exit

if.exit:                                          ; preds = %loop.exit101, %if.true10
  br label %if.exit133

if.exit133:                                       ; preds = %if.exit, %if.true
  br label %exit

exit:                                             ; preds = %if.exit133
  %out134 = load i128, i128* %multiand.out.declare_output, align 4
  %multiand.out.write_output_inner135 = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %0, i32 0, i32 2
  store i128 %out134, i128* %multiand.out.write_output_inner135, align 4
  ret void
}

define %struct_template_circuit_multiand* @fn_template_build_multiand(i128 %0) {
entry:
  %struct_template_circuit_multiand = alloca %struct_template_circuit_multiand, align 8
  %multiand.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_multiand, %struct_template_circuit_multiand* %struct_template_circuit_multiand, i32 0, i32 0
  store i128 %0, i128* %multiand.n.write_arg_inner, align 4
  ret %struct_template_circuit_multiand* %struct_template_circuit_multiand
}

define void @fn_template_init_num2bitsneg(%struct_template_circuit_num2bitsneg* %0) {
entry:
  %Num2BitsNeg = alloca %struct_template_circuit_num2bitsneg*, align 8
  store %struct_template_circuit_num2bitsneg* %0, %struct_template_circuit_num2bitsneg** %Num2BitsNeg, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_num2bitsneg, %struct_template_circuit_num2bitsneg* %0, i32 0, i32 0
  %num2bitsneg.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %num2bitsneg.n.declare_arg = alloca i128, align 8
  store i128 %num2bitsneg.n.read_arg_inner, i128* %num2bitsneg.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_num2bitsneg, %struct_template_circuit_num2bitsneg* %0, i32 0, i32 1
  %num2bitsneg.in.read_input_inner = load i128, i128* %struct_getter1, align 4
  %num2bitsneg.in.declare_input = alloca i128, align 8
  store i128 %num2bitsneg.in.read_input_inner, i128* %num2bitsneg.in.declare_input, align 4
  %isZero = alloca %struct_template_circuit_iszero*, align 8
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %num2bitsneg.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %num2bitsneg.out.declare_output, align 8
  %neg = alloca i128, align 8
  %neg3 = call i128 @fn_intrinsic_inline_init()
  store i128 %neg3, i128* %neg, align 4
  %lc1 = alloca i128, align 8
  %lc14 = call i128 @fn_intrinsic_inline_init()
  store i128 %lc14, i128* %lc1, align 4
  store i128 0, i128* %lc1, align 4
  %call = call %struct_template_circuit_iszero* @fn_template_build_iszero()
  store %struct_template_circuit_iszero* %call, %struct_template_circuit_iszero** %isZero, align 8
  %n = load i128, i128* %num2bitsneg.n.declare_arg, align 4
  %eq = icmp eq i128 %n, 0
  %n5 = load i128, i128* %num2bitsneg.n.declare_arg, align 4
  %pow = call i128 @fn_intrinsic_inline_powi(i128 2, i128 %n5)
  %in = load i128, i128* %num2bitsneg.in.declare_input, align 4
  %sub = sub i128 %pow, %in
  %inline_switch = call i128 @fn_intrinsic_inline_switch(i1 %eq, i128 0, i128 %sub)
  store i128 %inline_switch, i128* %neg, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %neg6 = load i128, i128* %neg, align 4
  %i7 = load i128, i128* %i, align 4
  %rshift = lshr i128 %neg6, %i7
  %and = and i128 %rshift, 1
  %ptr_getter = load [256 x i128]*, [256 x i128]** %num2bitsneg.out.declare_output, align 8
  %i8 = load i128, i128* %i, align 4
  %out9 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i8
  store i128 %and, i128* %out9, align 4
  %out10 = load [256 x i128]*, [256 x i128]** %num2bitsneg.out.declare_output, align 8
  %i11 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %out10, i128 0, i128 %i11
  %out12 = load i128, i128* %array_getter, align 4
  %out13 = load [256 x i128]*, [256 x i128]** %num2bitsneg.out.declare_output, align 8
  %i14 = load i128, i128* %i, align 4
  %array_getter15 = getelementptr inbounds [256 x i128], [256 x i128]* %out13, i128 0, i128 %i14
  %out16 = load i128, i128* %array_getter15, align 4
  %sub17 = sub i128 %out16, 1
  %mul = mul i128 %out12, %sub17
  call void @fn_intrinsic_add_constraint(i128 %mul, i128 0, i1* @constraint.20)
  %lc118 = load i128, i128* %lc1, align 4
  %out19 = load [256 x i128]*, [256 x i128]** %num2bitsneg.out.declare_output, align 8
  %i20 = load i128, i128* %i, align 4
  %array_getter21 = getelementptr inbounds [256 x i128], [256 x i128]* %out19, i128 0, i128 %i20
  %out22 = load i128, i128* %array_getter21, align 4
  %i23 = load i128, i128* %i, align 4
  %pow24 = call i128 @fn_intrinsic_inline_powi(i128 2, i128 %i23)
  %mul25 = mul i128 %out22, %pow24
  %add = add i128 %lc118, %mul25
  store i128 %add, i128* %lc1, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i26 = load i128, i128* %i, align 4
  %add27 = add i128 %i26, 1
  store i128 %add27, i128* %i, align 4
  %i28 = load i128, i128* %i, align 4
  %n29 = load i128, i128* %num2bitsneg.n.declare_arg, align 4
  %slt = icmp slt i128 %i28, %n29
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %in30 = load i128, i128* %num2bitsneg.in.declare_input, align 4
  %isZero31 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %isZero, align 8
  %struct_getter32 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isZero31, i32 0, i32 0
  %iszero.in.read_input_outter = load i128, i128* %struct_getter32, align 4
  call void @fn_intrinsic_add_constraint(i128 %iszero.in.read_input_outter, i128 %in30, i1* @constraint.21)
  %ptr_getter33 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %isZero, align 8
  %iszero.in.write_input_outter = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %ptr_getter33, i32 0, i32 0
  store i128 %in30, i128* %iszero.in.write_input_outter, align 4
  %lc134 = load i128, i128* %lc1, align 4
  %isZero35 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %isZero, align 8
  %struct_getter36 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isZero35, i32 0, i32 2
  %iszero.out.read_output_outter = load i128, i128* %struct_getter36, align 4
  %n37 = load i128, i128* %num2bitsneg.n.declare_arg, align 4
  %pow38 = call i128 @fn_intrinsic_inline_powi(i128 2, i128 %n37)
  %mul39 = mul i128 %iszero.out.read_output_outter, %pow38
  %add40 = add i128 %lc134, %mul39
  %n41 = load i128, i128* %num2bitsneg.n.declare_arg, align 4
  %pow42 = call i128 @fn_intrinsic_inline_powi(i128 2, i128 %n41)
  %in43 = load i128, i128* %num2bitsneg.in.declare_input, align 4
  %sub44 = sub i128 %pow42, %in43
  call void @fn_intrinsic_add_constraint(i128 %add40, i128 %sub44, i1* @constraint.22)
  br label %exit

exit:                                             ; preds = %loop.exit
  %out45 = load [256 x i128]*, [256 x i128]** %num2bitsneg.out.declare_output, align 8
  %num2bitsneg.out.write_output_inner = getelementptr inbounds %struct_template_circuit_num2bitsneg, %struct_template_circuit_num2bitsneg* %0, i32 0, i32 2
  store [256 x i128]* %out45, [256 x i128]** %num2bitsneg.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_num2bitsneg* @fn_template_build_num2bitsneg(i128 %0) {
entry:
  %struct_template_circuit_num2bitsneg = alloca %struct_template_circuit_num2bitsneg, align 8
  %num2bitsneg.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_num2bitsneg, %struct_template_circuit_num2bitsneg* %struct_template_circuit_num2bitsneg, i32 0, i32 0
  store i128 %0, i128* %num2bitsneg.n.write_arg_inner, align 4
  ret %struct_template_circuit_num2bitsneg* %struct_template_circuit_num2bitsneg
}

define void @fn_template_init_or(%struct_template_circuit_or* %0) {
entry:
  %OR = alloca %struct_template_circuit_or*, align 8
  store %struct_template_circuit_or* %0, %struct_template_circuit_or** %OR, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %0, i32 0, i32 0
  %or.a.read_input_inner = load i128, i128* %struct_getter, align 4
  %or.a.declare_input = alloca i128, align 8
  store i128 %or.a.read_input_inner, i128* %or.a.declare_input, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %0, i32 0, i32 1
  %or.b.read_input_inner = load i128, i128* %struct_getter1, align 4
  %or.b.declare_input = alloca i128, align 8
  store i128 %or.b.read_input_inner, i128* %or.b.declare_input, align 4
  %or.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %or.out.declare_output, align 4
  %a = load i128, i128* %or.a.declare_input, align 4
  %b = load i128, i128* %or.b.declare_input, align 4
  %add = add i128 %a, %b
  %a2 = load i128, i128* %or.a.declare_input, align 4
  %b3 = load i128, i128* %or.b.declare_input, align 4
  %mul = mul i128 %a2, %b3
  %sub = sub i128 %add, %mul
  %out4 = load i128, i128* %or.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out4, i128 %sub, i1* @constraint.23)
  %ptr_getter = load %struct_template_circuit_or*, %struct_template_circuit_or** %OR, align 8
  %or.out.write_output_inner = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ptr_getter, i32 0, i32 2
  store i128 %sub, i128* %or.out.write_output_inner, align 4
  %OR5 = load %struct_template_circuit_or*, %struct_template_circuit_or** %OR, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %OR5, i32 0, i32 2
  %or.out.read_output_inner = load i128, i128* %struct_getter6, align 4
  store i128 %or.out.read_output_inner, i128* %or.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out7 = load i128, i128* %or.out.declare_output, align 4
  %or.out.write_output_inner8 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %0, i32 0, i32 2
  store i128 %out7, i128* %or.out.write_output_inner8, align 4
  ret void
}

define %struct_template_circuit_or* @fn_template_build_or() {
entry:
  %struct_template_circuit_or = alloca %struct_template_circuit_or, align 8
  ret %struct_template_circuit_or* %struct_template_circuit_or
}

define i128 @log_ceil(i128 %0) {
entry:
  %log_ceil.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %log_ceil.n.declare_arg, align 4
  %n_temp = alloca i128, align 8
  %n_temp1 = call i128 @fn_intrinsic_inline_init()
  store i128 %n_temp1, i128* %n_temp, align 4
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %n = load i128, i128* %log_ceil.n.declare_arg, align 4
  store i128 %n, i128* %n_temp, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %n_temp3 = load i128, i128* %n_temp, align 4
  %eq = icmp eq i128 %n_temp3, 0
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  %i4 = load i128, i128* %i, align 4
  ret i128 %i4

if.false:                                         ; preds = %loop.body
  br label %if.exit

if.exit:                                          ; preds = %if.false
  %n_temp5 = load i128, i128* %n_temp, align 4
  %sdiv = sdiv i128 %n_temp5, 2
  store i128 %sdiv, i128* %n_temp, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %i6 = load i128, i128* %i, align 4
  %add = add i128 %i6, 1
  store i128 %add, i128* %i, align 4
  %i7 = load i128, i128* %i, align 4
  %slt = icmp slt i128 %i7, 254
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  ret i128 254
}

define i128 @is_equal_Fp2(i128 %0, i128 %1, [256 x [256 x i128]]* %2, [256 x [256 x i128]]* %3) {
entry:
  %is_equal_fp2.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %is_equal_fp2.n.declare_arg, align 4
  %is_equal_fp2.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %is_equal_fp2.k.declare_arg, align 4
  %is_equal_fp2.a.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %2, [256 x [256 x i128]]** %is_equal_fp2.a.declare_arg, align 8
  %is_equal_fp2.b.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %3, [256 x [256 x i128]]** %is_equal_fp2.b.declare_arg, align 8
  %idx = alloca i128, align 8
  %idx1 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx1, i128* %idx, align 4
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch13, %entry
  store i128 0, i128* %idx, align 4
  br label %loop.body3

loop.body3:                                       ; preds = %loop.latch, %loop.body
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %is_equal_fp2.a.declare_arg, align 8
  %i4 = load i128, i128* %i, align 4
  %idx5 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i4, i128 %idx5
  %a6 = load i128, i128* %array_getter, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %is_equal_fp2.b.declare_arg, align 8
  %i7 = load i128, i128* %i, align 4
  %idx8 = load i128, i128* %idx, align 4
  %array_getter9 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %i7, i128 %idx8
  %b10 = load i128, i128* %array_getter9, align 4
  %ne = icmp ne i128 %a6, %b10
  br i1 %ne, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body3
  ret i128 0

if.false:                                         ; preds = %loop.body3
  br label %if.exit

if.exit:                                          ; preds = %if.false
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %idx11 = load i128, i128* %idx, align 4
  %add = add i128 %idx11, 1
  store i128 %add, i128* %idx, align 4
  %idx12 = load i128, i128* %idx, align 4
  %k = load i128, i128* %is_equal_fp2.k.declare_arg, align 4
  %slt = icmp slt i128 %idx12, %k
  br i1 %slt, label %loop.body3, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch13

loop.latch13:                                     ; preds = %loop.exit
  %i14 = load i128, i128* %i, align 4
  %add15 = add i128 %i14, 1
  store i128 %add15, i128* %i, align 4
  %i16 = load i128, i128* %i, align 4
  %slt17 = icmp slt i128 %i16, 2
  br i1 %slt17, label %loop.body, label %loop.exit18

loop.exit18:                                      ; preds = %loop.latch13
  ret i128 1
}

define void @fn_template_init_bits2num(%struct_template_circuit_bits2num* %0) {
entry:
  %Bits2Num = alloca %struct_template_circuit_bits2num*, align 8
  store %struct_template_circuit_bits2num* %0, %struct_template_circuit_bits2num** %Bits2Num, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %0, i32 0, i32 0
  %bits2num.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bits2num.n.declare_arg = alloca i128, align 8
  store i128 %bits2num.n.read_arg_inner, i128* %bits2num.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %0, i32 0, i32 1
  %bits2num.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter1, align 8
  %bits2num.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bits2num.in.read_input_inner, [256 x i128]** %bits2num.in.declare_input, align 8
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %e2 = alloca i128, align 8
  %e23 = call i128 @fn_intrinsic_inline_init()
  store i128 %e23, i128* %e2, align 4
  %bits2num.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %bits2num.out.declare_output, align 4
  %lc1 = alloca i128, align 8
  %lc14 = call i128 @fn_intrinsic_inline_init()
  store i128 %lc14, i128* %lc1, align 4
  store i128 0, i128* %lc1, align 4
  store i128 1, i128* %e2, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %lc15 = load i128, i128* %lc1, align 4
  %in = load [256 x i128]*, [256 x i128]** %bits2num.in.declare_input, align 8
  %i6 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %i6
  %in7 = load i128, i128* %array_getter, align 4
  %e28 = load i128, i128* %e2, align 4
  %mul = mul i128 %in7, %e28
  %add = add i128 %lc15, %mul
  store i128 %add, i128* %lc1, align 4
  %e29 = load i128, i128* %e2, align 4
  %e210 = load i128, i128* %e2, align 4
  %add11 = add i128 %e29, %e210
  store i128 %add11, i128* %e2, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i12 = load i128, i128* %i, align 4
  %add13 = add i128 %i12, 1
  store i128 %add13, i128* %i, align 4
  %i14 = load i128, i128* %i, align 4
  %n = load i128, i128* %bits2num.n.declare_arg, align 4
  %slt = icmp slt i128 %i14, %n
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %lc115 = load i128, i128* %lc1, align 4
  %out16 = load i128, i128* %bits2num.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out16, i128 %lc115, i1* @constraint.24)
  %ptr_getter = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %Bits2Num, align 8
  %bits2num.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %ptr_getter, i32 0, i32 2
  store i128 %lc115, i128* %bits2num.out.write_output_inner, align 4
  %Bits2Num17 = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %Bits2Num, align 8
  %struct_getter18 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %Bits2Num17, i32 0, i32 2
  %bits2num.out.read_output_inner = load i128, i128* %struct_getter18, align 4
  store i128 %bits2num.out.read_output_inner, i128* %bits2num.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit
  %out19 = load i128, i128* %bits2num.out.declare_output, align 4
  %bits2num.out.write_output_inner20 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %0, i32 0, i32 2
  store i128 %out19, i128* %bits2num.out.write_output_inner20, align 4
  ret void
}

define %struct_template_circuit_bits2num* @fn_template_build_bits2num(i128 %0) {
entry:
  %struct_template_circuit_bits2num = alloca %struct_template_circuit_bits2num, align 8
  %bits2num.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %struct_template_circuit_bits2num, i32 0, i32 0
  store i128 %0, i128* %bits2num.n.write_arg_inner, align 4
  ret %struct_template_circuit_bits2num* %struct_template_circuit_bits2num
}

define void @fn_template_init_bigmultshortlong(%struct_template_circuit_bigmultshortlong* %0) {
entry:
  %BigMultShortLong = alloca %struct_template_circuit_bigmultshortlong*, align 8
  store %struct_template_circuit_bigmultshortlong* %0, %struct_template_circuit_bigmultshortlong** %BigMultShortLong, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %0, i32 0, i32 0
  %bigmultshortlong.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigmultshortlong.n.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong.n.read_arg_inner, i128* %bigmultshortlong.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %0, i32 0, i32 1
  %bigmultshortlong.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigmultshortlong.k.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong.k.read_arg_inner, i128* %bigmultshortlong.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %0, i32 0, i32 2
  %bigmultshortlong.m_out.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %bigmultshortlong.m_out.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong.m_out.read_arg_inner, i128* %bigmultshortlong.m_out.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %0, i32 0, i32 3
  %bigmultshortlong.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %bigmultshortlong.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmultshortlong.a.read_input_inner, [256 x i128]** %bigmultshortlong.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %0, i32 0, i32 4
  %bigmultshortlong.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %bigmultshortlong.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmultshortlong.b.read_input_inner, [256 x i128]** %bigmultshortlong.b.declare_input, align 8
  %b_poly = alloca [256 x i128]*, align 8
  %b_poly5 = alloca [256 x i128], align 8
  store [256 x i128]* %b_poly5, [256 x i128]** %b_poly, align 8
  %k2 = alloca i128, align 8
  %k26 = call i128 @fn_intrinsic_inline_init()
  store i128 %k26, i128* %k2, align 4
  %pow = alloca [256 x [256 x i128]]*, align 8
  %pow7 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %pow7, [256 x [256 x i128]]** %pow, align 8
  %prod_val = alloca [256 x i128]*, align 8
  %prod_val8 = alloca [256 x i128], align 8
  store [256 x i128]* %prod_val8, [256 x i128]** %prod_val, align 8
  %a_idx = alloca i128, align 8
  %a_idx9 = call i128 @fn_intrinsic_inline_init()
  store i128 %a_idx9, i128* %a_idx, align 4
  %j = alloca i128, align 8
  %j10 = call i128 @fn_intrinsic_inline_init()
  store i128 %j10, i128* %j, align 4
  %out_poly = alloca [256 x i128]*, align 8
  %out_poly11 = alloca [256 x i128], align 8
  store [256 x i128]* %out_poly11, [256 x i128]** %out_poly, align 8
  %a_poly = alloca [256 x i128]*, align 8
  %a_poly12 = alloca [256 x i128], align 8
  store [256 x i128]* %a_poly12, [256 x i128]** %a_poly, align 8
  %bigmultshortlong.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %bigmultshortlong.out.declare_output, align 8
  %i = alloca i128, align 8
  %i13 = call i128 @fn_intrinsic_inline_init()
  store i128 %i13, i128* %i, align 4
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %prod_val, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch73, %entry
  %ptr_getter = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i14 = load i128, i128* %i, align 4
  %prod_val15 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i14
  store i128 0, i128* %prod_val15, align 4
  %i16 = load i128, i128* %i, align 4
  %k = load i128, i128* %bigmultshortlong.k.declare_arg, align 4
  %slt = icmp slt i128 %i16, %k
  br i1 %slt, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  store i128 0, i128* %a_idx, align 4
  br label %loop.body17

if.false:                                         ; preds = %loop.body
  %i35 = load i128, i128* %i, align 4
  %k36 = load i128, i128* %bigmultshortlong.k.declare_arg, align 4
  %sub37 = sub i128 %i35, %k36
  %add38 = add i128 %sub37, 1
  store i128 %add38, i128* %a_idx, align 4
  br label %loop.body39

loop.body17:                                      ; preds = %loop.latch, %if.true
  %prod_val18 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i19 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %prod_val18, i128 0, i128 %i19
  %prod_val20 = load i128, i128* %array_getter, align 4
  %a = load [256 x i128]*, [256 x i128]** %bigmultshortlong.a.declare_input, align 8
  %a_idx21 = load i128, i128* %a_idx, align 4
  %array_getter22 = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %a_idx21
  %a23 = load i128, i128* %array_getter22, align 4
  %b = load [256 x i128]*, [256 x i128]** %bigmultshortlong.b.declare_input, align 8
  %i24 = load i128, i128* %i, align 4
  %a_idx25 = load i128, i128* %a_idx, align 4
  %sub = sub i128 %i24, %a_idx25
  %array_getter26 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %sub
  %b27 = load i128, i128* %array_getter26, align 4
  %mul = mul i128 %a23, %b27
  %add = add i128 %prod_val20, %mul
  %ptr_getter28 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i29 = load i128, i128* %i, align 4
  %prod_val30 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter28, i128 0, i128 %i29
  store i128 %add, i128* %prod_val30, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body17
  %a_idx31 = load i128, i128* %a_idx, align 4
  %add32 = add i128 %a_idx31, 1
  store i128 %add32, i128* %a_idx, align 4
  %a_idx33 = load i128, i128* %a_idx, align 4
  %i34 = load i128, i128* %i, align 4
  %sle = icmp sle i128 %a_idx33, %i34
  br i1 %sle, label %loop.body17, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %if.exit

loop.body39:                                      ; preds = %loop.latch59, %if.false
  %prod_val40 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i41 = load i128, i128* %i, align 4
  %array_getter42 = getelementptr inbounds [256 x i128], [256 x i128]* %prod_val40, i128 0, i128 %i41
  %prod_val43 = load i128, i128* %array_getter42, align 4
  %a44 = load [256 x i128]*, [256 x i128]** %bigmultshortlong.a.declare_input, align 8
  %a_idx45 = load i128, i128* %a_idx, align 4
  %array_getter46 = getelementptr inbounds [256 x i128], [256 x i128]* %a44, i128 0, i128 %a_idx45
  %a47 = load i128, i128* %array_getter46, align 4
  %b48 = load [256 x i128]*, [256 x i128]** %bigmultshortlong.b.declare_input, align 8
  %i49 = load i128, i128* %i, align 4
  %a_idx50 = load i128, i128* %a_idx, align 4
  %sub51 = sub i128 %i49, %a_idx50
  %array_getter52 = getelementptr inbounds [256 x i128], [256 x i128]* %b48, i128 0, i128 %sub51
  %b53 = load i128, i128* %array_getter52, align 4
  %mul54 = mul i128 %a47, %b53
  %add55 = add i128 %prod_val43, %mul54
  %ptr_getter56 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i57 = load i128, i128* %i, align 4
  %prod_val58 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter56, i128 0, i128 %i57
  store i128 %add55, i128* %prod_val58, align 4
  br label %loop.latch59

loop.latch59:                                     ; preds = %loop.body39
  %a_idx60 = load i128, i128* %a_idx, align 4
  %add61 = add i128 %a_idx60, 1
  store i128 %add61, i128* %a_idx, align 4
  %a_idx62 = load i128, i128* %a_idx, align 4
  %k63 = load i128, i128* %bigmultshortlong.k.declare_arg, align 4
  %slt64 = icmp slt i128 %a_idx62, %k63
  br i1 %slt64, label %loop.body39, label %loop.exit65

loop.exit65:                                      ; preds = %loop.latch59
  br label %if.exit

if.exit:                                          ; preds = %loop.exit65, %loop.exit
  %prod_val66 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i67 = load i128, i128* %i, align 4
  %array_getter68 = getelementptr inbounds [256 x i128], [256 x i128]* %prod_val66, i128 0, i128 %i67
  %prod_val69 = load i128, i128* %array_getter68, align 4
  %ptr_getter70 = load [256 x i128]*, [256 x i128]** %bigmultshortlong.out.declare_output, align 8
  %i71 = load i128, i128* %i, align 4
  %out72 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter70, i128 0, i128 %i71
  store i128 %prod_val69, i128* %out72, align 4
  br label %loop.latch73

loop.latch73:                                     ; preds = %if.exit
  %i74 = load i128, i128* %i, align 4
  %add75 = add i128 %i74, 1
  store i128 %add75, i128* %i, align 4
  %i76 = load i128, i128* %i, align 4
  %k77 = load i128, i128* %bigmultshortlong.k.declare_arg, align 4
  %mul78 = mul i128 2, %k77
  %sub79 = sub i128 %mul78, 1
  %slt80 = icmp slt i128 %i76, %sub79
  br i1 %slt80, label %loop.body, label %loop.exit81

loop.exit81:                                      ; preds = %loop.latch73
  %k82 = load i128, i128* %bigmultshortlong.k.declare_arg, align 4
  %mul83 = mul i128 2, %k82
  %sub84 = sub i128 %mul83, 1
  store i128 %sub84, i128* %k2, align 4
  %uniform_array85 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array85, [256 x [256 x i128]]** %pow, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body86

loop.body86:                                      ; preds = %loop.latch102, %loop.exit81
  store i128 0, i128* %j, align 4
  br label %loop.body87

loop.body87:                                      ; preds = %loop.latch95, %loop.body86
  %i88 = load i128, i128* %i, align 4
  %j89 = load i128, i128* %j, align 4
  %pow90 = call i128 @fn_intrinsic_inline_powi(i128 %i88, i128 %j89)
  %ptr_getter91 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i92 = load i128, i128* %i, align 4
  %j93 = load i128, i128* %j, align 4
  %pow94 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter91, i128 0, i128 %i92, i128 %j93
  store i128 %pow90, i128* %pow94, align 4
  br label %loop.latch95

loop.latch95:                                     ; preds = %loop.body87
  %j96 = load i128, i128* %j, align 4
  %add97 = add i128 %j96, 1
  store i128 %add97, i128* %j, align 4
  %j98 = load i128, i128* %j, align 4
  %k299 = load i128, i128* %k2, align 4
  %slt100 = icmp slt i128 %j98, %k299
  br i1 %slt100, label %loop.body87, label %loop.exit101

loop.exit101:                                     ; preds = %loop.latch95
  br label %loop.latch102

loop.latch102:                                    ; preds = %loop.exit101
  %i103 = load i128, i128* %i, align 4
  %add104 = add i128 %i103, 1
  store i128 %add104, i128* %i, align 4
  %i105 = load i128, i128* %i, align 4
  %k2106 = load i128, i128* %k2, align 4
  %slt107 = icmp slt i128 %i105, %k2106
  br i1 %slt107, label %loop.body86, label %loop.exit108

loop.exit108:                                     ; preds = %loop.latch102
  %uniform_array109 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array109, [256 x i128]** %a_poly, align 8
  %uniform_array110 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array110, [256 x i128]** %b_poly, align 8
  %uniform_array111 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array111, [256 x i128]** %out_poly, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body112

loop.body112:                                     ; preds = %loop.latch194, %loop.exit108
  %ptr_getter113 = load [256 x i128]*, [256 x i128]** %out_poly, align 8
  %i114 = load i128, i128* %i, align 4
  %out_poly115 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter113, i128 0, i128 %i114
  store i128 0, i128* %out_poly115, align 4
  %ptr_getter116 = load [256 x i128]*, [256 x i128]** %a_poly, align 8
  %i117 = load i128, i128* %i, align 4
  %a_poly118 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter116, i128 0, i128 %i117
  store i128 0, i128* %a_poly118, align 4
  %ptr_getter119 = load [256 x i128]*, [256 x i128]** %b_poly, align 8
  %i120 = load i128, i128* %i, align 4
  %b_poly121 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter119, i128 0, i128 %i120
  store i128 0, i128* %b_poly121, align 4
  store i128 0, i128* %j, align 4
  br label %loop.body122

loop.body122:                                     ; preds = %loop.latch141, %loop.body112
  %out_poly123 = load [256 x i128]*, [256 x i128]** %out_poly, align 8
  %i124 = load i128, i128* %i, align 4
  %array_getter125 = getelementptr inbounds [256 x i128], [256 x i128]* %out_poly123, i128 0, i128 %i124
  %out_poly126 = load i128, i128* %array_getter125, align 4
  %out127 = load [256 x i128]*, [256 x i128]** %bigmultshortlong.out.declare_output, align 8
  %j128 = load i128, i128* %j, align 4
  %array_getter129 = getelementptr inbounds [256 x i128], [256 x i128]* %out127, i128 0, i128 %j128
  %out130 = load i128, i128* %array_getter129, align 4
  %pow131 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i132 = load i128, i128* %i, align 4
  %j133 = load i128, i128* %j, align 4
  %array_getter134 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow131, i128 0, i128 %i132, i128 %j133
  %pow135 = load i128, i128* %array_getter134, align 4
  %mul136 = mul i128 %out130, %pow135
  %add137 = add i128 %out_poly126, %mul136
  %ptr_getter138 = load [256 x i128]*, [256 x i128]** %out_poly, align 8
  %i139 = load i128, i128* %i, align 4
  %out_poly140 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter138, i128 0, i128 %i139
  store i128 %add137, i128* %out_poly140, align 4
  br label %loop.latch141

loop.latch141:                                    ; preds = %loop.body122
  %j142 = load i128, i128* %j, align 4
  %add143 = add i128 %j142, 1
  store i128 %add143, i128* %j, align 4
  %j144 = load i128, i128* %j, align 4
  %k145 = load i128, i128* %bigmultshortlong.k.declare_arg, align 4
  %mul146 = mul i128 2, %k145
  %sub147 = sub i128 %mul146, 1
  %slt148 = icmp slt i128 %j144, %sub147
  br i1 %slt148, label %loop.body122, label %loop.exit149

loop.exit149:                                     ; preds = %loop.latch141
  store i128 0, i128* %j, align 4
  br label %loop.body150

loop.body150:                                     ; preds = %loop.latch187, %loop.exit149
  %a_poly151 = load [256 x i128]*, [256 x i128]** %a_poly, align 8
  %i152 = load i128, i128* %i, align 4
  %array_getter153 = getelementptr inbounds [256 x i128], [256 x i128]* %a_poly151, i128 0, i128 %i152
  %a_poly154 = load i128, i128* %array_getter153, align 4
  %a155 = load [256 x i128]*, [256 x i128]** %bigmultshortlong.a.declare_input, align 8
  %j156 = load i128, i128* %j, align 4
  %array_getter157 = getelementptr inbounds [256 x i128], [256 x i128]* %a155, i128 0, i128 %j156
  %a158 = load i128, i128* %array_getter157, align 4
  %pow159 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i160 = load i128, i128* %i, align 4
  %j161 = load i128, i128* %j, align 4
  %array_getter162 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow159, i128 0, i128 %i160, i128 %j161
  %pow163 = load i128, i128* %array_getter162, align 4
  %mul164 = mul i128 %a158, %pow163
  %add165 = add i128 %a_poly154, %mul164
  %ptr_getter166 = load [256 x i128]*, [256 x i128]** %a_poly, align 8
  %i167 = load i128, i128* %i, align 4
  %a_poly168 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter166, i128 0, i128 %i167
  store i128 %add165, i128* %a_poly168, align 4
  %b_poly169 = load [256 x i128]*, [256 x i128]** %b_poly, align 8
  %i170 = load i128, i128* %i, align 4
  %array_getter171 = getelementptr inbounds [256 x i128], [256 x i128]* %b_poly169, i128 0, i128 %i170
  %b_poly172 = load i128, i128* %array_getter171, align 4
  %b173 = load [256 x i128]*, [256 x i128]** %bigmultshortlong.b.declare_input, align 8
  %j174 = load i128, i128* %j, align 4
  %array_getter175 = getelementptr inbounds [256 x i128], [256 x i128]* %b173, i128 0, i128 %j174
  %b176 = load i128, i128* %array_getter175, align 4
  %pow177 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i178 = load i128, i128* %i, align 4
  %j179 = load i128, i128* %j, align 4
  %array_getter180 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow177, i128 0, i128 %i178, i128 %j179
  %pow181 = load i128, i128* %array_getter180, align 4
  %mul182 = mul i128 %b176, %pow181
  %add183 = add i128 %b_poly172, %mul182
  %ptr_getter184 = load [256 x i128]*, [256 x i128]** %b_poly, align 8
  %i185 = load i128, i128* %i, align 4
  %b_poly186 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter184, i128 0, i128 %i185
  store i128 %add183, i128* %b_poly186, align 4
  br label %loop.latch187

loop.latch187:                                    ; preds = %loop.body150
  %j188 = load i128, i128* %j, align 4
  %add189 = add i128 %j188, 1
  store i128 %add189, i128* %j, align 4
  %j190 = load i128, i128* %j, align 4
  %k191 = load i128, i128* %bigmultshortlong.k.declare_arg, align 4
  %slt192 = icmp slt i128 %j190, %k191
  br i1 %slt192, label %loop.body150, label %loop.exit193

loop.exit193:                                     ; preds = %loop.latch187
  br label %loop.latch194

loop.latch194:                                    ; preds = %loop.exit193
  %i195 = load i128, i128* %i, align 4
  %add196 = add i128 %i195, 1
  store i128 %add196, i128* %i, align 4
  %i197 = load i128, i128* %i, align 4
  %k198 = load i128, i128* %bigmultshortlong.k.declare_arg, align 4
  %mul199 = mul i128 2, %k198
  %sub200 = sub i128 %mul199, 1
  %slt201 = icmp slt i128 %i197, %sub200
  br i1 %slt201, label %loop.body112, label %loop.exit202

loop.exit202:                                     ; preds = %loop.latch194
  store i128 0, i128* %i, align 4
  br label %loop.body203

loop.body203:                                     ; preds = %loop.latch217, %loop.exit202
  %out_poly204 = load [256 x i128]*, [256 x i128]** %out_poly, align 8
  %i205 = load i128, i128* %i, align 4
  %array_getter206 = getelementptr inbounds [256 x i128], [256 x i128]* %out_poly204, i128 0, i128 %i205
  %out_poly207 = load i128, i128* %array_getter206, align 4
  %a_poly208 = load [256 x i128]*, [256 x i128]** %a_poly, align 8
  %i209 = load i128, i128* %i, align 4
  %array_getter210 = getelementptr inbounds [256 x i128], [256 x i128]* %a_poly208, i128 0, i128 %i209
  %a_poly211 = load i128, i128* %array_getter210, align 4
  %b_poly212 = load [256 x i128]*, [256 x i128]** %b_poly, align 8
  %i213 = load i128, i128* %i, align 4
  %array_getter214 = getelementptr inbounds [256 x i128], [256 x i128]* %b_poly212, i128 0, i128 %i213
  %b_poly215 = load i128, i128* %array_getter214, align 4
  %mul216 = mul i128 %a_poly211, %b_poly215
  call void @fn_intrinsic_add_constraint(i128 %out_poly207, i128 %mul216, i1* @constraint.25)
  br label %loop.latch217

loop.latch217:                                    ; preds = %loop.body203
  %i218 = load i128, i128* %i, align 4
  %add219 = add i128 %i218, 1
  store i128 %add219, i128* %i, align 4
  %i220 = load i128, i128* %i, align 4
  %k221 = load i128, i128* %bigmultshortlong.k.declare_arg, align 4
  %mul222 = mul i128 2, %k221
  %sub223 = sub i128 %mul222, 1
  %slt224 = icmp slt i128 %i220, %sub223
  br i1 %slt224, label %loop.body203, label %loop.exit225

loop.exit225:                                     ; preds = %loop.latch217
  br label %exit

exit:                                             ; preds = %loop.exit225
  %out226 = load [256 x i128]*, [256 x i128]** %bigmultshortlong.out.declare_output, align 8
  %bigmultshortlong.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %0, i32 0, i32 5
  store [256 x i128]* %out226, [256 x i128]** %bigmultshortlong.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %0, i128 %1, i128 %2) {
entry:
  %struct_template_circuit_bigmultshortlong = alloca %struct_template_circuit_bigmultshortlong, align 8
  %bigmultshortlong.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %struct_template_circuit_bigmultshortlong, i32 0, i32 0
  store i128 %0, i128* %bigmultshortlong.n.write_arg_inner, align 4
  %bigmultshortlong.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %struct_template_circuit_bigmultshortlong, i32 0, i32 1
  store i128 %1, i128* %bigmultshortlong.k.write_arg_inner, align 4
  %bigmultshortlong.m_out.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %struct_template_circuit_bigmultshortlong, i32 0, i32 2
  store i128 %2, i128* %bigmultshortlong.m_out.write_arg_inner, align 4
  ret %struct_template_circuit_bigmultshortlong* %struct_template_circuit_bigmultshortlong
}

define void @fn_template_init_xor(%struct_template_circuit_xor* %0) {
entry:
  %XOR = alloca %struct_template_circuit_xor*, align 8
  store %struct_template_circuit_xor* %0, %struct_template_circuit_xor** %XOR, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_xor, %struct_template_circuit_xor* %0, i32 0, i32 0
  %xor.a.read_input_inner = load i128, i128* %struct_getter, align 4
  %xor.a.declare_input = alloca i128, align 8
  store i128 %xor.a.read_input_inner, i128* %xor.a.declare_input, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_xor, %struct_template_circuit_xor* %0, i32 0, i32 1
  %xor.b.read_input_inner = load i128, i128* %struct_getter1, align 4
  %xor.b.declare_input = alloca i128, align 8
  store i128 %xor.b.read_input_inner, i128* %xor.b.declare_input, align 4
  %xor.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %xor.out.declare_output, align 4
  %a = load i128, i128* %xor.a.declare_input, align 4
  %b = load i128, i128* %xor.b.declare_input, align 4
  %add = add i128 %a, %b
  %a2 = load i128, i128* %xor.a.declare_input, align 4
  %mul = mul i128 2, %a2
  %b3 = load i128, i128* %xor.b.declare_input, align 4
  %mul4 = mul i128 %mul, %b3
  %sub = sub i128 %add, %mul4
  %out5 = load i128, i128* %xor.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out5, i128 %sub, i1* @constraint.26)
  %ptr_getter = load %struct_template_circuit_xor*, %struct_template_circuit_xor** %XOR, align 8
  %xor.out.write_output_inner = getelementptr inbounds %struct_template_circuit_xor, %struct_template_circuit_xor* %ptr_getter, i32 0, i32 2
  store i128 %sub, i128* %xor.out.write_output_inner, align 4
  %XOR6 = load %struct_template_circuit_xor*, %struct_template_circuit_xor** %XOR, align 8
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_xor, %struct_template_circuit_xor* %XOR6, i32 0, i32 2
  %xor.out.read_output_inner = load i128, i128* %struct_getter7, align 4
  store i128 %xor.out.read_output_inner, i128* %xor.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out8 = load i128, i128* %xor.out.declare_output, align 4
  %xor.out.write_output_inner9 = getelementptr inbounds %struct_template_circuit_xor, %struct_template_circuit_xor* %0, i32 0, i32 2
  store i128 %out8, i128* %xor.out.write_output_inner9, align 4
  ret void
}

define %struct_template_circuit_xor* @fn_template_build_xor() {
entry:
  %struct_template_circuit_xor = alloca %struct_template_circuit_xor, align 8
  ret %struct_template_circuit_xor* %struct_template_circuit_xor
}

define [256 x i128]* @long_add_unequal(i128 %0, i128 %1, i128 %2, [256 x i128]* %3, [256 x i128]* %4) {
entry:
  %long_add_unequal.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_add_unequal.n.declare_arg, align 4
  %long_add_unequal.k1.declare_arg = alloca i128, align 8
  store i128 %1, i128* %long_add_unequal.k1.declare_arg, align 4
  %long_add_unequal.k2.declare_arg = alloca i128, align 8
  store i128 %2, i128* %long_add_unequal.k2.declare_arg, align 4
  %long_add_unequal.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %long_add_unequal.a.declare_arg, align 8
  %long_add_unequal.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %long_add_unequal.b.declare_arg, align 8
  %sumAndCarry = alloca [256 x i128]*, align 8
  %sumAndCarry1 = alloca [256 x i128], align 8
  store [256 x i128]* %sumAndCarry1, [256 x i128]** %sumAndCarry, align 8
  %sum = alloca [256 x i128]*, align 8
  %sum2 = alloca [256 x i128], align 8
  store [256 x i128]* %sum2, [256 x i128]** %sum, align 8
  %i = alloca i128, align 8
  %i3 = call i128 @fn_intrinsic_inline_init()
  store i128 %i3, i128* %i, align 4
  %carry = alloca i128, align 8
  %carry4 = call i128 @fn_intrinsic_inline_init()
  store i128 %carry4, i128* %carry, align 4
  store i128 0, i128* %carry, align 4
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %sum, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %i5 = load i128, i128* %i, align 4
  %k2 = load i128, i128* %long_add_unequal.k2.declare_arg, align 4
  %slt = icmp slt i128 %i5, %k2
  br i1 %slt, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  %a = load [256 x i128]*, [256 x i128]** %long_add_unequal.a.declare_arg, align 8
  %i6 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i6
  %a7 = load i128, i128* %array_getter, align 4
  %b = load [256 x i128]*, [256 x i128]** %long_add_unequal.b.declare_arg, align 8
  %i8 = load i128, i128* %i, align 4
  %array_getter9 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i8
  %b10 = load i128, i128* %array_getter9, align 4
  %add = add i128 %a7, %b10
  %carry11 = load i128, i128* %carry, align 4
  %add12 = add i128 %add, %carry11
  %n = load i128, i128* %long_add_unequal.n.declare_arg, align 4
  %n13 = load i128, i128* %long_add_unequal.n.declare_arg, align 4
  %call = call [2 x i128]* @SplitFn(i128 %add12, i128 %n, i128 %n13)
  %memcpy_ptr = getelementptr inbounds [256 x i128]*, [256 x i128]** %sumAndCarry, i128 0
  %5 = bitcast [256 x i128]** %memcpy_ptr to i8*
  %6 = bitcast [2 x i128]* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 ptrtoint ([2 x i128]* getelementptr ([2 x i128], [2 x i128]* null, i32 1) to i64), i1 false)
  %sumAndCarry14 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter15 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry14, i128 0, i128 0
  %sumAndCarry16 = load i128, i128* %array_getter15, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %sum, align 8
  %i17 = load i128, i128* %i, align 4
  %sum18 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i17
  store i128 %sumAndCarry16, i128* %sum18, align 4
  %sumAndCarry19 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter20 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry19, i128 0, i128 1
  %sumAndCarry21 = load i128, i128* %array_getter20, align 4
  store i128 %sumAndCarry21, i128* %carry, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body
  %a22 = load [256 x i128]*, [256 x i128]** %long_add_unequal.a.declare_arg, align 8
  %i23 = load i128, i128* %i, align 4
  %array_getter24 = getelementptr inbounds [256 x i128], [256 x i128]* %a22, i128 0, i128 %i23
  %a25 = load i128, i128* %array_getter24, align 4
  %carry26 = load i128, i128* %carry, align 4
  %add27 = add i128 %a25, %carry26
  %n28 = load i128, i128* %long_add_unequal.n.declare_arg, align 4
  %n29 = load i128, i128* %long_add_unequal.n.declare_arg, align 4
  %call30 = call [2 x i128]* @SplitFn(i128 %add27, i128 %n28, i128 %n29)
  %memcpy_ptr31 = getelementptr inbounds [256 x i128]*, [256 x i128]** %sumAndCarry, i128 0
  %7 = bitcast [256 x i128]** %memcpy_ptr31 to i8*
  %8 = bitcast [2 x i128]* %call30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 ptrtoint ([2 x i128]* getelementptr ([2 x i128], [2 x i128]* null, i32 1) to i64), i1 false)
  %sumAndCarry32 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter33 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry32, i128 0, i128 0
  %sumAndCarry34 = load i128, i128* %array_getter33, align 4
  %ptr_getter35 = load [256 x i128]*, [256 x i128]** %sum, align 8
  %i36 = load i128, i128* %i, align 4
  %sum37 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter35, i128 0, i128 %i36
  store i128 %sumAndCarry34, i128* %sum37, align 4
  %sumAndCarry38 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter39 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry38, i128 0, i128 1
  %sumAndCarry40 = load i128, i128* %array_getter39, align 4
  store i128 %sumAndCarry40, i128* %carry, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %i41 = load i128, i128* %i, align 4
  %add42 = add i128 %i41, 1
  store i128 %add42, i128* %i, align 4
  %i43 = load i128, i128* %i, align 4
  %k1 = load i128, i128* %long_add_unequal.k1.declare_arg, align 4
  %slt44 = icmp slt i128 %i43, %k1
  br i1 %slt44, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %carry45 = load i128, i128* %carry, align 4
  %ptr_getter46 = load [256 x i128]*, [256 x i128]** %sum, align 8
  %k147 = load i128, i128* %long_add_unequal.k1.declare_arg, align 4
  %sum48 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter46, i128 0, i128 %k147
  store i128 %carry45, i128* %sum48, align 4
  %sum49 = load [256 x i128]*, [256 x i128]** %sum, align 8
  ret [256 x i128]* %sum49
}

define i128 @nbits(i128 %0) {
entry:
  %nbits.a.declare_arg = alloca i128, align 8
  store i128 %0, i128* %nbits.a.declare_arg, align 4
  %n = alloca i128, align 8
  %n1 = call i128 @fn_intrinsic_inline_init()
  store i128 %n1, i128* %n, align 4
  %r = alloca i128, align 8
  %r2 = call i128 @fn_intrinsic_inline_init()
  store i128 %r2, i128* %r, align 4
  store i128 1, i128* %n, align 4
  store i128 0, i128* %r, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %r3 = load i128, i128* %r, align 4
  %add = add i128 %r3, 1
  store i128 %add, i128* %r, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %n4 = load i128, i128* %n, align 4
  %mul = mul i128 %n4, 2
  store i128 %mul, i128* %n, align 4
  %n5 = load i128, i128* %n, align 4
  %sub = sub i128 %n5, 1
  %a = load i128, i128* %nbits.a.declare_arg, align 4
  %slt = icmp slt i128 %sub, %a
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %r6 = load i128, i128* %r, align 4
  ret i128 %r6
}

define [256 x i128]* @signed_long_to_short(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %signed_long_to_short.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %signed_long_to_short.n.declare_arg, align 4
  %signed_long_to_short.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %signed_long_to_short.k.declare_arg, align 4
  %signed_long_to_short.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %signed_long_to_short.a.declare_arg, align 8
  %carry = alloca i128, align 8
  %carry1 = call i128 @fn_intrinsic_inline_init()
  store i128 %carry1, i128* %carry, align 4
  %X = alloca i128, align 8
  %X2 = call i128 @fn_intrinsic_inline_init()
  store i128 %X2, i128* %X, align 4
  %MAXL = alloca i128, align 8
  %MAXL3 = call i128 @fn_intrinsic_inline_init()
  store i128 %MAXL3, i128* %MAXL, align 4
  %borrow = alloca i128, align 8
  %borrow4 = call i128 @fn_intrinsic_inline_init()
  store i128 %borrow4, i128* %borrow, align 4
  %temp = alloca [256 x i128]*, align 8
  %temp5 = alloca [256 x i128], align 8
  store [256 x i128]* %temp5, [256 x i128]** %temp, align 8
  %out = alloca [256 x i128]*, align 8
  %out6 = alloca [256 x i128], align 8
  store [256 x i128]* %out6, [256 x i128]** %out, align 8
  %i = alloca i128, align 8
  %i7 = call i128 @fn_intrinsic_inline_init()
  store i128 %i7, i128* %i, align 4
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %out, align 8
  store i128 50, i128* %MAXL, align 4
  %uniform_array8 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array8, [256 x i128]** %temp, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %signed_long_to_short.a.declare_arg, align 8
  %i9 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i9
  %a10 = load i128, i128* %array_getter, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i11 = load i128, i128* %i, align 4
  %temp12 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i11
  store i128 %a10, i128* %temp12, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i13 = load i128, i128* %i, align 4
  %add = add i128 %i13, 1
  store i128 %add, i128* %i, align 4
  %i14 = load i128, i128* %i, align 4
  %k = load i128, i128* %signed_long_to_short.k.declare_arg, align 4
  %slt = icmp slt i128 %i14, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %k15 = load i128, i128* %signed_long_to_short.k.declare_arg, align 4
  store i128 %k15, i128* %i, align 4
  br label %loop.body16

loop.body16:                                      ; preds = %loop.latch20, %loop.exit
  %ptr_getter17 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i18 = load i128, i128* %i, align 4
  %temp19 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter17, i128 0, i128 %i18
  store i128 0, i128* %temp19, align 4
  br label %loop.latch20

loop.latch20:                                     ; preds = %loop.body16
  %i21 = load i128, i128* %i, align 4
  %add22 = add i128 %i21, 1
  store i128 %add22, i128* %i, align 4
  %i23 = load i128, i128* %i, align 4
  %MAXL24 = load i128, i128* %MAXL, align 4
  %sle = icmp sle i128 %i23, %MAXL24
  br i1 %sle, label %loop.body16, label %loop.exit25

loop.exit25:                                      ; preds = %loop.latch20
  %n = load i128, i128* %signed_long_to_short.n.declare_arg, align 4
  %lshift = shl i128 1, %n
  store i128 %lshift, i128* %X, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body26

loop.body26:                                      ; preds = %loop.latch83, %loop.exit25
  %temp27 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i28 = load i128, i128* %i, align 4
  %array_getter29 = getelementptr inbounds [256 x i128], [256 x i128]* %temp27, i128 0, i128 %i28
  %temp30 = load i128, i128* %array_getter29, align 4
  %sge = icmp sge i128 %temp30, 0
  br i1 %sge, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body26
  %temp31 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i32 = load i128, i128* %i, align 4
  %array_getter33 = getelementptr inbounds [256 x i128], [256 x i128]* %temp31, i128 0, i128 %i32
  %temp34 = load i128, i128* %array_getter33, align 4
  %X35 = load i128, i128* %X, align 4
  %mod = srem i128 %temp34, %X35
  %ptr_getter36 = load [256 x i128]*, [256 x i128]** %out, align 8
  %i37 = load i128, i128* %i, align 4
  %out38 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter36, i128 0, i128 %i37
  store i128 %mod, i128* %out38, align 4
  %temp39 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i40 = load i128, i128* %i, align 4
  %add41 = add i128 %i40, 1
  %array_getter42 = getelementptr inbounds [256 x i128], [256 x i128]* %temp39, i128 0, i128 %add41
  %temp43 = load i128, i128* %array_getter42, align 4
  %temp44 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i45 = load i128, i128* %i, align 4
  %array_getter46 = getelementptr inbounds [256 x i128], [256 x i128]* %temp44, i128 0, i128 %i45
  %temp47 = load i128, i128* %array_getter46, align 4
  %X48 = load i128, i128* %X, align 4
  %sdiv = sdiv i128 %temp47, %X48
  %add49 = add i128 %temp43, %sdiv
  %ptr_getter50 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i51 = load i128, i128* %i, align 4
  %add52 = add i128 %i51, 1
  %temp53 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter50, i128 0, i128 %add52
  store i128 %add49, i128* %temp53, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body26
  %temp54 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i55 = load i128, i128* %i, align 4
  %array_getter56 = getelementptr inbounds [256 x i128], [256 x i128]* %temp54, i128 0, i128 %i55
  %temp57 = load i128, i128* %array_getter56, align 4
  %neg = sub i128 0, %temp57
  %X58 = load i128, i128* %X, align 4
  %add59 = add i128 %neg, %X58
  %sub = sub i128 %add59, 1
  %X60 = load i128, i128* %X, align 4
  %sdiv61 = sdiv i128 %sub, %X60
  store i128 %sdiv61, i128* %borrow, align 4
  %temp62 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i63 = load i128, i128* %i, align 4
  %array_getter64 = getelementptr inbounds [256 x i128], [256 x i128]* %temp62, i128 0, i128 %i63
  %temp65 = load i128, i128* %array_getter64, align 4
  %borrow66 = load i128, i128* %borrow, align 4
  %X67 = load i128, i128* %X, align 4
  %mul = mul i128 %borrow66, %X67
  %add68 = add i128 %temp65, %mul
  %ptr_getter69 = load [256 x i128]*, [256 x i128]** %out, align 8
  %i70 = load i128, i128* %i, align 4
  %out71 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter69, i128 0, i128 %i70
  store i128 %add68, i128* %out71, align 4
  %temp72 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i73 = load i128, i128* %i, align 4
  %add74 = add i128 %i73, 1
  %array_getter75 = getelementptr inbounds [256 x i128], [256 x i128]* %temp72, i128 0, i128 %add74
  %temp76 = load i128, i128* %array_getter75, align 4
  %borrow77 = load i128, i128* %borrow, align 4
  %sub78 = sub i128 %temp76, %borrow77
  %ptr_getter79 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i80 = load i128, i128* %i, align 4
  %add81 = add i128 %i80, 1
  %temp82 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter79, i128 0, i128 %add81
  store i128 %sub78, i128* %temp82, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch83

loop.latch83:                                     ; preds = %if.exit
  %i84 = load i128, i128* %i, align 4
  %add85 = add i128 %i84, 1
  store i128 %add85, i128* %i, align 4
  %i86 = load i128, i128* %i, align 4
  %MAXL87 = load i128, i128* %MAXL, align 4
  %slt88 = icmp slt i128 %i86, %MAXL87
  br i1 %slt88, label %loop.body26, label %loop.exit89

loop.exit89:                                      ; preds = %loop.latch83
  %temp92 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %MAXL93 = load i128, i128* %MAXL, align 4
  %array_getter94 = getelementptr inbounds [256 x i128], [256 x i128]* %temp92, i128 0, i128 %MAXL93
  %temp95 = load i128, i128* %array_getter94, align 4
  %sge96 = icmp sge i128 %temp95, 0
  br i1 %sge96, label %if.true90, label %if.false91

if.true90:                                        ; preds = %loop.exit89
  %ptr_getter97 = load [256 x i128]*, [256 x i128]** %out, align 8
  %MAXL98 = load i128, i128* %MAXL, align 4
  %out99 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter97, i128 0, i128 %MAXL98
  store i128 0, i128* %out99, align 4
  %out100 = load [256 x i128]*, [256 x i128]** %out, align 8
  ret [256 x i128]* %out100

if.false91:                                       ; preds = %loop.exit89
  br label %if.exit101

if.exit101:                                       ; preds = %if.false91
  store i128 0, i128* %i, align 4
  br label %loop.body102

loop.body102:                                     ; preds = %loop.latch110, %if.exit101
  %a103 = load [256 x i128]*, [256 x i128]** %signed_long_to_short.a.declare_arg, align 8
  %i104 = load i128, i128* %i, align 4
  %array_getter105 = getelementptr inbounds [256 x i128], [256 x i128]* %a103, i128 0, i128 %i104
  %a106 = load i128, i128* %array_getter105, align 4
  %ptr_getter107 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i108 = load i128, i128* %i, align 4
  %temp109 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter107, i128 0, i128 %i108
  store i128 %a106, i128* %temp109, align 4
  br label %loop.latch110

loop.latch110:                                    ; preds = %loop.body102
  %i111 = load i128, i128* %i, align 4
  %add112 = add i128 %i111, 1
  store i128 %add112, i128* %i, align 4
  %i113 = load i128, i128* %i, align 4
  %k114 = load i128, i128* %signed_long_to_short.k.declare_arg, align 4
  %slt115 = icmp slt i128 %i113, %k114
  br i1 %slt115, label %loop.body102, label %loop.exit116

loop.exit116:                                     ; preds = %loop.latch110
  %k117 = load i128, i128* %signed_long_to_short.k.declare_arg, align 4
  store i128 %k117, i128* %i, align 4
  br label %loop.body118

loop.body118:                                     ; preds = %loop.latch122, %loop.exit116
  %ptr_getter119 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i120 = load i128, i128* %i, align 4
  %temp121 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter119, i128 0, i128 %i120
  store i128 0, i128* %temp121, align 4
  br label %loop.latch122

loop.latch122:                                    ; preds = %loop.body118
  %i123 = load i128, i128* %i, align 4
  %add124 = add i128 %i123, 1
  store i128 %add124, i128* %i, align 4
  %i125 = load i128, i128* %i, align 4
  %MAXL126 = load i128, i128* %MAXL, align 4
  %sle127 = icmp sle i128 %i125, %MAXL126
  br i1 %sle127, label %loop.body118, label %loop.exit128

loop.exit128:                                     ; preds = %loop.latch122
  store i128 0, i128* %i, align 4
  br label %loop.body129

loop.body129:                                     ; preds = %loop.latch198, %loop.exit128
  %temp132 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i133 = load i128, i128* %i, align 4
  %array_getter134 = getelementptr inbounds [256 x i128], [256 x i128]* %temp132, i128 0, i128 %i133
  %temp135 = load i128, i128* %array_getter134, align 4
  %slt136 = icmp slt i128 %temp135, 0
  br i1 %slt136, label %if.true130, label %if.false131

if.true130:                                       ; preds = %loop.body129
  %temp137 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i138 = load i128, i128* %i, align 4
  %array_getter139 = getelementptr inbounds [256 x i128], [256 x i128]* %temp137, i128 0, i128 %i138
  %temp140 = load i128, i128* %array_getter139, align 4
  %neg141 = sub i128 0, %temp140
  %X142 = load i128, i128* %X, align 4
  %sdiv143 = sdiv i128 %neg141, %X142
  store i128 %sdiv143, i128* %carry, align 4
  %temp144 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i145 = load i128, i128* %i, align 4
  %array_getter146 = getelementptr inbounds [256 x i128], [256 x i128]* %temp144, i128 0, i128 %i145
  %temp147 = load i128, i128* %array_getter146, align 4
  %carry148 = load i128, i128* %carry, align 4
  %X149 = load i128, i128* %X, align 4
  %mul150 = mul i128 %carry148, %X149
  %add151 = add i128 %temp147, %mul150
  %ptr_getter152 = load [256 x i128]*, [256 x i128]** %out, align 8
  %i153 = load i128, i128* %i, align 4
  %out154 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter152, i128 0, i128 %i153
  store i128 %add151, i128* %out154, align 4
  %temp155 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i156 = load i128, i128* %i, align 4
  %add157 = add i128 %i156, 1
  %array_getter158 = getelementptr inbounds [256 x i128], [256 x i128]* %temp155, i128 0, i128 %add157
  %temp159 = load i128, i128* %array_getter158, align 4
  %carry160 = load i128, i128* %carry, align 4
  %sub161 = sub i128 %temp159, %carry160
  %ptr_getter162 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i163 = load i128, i128* %i, align 4
  %add164 = add i128 %i163, 1
  %temp165 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter162, i128 0, i128 %add164
  store i128 %sub161, i128* %temp165, align 4
  br label %if.exit197

if.false131:                                      ; preds = %loop.body129
  %temp166 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i167 = load i128, i128* %i, align 4
  %array_getter168 = getelementptr inbounds [256 x i128], [256 x i128]* %temp166, i128 0, i128 %i167
  %temp169 = load i128, i128* %array_getter168, align 4
  %X170 = load i128, i128* %X, align 4
  %add171 = add i128 %temp169, %X170
  %sub172 = sub i128 %add171, 1
  %X173 = load i128, i128* %X, align 4
  %sdiv174 = sdiv i128 %sub172, %X173
  store i128 %sdiv174, i128* %borrow, align 4
  %temp175 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i176 = load i128, i128* %i, align 4
  %array_getter177 = getelementptr inbounds [256 x i128], [256 x i128]* %temp175, i128 0, i128 %i176
  %temp178 = load i128, i128* %array_getter177, align 4
  %borrow179 = load i128, i128* %borrow, align 4
  %X180 = load i128, i128* %X, align 4
  %mul181 = mul i128 %borrow179, %X180
  %sub182 = sub i128 %temp178, %mul181
  %ptr_getter183 = load [256 x i128]*, [256 x i128]** %out, align 8
  %i184 = load i128, i128* %i, align 4
  %out185 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter183, i128 0, i128 %i184
  store i128 %sub182, i128* %out185, align 4
  %temp186 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i187 = load i128, i128* %i, align 4
  %add188 = add i128 %i187, 1
  %array_getter189 = getelementptr inbounds [256 x i128], [256 x i128]* %temp186, i128 0, i128 %add188
  %temp190 = load i128, i128* %array_getter189, align 4
  %borrow191 = load i128, i128* %borrow, align 4
  %add192 = add i128 %temp190, %borrow191
  %ptr_getter193 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %i194 = load i128, i128* %i, align 4
  %add195 = add i128 %i194, 1
  %temp196 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter193, i128 0, i128 %add195
  store i128 %add192, i128* %temp196, align 4
  br label %if.exit197

if.exit197:                                       ; preds = %if.false131, %if.true130
  br label %loop.latch198

loop.latch198:                                    ; preds = %if.exit197
  %i199 = load i128, i128* %i, align 4
  %add200 = add i128 %i199, 1
  store i128 %add200, i128* %i, align 4
  %i201 = load i128, i128* %i, align 4
  %MAXL202 = load i128, i128* %MAXL, align 4
  %slt203 = icmp slt i128 %i201, %MAXL202
  br i1 %slt203, label %loop.body129, label %loop.exit204

loop.exit204:                                     ; preds = %loop.latch198
  %ptr_getter205 = load [256 x i128]*, [256 x i128]** %out, align 8
  %MAXL206 = load i128, i128* %MAXL, align 4
  %out207 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter205, i128 0, i128 %MAXL206
  store i128 1, i128* %out207, align 4
  %out208 = load [256 x i128]*, [256 x i128]** %out, align 8
  ret [256 x i128]* %out208
}

define [256 x i128]* @long_add(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3) {
entry:
  %long_add.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_add.n.declare_arg, align 4
  %long_add.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %long_add.k.declare_arg, align 4
  %long_add.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %long_add.a.declare_arg, align 8
  %long_add.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %long_add.b.declare_arg, align 8
  %carry = alloca i128, align 8
  %carry1 = call i128 @fn_intrinsic_inline_init()
  store i128 %carry1, i128* %carry, align 4
  %sumAndCarry = alloca [256 x i128]*, align 8
  %sumAndCarry2 = alloca [256 x i128], align 8
  store [256 x i128]* %sumAndCarry2, [256 x i128]** %sumAndCarry, align 8
  %sum = alloca [256 x i128]*, align 8
  %sum3 = alloca [256 x i128], align 8
  store [256 x i128]* %sum3, [256 x i128]** %sum, align 8
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  store i128 0, i128* %carry, align 4
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %sum, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %long_add.a.declare_arg, align 8
  %i5 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i5
  %a6 = load i128, i128* %array_getter, align 4
  %b = load [256 x i128]*, [256 x i128]** %long_add.b.declare_arg, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter8 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i7
  %b9 = load i128, i128* %array_getter8, align 4
  %add = add i128 %a6, %b9
  %carry10 = load i128, i128* %carry, align 4
  %add11 = add i128 %add, %carry10
  %n = load i128, i128* %long_add.n.declare_arg, align 4
  %n12 = load i128, i128* %long_add.n.declare_arg, align 4
  %call = call [2 x i128]* @SplitFn(i128 %add11, i128 %n, i128 %n12)
  %memcpy_ptr = getelementptr inbounds [256 x i128]*, [256 x i128]** %sumAndCarry, i128 0
  %4 = bitcast [256 x i128]** %memcpy_ptr to i8*
  %5 = bitcast [2 x i128]* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 ptrtoint ([2 x i128]* getelementptr ([2 x i128], [2 x i128]* null, i32 1) to i64), i1 false)
  %sumAndCarry13 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter14 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry13, i128 0, i128 0
  %sumAndCarry15 = load i128, i128* %array_getter14, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %sum, align 8
  %i16 = load i128, i128* %i, align 4
  %sum17 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i16
  store i128 %sumAndCarry15, i128* %sum17, align 4
  %sumAndCarry18 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry18, i128 0, i128 1
  %sumAndCarry20 = load i128, i128* %array_getter19, align 4
  store i128 %sumAndCarry20, i128* %carry, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i21 = load i128, i128* %i, align 4
  %add22 = add i128 %i21, 1
  store i128 %add22, i128* %i, align 4
  %i23 = load i128, i128* %i, align 4
  %k = load i128, i128* %long_add.k.declare_arg, align 4
  %slt = icmp slt i128 %i23, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %carry24 = load i128, i128* %carry, align 4
  %ptr_getter25 = load [256 x i128]*, [256 x i128]** %sum, align 8
  %k26 = load i128, i128* %long_add.k.declare_arg, align 4
  %sum27 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter25, i128 0, i128 %k26
  store i128 %carry24, i128* %sum27, align 4
  %sum28 = load [256 x i128]*, [256 x i128]** %sum, align 8
  ret [256 x i128]* %sum28
}

define i128 @get_fp_sgn0([256 x i128]* %0) {
entry:
  %get_fp_sgn0.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %0, [256 x i128]** %get_fp_sgn0.a.declare_arg, align 8
  %a = load [256 x i128]*, [256 x i128]** %get_fp_sgn0.a.declare_arg, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 0
  %a1 = load i128, i128* %array_getter, align 4
  %mod = srem i128 %a1, 2
  ret i128 %mod
}

define [3 x i128]* @SplitThreeFn(i128 %0, i128 %1, i128 %2, i128 %3) {
entry:
  %splitthreefn.in.declare_arg = alloca i128, align 8
  store i128 %0, i128* %splitthreefn.in.declare_arg, align 4
  %splitthreefn.n.declare_arg = alloca i128, align 8
  store i128 %1, i128* %splitthreefn.n.declare_arg, align 4
  %splitthreefn.m.declare_arg = alloca i128, align 8
  store i128 %2, i128* %splitthreefn.m.declare_arg, align 4
  %splitthreefn.k.declare_arg = alloca i128, align 8
  store i128 %3, i128* %splitthreefn.k.declare_arg, align 4
  %var_inline_array = alloca [3 x i128], align 8
  %in = load i128, i128* %splitthreefn.in.declare_arg, align 4
  %n = load i128, i128* %splitthreefn.n.declare_arg, align 4
  %lshift = shl i128 1, %n
  %mod = srem i128 %in, %lshift
  %var_inline_array1 = getelementptr inbounds [3 x i128], [3 x i128]* %var_inline_array, i128 0, i128 0
  store i128 %mod, i128* %var_inline_array1, align 4
  %in2 = load i128, i128* %splitthreefn.in.declare_arg, align 4
  %n3 = load i128, i128* %splitthreefn.n.declare_arg, align 4
  %lshift4 = shl i128 1, %n3
  %sdiv = sdiv i128 %in2, %lshift4
  %m = load i128, i128* %splitthreefn.m.declare_arg, align 4
  %lshift5 = shl i128 1, %m
  %mod6 = srem i128 %sdiv, %lshift5
  %var_inline_array7 = getelementptr inbounds [3 x i128], [3 x i128]* %var_inline_array, i128 0, i128 1
  store i128 %mod6, i128* %var_inline_array7, align 4
  %in8 = load i128, i128* %splitthreefn.in.declare_arg, align 4
  %n9 = load i128, i128* %splitthreefn.n.declare_arg, align 4
  %m10 = load i128, i128* %splitthreefn.m.declare_arg, align 4
  %add = add i128 %n9, %m10
  %lshift11 = shl i128 1, %add
  %sdiv12 = sdiv i128 %in8, %lshift11
  %k = load i128, i128* %splitthreefn.k.declare_arg, align 4
  %lshift13 = shl i128 1, %k
  %mod14 = srem i128 %sdiv12, %lshift13
  %var_inline_array15 = getelementptr inbounds [3 x i128], [3 x i128]* %var_inline_array, i128 0, i128 2
  store i128 %mod14, i128* %var_inline_array15, align 4
  ret [3 x i128]* %var_inline_array
}

define [256 x i128]* @long_sub(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3) {
entry:
  %long_sub.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_sub.n.declare_arg, align 4
  %long_sub.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %long_sub.k.declare_arg, align 4
  %long_sub.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %long_sub.a.declare_arg, align 8
  %long_sub.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %long_sub.b.declare_arg, align 8
  %diff = alloca [256 x i128]*, align 8
  %diff1 = alloca [256 x i128], align 8
  store [256 x i128]* %diff1, [256 x i128]** %diff, align 8
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %borrow = alloca [256 x i128]*, align 8
  %borrow3 = alloca [256 x i128], align 8
  store [256 x i128]* %borrow3, [256 x i128]** %borrow, align 8
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %diff, align 8
  %uniform_array4 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array4, [256 x i128]** %borrow, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %i5 = load i128, i128* %i, align 4
  %eq = icmp eq i128 %i5, 0
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  %a = load [256 x i128]*, [256 x i128]** %long_sub.a.declare_arg, align 8
  %i8 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i8
  %a9 = load i128, i128* %array_getter, align 4
  %b = load [256 x i128]*, [256 x i128]** %long_sub.b.declare_arg, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter11 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i10
  %b12 = load i128, i128* %array_getter11, align 4
  %sge = icmp sge i128 %a9, %b12
  br i1 %sge, label %if.true6, label %if.false7

if.false:                                         ; preds = %loop.body
  %a43 = load [256 x i128]*, [256 x i128]** %long_sub.a.declare_arg, align 8
  %i44 = load i128, i128* %i, align 4
  %array_getter45 = getelementptr inbounds [256 x i128], [256 x i128]* %a43, i128 0, i128 %i44
  %a46 = load i128, i128* %array_getter45, align 4
  %b47 = load [256 x i128]*, [256 x i128]** %long_sub.b.declare_arg, align 8
  %i48 = load i128, i128* %i, align 4
  %array_getter49 = getelementptr inbounds [256 x i128], [256 x i128]* %b47, i128 0, i128 %i48
  %b50 = load i128, i128* %array_getter49, align 4
  %borrow51 = load [256 x i128]*, [256 x i128]** %borrow, align 8
  %i52 = load i128, i128* %i, align 4
  %sub53 = sub i128 %i52, 1
  %array_getter54 = getelementptr inbounds [256 x i128], [256 x i128]* %borrow51, i128 0, i128 %sub53
  %borrow55 = load i128, i128* %array_getter54, align 4
  %add56 = add i128 %b50, %borrow55
  %sge57 = icmp sge i128 %a46, %add56
  br i1 %sge57, label %if.true41, label %if.false42

if.true6:                                         ; preds = %if.true
  %a13 = load [256 x i128]*, [256 x i128]** %long_sub.a.declare_arg, align 8
  %i14 = load i128, i128* %i, align 4
  %array_getter15 = getelementptr inbounds [256 x i128], [256 x i128]* %a13, i128 0, i128 %i14
  %a16 = load i128, i128* %array_getter15, align 4
  %b17 = load [256 x i128]*, [256 x i128]** %long_sub.b.declare_arg, align 8
  %i18 = load i128, i128* %i, align 4
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %b17, i128 0, i128 %i18
  %b20 = load i128, i128* %array_getter19, align 4
  %sub = sub i128 %a16, %b20
  %ptr_getter = load [256 x i128]*, [256 x i128]** %diff, align 8
  %i21 = load i128, i128* %i, align 4
  %diff22 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i21
  store i128 %sub, i128* %diff22, align 4
  %ptr_getter23 = load [256 x i128]*, [256 x i128]** %borrow, align 8
  %i24 = load i128, i128* %i, align 4
  %borrow25 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter23, i128 0, i128 %i24
  store i128 0, i128* %borrow25, align 4
  br label %if.exit

if.false7:                                        ; preds = %if.true
  %a26 = load [256 x i128]*, [256 x i128]** %long_sub.a.declare_arg, align 8
  %i27 = load i128, i128* %i, align 4
  %array_getter28 = getelementptr inbounds [256 x i128], [256 x i128]* %a26, i128 0, i128 %i27
  %a29 = load i128, i128* %array_getter28, align 4
  %b30 = load [256 x i128]*, [256 x i128]** %long_sub.b.declare_arg, align 8
  %i31 = load i128, i128* %i, align 4
  %array_getter32 = getelementptr inbounds [256 x i128], [256 x i128]* %b30, i128 0, i128 %i31
  %b33 = load i128, i128* %array_getter32, align 4
  %sub34 = sub i128 %a29, %b33
  %n = load i128, i128* %long_sub.n.declare_arg, align 4
  %lshift = shl i128 1, %n
  %add = add i128 %sub34, %lshift
  %ptr_getter35 = load [256 x i128]*, [256 x i128]** %diff, align 8
  %i36 = load i128, i128* %i, align 4
  %diff37 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter35, i128 0, i128 %i36
  store i128 %add, i128* %diff37, align 4
  %ptr_getter38 = load [256 x i128]*, [256 x i128]** %borrow, align 8
  %i39 = load i128, i128* %i, align 4
  %borrow40 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter38, i128 0, i128 %i39
  store i128 1, i128* %borrow40, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false7, %if.true6
  br label %if.exit104

if.true41:                                        ; preds = %if.false
  %a58 = load [256 x i128]*, [256 x i128]** %long_sub.a.declare_arg, align 8
  %i59 = load i128, i128* %i, align 4
  %array_getter60 = getelementptr inbounds [256 x i128], [256 x i128]* %a58, i128 0, i128 %i59
  %a61 = load i128, i128* %array_getter60, align 4
  %b62 = load [256 x i128]*, [256 x i128]** %long_sub.b.declare_arg, align 8
  %i63 = load i128, i128* %i, align 4
  %array_getter64 = getelementptr inbounds [256 x i128], [256 x i128]* %b62, i128 0, i128 %i63
  %b65 = load i128, i128* %array_getter64, align 4
  %sub66 = sub i128 %a61, %b65
  %borrow67 = load [256 x i128]*, [256 x i128]** %borrow, align 8
  %i68 = load i128, i128* %i, align 4
  %sub69 = sub i128 %i68, 1
  %array_getter70 = getelementptr inbounds [256 x i128], [256 x i128]* %borrow67, i128 0, i128 %sub69
  %borrow71 = load i128, i128* %array_getter70, align 4
  %sub72 = sub i128 %sub66, %borrow71
  %ptr_getter73 = load [256 x i128]*, [256 x i128]** %diff, align 8
  %i74 = load i128, i128* %i, align 4
  %diff75 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter73, i128 0, i128 %i74
  store i128 %sub72, i128* %diff75, align 4
  %ptr_getter76 = load [256 x i128]*, [256 x i128]** %borrow, align 8
  %i77 = load i128, i128* %i, align 4
  %borrow78 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter76, i128 0, i128 %i77
  store i128 0, i128* %borrow78, align 4
  br label %if.exit103

if.false42:                                       ; preds = %if.false
  %n79 = load i128, i128* %long_sub.n.declare_arg, align 4
  %lshift80 = shl i128 1, %n79
  %a81 = load [256 x i128]*, [256 x i128]** %long_sub.a.declare_arg, align 8
  %i82 = load i128, i128* %i, align 4
  %array_getter83 = getelementptr inbounds [256 x i128], [256 x i128]* %a81, i128 0, i128 %i82
  %a84 = load i128, i128* %array_getter83, align 4
  %add85 = add i128 %lshift80, %a84
  %b86 = load [256 x i128]*, [256 x i128]** %long_sub.b.declare_arg, align 8
  %i87 = load i128, i128* %i, align 4
  %array_getter88 = getelementptr inbounds [256 x i128], [256 x i128]* %b86, i128 0, i128 %i87
  %b89 = load i128, i128* %array_getter88, align 4
  %sub90 = sub i128 %add85, %b89
  %borrow91 = load [256 x i128]*, [256 x i128]** %borrow, align 8
  %i92 = load i128, i128* %i, align 4
  %sub93 = sub i128 %i92, 1
  %array_getter94 = getelementptr inbounds [256 x i128], [256 x i128]* %borrow91, i128 0, i128 %sub93
  %borrow95 = load i128, i128* %array_getter94, align 4
  %sub96 = sub i128 %sub90, %borrow95
  %ptr_getter97 = load [256 x i128]*, [256 x i128]** %diff, align 8
  %i98 = load i128, i128* %i, align 4
  %diff99 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter97, i128 0, i128 %i98
  store i128 %sub96, i128* %diff99, align 4
  %ptr_getter100 = load [256 x i128]*, [256 x i128]** %borrow, align 8
  %i101 = load i128, i128* %i, align 4
  %borrow102 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter100, i128 0, i128 %i101
  store i128 1, i128* %borrow102, align 4
  br label %if.exit103

if.exit103:                                       ; preds = %if.false42, %if.true41
  br label %if.exit104

if.exit104:                                       ; preds = %if.exit103, %if.exit
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit104
  %i105 = load i128, i128* %i, align 4
  %add106 = add i128 %i105, 1
  store i128 %add106, i128* %i, align 4
  %i107 = load i128, i128* %i, align 4
  %k = load i128, i128* %long_sub.k.declare_arg, align 4
  %slt = icmp slt i128 %i107, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %diff108 = load [256 x i128]*, [256 x i128]** %diff, align 8
  ret [256 x i128]* %diff108
}

define void @fn_template_init_nand(%struct_template_circuit_nand* %0) {
entry:
  %NAND = alloca %struct_template_circuit_nand*, align 8
  store %struct_template_circuit_nand* %0, %struct_template_circuit_nand** %NAND, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_nand, %struct_template_circuit_nand* %0, i32 0, i32 0
  %nand.a.read_input_inner = load i128, i128* %struct_getter, align 4
  %nand.a.declare_input = alloca i128, align 8
  store i128 %nand.a.read_input_inner, i128* %nand.a.declare_input, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_nand, %struct_template_circuit_nand* %0, i32 0, i32 1
  %nand.b.read_input_inner = load i128, i128* %struct_getter1, align 4
  %nand.b.declare_input = alloca i128, align 8
  store i128 %nand.b.read_input_inner, i128* %nand.b.declare_input, align 4
  %nand.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %nand.out.declare_output, align 4
  %a = load i128, i128* %nand.a.declare_input, align 4
  %b = load i128, i128* %nand.b.declare_input, align 4
  %mul = mul i128 %a, %b
  %sub = sub i128 1, %mul
  %out2 = load i128, i128* %nand.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out2, i128 %sub, i1* @constraint.27)
  %ptr_getter = load %struct_template_circuit_nand*, %struct_template_circuit_nand** %NAND, align 8
  %nand.out.write_output_inner = getelementptr inbounds %struct_template_circuit_nand, %struct_template_circuit_nand* %ptr_getter, i32 0, i32 2
  store i128 %sub, i128* %nand.out.write_output_inner, align 4
  %NAND3 = load %struct_template_circuit_nand*, %struct_template_circuit_nand** %NAND, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_nand, %struct_template_circuit_nand* %NAND3, i32 0, i32 2
  %nand.out.read_output_inner = load i128, i128* %struct_getter4, align 4
  store i128 %nand.out.read_output_inner, i128* %nand.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out5 = load i128, i128* %nand.out.declare_output, align 4
  %nand.out.write_output_inner6 = getelementptr inbounds %struct_template_circuit_nand, %struct_template_circuit_nand* %0, i32 0, i32 2
  store i128 %out5, i128* %nand.out.write_output_inner6, align 4
  ret void
}

define %struct_template_circuit_nand* @fn_template_build_nand() {
entry:
  %struct_template_circuit_nand = alloca %struct_template_circuit_nand, align 8
  ret %struct_template_circuit_nand* %struct_template_circuit_nand
}

define void @fn_template_init_isequal(%struct_template_circuit_isequal* %0) {
entry:
  %IsEqual = alloca %struct_template_circuit_isequal*, align 8
  store %struct_template_circuit_isequal* %0, %struct_template_circuit_isequal** %IsEqual, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %0, i32 0, i32 0
  %isequal.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter, align 8
  %isequal.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %isequal.in.read_input_inner, [256 x i128]** %isequal.in.declare_input, align 8
  %isz = alloca %struct_template_circuit_iszero*, align 8
  %isequal.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %isequal.out.declare_output, align 4
  %call = call %struct_template_circuit_iszero* @fn_template_build_iszero()
  store %struct_template_circuit_iszero* %call, %struct_template_circuit_iszero** %isz, align 8
  %in = load [256 x i128]*, [256 x i128]** %isequal.in.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 1
  %in1 = load i128, i128* %array_getter, align 4
  %in2 = load [256 x i128]*, [256 x i128]** %isequal.in.declare_input, align 8
  %array_getter3 = getelementptr inbounds [256 x i128], [256 x i128]* %in2, i128 0, i128 0
  %in4 = load i128, i128* %array_getter3, align 4
  %sub = sub i128 %in1, %in4
  %isz5 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %isz, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isz5, i32 0, i32 0
  %iszero.in.read_input_outter = load i128, i128* %struct_getter6, align 4
  call void @fn_intrinsic_add_constraint(i128 %iszero.in.read_input_outter, i128 %sub, i1* @constraint.28)
  %ptr_getter = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %isz, align 8
  %iszero.in.write_input_outter = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %ptr_getter, i32 0, i32 0
  store i128 %sub, i128* %iszero.in.write_input_outter, align 4
  %isz7 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %isz, align 8
  %struct_getter8 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isz7, i32 0, i32 2
  %iszero.out.read_output_outter = load i128, i128* %struct_getter8, align 4
  %out9 = load i128, i128* %isequal.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out9, i128 %iszero.out.read_output_outter, i1* @constraint.29)
  %ptr_getter10 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %IsEqual, align 8
  %isequal.out.write_output_inner = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %ptr_getter10, i32 0, i32 1
  store i128 %iszero.out.read_output_outter, i128* %isequal.out.write_output_inner, align 4
  %IsEqual11 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %IsEqual, align 8
  %struct_getter12 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %IsEqual11, i32 0, i32 1
  %isequal.out.read_output_inner = load i128, i128* %struct_getter12, align 4
  store i128 %isequal.out.read_output_inner, i128* %isequal.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out13 = load i128, i128* %isequal.out.declare_output, align 4
  %isequal.out.write_output_inner14 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %0, i32 0, i32 1
  store i128 %out13, i128* %isequal.out.write_output_inner14, align 4
  ret void
}

define %struct_template_circuit_isequal* @fn_template_build_isequal() {
entry:
  %struct_template_circuit_isequal = alloca %struct_template_circuit_isequal, align 8
  ret %struct_template_circuit_isequal* %struct_template_circuit_isequal
}

define void @fn_template_init_nor(%struct_template_circuit_nor* %0) {
entry:
  %NOR = alloca %struct_template_circuit_nor*, align 8
  store %struct_template_circuit_nor* %0, %struct_template_circuit_nor** %NOR, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_nor, %struct_template_circuit_nor* %0, i32 0, i32 0
  %nor.a.read_input_inner = load i128, i128* %struct_getter, align 4
  %nor.a.declare_input = alloca i128, align 8
  store i128 %nor.a.read_input_inner, i128* %nor.a.declare_input, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_nor, %struct_template_circuit_nor* %0, i32 0, i32 1
  %nor.b.read_input_inner = load i128, i128* %struct_getter1, align 4
  %nor.b.declare_input = alloca i128, align 8
  store i128 %nor.b.read_input_inner, i128* %nor.b.declare_input, align 4
  %nor.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %nor.out.declare_output, align 4
  %a = load i128, i128* %nor.a.declare_input, align 4
  %b = load i128, i128* %nor.b.declare_input, align 4
  %mul = mul i128 %a, %b
  %add = add i128 %mul, 1
  %a2 = load i128, i128* %nor.a.declare_input, align 4
  %sub = sub i128 %add, %a2
  %b3 = load i128, i128* %nor.b.declare_input, align 4
  %sub4 = sub i128 %sub, %b3
  %out5 = load i128, i128* %nor.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out5, i128 %sub4, i1* @constraint.30)
  %ptr_getter = load %struct_template_circuit_nor*, %struct_template_circuit_nor** %NOR, align 8
  %nor.out.write_output_inner = getelementptr inbounds %struct_template_circuit_nor, %struct_template_circuit_nor* %ptr_getter, i32 0, i32 2
  store i128 %sub4, i128* %nor.out.write_output_inner, align 4
  %NOR6 = load %struct_template_circuit_nor*, %struct_template_circuit_nor** %NOR, align 8
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_nor, %struct_template_circuit_nor* %NOR6, i32 0, i32 2
  %nor.out.read_output_inner = load i128, i128* %struct_getter7, align 4
  store i128 %nor.out.read_output_inner, i128* %nor.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out8 = load i128, i128* %nor.out.declare_output, align 4
  %nor.out.write_output_inner9 = getelementptr inbounds %struct_template_circuit_nor, %struct_template_circuit_nor* %0, i32 0, i32 2
  store i128 %out8, i128* %nor.out.write_output_inner9, align 4
  ret void
}

define %struct_template_circuit_nor* @fn_template_build_nor() {
entry:
  %struct_template_circuit_nor = alloca %struct_template_circuit_nor, align 8
  ret %struct_template_circuit_nor* %struct_template_circuit_nor
}

define void @fn_template_init_num2bits(%struct_template_circuit_num2bits* %0) {
entry:
  %Num2Bits = alloca %struct_template_circuit_num2bits*, align 8
  store %struct_template_circuit_num2bits* %0, %struct_template_circuit_num2bits** %Num2Bits, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %0, i32 0, i32 0
  %num2bits.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %num2bits.n.declare_arg = alloca i128, align 8
  store i128 %num2bits.n.read_arg_inner, i128* %num2bits.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %0, i32 0, i32 1
  %num2bits.in.read_input_inner = load i128, i128* %struct_getter1, align 4
  %num2bits.in.declare_input = alloca i128, align 8
  store i128 %num2bits.in.read_input_inner, i128* %num2bits.in.declare_input, align 4
  %e2 = alloca i128, align 8
  %e22 = call i128 @fn_intrinsic_inline_init()
  store i128 %e22, i128* %e2, align 4
  %num2bits.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %num2bits.out.declare_output, align 8
  %lc1 = alloca i128, align 8
  %lc13 = call i128 @fn_intrinsic_inline_init()
  store i128 %lc13, i128* %lc1, align 4
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  store i128 0, i128* %lc1, align 4
  store i128 1, i128* %e2, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %in = load i128, i128* %num2bits.in.declare_input, align 4
  %i5 = load i128, i128* %i, align 4
  %rshift = lshr i128 %in, %i5
  %and = and i128 %rshift, 1
  %ptr_getter = load [256 x i128]*, [256 x i128]** %num2bits.out.declare_output, align 8
  %i6 = load i128, i128* %i, align 4
  %out7 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i6
  store i128 %and, i128* %out7, align 4
  %out8 = load [256 x i128]*, [256 x i128]** %num2bits.out.declare_output, align 8
  %i9 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %out8, i128 0, i128 %i9
  %out10 = load i128, i128* %array_getter, align 4
  %out11 = load [256 x i128]*, [256 x i128]** %num2bits.out.declare_output, align 8
  %i12 = load i128, i128* %i, align 4
  %array_getter13 = getelementptr inbounds [256 x i128], [256 x i128]* %out11, i128 0, i128 %i12
  %out14 = load i128, i128* %array_getter13, align 4
  %sub = sub i128 %out14, 1
  %mul = mul i128 %out10, %sub
  call void @fn_intrinsic_add_constraint(i128 %mul, i128 0, i1* @constraint.31)
  %lc115 = load i128, i128* %lc1, align 4
  %out16 = load [256 x i128]*, [256 x i128]** %num2bits.out.declare_output, align 8
  %i17 = load i128, i128* %i, align 4
  %array_getter18 = getelementptr inbounds [256 x i128], [256 x i128]* %out16, i128 0, i128 %i17
  %out19 = load i128, i128* %array_getter18, align 4
  %e220 = load i128, i128* %e2, align 4
  %mul21 = mul i128 %out19, %e220
  %add = add i128 %lc115, %mul21
  store i128 %add, i128* %lc1, align 4
  %e222 = load i128, i128* %e2, align 4
  %e223 = load i128, i128* %e2, align 4
  %add24 = add i128 %e222, %e223
  store i128 %add24, i128* %e2, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i25 = load i128, i128* %i, align 4
  %add26 = add i128 %i25, 1
  store i128 %add26, i128* %i, align 4
  %i27 = load i128, i128* %i, align 4
  %n = load i128, i128* %num2bits.n.declare_arg, align 4
  %slt = icmp slt i128 %i27, %n
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %lc128 = load i128, i128* %lc1, align 4
  %in29 = load i128, i128* %num2bits.in.declare_input, align 4
  call void @fn_intrinsic_add_constraint(i128 %lc128, i128 %in29, i1* @constraint.32)
  br label %exit

exit:                                             ; preds = %loop.exit
  %out30 = load [256 x i128]*, [256 x i128]** %num2bits.out.declare_output, align 8
  %num2bits.out.write_output_inner = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %0, i32 0, i32 2
  store [256 x i128]* %out30, [256 x i128]** %num2bits.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %0) {
entry:
  %struct_template_circuit_num2bits = alloca %struct_template_circuit_num2bits, align 8
  %num2bits.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %struct_template_circuit_num2bits, i32 0, i32 0
  store i128 %0, i128* %num2bits.n.write_arg_inner, align 4
  ret %struct_template_circuit_num2bits* %struct_template_circuit_num2bits
}

define i128 @min(i128 %0, i128 %1) {
entry:
  %min.a.declare_arg = alloca i128, align 8
  store i128 %0, i128* %min.a.declare_arg, align 4
  %min.b.declare_arg = alloca i128, align 8
  store i128 %1, i128* %min.b.declare_arg, align 4
  %a = load i128, i128* %min.a.declare_arg, align 4
  %b = load i128, i128* %min.b.declare_arg, align 4
  %slt = icmp slt i128 %a, %b
  br i1 %slt, label %if.true, label %if.false

if.true:                                          ; preds = %entry
  %a1 = load i128, i128* %min.a.declare_arg, align 4
  ret i128 %a1

if.false:                                         ; preds = %entry
  br label %if.exit

if.exit:                                          ; preds = %if.false
  %b2 = load i128, i128* %min.b.declare_arg, align 4
  ret i128 %b2
}

define i128 @short_div_norm(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3) {
entry:
  %short_div_norm.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %short_div_norm.n.declare_arg, align 4
  %short_div_norm.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %short_div_norm.k.declare_arg, align 4
  %short_div_norm.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %short_div_norm.a.declare_arg, align 8
  %short_div_norm.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %short_div_norm.b.declare_arg, align 8
  %qhat = alloca i128, align 8
  %qhat1 = call i128 @fn_intrinsic_inline_init()
  store i128 %qhat1, i128* %qhat, align 4
  %mult = alloca [256 x i128]*, align 8
  %mult2 = alloca [256 x i128], align 8
  store [256 x i128]* %mult2, [256 x i128]** %mult, align 8
  %a = load [256 x i128]*, [256 x i128]** %short_div_norm.a.declare_arg, align 8
  %k = load i128, i128* %short_div_norm.k.declare_arg, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %k
  %a3 = load i128, i128* %array_getter, align 4
  %n = load i128, i128* %short_div_norm.n.declare_arg, align 4
  %lshift = shl i128 1, %n
  %mul = mul i128 %a3, %lshift
  %a4 = load [256 x i128]*, [256 x i128]** %short_div_norm.a.declare_arg, align 8
  %k5 = load i128, i128* %short_div_norm.k.declare_arg, align 4
  %sub = sub i128 %k5, 1
  %array_getter6 = getelementptr inbounds [256 x i128], [256 x i128]* %a4, i128 0, i128 %sub
  %a7 = load i128, i128* %array_getter6, align 4
  %add = add i128 %mul, %a7
  %b = load [256 x i128]*, [256 x i128]** %short_div_norm.b.declare_arg, align 8
  %k8 = load i128, i128* %short_div_norm.k.declare_arg, align 4
  %sub9 = sub i128 %k8, 1
  %array_getter10 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %sub9
  %b11 = load i128, i128* %array_getter10, align 4
  %sdiv = sdiv i128 %add, %b11
  store i128 %sdiv, i128* %qhat, align 4
  %qhat12 = load i128, i128* %qhat, align 4
  %n13 = load i128, i128* %short_div_norm.n.declare_arg, align 4
  %lshift14 = shl i128 1, %n13
  %sub15 = sub i128 %lshift14, 1
  %sgt = icmp sgt i128 %qhat12, %sub15
  br i1 %sgt, label %if.true, label %if.false

if.true:                                          ; preds = %entry
  %n16 = load i128, i128* %short_div_norm.n.declare_arg, align 4
  %lshift17 = shl i128 1, %n16
  %sub18 = sub i128 %lshift17, 1
  store i128 %sub18, i128* %qhat, align 4
  br label %if.exit

if.false:                                         ; preds = %entry
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  %n19 = load i128, i128* %short_div_norm.n.declare_arg, align 4
  %k20 = load i128, i128* %short_div_norm.k.declare_arg, align 4
  %qhat21 = load i128, i128* %qhat, align 4
  %b22 = load [256 x i128]*, [256 x i128]** %short_div_norm.b.declare_arg, align 8
  %call = call [256 x i128]* @long_scalar_mult(i128 %n19, i128 %k20, i128 %qhat21, [256 x i128]* %b22)
  store [256 x i128]* %call, [256 x i128]** %mult, align 8
  %n25 = load i128, i128* %short_div_norm.n.declare_arg, align 4
  %k26 = load i128, i128* %short_div_norm.k.declare_arg, align 4
  %add27 = add i128 %k26, 1
  %mult28 = load [256 x i128]*, [256 x i128]** %mult, align 8
  %a29 = load [256 x i128]*, [256 x i128]** %short_div_norm.a.declare_arg, align 8
  %call30 = call i128 @long_gt(i128 %n25, i128 %add27, [256 x i128]* %mult28, [256 x i128]* %a29)
  %eq = icmp eq i128 %call30, 1
  br i1 %eq, label %if.true23, label %if.false24

if.true23:                                        ; preds = %if.exit
  %n31 = load i128, i128* %short_div_norm.n.declare_arg, align 4
  %k32 = load i128, i128* %short_div_norm.k.declare_arg, align 4
  %add33 = add i128 %k32, 1
  %mult34 = load [256 x i128]*, [256 x i128]** %mult, align 8
  %b35 = load [256 x i128]*, [256 x i128]** %short_div_norm.b.declare_arg, align 8
  %call36 = call [256 x i128]* @long_sub(i128 %n31, i128 %add33, [256 x i128]* %mult34, [256 x i128]* %b35)
  store [256 x i128]* %call36, [256 x i128]** %mult, align 8
  %n39 = load i128, i128* %short_div_norm.n.declare_arg, align 4
  %k40 = load i128, i128* %short_div_norm.k.declare_arg, align 4
  %add41 = add i128 %k40, 1
  %mult42 = load [256 x i128]*, [256 x i128]** %mult, align 8
  %a43 = load [256 x i128]*, [256 x i128]** %short_div_norm.a.declare_arg, align 8
  %call44 = call i128 @long_gt(i128 %n39, i128 %add41, [256 x i128]* %mult42, [256 x i128]* %a43)
  %eq45 = icmp eq i128 %call44, 1
  br i1 %eq45, label %if.true37, label %if.false38

if.false24:                                       ; preds = %if.exit
  %qhat50 = load i128, i128* %qhat, align 4
  ret i128 %qhat50

if.true37:                                        ; preds = %if.true23
  %qhat46 = load i128, i128* %qhat, align 4
  %sub47 = sub i128 %qhat46, 2
  ret i128 %sub47

if.false38:                                       ; preds = %if.true23
  %qhat48 = load i128, i128* %qhat, align 4
  %sub49 = sub i128 %qhat48, 1
  ret i128 %sub49
}

define void @fn_template_init_compconstant(%struct_template_circuit_compconstant* %0) {
entry:
  %CompConstant = alloca %struct_template_circuit_compconstant*, align 8
  store %struct_template_circuit_compconstant* %0, %struct_template_circuit_compconstant** %CompConstant, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %0, i32 0, i32 0
  %compconstant.ct.read_arg_inner = load i128, i128* %struct_getter, align 4
  %compconstant.ct.declare_arg = alloca i128, align 8
  store i128 %compconstant.ct.read_arg_inner, i128* %compconstant.ct.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %0, i32 0, i32 1
  %compconstant.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter1, align 8
  %compconstant.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %compconstant.in.read_input_inner, [256 x i128]** %compconstant.in.declare_input, align 8
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %slsb = alloca i128, align 8
  %slsb3 = call i128 @fn_intrinsic_inline_init()
  store i128 %slsb3, i128* %slsb, align 4
  %cmsb = alloca i128, align 8
  %cmsb4 = call i128 @fn_intrinsic_inline_init()
  store i128 %cmsb4, i128* %cmsb, align 4
  %compconstant.sout.declare_inter = alloca i128, align 8
  %sout = call i128 @fn_intrinsic_inline_init()
  store i128 %sout, i128* %compconstant.sout.declare_inter, align 4
  %e = alloca i128, align 8
  %e5 = call i128 @fn_intrinsic_inline_init()
  store i128 %e5, i128* %e, align 4
  %clsb = alloca i128, align 8
  %clsb6 = call i128 @fn_intrinsic_inline_init()
  store i128 %clsb6, i128* %clsb, align 4
  %b = alloca i128, align 8
  %b7 = call i128 @fn_intrinsic_inline_init()
  store i128 %b7, i128* %b, align 4
  %num2bits = alloca %struct_template_circuit_num2bits*, align 8
  %compconstant.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %compconstant.out.declare_output, align 4
  %smsb = alloca i128, align 8
  %smsb8 = call i128 @fn_intrinsic_inline_init()
  store i128 %smsb8, i128* %smsb, align 4
  %sum = alloca i128, align 8
  %sum9 = call i128 @fn_intrinsic_inline_init()
  store i128 %sum9, i128* %sum, align 4
  %compconstant.parts.declare_inter = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %parts = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %parts, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %a = alloca i128, align 8
  %a10 = call i128 @fn_intrinsic_inline_init()
  store i128 %a10, i128* %a, align 4
  store i128 0, i128* %clsb, align 4
  store i128 0, i128* %cmsb, align 4
  store i128 0, i128* %slsb, align 4
  store i128 0, i128* %smsb, align 4
  store i128 0, i128* %sum, align 4
  store i128 poison, i128* %b, align 4
  store i128 1, i128* %a, align 4
  store i128 1, i128* %e, align 4
  store i128 0, i128* %i, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %ct = load i128, i128* %compconstant.ct.declare_arg, align 4
  %i11 = load i128, i128* %i, align 4
  %mul = mul i128 %i11, 2
  %rshift = lshr i128 %ct, %mul
  %and = and i128 %rshift, 1
  store i128 %and, i128* %clsb, align 4
  %ct12 = load i128, i128* %compconstant.ct.declare_arg, align 4
  %i13 = load i128, i128* %i, align 4
  %mul14 = mul i128 %i13, 2
  %add = add i128 %mul14, 1
  %rshift15 = lshr i128 %ct12, %add
  %and16 = and i128 %rshift15, 1
  store i128 %and16, i128* %cmsb, align 4
  %in = load [256 x i128]*, [256 x i128]** %compconstant.in.declare_input, align 8
  %i17 = load i128, i128* %i, align 4
  %mul18 = mul i128 %i17, 2
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %mul18
  %in19 = load i128, i128* %array_getter, align 4
  store i128 %in19, i128* %slsb, align 4
  %in20 = load [256 x i128]*, [256 x i128]** %compconstant.in.declare_input, align 8
  %i21 = load i128, i128* %i, align 4
  %mul22 = mul i128 %i21, 2
  %add23 = add i128 %mul22, 1
  %array_getter24 = getelementptr inbounds [256 x i128], [256 x i128]* %in20, i128 0, i128 %add23
  %in25 = load i128, i128* %array_getter24, align 4
  store i128 %in25, i128* %smsb, align 4
  %cmsb26 = load i128, i128* %cmsb, align 4
  %eq = icmp eq i128 %cmsb26, 0
  %clsb27 = load i128, i128* %clsb, align 4
  %eq28 = icmp eq i128 %clsb27, 0
  %and29 = and i1 %eq, %eq28
  br i1 %and29, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  %b30 = load i128, i128* %b, align 4
  %neg = sub i128 0, %b30
  %smsb31 = load i128, i128* %smsb, align 4
  %mul32 = mul i128 %neg, %smsb31
  %slsb33 = load i128, i128* %slsb, align 4
  %mul34 = mul i128 %mul32, %slsb33
  %b35 = load i128, i128* %b, align 4
  %smsb36 = load i128, i128* %smsb, align 4
  %mul37 = mul i128 %b35, %smsb36
  %add38 = add i128 %mul34, %mul37
  %b39 = load i128, i128* %b, align 4
  %slsb40 = load i128, i128* %slsb, align 4
  %mul41 = mul i128 %b39, %slsb40
  %add42 = add i128 %add38, %mul41
  %parts43 = load [256 x i128]*, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %i44 = load i128, i128* %i, align 4
  %array_getter45 = getelementptr inbounds [256 x i128], [256 x i128]* %parts43, i128 0, i128 %i44
  %parts46 = load i128, i128* %array_getter45, align 4
  call void @fn_intrinsic_add_constraint(i128 %parts46, i128 %add42, i1* @constraint.33)
  %ptr_getter = load [256 x i128]*, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %i47 = load i128, i128* %i, align 4
  %parts48 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i47
  store i128 %add42, i128* %parts48, align 4
  br label %if.exit122

if.false:                                         ; preds = %loop.body
  %cmsb51 = load i128, i128* %cmsb, align 4
  %eq52 = icmp eq i128 %cmsb51, 0
  %clsb53 = load i128, i128* %clsb, align 4
  %eq54 = icmp eq i128 %clsb53, 1
  %and55 = and i1 %eq52, %eq54
  br i1 %and55, label %if.true49, label %if.false50

if.true49:                                        ; preds = %if.false
  %a56 = load i128, i128* %a, align 4
  %smsb57 = load i128, i128* %smsb, align 4
  %mul58 = mul i128 %a56, %smsb57
  %slsb59 = load i128, i128* %slsb, align 4
  %mul60 = mul i128 %mul58, %slsb59
  %a61 = load i128, i128* %a, align 4
  %slsb62 = load i128, i128* %slsb, align 4
  %mul63 = mul i128 %a61, %slsb62
  %sub = sub i128 %mul60, %mul63
  %b64 = load i128, i128* %b, align 4
  %smsb65 = load i128, i128* %smsb, align 4
  %mul66 = mul i128 %b64, %smsb65
  %add67 = add i128 %sub, %mul66
  %a68 = load i128, i128* %a, align 4
  %smsb69 = load i128, i128* %smsb, align 4
  %mul70 = mul i128 %a68, %smsb69
  %sub71 = sub i128 %add67, %mul70
  %a72 = load i128, i128* %a, align 4
  %add73 = add i128 %sub71, %a72
  %parts74 = load [256 x i128]*, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %i75 = load i128, i128* %i, align 4
  %array_getter76 = getelementptr inbounds [256 x i128], [256 x i128]* %parts74, i128 0, i128 %i75
  %parts77 = load i128, i128* %array_getter76, align 4
  call void @fn_intrinsic_add_constraint(i128 %parts77, i128 %add73, i1* @constraint.34)
  %ptr_getter78 = load [256 x i128]*, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %i79 = load i128, i128* %i, align 4
  %parts80 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter78, i128 0, i128 %i79
  store i128 %add73, i128* %parts80, align 4
  br label %if.exit121

if.false50:                                       ; preds = %if.false
  %cmsb83 = load i128, i128* %cmsb, align 4
  %eq84 = icmp eq i128 %cmsb83, 1
  %clsb85 = load i128, i128* %clsb, align 4
  %eq86 = icmp eq i128 %clsb85, 0
  %and87 = and i1 %eq84, %eq86
  br i1 %and87, label %if.true81, label %if.false82

if.true81:                                        ; preds = %if.false50
  %b88 = load i128, i128* %b, align 4
  %smsb89 = load i128, i128* %smsb, align 4
  %mul90 = mul i128 %b88, %smsb89
  %slsb91 = load i128, i128* %slsb, align 4
  %mul92 = mul i128 %mul90, %slsb91
  %a93 = load i128, i128* %a, align 4
  %smsb94 = load i128, i128* %smsb, align 4
  %mul95 = mul i128 %a93, %smsb94
  %sub96 = sub i128 %mul92, %mul95
  %a97 = load i128, i128* %a, align 4
  %add98 = add i128 %sub96, %a97
  %parts99 = load [256 x i128]*, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %i100 = load i128, i128* %i, align 4
  %array_getter101 = getelementptr inbounds [256 x i128], [256 x i128]* %parts99, i128 0, i128 %i100
  %parts102 = load i128, i128* %array_getter101, align 4
  call void @fn_intrinsic_add_constraint(i128 %parts102, i128 %add98, i1* @constraint.35)
  %ptr_getter103 = load [256 x i128]*, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %i104 = load i128, i128* %i, align 4
  %parts105 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter103, i128 0, i128 %i104
  store i128 %add98, i128* %parts105, align 4
  br label %if.exit

if.false82:                                       ; preds = %if.false50
  %a106 = load i128, i128* %a, align 4
  %neg107 = sub i128 0, %a106
  %smsb108 = load i128, i128* %smsb, align 4
  %mul109 = mul i128 %neg107, %smsb108
  %slsb110 = load i128, i128* %slsb, align 4
  %mul111 = mul i128 %mul109, %slsb110
  %a112 = load i128, i128* %a, align 4
  %add113 = add i128 %mul111, %a112
  %parts114 = load [256 x i128]*, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %i115 = load i128, i128* %i, align 4
  %array_getter116 = getelementptr inbounds [256 x i128], [256 x i128]* %parts114, i128 0, i128 %i115
  %parts117 = load i128, i128* %array_getter116, align 4
  call void @fn_intrinsic_add_constraint(i128 %parts117, i128 %add113, i1* @constraint.36)
  %ptr_getter118 = load [256 x i128]*, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %i119 = load i128, i128* %i, align 4
  %parts120 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter118, i128 0, i128 %i119
  store i128 %add113, i128* %parts120, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false82, %if.true81
  br label %if.exit121

if.exit121:                                       ; preds = %if.exit, %if.true49
  br label %if.exit122

if.exit122:                                       ; preds = %if.exit121, %if.true
  %sum123 = load i128, i128* %sum, align 4
  %parts124 = load [256 x i128]*, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %i125 = load i128, i128* %i, align 4
  %array_getter126 = getelementptr inbounds [256 x i128], [256 x i128]* %parts124, i128 0, i128 %i125
  %parts127 = load i128, i128* %array_getter126, align 4
  %add128 = add i128 %sum123, %parts127
  store i128 %add128, i128* %sum, align 4
  %b129 = load i128, i128* %b, align 4
  %e130 = load i128, i128* %e, align 4
  %sub131 = sub i128 %b129, %e130
  store i128 %sub131, i128* %b, align 4
  %a132 = load i128, i128* %a, align 4
  %e133 = load i128, i128* %e, align 4
  %add134 = add i128 %a132, %e133
  store i128 %add134, i128* %a, align 4
  %e135 = load i128, i128* %e, align 4
  %mul136 = mul i128 %e135, 2
  store i128 %mul136, i128* %e, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit122
  %i137 = load i128, i128* %i, align 4
  %add138 = add i128 %i137, 1
  store i128 %add138, i128* %i, align 4
  %i139 = load i128, i128* %i, align 4
  %slt = icmp slt i128 %i139, 127
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %sum140 = load i128, i128* %sum, align 4
  %sout141 = load i128, i128* %compconstant.sout.declare_inter, align 4
  call void @fn_intrinsic_add_constraint(i128 %sout141, i128 %sum140, i1* @constraint.37)
  %ptr_getter142 = load %struct_template_circuit_compconstant*, %struct_template_circuit_compconstant** %CompConstant, align 8
  %compconstant.sout.write_inter_inner = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %ptr_getter142, i32 0, i32 3
  store i128 %sum140, i128* %compconstant.sout.write_inter_inner, align 4
  %CompConstant143 = load %struct_template_circuit_compconstant*, %struct_template_circuit_compconstant** %CompConstant, align 8
  %struct_getter144 = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %CompConstant143, i32 0, i32 3
  %compconstant.sout.read_inter_inner = load i128, i128* %struct_getter144, align 4
  store i128 %compconstant.sout.read_inter_inner, i128* %compconstant.sout.declare_inter, align 4
  %call = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 135)
  store %struct_template_circuit_num2bits* %call, %struct_template_circuit_num2bits** %num2bits, align 8
  %sout145 = load i128, i128* %compconstant.sout.declare_inter, align 4
  %num2bits146 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %num2bits, align 8
  %struct_getter147 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %num2bits146, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter147, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %sout145, i1* @constraint.38)
  %ptr_getter148 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %num2bits, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter148, i32 0, i32 1
  store i128 %sout145, i128* %num2bits.in.write_input_outter, align 4
  %num2bits149 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %num2bits, align 8
  %struct_getter150 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %num2bits149, i32 0, i32 2
  %num2bits.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter150, align 8
  %array_getter151 = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter, i128 0, i128 127
  %num2bits152 = load i128, i128* %array_getter151, align 4
  %out153 = load i128, i128* %compconstant.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out153, i128 %num2bits152, i1* @constraint.39)
  %ptr_getter154 = load %struct_template_circuit_compconstant*, %struct_template_circuit_compconstant** %CompConstant, align 8
  %compconstant.out.write_output_inner = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %ptr_getter154, i32 0, i32 4
  store i128 %num2bits152, i128* %compconstant.out.write_output_inner, align 4
  %CompConstant155 = load %struct_template_circuit_compconstant*, %struct_template_circuit_compconstant** %CompConstant, align 8
  %struct_getter156 = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %CompConstant155, i32 0, i32 4
  %compconstant.out.read_output_inner = load i128, i128* %struct_getter156, align 4
  store i128 %compconstant.out.read_output_inner, i128* %compconstant.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit
  %parts157 = load [256 x i128]*, [256 x i128]** %compconstant.parts.declare_inter, align 8
  %compconstant.parts.write_inter_inner = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %0, i32 0, i32 2
  store [256 x i128]* %parts157, [256 x i128]** %compconstant.parts.write_inter_inner, align 8
  %sout158 = load i128, i128* %compconstant.sout.declare_inter, align 4
  %compconstant.sout.write_inter_inner159 = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %0, i32 0, i32 3
  store i128 %sout158, i128* %compconstant.sout.write_inter_inner159, align 4
  %out160 = load i128, i128* %compconstant.out.declare_output, align 4
  %compconstant.out.write_output_inner161 = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %0, i32 0, i32 4
  store i128 %out160, i128* %compconstant.out.write_output_inner161, align 4
  ret void
}

define %struct_template_circuit_compconstant* @fn_template_build_compconstant(i128 %0) {
entry:
  %struct_template_circuit_compconstant = alloca %struct_template_circuit_compconstant, align 8
  %compconstant.ct.write_arg_inner = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %struct_template_circuit_compconstant, i32 0, i32 0
  store i128 %0, i128* %compconstant.ct.write_arg_inner, align 4
  ret %struct_template_circuit_compconstant* %struct_template_circuit_compconstant
}

define void @fn_template_init_bigmultshortlong2d(%struct_template_circuit_bigmultshortlong2d* %0) {
entry:
  %BigMultShortLong2D = alloca %struct_template_circuit_bigmultshortlong2d*, align 8
  store %struct_template_circuit_bigmultshortlong2d* %0, %struct_template_circuit_bigmultshortlong2d** %BigMultShortLong2D, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigmultshortlong2d, %struct_template_circuit_bigmultshortlong2d* %0, i32 0, i32 0
  %bigmultshortlong2d.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigmultshortlong2d.n.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong2d.n.read_arg_inner, i128* %bigmultshortlong2d.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigmultshortlong2d, %struct_template_circuit_bigmultshortlong2d* %0, i32 0, i32 1
  %bigmultshortlong2d.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigmultshortlong2d.k.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong2d.k.read_arg_inner, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigmultshortlong2d, %struct_template_circuit_bigmultshortlong2d* %0, i32 0, i32 2
  %bigmultshortlong2d.l.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %bigmultshortlong2d.l.declare_arg = alloca i128, align 8
  store i128 %bigmultshortlong2d.l.read_arg_inner, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigmultshortlong2d, %struct_template_circuit_bigmultshortlong2d* %0, i32 0, i32 3
  %bigmultshortlong2d.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %bigmultshortlong2d.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %bigmultshortlong2d.a.read_input_inner, [256 x [256 x i128]]** %bigmultshortlong2d.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_bigmultshortlong2d, %struct_template_circuit_bigmultshortlong2d* %0, i32 0, i32 4
  %bigmultshortlong2d.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %bigmultshortlong2d.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %bigmultshortlong2d.b.read_input_inner, [256 x [256 x i128]]** %bigmultshortlong2d.b.declare_input, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %prod_val = alloca [256 x [256 x i128]]*, align 8
  %prod_val6 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %prod_val6, [256 x [256 x i128]]** %prod_val, align 8
  %i1 = alloca i128, align 8
  %i17 = call i128 @fn_intrinsic_inline_init()
  store i128 %i17, i128* %i1, align 4
  %out_poly = alloca [256 x [256 x i128]]*, align 8
  %out_poly8 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out_poly8, [256 x [256 x i128]]** %out_poly, align 8
  %k2 = alloca i128, align 8
  %k29 = call i128 @fn_intrinsic_inline_init()
  store i128 %k29, i128* %k2, align 4
  %pow = alloca [256 x [256 x i128]]*, align 8
  %pow10 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %pow10, [256 x [256 x i128]]** %pow, align 8
  %deg2 = alloca i128, align 8
  %deg211 = call i128 @fn_intrinsic_inline_init()
  store i128 %deg211, i128* %deg2, align 4
  %bigmultshortlong2d.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %bigmultshortlong2d.out.declare_output, align 8
  %i2 = alloca i128, align 8
  %i212 = call i128 @fn_intrinsic_inline_init()
  store i128 %i212, i128* %i2, align 4
  %j2 = alloca i128, align 8
  %j213 = call i128 @fn_intrinsic_inline_init()
  store i128 %j213, i128* %j2, align 4
  %deg1 = alloca i128, align 8
  %deg114 = call i128 @fn_intrinsic_inline_init()
  store i128 %deg114, i128* %deg1, align 4
  %a_poly = alloca [256 x [256 x i128]]*, align 8
  %a_poly15 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %a_poly15, [256 x [256 x i128]]** %a_poly, align 8
  %j1 = alloca i128, align 8
  %j116 = call i128 @fn_intrinsic_inline_init()
  store i128 %j116, i128* %j1, align 4
  %j = alloca i128, align 8
  %j17 = call i128 @fn_intrinsic_inline_init()
  store i128 %j17, i128* %j, align 4
  %b_poly = alloca [256 x [256 x i128]]*, align 8
  %b_poly18 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %b_poly18, [256 x [256 x i128]]** %b_poly, align 8
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %prod_val, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch25, %entry
  store i128 0, i128* %j, align 4
  br label %loop.body19

loop.body19:                                      ; preds = %loop.latch, %loop.body
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %i20 = load i128, i128* %i, align 4
  %j21 = load i128, i128* %j, align 4
  %prod_val22 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 %i20, i128 %j21
  store i128 0, i128* %prod_val22, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body19
  %j23 = load i128, i128* %j, align 4
  %add = add i128 %j23, 1
  store i128 %add, i128* %j, align 4
  %j24 = load i128, i128* %j, align 4
  %k = load i128, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %mul = mul i128 2, %k
  %sub = sub i128 %mul, 1
  %slt = icmp slt i128 %j24, %sub
  br i1 %slt, label %loop.body19, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch25

loop.latch25:                                     ; preds = %loop.exit
  %i26 = load i128, i128* %i, align 4
  %add27 = add i128 %i26, 1
  store i128 %add27, i128* %i, align 4
  %i28 = load i128, i128* %i, align 4
  %l = load i128, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %mul29 = mul i128 2, %l
  %sub30 = sub i128 %mul29, 1
  %slt31 = icmp slt i128 %i28, %sub30
  br i1 %slt31, label %loop.body, label %loop.exit32

loop.exit32:                                      ; preds = %loop.latch25
  store i128 0, i128* %i1, align 4
  br label %loop.body33

loop.body33:                                      ; preds = %loop.latch82, %loop.exit32
  store i128 0, i128* %i2, align 4
  br label %loop.body34

loop.body34:                                      ; preds = %loop.latch75, %loop.body33
  store i128 0, i128* %j1, align 4
  br label %loop.body35

loop.body35:                                      ; preds = %loop.latch68, %loop.body34
  store i128 0, i128* %j2, align 4
  br label %loop.body36

loop.body36:                                      ; preds = %loop.latch61, %loop.body35
  %i137 = load i128, i128* %i1, align 4
  %i238 = load i128, i128* %i2, align 4
  %add39 = add i128 %i137, %i238
  store i128 %add39, i128* %i, align 4
  %j140 = load i128, i128* %j1, align 4
  %j241 = load i128, i128* %j2, align 4
  %add42 = add i128 %j140, %j241
  store i128 %add42, i128* %j, align 4
  %prod_val43 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %i44 = load i128, i128* %i, align 4
  %j45 = load i128, i128* %j, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %prod_val43, i128 0, i128 %i44, i128 %j45
  %prod_val46 = load i128, i128* %array_getter, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2d.a.declare_input, align 8
  %i147 = load i128, i128* %i1, align 4
  %j148 = load i128, i128* %j1, align 4
  %array_getter49 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i147, i128 %j148
  %a50 = load i128, i128* %array_getter49, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2d.b.declare_input, align 8
  %i251 = load i128, i128* %i2, align 4
  %j252 = load i128, i128* %j2, align 4
  %array_getter53 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %i251, i128 %j252
  %b54 = load i128, i128* %array_getter53, align 4
  %mul55 = mul i128 %a50, %b54
  %add56 = add i128 %prod_val46, %mul55
  %ptr_getter57 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %i58 = load i128, i128* %i, align 4
  %j59 = load i128, i128* %j, align 4
  %prod_val60 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter57, i128 0, i128 %i58, i128 %j59
  store i128 %add56, i128* %prod_val60, align 4
  br label %loop.latch61

loop.latch61:                                     ; preds = %loop.body36
  %j262 = load i128, i128* %j2, align 4
  %add63 = add i128 %j262, 1
  store i128 %add63, i128* %j2, align 4
  %j264 = load i128, i128* %j2, align 4
  %k65 = load i128, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %slt66 = icmp slt i128 %j264, %k65
  br i1 %slt66, label %loop.body36, label %loop.exit67

loop.exit67:                                      ; preds = %loop.latch61
  br label %loop.latch68

loop.latch68:                                     ; preds = %loop.exit67
  %j169 = load i128, i128* %j1, align 4
  %add70 = add i128 %j169, 1
  store i128 %add70, i128* %j1, align 4
  %j171 = load i128, i128* %j1, align 4
  %k72 = load i128, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %slt73 = icmp slt i128 %j171, %k72
  br i1 %slt73, label %loop.body35, label %loop.exit74

loop.exit74:                                      ; preds = %loop.latch68
  br label %loop.latch75

loop.latch75:                                     ; preds = %loop.exit74
  %i276 = load i128, i128* %i2, align 4
  %add77 = add i128 %i276, 1
  store i128 %add77, i128* %i2, align 4
  %i278 = load i128, i128* %i2, align 4
  %l79 = load i128, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %slt80 = icmp slt i128 %i278, %l79
  br i1 %slt80, label %loop.body34, label %loop.exit81

loop.exit81:                                      ; preds = %loop.latch75
  br label %loop.latch82

loop.latch82:                                     ; preds = %loop.exit81
  %i183 = load i128, i128* %i1, align 4
  %add84 = add i128 %i183, 1
  store i128 %add84, i128* %i1, align 4
  %i185 = load i128, i128* %i1, align 4
  %l86 = load i128, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %slt87 = icmp slt i128 %i185, %l86
  br i1 %slt87, label %loop.body33, label %loop.exit88

loop.exit88:                                      ; preds = %loop.latch82
  store i128 0, i128* %i, align 4
  br label %loop.body89

loop.body89:                                      ; preds = %loop.latch109, %loop.exit88
  store i128 0, i128* %j, align 4
  br label %loop.body90

loop.body90:                                      ; preds = %loop.latch100, %loop.body89
  %prod_val91 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %i92 = load i128, i128* %i, align 4
  %j93 = load i128, i128* %j, align 4
  %array_getter94 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %prod_val91, i128 0, i128 %i92, i128 %j93
  %prod_val95 = load i128, i128* %array_getter94, align 4
  %ptr_getter96 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2d.out.declare_output, align 8
  %i97 = load i128, i128* %i, align 4
  %j98 = load i128, i128* %j, align 4
  %out99 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter96, i128 0, i128 %i97, i128 %j98
  store i128 %prod_val95, i128* %out99, align 4
  br label %loop.latch100

loop.latch100:                                    ; preds = %loop.body90
  %j101 = load i128, i128* %j, align 4
  %add102 = add i128 %j101, 1
  store i128 %add102, i128* %j, align 4
  %j103 = load i128, i128* %j, align 4
  %k104 = load i128, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %mul105 = mul i128 2, %k104
  %sub106 = sub i128 %mul105, 1
  %slt107 = icmp slt i128 %j103, %sub106
  br i1 %slt107, label %loop.body90, label %loop.exit108

loop.exit108:                                     ; preds = %loop.latch100
  br label %loop.latch109

loop.latch109:                                    ; preds = %loop.exit108
  %i110 = load i128, i128* %i, align 4
  %add111 = add i128 %i110, 1
  store i128 %add111, i128* %i, align 4
  %i112 = load i128, i128* %i, align 4
  %l113 = load i128, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %mul114 = mul i128 2, %l113
  %sub115 = sub i128 %mul114, 1
  %slt116 = icmp slt i128 %i112, %sub115
  br i1 %slt116, label %loop.body89, label %loop.exit117

loop.exit117:                                     ; preds = %loop.latch109
  %k118 = load i128, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %mul119 = mul i128 2, %k118
  %sub120 = sub i128 %mul119, 1
  %l121 = load i128, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %mul122 = mul i128 2, %l121
  %sub123 = sub i128 %mul122, 1
  %sgt = icmp sgt i128 %sub120, %sub123
  %k124 = load i128, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %mul125 = mul i128 2, %k124
  %sub126 = sub i128 %mul125, 1
  %l127 = load i128, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %mul128 = mul i128 2, %l127
  %sub129 = sub i128 %mul128, 1
  %inline_switch = call i128 @fn_intrinsic_inline_switch(i1 %sgt, i128 %sub126, i128 %sub129)
  store i128 %inline_switch, i128* %k2, align 4
  %uniform_array130 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array130, [256 x [256 x i128]]** %pow, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body131

loop.body131:                                     ; preds = %loop.latch148, %loop.exit117
  store i128 0, i128* %j, align 4
  br label %loop.body132

loop.body132:                                     ; preds = %loop.latch141, %loop.body131
  %i133 = load i128, i128* %i, align 4
  %j134 = load i128, i128* %j, align 4
  %pow135 = call i128 @fn_intrinsic_inline_powi(i128 %i133, i128 %j134)
  %ptr_getter136 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i138 = load i128, i128* %i, align 4
  %j139 = load i128, i128* %j, align 4
  %pow140 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter136, i128 0, i128 %i138, i128 %j139
  store i128 %pow135, i128* %pow140, align 4
  br label %loop.latch141

loop.latch141:                                    ; preds = %loop.body132
  %j142 = load i128, i128* %j, align 4
  %add143 = add i128 %j142, 1
  store i128 %add143, i128* %j, align 4
  %j144 = load i128, i128* %j, align 4
  %k2145 = load i128, i128* %k2, align 4
  %slt146 = icmp slt i128 %j144, %k2145
  br i1 %slt146, label %loop.body132, label %loop.exit147

loop.exit147:                                     ; preds = %loop.latch141
  br label %loop.latch148

loop.latch148:                                    ; preds = %loop.exit147
  %i149 = load i128, i128* %i, align 4
  %add150 = add i128 %i149, 1
  store i128 %add150, i128* %i, align 4
  %i151 = load i128, i128* %i, align 4
  %k2152 = load i128, i128* %k2, align 4
  %slt153 = icmp slt i128 %i151, %k2152
  br i1 %slt153, label %loop.body131, label %loop.exit154

loop.exit154:                                     ; preds = %loop.latch148
  %uniform_array155 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array155, [256 x [256 x i128]]** %a_poly, align 8
  %uniform_array156 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array156, [256 x [256 x i128]]** %b_poly, align 8
  %uniform_array157 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array157, [256 x [256 x i128]]** %out_poly, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body158

loop.body158:                                     ; preds = %loop.latch300, %loop.exit154
  store i128 0, i128* %j, align 4
  br label %loop.body159

loop.body159:                                     ; preds = %loop.latch291, %loop.body158
  %ptr_getter160 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %a_poly, align 8
  %i161 = load i128, i128* %i, align 4
  %j162 = load i128, i128* %j, align 4
  %a_poly163 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter160, i128 0, i128 %i161, i128 %j162
  store i128 0, i128* %a_poly163, align 4
  %ptr_getter164 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_poly, align 8
  %i165 = load i128, i128* %i, align 4
  %j166 = load i128, i128* %j, align 4
  %b_poly167 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter164, i128 0, i128 %i165, i128 %j166
  store i128 0, i128* %b_poly167, align 4
  %ptr_getter168 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out_poly, align 8
  %i169 = load i128, i128* %i, align 4
  %j170 = load i128, i128* %j, align 4
  %out_poly171 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter168, i128 0, i128 %i169, i128 %j170
  store i128 0, i128* %out_poly171, align 4
  store i128 0, i128* %deg1, align 4
  br label %loop.body172

loop.body172:                                     ; preds = %loop.latch236, %loop.body159
  store i128 0, i128* %deg2, align 4
  br label %loop.body173

loop.body173:                                     ; preds = %loop.latch229, %loop.body172
  %a_poly174 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %a_poly, align 8
  %i175 = load i128, i128* %i, align 4
  %j176 = load i128, i128* %j, align 4
  %array_getter177 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a_poly174, i128 0, i128 %i175, i128 %j176
  %a_poly178 = load i128, i128* %array_getter177, align 4
  %a179 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2d.a.declare_input, align 8
  %deg1180 = load i128, i128* %deg1, align 4
  %deg2181 = load i128, i128* %deg2, align 4
  %array_getter182 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a179, i128 0, i128 %deg1180, i128 %deg2181
  %a183 = load i128, i128* %array_getter182, align 4
  %pow184 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i186 = load i128, i128* %i, align 4
  %deg1187 = load i128, i128* %deg1, align 4
  %array_getter188 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow184, i128 0, i128 %i186, i128 %deg1187
  %pow189 = load i128, i128* %array_getter188, align 4
  %mul190 = mul i128 %a183, %pow189
  %pow191 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %j192 = load i128, i128* %j, align 4
  %deg2193 = load i128, i128* %deg2, align 4
  %array_getter194 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow191, i128 0, i128 %j192, i128 %deg2193
  %pow195 = load i128, i128* %array_getter194, align 4
  %mul196 = mul i128 %mul190, %pow195
  %add197 = add i128 %a_poly178, %mul196
  %ptr_getter198 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %a_poly, align 8
  %i199 = load i128, i128* %i, align 4
  %j200 = load i128, i128* %j, align 4
  %a_poly201 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter198, i128 0, i128 %i199, i128 %j200
  store i128 %add197, i128* %a_poly201, align 4
  %b_poly202 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_poly, align 8
  %i203 = load i128, i128* %i, align 4
  %j204 = load i128, i128* %j, align 4
  %array_getter205 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b_poly202, i128 0, i128 %i203, i128 %j204
  %b_poly206 = load i128, i128* %array_getter205, align 4
  %b207 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2d.b.declare_input, align 8
  %deg1208 = load i128, i128* %deg1, align 4
  %deg2209 = load i128, i128* %deg2, align 4
  %array_getter210 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b207, i128 0, i128 %deg1208, i128 %deg2209
  %b211 = load i128, i128* %array_getter210, align 4
  %pow212 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i213 = load i128, i128* %i, align 4
  %deg1214 = load i128, i128* %deg1, align 4
  %array_getter215 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow212, i128 0, i128 %i213, i128 %deg1214
  %pow216 = load i128, i128* %array_getter215, align 4
  %mul217 = mul i128 %b211, %pow216
  %pow218 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %j219 = load i128, i128* %j, align 4
  %deg2220 = load i128, i128* %deg2, align 4
  %array_getter221 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow218, i128 0, i128 %j219, i128 %deg2220
  %pow222 = load i128, i128* %array_getter221, align 4
  %mul223 = mul i128 %mul217, %pow222
  %add224 = add i128 %b_poly206, %mul223
  %ptr_getter225 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_poly, align 8
  %i226 = load i128, i128* %i, align 4
  %j227 = load i128, i128* %j, align 4
  %b_poly228 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter225, i128 0, i128 %i226, i128 %j227
  store i128 %add224, i128* %b_poly228, align 4
  br label %loop.latch229

loop.latch229:                                    ; preds = %loop.body173
  %deg2230 = load i128, i128* %deg2, align 4
  %add231 = add i128 %deg2230, 1
  store i128 %add231, i128* %deg2, align 4
  %deg2232 = load i128, i128* %deg2, align 4
  %k233 = load i128, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %slt234 = icmp slt i128 %deg2232, %k233
  br i1 %slt234, label %loop.body173, label %loop.exit235

loop.exit235:                                     ; preds = %loop.latch229
  br label %loop.latch236

loop.latch236:                                    ; preds = %loop.exit235
  %deg1237 = load i128, i128* %deg1, align 4
  %add238 = add i128 %deg1237, 1
  store i128 %add238, i128* %deg1, align 4
  %deg1239 = load i128, i128* %deg1, align 4
  %l240 = load i128, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %slt241 = icmp slt i128 %deg1239, %l240
  br i1 %slt241, label %loop.body172, label %loop.exit242

loop.exit242:                                     ; preds = %loop.latch236
  store i128 0, i128* %deg1, align 4
  br label %loop.body243

loop.body243:                                     ; preds = %loop.latch282, %loop.exit242
  store i128 0, i128* %deg2, align 4
  br label %loop.body244

loop.body244:                                     ; preds = %loop.latch273, %loop.body243
  %out_poly245 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out_poly, align 8
  %i246 = load i128, i128* %i, align 4
  %j247 = load i128, i128* %j, align 4
  %array_getter248 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out_poly245, i128 0, i128 %i246, i128 %j247
  %out_poly249 = load i128, i128* %array_getter248, align 4
  %out250 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2d.out.declare_output, align 8
  %deg1251 = load i128, i128* %deg1, align 4
  %deg2252 = load i128, i128* %deg2, align 4
  %array_getter253 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out250, i128 0, i128 %deg1251, i128 %deg2252
  %out254 = load i128, i128* %array_getter253, align 4
  %pow255 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %i256 = load i128, i128* %i, align 4
  %deg1257 = load i128, i128* %deg1, align 4
  %array_getter258 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow255, i128 0, i128 %i256, i128 %deg1257
  %pow259 = load i128, i128* %array_getter258, align 4
  %mul260 = mul i128 %out254, %pow259
  %pow261 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pow, align 8
  %j263 = load i128, i128* %j, align 4
  %deg2264 = load i128, i128* %deg2, align 4
  %array_getter265 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pow261, i128 0, i128 %j263, i128 %deg2264
  %pow266 = load i128, i128* %array_getter265, align 4
  %mul267 = mul i128 %mul260, %pow266
  %add268 = add i128 %out_poly249, %mul267
  %ptr_getter269 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out_poly, align 8
  %i270 = load i128, i128* %i, align 4
  %j271 = load i128, i128* %j, align 4
  %out_poly272 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter269, i128 0, i128 %i270, i128 %j271
  store i128 %add268, i128* %out_poly272, align 4
  br label %loop.latch273

loop.latch273:                                    ; preds = %loop.body244
  %deg2274 = load i128, i128* %deg2, align 4
  %add275 = add i128 %deg2274, 1
  store i128 %add275, i128* %deg2, align 4
  %deg2276 = load i128, i128* %deg2, align 4
  %k277 = load i128, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %mul278 = mul i128 2, %k277
  %sub279 = sub i128 %mul278, 1
  %slt280 = icmp slt i128 %deg2276, %sub279
  br i1 %slt280, label %loop.body244, label %loop.exit281

loop.exit281:                                     ; preds = %loop.latch273
  br label %loop.latch282

loop.latch282:                                    ; preds = %loop.exit281
  %deg1283 = load i128, i128* %deg1, align 4
  %add284 = add i128 %deg1283, 1
  store i128 %add284, i128* %deg1, align 4
  %deg1285 = load i128, i128* %deg1, align 4
  %l286 = load i128, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %mul287 = mul i128 2, %l286
  %sub288 = sub i128 %mul287, 1
  %slt289 = icmp slt i128 %deg1285, %sub288
  br i1 %slt289, label %loop.body243, label %loop.exit290

loop.exit290:                                     ; preds = %loop.latch282
  br label %loop.latch291

loop.latch291:                                    ; preds = %loop.exit290
  %j292 = load i128, i128* %j, align 4
  %add293 = add i128 %j292, 1
  store i128 %add293, i128* %j, align 4
  %j294 = load i128, i128* %j, align 4
  %k295 = load i128, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %mul296 = mul i128 2, %k295
  %sub297 = sub i128 %mul296, 1
  %slt298 = icmp slt i128 %j294, %sub297
  br i1 %slt298, label %loop.body159, label %loop.exit299

loop.exit299:                                     ; preds = %loop.latch291
  br label %loop.latch300

loop.latch300:                                    ; preds = %loop.exit299
  %i301 = load i128, i128* %i, align 4
  %add302 = add i128 %i301, 1
  store i128 %add302, i128* %i, align 4
  %i303 = load i128, i128* %i, align 4
  %l304 = load i128, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %mul305 = mul i128 2, %l304
  %sub306 = sub i128 %mul305, 1
  %slt307 = icmp slt i128 %i303, %sub306
  br i1 %slt307, label %loop.body158, label %loop.exit308

loop.exit308:                                     ; preds = %loop.latch300
  store i128 0, i128* %i, align 4
  br label %loop.body309

loop.body309:                                     ; preds = %loop.latch336, %loop.exit308
  store i128 0, i128* %j, align 4
  br label %loop.body310

loop.body310:                                     ; preds = %loop.latch327, %loop.body309
  %out_poly311 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out_poly, align 8
  %i312 = load i128, i128* %i, align 4
  %j313 = load i128, i128* %j, align 4
  %array_getter314 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out_poly311, i128 0, i128 %i312, i128 %j313
  %out_poly315 = load i128, i128* %array_getter314, align 4
  %a_poly316 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %a_poly, align 8
  %i317 = load i128, i128* %i, align 4
  %j318 = load i128, i128* %j, align 4
  %array_getter319 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a_poly316, i128 0, i128 %i317, i128 %j318
  %a_poly320 = load i128, i128* %array_getter319, align 4
  %b_poly321 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_poly, align 8
  %i322 = load i128, i128* %i, align 4
  %j323 = load i128, i128* %j, align 4
  %array_getter324 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b_poly321, i128 0, i128 %i322, i128 %j323
  %b_poly325 = load i128, i128* %array_getter324, align 4
  %mul326 = mul i128 %a_poly320, %b_poly325
  call void @fn_intrinsic_add_constraint(i128 %out_poly315, i128 %mul326, i1* @constraint.40)
  br label %loop.latch327

loop.latch327:                                    ; preds = %loop.body310
  %j328 = load i128, i128* %j, align 4
  %add329 = add i128 %j328, 1
  store i128 %add329, i128* %j, align 4
  %j330 = load i128, i128* %j, align 4
  %k331 = load i128, i128* %bigmultshortlong2d.k.declare_arg, align 4
  %mul332 = mul i128 2, %k331
  %sub333 = sub i128 %mul332, 1
  %slt334 = icmp slt i128 %j330, %sub333
  br i1 %slt334, label %loop.body310, label %loop.exit335

loop.exit335:                                     ; preds = %loop.latch327
  br label %loop.latch336

loop.latch336:                                    ; preds = %loop.exit335
  %i337 = load i128, i128* %i, align 4
  %add338 = add i128 %i337, 1
  store i128 %add338, i128* %i, align 4
  %i339 = load i128, i128* %i, align 4
  %l340 = load i128, i128* %bigmultshortlong2d.l.declare_arg, align 4
  %mul341 = mul i128 2, %l340
  %sub342 = sub i128 %mul341, 1
  %slt343 = icmp slt i128 %i339, %sub342
  br i1 %slt343, label %loop.body309, label %loop.exit344

loop.exit344:                                     ; preds = %loop.latch336
  br label %exit

exit:                                             ; preds = %loop.exit344
  %out345 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %bigmultshortlong2d.out.declare_output, align 8
  %bigmultshortlong2d.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong2d, %struct_template_circuit_bigmultshortlong2d* %0, i32 0, i32 5
  store [256 x [256 x i128]]* %out345, [256 x [256 x i128]]** %bigmultshortlong2d.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigmultshortlong2d* @fn_template_build_bigmultshortlong2d(i128 %0, i128 %1, i128 %2) {
entry:
  %struct_template_circuit_bigmultshortlong2d = alloca %struct_template_circuit_bigmultshortlong2d, align 8
  %bigmultshortlong2d.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong2d, %struct_template_circuit_bigmultshortlong2d* %struct_template_circuit_bigmultshortlong2d, i32 0, i32 0
  store i128 %0, i128* %bigmultshortlong2d.n.write_arg_inner, align 4
  %bigmultshortlong2d.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong2d, %struct_template_circuit_bigmultshortlong2d* %struct_template_circuit_bigmultshortlong2d, i32 0, i32 1
  store i128 %1, i128* %bigmultshortlong2d.k.write_arg_inner, align 4
  %bigmultshortlong2d.l.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultshortlong2d, %struct_template_circuit_bigmultshortlong2d* %struct_template_circuit_bigmultshortlong2d, i32 0, i32 2
  store i128 %2, i128* %bigmultshortlong2d.l.write_arg_inner, align 4
  ret %struct_template_circuit_bigmultshortlong2d* %struct_template_circuit_bigmultshortlong2d
}

define i128 @long_is_zero(i128 %0, [256 x i128]* %1) {
entry:
  %long_is_zero.k.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_is_zero.k.declare_arg, align 4
  %long_is_zero.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %1, [256 x i128]** %long_is_zero.a.declare_arg, align 8
  %idx = alloca i128, align 8
  %idx1 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx1, i128* %idx, align 4
  store i128 0, i128* %idx, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %long_is_zero.a.declare_arg, align 8
  %idx2 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %idx2
  %a3 = load i128, i128* %array_getter, align 4
  %ne = icmp ne i128 %a3, 0
  br i1 %ne, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  ret i128 0

if.false:                                         ; preds = %loop.body
  br label %if.exit

if.exit:                                          ; preds = %if.false
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %idx4 = load i128, i128* %idx, align 4
  %add = add i128 %idx4, 1
  store i128 %add, i128* %idx, align 4
  %idx5 = load i128, i128* %idx, align 4
  %k = load i128, i128* %long_is_zero.k.declare_arg, align 4
  %slt = icmp slt i128 %idx5, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  ret i128 1
}

define [256 x [256 x i128]]* @signed_Fp2_mult_w6(i128 %0, [256 x [256 x i128]]* %1, i128 %2) {
entry:
  %signed_fp2_mult_w6.k.declare_arg = alloca i128, align 8
  store i128 %0, i128* %signed_fp2_mult_w6.k.declare_arg, align 4
  %signed_fp2_mult_w6.a.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %1, [256 x [256 x i128]]** %signed_fp2_mult_w6.a.declare_arg, align 8
  %signed_fp2_mult_w6.xi0.declare_arg = alloca i128, align 8
  store i128 %2, i128* %signed_fp2_mult_w6.xi0.declare_arg, align 4
  %out = alloca [256 x [256 x i128]]*, align 8
  %out1 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out1, [256 x [256 x i128]]** %out, align 8
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %out, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signed_fp2_mult_w6.a.declare_arg, align 8
  %i3 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 0, i128 %i3
  %a4 = load i128, i128* %array_getter, align 4
  %XI0 = load i128, i128* %signed_fp2_mult_w6.xi0.declare_arg, align 4
  %mul = mul i128 %a4, %XI0
  %a5 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signed_fp2_mult_w6.a.declare_arg, align 8
  %i6 = load i128, i128* %i, align 4
  %array_getter7 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a5, i128 0, i128 1, i128 %i6
  %a8 = load i128, i128* %array_getter7, align 4
  %sub = sub i128 %mul, %a8
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %i9 = load i128, i128* %i, align 4
  %out10 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 0, i128 %i9
  store i128 %sub, i128* %out10, align 4
  %a11 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signed_fp2_mult_w6.a.declare_arg, align 8
  %i12 = load i128, i128* %i, align 4
  %array_getter13 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a11, i128 0, i128 0, i128 %i12
  %a14 = load i128, i128* %array_getter13, align 4
  %a15 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signed_fp2_mult_w6.a.declare_arg, align 8
  %i16 = load i128, i128* %i, align 4
  %array_getter17 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a15, i128 0, i128 1, i128 %i16
  %a18 = load i128, i128* %array_getter17, align 4
  %XI019 = load i128, i128* %signed_fp2_mult_w6.xi0.declare_arg, align 4
  %mul20 = mul i128 %a18, %XI019
  %add = add i128 %a14, %mul20
  %ptr_getter21 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %i22 = load i128, i128* %i, align 4
  %out23 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter21, i128 0, i128 1, i128 %i22
  store i128 %add, i128* %out23, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i24 = load i128, i128* %i, align 4
  %add25 = add i128 %i24, 1
  store i128 %add25, i128* %i, align 4
  %i26 = load i128, i128* %i, align 4
  %k = load i128, i128* %signed_fp2_mult_w6.k.declare_arg, align 4
  %slt = icmp slt i128 %i26, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %out27 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  ret [256 x [256 x i128]]* %out27
}

define [256 x [256 x i128]]* @prod2D(i128 %0, i128 %1, i128 %2, [256 x [256 x i128]]* %3, [256 x [256 x i128]]* %4) {
entry:
  %prod2d.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %prod2d.n.declare_arg, align 4
  %prod2d.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %prod2d.k.declare_arg, align 4
  %prod2d.l.declare_arg = alloca i128, align 8
  store i128 %2, i128* %prod2d.l.declare_arg, align 4
  %prod2d.a.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %3, [256 x [256 x i128]]** %prod2d.a.declare_arg, align 8
  %prod2d.b.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %4, [256 x [256 x i128]]** %prod2d.b.declare_arg, align 8
  %i2 = alloca i128, align 8
  %i21 = call i128 @fn_intrinsic_inline_init()
  store i128 %i21, i128* %i2, align 4
  %out = alloca [256 x [256 x i128]]*, align 8
  %out2 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out2, [256 x [256 x i128]]** %out, align 8
  %carry = alloca [256 x [256 x i128]]*, align 8
  %carry3 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %carry3, [256 x [256 x i128]]** %carry, align 8
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %j1 = alloca i128, align 8
  %j15 = call i128 @fn_intrinsic_inline_init()
  store i128 %j15, i128* %j1, align 4
  %prod_val = alloca [256 x [256 x i128]]*, align 8
  %prod_val6 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %prod_val6, [256 x [256 x i128]]** %prod_val, align 8
  %j = alloca i128, align 8
  %j7 = call i128 @fn_intrinsic_inline_init()
  store i128 %j7, i128* %j, align 4
  %i1 = alloca i128, align 8
  %i18 = call i128 @fn_intrinsic_inline_init()
  store i128 %i18, i128* %i1, align 4
  %sumAndCarry = alloca [256 x [256 x i128]]*, align 8
  %sumAndCarry9 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %sumAndCarry9, [256 x [256 x i128]]** %sumAndCarry, align 8
  %j2 = alloca i128, align 8
  %j210 = call i128 @fn_intrinsic_inline_init()
  store i128 %j210, i128* %j2, align 4
  %split = alloca [256 x [256 x [256 x i128]]]*, align 8
  %split11 = alloca [256 x [256 x [256 x i128]]], align 8
  store [256 x [256 x [256 x i128]]]* %split11, [256 x [256 x [256 x i128]]]** %split, align 8
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %prod_val, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch18, %entry
  store i128 0, i128* %j, align 4
  br label %loop.body12

loop.body12:                                      ; preds = %loop.latch, %loop.body
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %j13 = load i128, i128* %j, align 4
  %i14 = load i128, i128* %i, align 4
  %prod_val15 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 %j13, i128 %i14
  store i128 0, i128* %prod_val15, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body12
  %j16 = load i128, i128* %j, align 4
  %add = add i128 %j16, 1
  store i128 %add, i128* %j, align 4
  %j17 = load i128, i128* %j, align 4
  %l = load i128, i128* %prod2d.l.declare_arg, align 4
  %mul = mul i128 2, %l
  %sub = sub i128 %mul, 1
  %slt = icmp slt i128 %j17, %sub
  br i1 %slt, label %loop.body12, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch18

loop.latch18:                                     ; preds = %loop.exit
  %i19 = load i128, i128* %i, align 4
  %add20 = add i128 %i19, 1
  store i128 %add20, i128* %i, align 4
  %i22 = load i128, i128* %i, align 4
  %k = load i128, i128* %prod2d.k.declare_arg, align 4
  %mul23 = mul i128 2, %k
  %sub24 = sub i128 %mul23, 1
  %slt25 = icmp slt i128 %i22, %sub24
  br i1 %slt25, label %loop.body, label %loop.exit26

loop.exit26:                                      ; preds = %loop.latch18
  store i128 0, i128* %i1, align 4
  br label %loop.body27

loop.body27:                                      ; preds = %loop.latch78, %loop.exit26
  store i128 0, i128* %i2, align 4
  br label %loop.body28

loop.body28:                                      ; preds = %loop.latch71, %loop.body27
  store i128 0, i128* %j1, align 4
  br label %loop.body29

loop.body29:                                      ; preds = %loop.latch64, %loop.body28
  store i128 0, i128* %j2, align 4
  br label %loop.body30

loop.body30:                                      ; preds = %loop.latch57, %loop.body29
  %prod_val31 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %j132 = load i128, i128* %j1, align 4
  %j233 = load i128, i128* %j2, align 4
  %add34 = add i128 %j132, %j233
  %i135 = load i128, i128* %i1, align 4
  %i236 = load i128, i128* %i2, align 4
  %add37 = add i128 %i135, %i236
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %prod_val31, i128 0, i128 %add34, i128 %add37
  %prod_val38 = load i128, i128* %array_getter, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod2d.a.declare_arg, align 8
  %j139 = load i128, i128* %j1, align 4
  %i140 = load i128, i128* %i1, align 4
  %array_getter41 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %j139, i128 %i140
  %a42 = load i128, i128* %array_getter41, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod2d.b.declare_arg, align 8
  %j243 = load i128, i128* %j2, align 4
  %i244 = load i128, i128* %i2, align 4
  %array_getter45 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %j243, i128 %i244
  %b46 = load i128, i128* %array_getter45, align 4
  %mul47 = mul i128 %a42, %b46
  %add48 = add i128 %prod_val38, %mul47
  %ptr_getter49 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %j150 = load i128, i128* %j1, align 4
  %j251 = load i128, i128* %j2, align 4
  %add52 = add i128 %j150, %j251
  %i153 = load i128, i128* %i1, align 4
  %i254 = load i128, i128* %i2, align 4
  %add55 = add i128 %i153, %i254
  %prod_val56 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter49, i128 0, i128 %add52, i128 %add55
  store i128 %add48, i128* %prod_val56, align 4
  br label %loop.latch57

loop.latch57:                                     ; preds = %loop.body30
  %j258 = load i128, i128* %j2, align 4
  %add59 = add i128 %j258, 1
  store i128 %add59, i128* %j2, align 4
  %j260 = load i128, i128* %j2, align 4
  %l61 = load i128, i128* %prod2d.l.declare_arg, align 4
  %slt62 = icmp slt i128 %j260, %l61
  br i1 %slt62, label %loop.body30, label %loop.exit63

loop.exit63:                                      ; preds = %loop.latch57
  br label %loop.latch64

loop.latch64:                                     ; preds = %loop.exit63
  %j165 = load i128, i128* %j1, align 4
  %add66 = add i128 %j165, 1
  store i128 %add66, i128* %j1, align 4
  %j167 = load i128, i128* %j1, align 4
  %l68 = load i128, i128* %prod2d.l.declare_arg, align 4
  %slt69 = icmp slt i128 %j167, %l68
  br i1 %slt69, label %loop.body29, label %loop.exit70

loop.exit70:                                      ; preds = %loop.latch64
  br label %loop.latch71

loop.latch71:                                     ; preds = %loop.exit70
  %i272 = load i128, i128* %i2, align 4
  %add73 = add i128 %i272, 1
  store i128 %add73, i128* %i2, align 4
  %i274 = load i128, i128* %i2, align 4
  %k75 = load i128, i128* %prod2d.k.declare_arg, align 4
  %slt76 = icmp slt i128 %i274, %k75
  br i1 %slt76, label %loop.body28, label %loop.exit77

loop.exit77:                                      ; preds = %loop.latch71
  br label %loop.latch78

loop.latch78:                                     ; preds = %loop.exit77
  %i179 = load i128, i128* %i1, align 4
  %add80 = add i128 %i179, 1
  store i128 %add80, i128* %i1, align 4
  %i181 = load i128, i128* %i1, align 4
  %k82 = load i128, i128* %prod2d.k.declare_arg, align 4
  %slt83 = icmp slt i128 %i181, %k82
  br i1 %slt83, label %loop.body27, label %loop.exit84

loop.exit84:                                      ; preds = %loop.latch78
  %uniform_array85 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array85, [256 x [256 x i128]]** %out, align 8
  %uniform_array86 = alloca [256 x [256 x [256 x i128]]], align 8
  store [256 x [256 x [256 x i128]]]* %uniform_array86, [256 x [256 x [256 x i128]]]** %split, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body87

loop.body87:                                      ; preds = %loop.latch109, %loop.exit84
  store i128 0, i128* %i, align 4
  br label %loop.body88

loop.body88:                                      ; preds = %loop.latch100, %loop.body87
  %prod_val89 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %prod_val, align 8
  %j90 = load i128, i128* %j, align 4
  %i91 = load i128, i128* %i, align 4
  %array_getter92 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %prod_val89, i128 0, i128 %j90, i128 %i91
  %prod_val93 = load i128, i128* %array_getter92, align 4
  %n = load i128, i128* %prod2d.n.declare_arg, align 4
  %n94 = load i128, i128* %prod2d.n.declare_arg, align 4
  %n95 = load i128, i128* %prod2d.n.declare_arg, align 4
  %call = call [3 x i128]* @SplitThreeFn(i128 %prod_val93, i128 %n, i128 %n94, i128 %n95)
  %ptr_getter96 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %split, align 8
  %j97 = load i128, i128* %j, align 4
  %i98 = load i128, i128* %i, align 4
  %split99 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter96, i128 0, i128 %j97, i128 %i98
  %5 = bitcast [256 x i128]* %split99 to i8*
  %6 = bitcast [3 x i128]* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 ptrtoint ([3 x i128]* getelementptr ([3 x i128], [3 x i128]* null, i32 1) to i64), i1 false)
  br label %loop.latch100

loop.latch100:                                    ; preds = %loop.body88
  %i101 = load i128, i128* %i, align 4
  %add102 = add i128 %i101, 1
  store i128 %add102, i128* %i, align 4
  %i103 = load i128, i128* %i, align 4
  %k104 = load i128, i128* %prod2d.k.declare_arg, align 4
  %mul105 = mul i128 2, %k104
  %sub106 = sub i128 %mul105, 1
  %slt107 = icmp slt i128 %i103, %sub106
  br i1 %slt107, label %loop.body88, label %loop.exit108

loop.exit108:                                     ; preds = %loop.latch100
  br label %loop.latch109

loop.latch109:                                    ; preds = %loop.exit108
  %j110 = load i128, i128* %j, align 4
  %add111 = add i128 %j110, 1
  store i128 %add111, i128* %j, align 4
  %j112 = load i128, i128* %j, align 4
  %l113 = load i128, i128* %prod2d.l.declare_arg, align 4
  %mul114 = mul i128 2, %l113
  %sub115 = sub i128 %mul114, 1
  %slt116 = icmp slt i128 %j112, %sub115
  br i1 %slt116, label %loop.body87, label %loop.exit117

loop.exit117:                                     ; preds = %loop.latch109
  %uniform_array118 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array118, [256 x [256 x i128]]** %carry, align 8
  %uniform_array119 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array119, [256 x [256 x i128]]** %sumAndCarry, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body120

loop.body120:                                     ; preds = %loop.latch258, %loop.exit117
  %ptr_getter121 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %carry, align 8
  %j122 = load i128, i128* %j, align 4
  %carry123 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter121, i128 0, i128 %j122, i128 0
  store i128 0, i128* %carry123, align 4
  %split124 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %split, align 8
  %j125 = load i128, i128* %j, align 4
  %array_getter126 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %split124, i128 0, i128 %j125, i128 0, i128 0
  %split127 = load i128, i128* %array_getter126, align 4
  %ptr_getter128 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %j129 = load i128, i128* %j, align 4
  %out130 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter128, i128 0, i128 %j129, i128 0
  store i128 %split127, i128* %out130, align 4
  %k131 = load i128, i128* %prod2d.k.declare_arg, align 4
  %mul132 = mul i128 2, %k131
  %sub133 = sub i128 %mul132, 1
  %sgt = icmp sgt i128 %sub133, 1
  br i1 %sgt, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body120
  %split134 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %split, align 8
  %j135 = load i128, i128* %j, align 4
  %array_getter136 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %split134, i128 0, i128 %j135, i128 0, i128 1
  %split137 = load i128, i128* %array_getter136, align 4
  %split138 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %split, align 8
  %j140 = load i128, i128* %j, align 4
  %array_getter141 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %split138, i128 0, i128 %j140, i128 1, i128 0
  %split142 = load i128, i128* %array_getter141, align 4
  %add143 = add i128 %split137, %split142
  %n144 = load i128, i128* %prod2d.n.declare_arg, align 4
  %n145 = load i128, i128* %prod2d.n.declare_arg, align 4
  %call146 = call [2 x i128]* @SplitFn(i128 %add143, i128 %n144, i128 %n145)
  %ptr_getter147 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %sumAndCarry, align 8
  %j148 = load i128, i128* %j, align 4
  %sumAndCarry149 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter147, i128 0, i128 %j148
  %7 = bitcast [256 x i128]* %sumAndCarry149 to i8*
  %8 = bitcast [2 x i128]* %call146 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 ptrtoint ([2 x i128]* getelementptr ([2 x i128], [2 x i128]* null, i32 1) to i64), i1 false)
  %sumAndCarry150 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %sumAndCarry, align 8
  %j151 = load i128, i128* %j, align 4
  %array_getter152 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %sumAndCarry150, i128 0, i128 %j151, i128 0
  %sumAndCarry153 = load i128, i128* %array_getter152, align 4
  %ptr_getter154 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %j155 = load i128, i128* %j, align 4
  %out156 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter154, i128 0, i128 %j155, i128 1
  store i128 %sumAndCarry153, i128* %out156, align 4
  %sumAndCarry157 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %sumAndCarry, align 8
  %j158 = load i128, i128* %j, align 4
  %array_getter159 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %sumAndCarry157, i128 0, i128 %j158, i128 1
  %sumAndCarry160 = load i128, i128* %array_getter159, align 4
  %ptr_getter161 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %carry, align 8
  %j162 = load i128, i128* %j, align 4
  %carry163 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter161, i128 0, i128 %j162, i128 1
  store i128 %sumAndCarry160, i128* %carry163, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body120
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  %k166 = load i128, i128* %prod2d.k.declare_arg, align 4
  %mul167 = mul i128 2, %k166
  %sub168 = sub i128 %mul167, 1
  %sgt169 = icmp sgt i128 %sub168, 2
  br i1 %sgt169, label %if.true164, label %if.false165

if.true164:                                       ; preds = %if.exit
  store i128 2, i128* %i, align 4
  br label %loop.body170

if.false165:                                      ; preds = %if.exit
  br label %if.exit257

loop.body170:                                     ; preds = %loop.latch219, %if.true164
  %split171 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %split, align 8
  %j172 = load i128, i128* %j, align 4
  %i173 = load i128, i128* %i, align 4
  %array_getter174 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %split171, i128 0, i128 %j172, i128 %i173, i128 0
  %split175 = load i128, i128* %array_getter174, align 4
  %split176 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %split, align 8
  %j177 = load i128, i128* %j, align 4
  %i178 = load i128, i128* %i, align 4
  %sub179 = sub i128 %i178, 1
  %array_getter180 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %split176, i128 0, i128 %j177, i128 %sub179, i128 1
  %split181 = load i128, i128* %array_getter180, align 4
  %add182 = add i128 %split175, %split181
  %split183 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %split, align 8
  %j184 = load i128, i128* %j, align 4
  %i185 = load i128, i128* %i, align 4
  %sub186 = sub i128 %i185, 2
  %array_getter187 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %split183, i128 0, i128 %j184, i128 %sub186, i128 2
  %split188 = load i128, i128* %array_getter187, align 4
  %add189 = add i128 %add182, %split188
  %carry190 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %carry, align 8
  %j191 = load i128, i128* %j, align 4
  %i192 = load i128, i128* %i, align 4
  %sub193 = sub i128 %i192, 1
  %array_getter194 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %carry190, i128 0, i128 %j191, i128 %sub193
  %carry195 = load i128, i128* %array_getter194, align 4
  %add196 = add i128 %add189, %carry195
  %n197 = load i128, i128* %prod2d.n.declare_arg, align 4
  %n198 = load i128, i128* %prod2d.n.declare_arg, align 4
  %call199 = call [2 x i128]* @SplitFn(i128 %add196, i128 %n197, i128 %n198)
  %ptr_getter200 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %sumAndCarry, align 8
  %j201 = load i128, i128* %j, align 4
  %sumAndCarry202 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter200, i128 0, i128 %j201
  %9 = bitcast [256 x i128]* %sumAndCarry202 to i8*
  %10 = bitcast [2 x i128]* %call199 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 ptrtoint ([2 x i128]* getelementptr ([2 x i128], [2 x i128]* null, i32 1) to i64), i1 false)
  %sumAndCarry203 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %sumAndCarry, align 8
  %j204 = load i128, i128* %j, align 4
  %array_getter205 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %sumAndCarry203, i128 0, i128 %j204, i128 0
  %sumAndCarry206 = load i128, i128* %array_getter205, align 4
  %ptr_getter207 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %j208 = load i128, i128* %j, align 4
  %i209 = load i128, i128* %i, align 4
  %out210 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter207, i128 0, i128 %j208, i128 %i209
  store i128 %sumAndCarry206, i128* %out210, align 4
  %sumAndCarry211 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %sumAndCarry, align 8
  %j212 = load i128, i128* %j, align 4
  %array_getter213 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %sumAndCarry211, i128 0, i128 %j212, i128 1
  %sumAndCarry214 = load i128, i128* %array_getter213, align 4
  %ptr_getter215 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %carry, align 8
  %j216 = load i128, i128* %j, align 4
  %i217 = load i128, i128* %i, align 4
  %carry218 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter215, i128 0, i128 %j216, i128 %i217
  store i128 %sumAndCarry214, i128* %carry218, align 4
  br label %loop.latch219

loop.latch219:                                    ; preds = %loop.body170
  %i220 = load i128, i128* %i, align 4
  %add221 = add i128 %i220, 1
  store i128 %add221, i128* %i, align 4
  %i222 = load i128, i128* %i, align 4
  %k223 = load i128, i128* %prod2d.k.declare_arg, align 4
  %mul224 = mul i128 2, %k223
  %sub225 = sub i128 %mul224, 1
  %slt226 = icmp slt i128 %i222, %sub225
  br i1 %slt226, label %loop.body170, label %loop.exit227

loop.exit227:                                     ; preds = %loop.latch219
  %split228 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %split, align 8
  %j229 = load i128, i128* %j, align 4
  %k230 = load i128, i128* %prod2d.k.declare_arg, align 4
  %mul231 = mul i128 2, %k230
  %sub232 = sub i128 %mul231, 2
  %array_getter233 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %split228, i128 0, i128 %j229, i128 %sub232, i128 1
  %split234 = load i128, i128* %array_getter233, align 4
  %split235 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %split, align 8
  %j236 = load i128, i128* %j, align 4
  %k237 = load i128, i128* %prod2d.k.declare_arg, align 4
  %mul238 = mul i128 2, %k237
  %sub239 = sub i128 %mul238, 3
  %array_getter240 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %split235, i128 0, i128 %j236, i128 %sub239, i128 2
  %split241 = load i128, i128* %array_getter240, align 4
  %add242 = add i128 %split234, %split241
  %carry243 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %carry, align 8
  %j244 = load i128, i128* %j, align 4
  %k245 = load i128, i128* %prod2d.k.declare_arg, align 4
  %mul246 = mul i128 2, %k245
  %sub247 = sub i128 %mul246, 2
  %array_getter248 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %carry243, i128 0, i128 %j244, i128 %sub247
  %carry249 = load i128, i128* %array_getter248, align 4
  %add250 = add i128 %add242, %carry249
  %ptr_getter251 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %j252 = load i128, i128* %j, align 4
  %k253 = load i128, i128* %prod2d.k.declare_arg, align 4
  %mul254 = mul i128 2, %k253
  %sub255 = sub i128 %mul254, 1
  %out256 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter251, i128 0, i128 %j252, i128 %sub255
  store i128 %add250, i128* %out256, align 4
  br label %if.exit257

if.exit257:                                       ; preds = %if.false165, %loop.exit227
  br label %loop.latch258

loop.latch258:                                    ; preds = %if.exit257
  %j259 = load i128, i128* %j, align 4
  %add260 = add i128 %j259, 1
  store i128 %add260, i128* %j, align 4
  %j261 = load i128, i128* %j, align 4
  %l262 = load i128, i128* %prod2d.l.declare_arg, align 4
  %mul263 = mul i128 2, %l262
  %sub264 = sub i128 %mul263, 1
  %slt265 = icmp slt i128 %j261, %sub264
  br i1 %slt265, label %loop.body120, label %loop.exit266

loop.exit266:                                     ; preds = %loop.latch258
  %out267 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  ret [256 x [256 x i128]]* %out267
}

define void @fn_template_init_binsum(%struct_template_circuit_binsum* %0) {
entry:
  %BinSum = alloca %struct_template_circuit_binsum*, align 8
  store %struct_template_circuit_binsum* %0, %struct_template_circuit_binsum** %BinSum, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_binsum, %struct_template_circuit_binsum* %0, i32 0, i32 0
  %binsum.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %binsum.n.declare_arg = alloca i128, align 8
  store i128 %binsum.n.read_arg_inner, i128* %binsum.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_binsum, %struct_template_circuit_binsum* %0, i32 0, i32 1
  %binsum.ops.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %binsum.ops.declare_arg = alloca i128, align 8
  store i128 %binsum.ops.read_arg_inner, i128* %binsum.ops.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_binsum, %struct_template_circuit_binsum* %0, i32 0, i32 2
  %binsum.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter2, align 8
  %binsum.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %binsum.in.read_input_inner, [256 x [256 x i128]]** %binsum.in.declare_input, align 8
  %e2 = alloca i128, align 8
  %e23 = call i128 @fn_intrinsic_inline_init()
  store i128 %e23, i128* %e2, align 4
  %nout = alloca i128, align 8
  %nout4 = call i128 @fn_intrinsic_inline_init()
  store i128 %nout4, i128* %nout, align 4
  %lin = alloca i128, align 8
  %lin5 = call i128 @fn_intrinsic_inline_init()
  store i128 %lin5, i128* %lin, align 4
  %lout = alloca i128, align 8
  %lout6 = call i128 @fn_intrinsic_inline_init()
  store i128 %lout6, i128* %lout, align 4
  %binsum.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %binsum.out.declare_output, align 8
  %j = alloca i128, align 8
  %j7 = call i128 @fn_intrinsic_inline_init()
  store i128 %j7, i128* %j, align 4
  %k = alloca i128, align 8
  %k8 = call i128 @fn_intrinsic_inline_init()
  store i128 %k8, i128* %k, align 4
  %n = load i128, i128* %binsum.n.declare_arg, align 4
  %pow = call i128 @fn_intrinsic_inline_powi(i128 2, i128 %n)
  %sub = sub i128 %pow, 1
  %ops = load i128, i128* %binsum.ops.declare_arg, align 4
  %mul = mul i128 %sub, %ops
  %call = call i128 @nbits(i128 %mul)
  store i128 %call, i128* %nout, align 4
  store i128 0, i128* %lin, align 4
  store i128 0, i128* %lout, align 4
  store i128 0, i128* %k, align 4
  store i128 0, i128* %j, align 4
  store i128 0, i128* %e2, align 4
  store i128 1, i128* %e2, align 4
  store i128 0, i128* %k, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch23, %entry
  store i128 0, i128* %j, align 4
  br label %loop.body9

loop.body9:                                       ; preds = %loop.latch, %loop.body
  %lin10 = load i128, i128* %lin, align 4
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %binsum.in.declare_input, align 8
  %j11 = load i128, i128* %j, align 4
  %k12 = load i128, i128* %k, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %j11, i128 %k12
  %in13 = load i128, i128* %array_getter, align 4
  %e214 = load i128, i128* %e2, align 4
  %mul15 = mul i128 %in13, %e214
  %add = add i128 %lin10, %mul15
  store i128 %add, i128* %lin, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body9
  %j16 = load i128, i128* %j, align 4
  %add17 = add i128 %j16, 1
  store i128 %add17, i128* %j, align 4
  %j18 = load i128, i128* %j, align 4
  %ops19 = load i128, i128* %binsum.ops.declare_arg, align 4
  %slt = icmp slt i128 %j18, %ops19
  br i1 %slt, label %loop.body9, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %e220 = load i128, i128* %e2, align 4
  %e221 = load i128, i128* %e2, align 4
  %add22 = add i128 %e220, %e221
  store i128 %add22, i128* %e2, align 4
  br label %loop.latch23

loop.latch23:                                     ; preds = %loop.exit
  %k24 = load i128, i128* %k, align 4
  %add25 = add i128 %k24, 1
  store i128 %add25, i128* %k, align 4
  %k26 = load i128, i128* %k, align 4
  %n27 = load i128, i128* %binsum.n.declare_arg, align 4
  %slt28 = icmp slt i128 %k26, %n27
  br i1 %slt28, label %loop.body, label %loop.exit29

loop.exit29:                                      ; preds = %loop.latch23
  store i128 1, i128* %e2, align 4
  store i128 0, i128* %k, align 4
  br label %loop.body30

loop.body30:                                      ; preds = %loop.latch56, %loop.exit29
  %lin31 = load i128, i128* %lin, align 4
  %k32 = load i128, i128* %k, align 4
  %rshift = lshr i128 %lin31, %k32
  %and = and i128 %rshift, 1
  %ptr_getter = load [256 x i128]*, [256 x i128]** %binsum.out.declare_output, align 8
  %k33 = load i128, i128* %k, align 4
  %out34 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %k33
  store i128 %and, i128* %out34, align 4
  %out35 = load [256 x i128]*, [256 x i128]** %binsum.out.declare_output, align 8
  %k36 = load i128, i128* %k, align 4
  %array_getter37 = getelementptr inbounds [256 x i128], [256 x i128]* %out35, i128 0, i128 %k36
  %out38 = load i128, i128* %array_getter37, align 4
  %out39 = load [256 x i128]*, [256 x i128]** %binsum.out.declare_output, align 8
  %k40 = load i128, i128* %k, align 4
  %array_getter41 = getelementptr inbounds [256 x i128], [256 x i128]* %out39, i128 0, i128 %k40
  %out42 = load i128, i128* %array_getter41, align 4
  %sub43 = sub i128 %out42, 1
  %mul44 = mul i128 %out38, %sub43
  call void @fn_intrinsic_add_constraint(i128 %mul44, i128 0, i1* @constraint.41)
  %lout45 = load i128, i128* %lout, align 4
  %out46 = load [256 x i128]*, [256 x i128]** %binsum.out.declare_output, align 8
  %k47 = load i128, i128* %k, align 4
  %array_getter48 = getelementptr inbounds [256 x i128], [256 x i128]* %out46, i128 0, i128 %k47
  %out49 = load i128, i128* %array_getter48, align 4
  %e250 = load i128, i128* %e2, align 4
  %mul51 = mul i128 %out49, %e250
  %add52 = add i128 %lout45, %mul51
  store i128 %add52, i128* %lout, align 4
  %e253 = load i128, i128* %e2, align 4
  %e254 = load i128, i128* %e2, align 4
  %add55 = add i128 %e253, %e254
  store i128 %add55, i128* %e2, align 4
  br label %loop.latch56

loop.latch56:                                     ; preds = %loop.body30
  %k57 = load i128, i128* %k, align 4
  %add58 = add i128 %k57, 1
  store i128 %add58, i128* %k, align 4
  %k59 = load i128, i128* %k, align 4
  %nout60 = load i128, i128* %nout, align 4
  %slt61 = icmp slt i128 %k59, %nout60
  br i1 %slt61, label %loop.body30, label %loop.exit62

loop.exit62:                                      ; preds = %loop.latch56
  %lin63 = load i128, i128* %lin, align 4
  %lout64 = load i128, i128* %lout, align 4
  call void @fn_intrinsic_add_constraint(i128 %lin63, i128 %lout64, i1* @constraint.42)
  br label %exit

exit:                                             ; preds = %loop.exit62
  %out65 = load [256 x i128]*, [256 x i128]** %binsum.out.declare_output, align 8
  %binsum.out.write_output_inner = getelementptr inbounds %struct_template_circuit_binsum, %struct_template_circuit_binsum* %0, i32 0, i32 3
  store [256 x i128]* %out65, [256 x i128]** %binsum.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_binsum* @fn_template_build_binsum(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_binsum = alloca %struct_template_circuit_binsum, align 8
  %binsum.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_binsum, %struct_template_circuit_binsum* %struct_template_circuit_binsum, i32 0, i32 0
  store i128 %0, i128* %binsum.n.write_arg_inner, align 4
  %binsum.ops.write_arg_inner = getelementptr inbounds %struct_template_circuit_binsum, %struct_template_circuit_binsum* %struct_template_circuit_binsum, i32 0, i32 1
  store i128 %1, i128* %binsum.ops.write_arg_inner, align 4
  ret %struct_template_circuit_binsum* %struct_template_circuit_binsum
}

define void @fn_template_init_checkcarrytozero(%struct_template_circuit_checkcarrytozero* %0) {
entry:
  %CheckCarryToZero = alloca %struct_template_circuit_checkcarrytozero*, align 8
  store %struct_template_circuit_checkcarrytozero* %0, %struct_template_circuit_checkcarrytozero** %CheckCarryToZero, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %0, i32 0, i32 0
  %checkcarrytozero.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %checkcarrytozero.n.declare_arg = alloca i128, align 8
  store i128 %checkcarrytozero.n.read_arg_inner, i128* %checkcarrytozero.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %0, i32 0, i32 1
  %checkcarrytozero.m.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %checkcarrytozero.m.declare_arg = alloca i128, align 8
  store i128 %checkcarrytozero.m.read_arg_inner, i128* %checkcarrytozero.m.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %0, i32 0, i32 2
  %checkcarrytozero.k.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %checkcarrytozero.k.declare_arg = alloca i128, align 8
  store i128 %checkcarrytozero.k.read_arg_inner, i128* %checkcarrytozero.k.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %0, i32 0, i32 3
  %checkcarrytozero.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %checkcarrytozero.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %checkcarrytozero.in.read_input_inner, [256 x i128]** %checkcarrytozero.in.declare_input, align 8
  %checkcarrytozero.carry.declare_inter = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %carry = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %carry, [256 x i128]** %checkcarrytozero.carry.declare_inter, align 8
  %EPSILON = alloca i128, align 8
  %EPSILON4 = call i128 @fn_intrinsic_inline_init()
  store i128 %EPSILON4, i128* %EPSILON, align 4
  %carryRangeChecks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %carryRangeChecks5 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %carryRangeChecks5, [256 x %struct_template_circuit_num2bits*]** %carryRangeChecks, align 8
  %i = alloca i128, align 8
  %i6 = call i128 @fn_intrinsic_inline_init()
  store i128 %i6, i128* %i, align 4
  store i128 1, i128* %EPSILON, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %m = load i128, i128* %checkcarrytozero.m.declare_arg, align 4
  %EPSILON7 = load i128, i128* %EPSILON, align 4
  %add = add i128 %m, %EPSILON7
  %n = load i128, i128* %checkcarrytozero.n.declare_arg, align 4
  %sub = sub i128 %add, %n
  %call = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %sub)
  %ptr_getter = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %carryRangeChecks, align 8
  %i8 = load i128, i128* %i, align 4
  %carryRangeChecks9 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter, i128 0, i128 %i8
  store %struct_template_circuit_num2bits* %call, %struct_template_circuit_num2bits** %carryRangeChecks9, align 8
  %i10 = load i128, i128* %i, align 4
  %eq = icmp eq i128 %i10, 0
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  %in = load [256 x i128]*, [256 x i128]** %checkcarrytozero.in.declare_input, align 8
  %i11 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %i11
  %in12 = load i128, i128* %array_getter, align 4
  %n13 = load i128, i128* %checkcarrytozero.n.declare_arg, align 4
  %lshift = shl i128 1, %n13
  %sdiv = sdiv i128 %in12, %lshift
  %ptr_getter14 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.carry.declare_inter, align 8
  %i15 = load i128, i128* %i, align 4
  %carry16 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter14, i128 0, i128 %i15
  store i128 %sdiv, i128* %carry16, align 4
  %in17 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.in.declare_input, align 8
  %i18 = load i128, i128* %i, align 4
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %in17, i128 0, i128 %i18
  %in20 = load i128, i128* %array_getter19, align 4
  %carry21 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.carry.declare_inter, align 8
  %i22 = load i128, i128* %i, align 4
  %array_getter23 = getelementptr inbounds [256 x i128], [256 x i128]* %carry21, i128 0, i128 %i22
  %carry24 = load i128, i128* %array_getter23, align 4
  %n25 = load i128, i128* %checkcarrytozero.n.declare_arg, align 4
  %lshift26 = shl i128 1, %n25
  %mul = mul i128 %carry24, %lshift26
  call void @fn_intrinsic_add_constraint(i128 %in20, i128 %mul, i1* @constraint.43)
  br label %if.exit

if.false:                                         ; preds = %loop.body
  %in27 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.in.declare_input, align 8
  %i28 = load i128, i128* %i, align 4
  %array_getter29 = getelementptr inbounds [256 x i128], [256 x i128]* %in27, i128 0, i128 %i28
  %in30 = load i128, i128* %array_getter29, align 4
  %carry31 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.carry.declare_inter, align 8
  %i32 = load i128, i128* %i, align 4
  %sub33 = sub i128 %i32, 1
  %array_getter34 = getelementptr inbounds [256 x i128], [256 x i128]* %carry31, i128 0, i128 %sub33
  %carry35 = load i128, i128* %array_getter34, align 4
  %add36 = add i128 %in30, %carry35
  %n37 = load i128, i128* %checkcarrytozero.n.declare_arg, align 4
  %lshift38 = shl i128 1, %n37
  %sdiv39 = sdiv i128 %add36, %lshift38
  %ptr_getter40 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.carry.declare_inter, align 8
  %i41 = load i128, i128* %i, align 4
  %carry42 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter40, i128 0, i128 %i41
  store i128 %sdiv39, i128* %carry42, align 4
  %in43 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.in.declare_input, align 8
  %i44 = load i128, i128* %i, align 4
  %array_getter45 = getelementptr inbounds [256 x i128], [256 x i128]* %in43, i128 0, i128 %i44
  %in46 = load i128, i128* %array_getter45, align 4
  %carry47 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.carry.declare_inter, align 8
  %i48 = load i128, i128* %i, align 4
  %sub49 = sub i128 %i48, 1
  %array_getter50 = getelementptr inbounds [256 x i128], [256 x i128]* %carry47, i128 0, i128 %sub49
  %carry51 = load i128, i128* %array_getter50, align 4
  %add52 = add i128 %in46, %carry51
  %carry53 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.carry.declare_inter, align 8
  %i54 = load i128, i128* %i, align 4
  %array_getter55 = getelementptr inbounds [256 x i128], [256 x i128]* %carry53, i128 0, i128 %i54
  %carry56 = load i128, i128* %array_getter55, align 4
  %n57 = load i128, i128* %checkcarrytozero.n.declare_arg, align 4
  %lshift58 = shl i128 1, %n57
  %mul59 = mul i128 %carry56, %lshift58
  call void @fn_intrinsic_add_constraint(i128 %add52, i128 %mul59, i1* @constraint.44)
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  %carry60 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.carry.declare_inter, align 8
  %i61 = load i128, i128* %i, align 4
  %array_getter62 = getelementptr inbounds [256 x i128], [256 x i128]* %carry60, i128 0, i128 %i61
  %carry63 = load i128, i128* %array_getter62, align 4
  %m64 = load i128, i128* %checkcarrytozero.m.declare_arg, align 4
  %EPSILON65 = load i128, i128* %EPSILON, align 4
  %add66 = add i128 %m64, %EPSILON65
  %n67 = load i128, i128* %checkcarrytozero.n.declare_arg, align 4
  %sub68 = sub i128 %add66, %n67
  %sub69 = sub i128 %sub68, 1
  %lshift70 = shl i128 1, %sub69
  %add71 = add i128 %carry63, %lshift70
  %carryRangeChecks72 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %carryRangeChecks, align 8
  %i73 = load i128, i128* %i, align 4
  %array_getter74 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %carryRangeChecks72, i128 0, i128 %i73
  %carryRangeChecks75 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter74, align 8
  %struct_getter76 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %carryRangeChecks75, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter76, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %add71, i1* @constraint.45)
  %ptr_getter77 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %carryRangeChecks, align 8
  %i78 = load i128, i128* %i, align 4
  %array_getter79 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter77, i128 0, i128 %i78
  %carryRangeChecks80 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter79, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %carryRangeChecks80, i32 0, i32 1
  store i128 %add71, i128* %num2bits.in.write_input_outter, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %i81 = load i128, i128* %i, align 4
  %add82 = add i128 %i81, 1
  store i128 %add82, i128* %i, align 4
  %i83 = load i128, i128* %i, align 4
  %k = load i128, i128* %checkcarrytozero.k.declare_arg, align 4
  %sub84 = sub i128 %k, 1
  %slt = icmp slt i128 %i83, %sub84
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %in85 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.in.declare_input, align 8
  %k86 = load i128, i128* %checkcarrytozero.k.declare_arg, align 4
  %sub87 = sub i128 %k86, 1
  %array_getter88 = getelementptr inbounds [256 x i128], [256 x i128]* %in85, i128 0, i128 %sub87
  %in89 = load i128, i128* %array_getter88, align 4
  %carry90 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.carry.declare_inter, align 8
  %k91 = load i128, i128* %checkcarrytozero.k.declare_arg, align 4
  %sub92 = sub i128 %k91, 2
  %array_getter93 = getelementptr inbounds [256 x i128], [256 x i128]* %carry90, i128 0, i128 %sub92
  %carry94 = load i128, i128* %array_getter93, align 4
  %add95 = add i128 %in89, %carry94
  call void @fn_intrinsic_add_constraint(i128 %add95, i128 0, i1* @constraint.46)
  br label %exit

exit:                                             ; preds = %loop.exit
  %carry96 = load [256 x i128]*, [256 x i128]** %checkcarrytozero.carry.declare_inter, align 8
  %checkcarrytozero.carry.write_inter_inner = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %0, i32 0, i32 4
  store [256 x i128]* %carry96, [256 x i128]** %checkcarrytozero.carry.write_inter_inner, align 8
  ret void
}

define %struct_template_circuit_checkcarrytozero* @fn_template_build_checkcarrytozero(i128 %0, i128 %1, i128 %2) {
entry:
  %struct_template_circuit_checkcarrytozero = alloca %struct_template_circuit_checkcarrytozero, align 8
  %checkcarrytozero.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %struct_template_circuit_checkcarrytozero, i32 0, i32 0
  store i128 %0, i128* %checkcarrytozero.n.write_arg_inner, align 4
  %checkcarrytozero.m.write_arg_inner = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %struct_template_circuit_checkcarrytozero, i32 0, i32 1
  store i128 %1, i128* %checkcarrytozero.m.write_arg_inner, align 4
  %checkcarrytozero.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %struct_template_circuit_checkcarrytozero, i32 0, i32 2
  store i128 %2, i128* %checkcarrytozero.k.write_arg_inner, align 4
  ret %struct_template_circuit_checkcarrytozero* %struct_template_circuit_checkcarrytozero
}

define void @fn_template_init_modsumthree(%struct_template_circuit_modsumthree* %0) {
entry:
  %ModSumThree = alloca %struct_template_circuit_modsumthree*, align 8
  store %struct_template_circuit_modsumthree* %0, %struct_template_circuit_modsumthree** %ModSumThree, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %0, i32 0, i32 0
  %modsumthree.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %modsumthree.n.declare_arg = alloca i128, align 8
  store i128 %modsumthree.n.read_arg_inner, i128* %modsumthree.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %0, i32 0, i32 1
  %modsumthree.a.read_input_inner = load i128, i128* %struct_getter1, align 4
  %modsumthree.a.declare_input = alloca i128, align 8
  store i128 %modsumthree.a.read_input_inner, i128* %modsumthree.a.declare_input, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %0, i32 0, i32 2
  %modsumthree.b.read_input_inner = load i128, i128* %struct_getter2, align 4
  %modsumthree.b.declare_input = alloca i128, align 8
  store i128 %modsumthree.b.read_input_inner, i128* %modsumthree.b.declare_input, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %0, i32 0, i32 3
  %modsumthree.c.read_input_inner = load i128, i128* %struct_getter3, align 4
  %modsumthree.c.declare_input = alloca i128, align 8
  store i128 %modsumthree.c.read_input_inner, i128* %modsumthree.c.declare_input, align 4
  %modsumthree.sum.declare_output = alloca i128, align 8
  %sum = call i128 @fn_intrinsic_inline_init()
  store i128 %sum, i128* %modsumthree.sum.declare_output, align 4
  %n2b = alloca %struct_template_circuit_num2bits*, align 8
  %modsumthree.carry.declare_output = alloca i128, align 8
  %carry = call i128 @fn_intrinsic_inline_init()
  store i128 %carry, i128* %modsumthree.carry.declare_output, align 4
  %n = load i128, i128* %modsumthree.n.declare_arg, align 4
  %add = add i128 %n, 2
  %call = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %add)
  store %struct_template_circuit_num2bits* %call, %struct_template_circuit_num2bits** %n2b, align 8
  %a = load i128, i128* %modsumthree.a.declare_input, align 4
  %b = load i128, i128* %modsumthree.b.declare_input, align 4
  %add4 = add i128 %a, %b
  %c = load i128, i128* %modsumthree.c.declare_input, align 4
  %add5 = add i128 %add4, %c
  %n2b6 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b6, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter7, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %add5, i1* @constraint.47)
  %ptr_getter = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter, i32 0, i32 1
  store i128 %add5, i128* %num2bits.in.write_input_outter, align 4
  %n2b8 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b8, i32 0, i32 2
  %num2bits.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter9, align 8
  %n10 = load i128, i128* %modsumthree.n.declare_arg, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter, i128 0, i128 %n10
  %n2b11 = load i128, i128* %array_getter, align 4
  %n2b12 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter13 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b12, i32 0, i32 2
  %num2bits.out.read_output_outter14 = load [256 x i128]*, [256 x i128]** %struct_getter13, align 8
  %n15 = load i128, i128* %modsumthree.n.declare_arg, align 4
  %add16 = add i128 %n15, 1
  %array_getter17 = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter14, i128 0, i128 %add16
  %n2b18 = load i128, i128* %array_getter17, align 4
  %mul = mul i128 2, %n2b18
  %add19 = add i128 %n2b11, %mul
  %carry20 = load i128, i128* %modsumthree.carry.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %carry20, i128 %add19, i1* @constraint.48)
  %ptr_getter21 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %ModSumThree, align 8
  %modsumthree.carry.write_output_inner = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %ptr_getter21, i32 0, i32 5
  store i128 %add19, i128* %modsumthree.carry.write_output_inner, align 4
  %ModSumThree22 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %ModSumThree, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %ModSumThree22, i32 0, i32 5
  %modsumthree.carry.read_output_inner = load i128, i128* %struct_getter23, align 4
  store i128 %modsumthree.carry.read_output_inner, i128* %modsumthree.carry.declare_output, align 4
  %a24 = load i128, i128* %modsumthree.a.declare_input, align 4
  %b25 = load i128, i128* %modsumthree.b.declare_input, align 4
  %add26 = add i128 %a24, %b25
  %c27 = load i128, i128* %modsumthree.c.declare_input, align 4
  %add28 = add i128 %add26, %c27
  %carry29 = load i128, i128* %modsumthree.carry.declare_output, align 4
  %n30 = load i128, i128* %modsumthree.n.declare_arg, align 4
  %lshift = shl i128 1, %n30
  %mul31 = mul i128 %carry29, %lshift
  %sub = sub i128 %add28, %mul31
  %sum32 = load i128, i128* %modsumthree.sum.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %sum32, i128 %sub, i1* @constraint.49)
  %ptr_getter33 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %ModSumThree, align 8
  %modsumthree.sum.write_output_inner = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %ptr_getter33, i32 0, i32 4
  store i128 %sub, i128* %modsumthree.sum.write_output_inner, align 4
  %ModSumThree34 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %ModSumThree, align 8
  %struct_getter35 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %ModSumThree34, i32 0, i32 4
  %modsumthree.sum.read_output_inner = load i128, i128* %struct_getter35, align 4
  store i128 %modsumthree.sum.read_output_inner, i128* %modsumthree.sum.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %sum36 = load i128, i128* %modsumthree.sum.declare_output, align 4
  %modsumthree.sum.write_output_inner37 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %0, i32 0, i32 4
  store i128 %sum36, i128* %modsumthree.sum.write_output_inner37, align 4
  %carry38 = load i128, i128* %modsumthree.carry.declare_output, align 4
  %modsumthree.carry.write_output_inner39 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %0, i32 0, i32 5
  store i128 %carry38, i128* %modsumthree.carry.write_output_inner39, align 4
  ret void
}

define %struct_template_circuit_modsumthree* @fn_template_build_modsumthree(i128 %0) {
entry:
  %struct_template_circuit_modsumthree = alloca %struct_template_circuit_modsumthree, align 8
  %modsumthree.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %struct_template_circuit_modsumthree, i32 0, i32 0
  store i128 %0, i128* %modsumthree.n.write_arg_inner, align 4
  ret %struct_template_circuit_modsumthree* %struct_template_circuit_modsumthree
}

define void @fn_template_init_aliascheck(%struct_template_circuit_aliascheck* %0) {
entry:
  %AliasCheck = alloca %struct_template_circuit_aliascheck*, align 8
  store %struct_template_circuit_aliascheck* %0, %struct_template_circuit_aliascheck** %AliasCheck, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_aliascheck, %struct_template_circuit_aliascheck* %0, i32 0, i32 0
  %aliascheck.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter, align 8
  %aliascheck.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %aliascheck.in.read_input_inner, [256 x i128]** %aliascheck.in.declare_input, align 8
  %i = alloca i128, align 8
  %i1 = call i128 @fn_intrinsic_inline_init()
  store i128 %i1, i128* %i, align 4
  %compConstant = alloca %struct_template_circuit_compconstant*, align 8
  %call = call %struct_template_circuit_compconstant* @fn_template_build_compconstant(i128 -1)
  store %struct_template_circuit_compconstant* %call, %struct_template_circuit_compconstant** %compConstant, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %in = load [256 x i128]*, [256 x i128]** %aliascheck.in.declare_input, align 8
  %i2 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %i2
  %in3 = load i128, i128* %array_getter, align 4
  %compConstant4 = load %struct_template_circuit_compconstant*, %struct_template_circuit_compconstant** %compConstant, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %compConstant4, i32 0, i32 1
  %compconstant.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter5, align 8
  %i6 = load i128, i128* %i, align 4
  %array_getter7 = getelementptr inbounds [256 x i128], [256 x i128]* %compconstant.in.read_input_outter, i128 0, i128 %i6
  %compConstant8 = load i128, i128* %array_getter7, align 4
  call void @fn_intrinsic_add_constraint(i128 %compConstant8, i128 %in3, i1* @constraint.50)
  %ptr_getter = load %struct_template_circuit_compconstant*, %struct_template_circuit_compconstant** %compConstant, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %ptr_getter, i32 0, i32 1
  %compconstant.in.read_input_outter10 = load [256 x i128]*, [256 x i128]** %struct_getter9, align 8
  %i11 = load i128, i128* %i, align 4
  %compConstant12 = getelementptr inbounds [256 x i128], [256 x i128]* %compconstant.in.read_input_outter10, i128 0, i128 %i11
  store i128 %in3, i128* %compConstant12, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i13 = load i128, i128* %i, align 4
  %add = add i128 %i13, 1
  store i128 %add, i128* %i, align 4
  %i14 = load i128, i128* %i, align 4
  %slt = icmp slt i128 %i14, 254
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %compConstant15 = load %struct_template_circuit_compconstant*, %struct_template_circuit_compconstant** %compConstant, align 8
  %struct_getter16 = getelementptr inbounds %struct_template_circuit_compconstant, %struct_template_circuit_compconstant* %compConstant15, i32 0, i32 4
  %compconstant.out.read_output_outter = load i128, i128* %struct_getter16, align 4
  call void @fn_intrinsic_add_constraint(i128 %compconstant.out.read_output_outter, i128 0, i1* @constraint.51)
  br label %exit

exit:                                             ; preds = %loop.exit
  ret void
}

define %struct_template_circuit_aliascheck* @fn_template_build_aliascheck() {
entry:
  %struct_template_circuit_aliascheck = alloca %struct_template_circuit_aliascheck, align 8
  ret %struct_template_circuit_aliascheck* %struct_template_circuit_aliascheck
}

define void @fn_template_init_signedfp2multiplynocarryunequal(%struct_template_circuit_signedfp2multiplynocarryunequal* %0) {
entry:
  %SignedFp2MultiplyNoCarryUnequal = alloca %struct_template_circuit_signedfp2multiplynocarryunequal*, align 8
  store %struct_template_circuit_signedfp2multiplynocarryunequal* %0, %struct_template_circuit_signedfp2multiplynocarryunequal** %SignedFp2MultiplyNoCarryUnequal, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %0, i32 0, i32 0
  %signedfp2multiplynocarryunequal.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %signedfp2multiplynocarryunequal.n.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarryunequal.n.read_arg_inner, i128* %signedfp2multiplynocarryunequal.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %0, i32 0, i32 1
  %signedfp2multiplynocarryunequal.ka.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %signedfp2multiplynocarryunequal.ka.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarryunequal.ka.read_arg_inner, i128* %signedfp2multiplynocarryunequal.ka.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %0, i32 0, i32 2
  %signedfp2multiplynocarryunequal.kb.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %signedfp2multiplynocarryunequal.kb.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarryunequal.kb.read_arg_inner, i128* %signedfp2multiplynocarryunequal.kb.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %0, i32 0, i32 3
  %signedfp2multiplynocarryunequal.m_out.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %signedfp2multiplynocarryunequal.m_out.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarryunequal.m_out.read_arg_inner, i128* %signedfp2multiplynocarryunequal.m_out.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %0, i32 0, i32 4
  %signedfp2multiplynocarryunequal.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %signedfp2multiplynocarryunequal.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.a.read_input_inner, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.a.declare_input, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %0, i32 0, i32 5
  %signedfp2multiplynocarryunequal.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %signedfp2multiplynocarryunequal.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.b.read_input_inner, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.b.declare_input, align 8
  %signedfp2multiplynocarryunequal.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.out.declare_output, align 8
  %j = alloca i128, align 8
  %j6 = call i128 @fn_intrinsic_inline_init()
  store i128 %j6, i128* %j, align 4
  %l = alloca i128, align 8
  %l7 = call i128 @fn_intrinsic_inline_init()
  store i128 %l7, i128* %l, align 4
  %i = alloca i128, align 8
  %i8 = call i128 @fn_intrinsic_inline_init()
  store i128 %i8, i128* %i, align 4
  %ab = alloca [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]*, align 8
  %ab9 = alloca [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]], align 8
  store [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]* %ab9, [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]** %ab, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch75, %entry
  store i128 0, i128* %j, align 4
  br label %loop.body10

loop.body10:                                      ; preds = %loop.latch69, %loop.body
  %n = load i128, i128* %signedfp2multiplynocarryunequal.n.declare_arg, align 4
  %ka = load i128, i128* %signedfp2multiplynocarryunequal.ka.declare_arg, align 4
  %kb = load i128, i128* %signedfp2multiplynocarryunequal.kb.declare_arg, align 4
  %m_out = load i128, i128* %signedfp2multiplynocarryunequal.m_out.declare_arg, align 4
  %call = call %struct_template_circuit_bigmultshortlongunequal* @fn_template_build_bigmultshortlongunequal(i128 %n, i128 %ka, i128 %kb, i128 %m_out)
  %ptr_getter = load [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]*, [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]** %ab, align 8
  %i11 = load i128, i128* %i, align 4
  %j12 = load i128, i128* %j, align 4
  %ab13 = getelementptr inbounds [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]], [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]* %ptr_getter, i128 0, i128 %i11, i128 %j12
  store %struct_template_circuit_bigmultshortlongunequal* %call, %struct_template_circuit_bigmultshortlongunequal** %ab13, align 8
  store i128 0, i128* %l, align 4
  br label %loop.body14

loop.body14:                                      ; preds = %loop.latch, %loop.body10
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.a.declare_input, align 8
  %i15 = load i128, i128* %i, align 4
  %l16 = load i128, i128* %l, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i15, i128 %l16
  %a17 = load i128, i128* %array_getter, align 4
  %ab18 = load [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]*, [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]** %ab, align 8
  %i19 = load i128, i128* %i, align 4
  %j20 = load i128, i128* %j, align 4
  %array_getter21 = getelementptr inbounds [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]], [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]* %ab18, i128 0, i128 %i19, i128 %j20
  %ab22 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %array_getter21, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ab22, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter23, align 8
  %l24 = load i128, i128* %l, align 4
  %array_getter25 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter, i128 0, i128 %l24
  %ab26 = load i128, i128* %array_getter25, align 4
  call void @fn_intrinsic_add_constraint(i128 %ab26, i128 %a17, i1* @constraint.52)
  %ptr_getter27 = load [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]*, [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]** %ab, align 8
  %i28 = load i128, i128* %i, align 4
  %j29 = load i128, i128* %j, align 4
  %array_getter30 = getelementptr inbounds [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]], [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]* %ptr_getter27, i128 0, i128 %i28, i128 %j29
  %ab31 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %array_getter30, align 8
  %struct_getter32 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ab31, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter33 = load [256 x i128]*, [256 x i128]** %struct_getter32, align 8
  %l34 = load i128, i128* %l, align 4
  %ab35 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter33, i128 0, i128 %l34
  store i128 %a17, i128* %ab35, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body14
  %l36 = load i128, i128* %l, align 4
  %add = add i128 %l36, 1
  store i128 %add, i128* %l, align 4
  %l37 = load i128, i128* %l, align 4
  %ka38 = load i128, i128* %signedfp2multiplynocarryunequal.ka.declare_arg, align 4
  %slt = icmp slt i128 %l37, %ka38
  br i1 %slt, label %loop.body14, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %l, align 4
  br label %loop.body39

loop.body39:                                      ; preds = %loop.latch62, %loop.exit
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.b.declare_input, align 8
  %j40 = load i128, i128* %j, align 4
  %l41 = load i128, i128* %l, align 4
  %array_getter42 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %j40, i128 %l41
  %b43 = load i128, i128* %array_getter42, align 4
  %ab44 = load [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]*, [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]** %ab, align 8
  %i45 = load i128, i128* %i, align 4
  %j46 = load i128, i128* %j, align 4
  %array_getter47 = getelementptr inbounds [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]], [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]* %ab44, i128 0, i128 %i45, i128 %j46
  %ab48 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %array_getter47, align 8
  %struct_getter49 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ab48, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter49, align 8
  %l50 = load i128, i128* %l, align 4
  %array_getter51 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.b.read_input_outter, i128 0, i128 %l50
  %ab52 = load i128, i128* %array_getter51, align 4
  call void @fn_intrinsic_add_constraint(i128 %ab52, i128 %b43, i1* @constraint.53)
  %ptr_getter53 = load [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]*, [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]** %ab, align 8
  %i54 = load i128, i128* %i, align 4
  %j55 = load i128, i128* %j, align 4
  %array_getter56 = getelementptr inbounds [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]], [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]* %ptr_getter53, i128 0, i128 %i54, i128 %j55
  %ab57 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %array_getter56, align 8
  %struct_getter58 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ab57, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_outter59 = load [256 x i128]*, [256 x i128]** %struct_getter58, align 8
  %l60 = load i128, i128* %l, align 4
  %ab61 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.b.read_input_outter59, i128 0, i128 %l60
  store i128 %b43, i128* %ab61, align 4
  br label %loop.latch62

loop.latch62:                                     ; preds = %loop.body39
  %l63 = load i128, i128* %l, align 4
  %add64 = add i128 %l63, 1
  store i128 %add64, i128* %l, align 4
  %l65 = load i128, i128* %l, align 4
  %kb66 = load i128, i128* %signedfp2multiplynocarryunequal.kb.declare_arg, align 4
  %slt67 = icmp slt i128 %l65, %kb66
  br i1 %slt67, label %loop.body39, label %loop.exit68

loop.exit68:                                      ; preds = %loop.latch62
  br label %loop.latch69

loop.latch69:                                     ; preds = %loop.exit68
  %j70 = load i128, i128* %j, align 4
  %add71 = add i128 %j70, 1
  store i128 %add71, i128* %j, align 4
  %j72 = load i128, i128* %j, align 4
  %slt73 = icmp slt i128 %j72, 2
  br i1 %slt73, label %loop.body10, label %loop.exit74

loop.exit74:                                      ; preds = %loop.latch69
  br label %loop.latch75

loop.latch75:                                     ; preds = %loop.exit74
  %i76 = load i128, i128* %i, align 4
  %add77 = add i128 %i76, 1
  store i128 %add77, i128* %i, align 4
  %i78 = load i128, i128* %i, align 4
  %slt79 = icmp slt i128 %i78, 2
  br i1 %slt79, label %loop.body, label %loop.exit80

loop.exit80:                                      ; preds = %loop.latch75
  store i128 0, i128* %j, align 4
  br label %loop.body81

loop.body81:                                      ; preds = %loop.latch128, %loop.exit80
  %ab82 = load [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]*, [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]** %ab, align 8
  %array_getter83 = getelementptr inbounds [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]], [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]* %ab82, i128 0, i128 0, i128 0
  %ab84 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %array_getter83, align 8
  %struct_getter85 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ab84, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter85, align 8
  %j86 = load i128, i128* %j, align 4
  %array_getter87 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter, i128 0, i128 %j86
  %ab88 = load i128, i128* %array_getter87, align 4
  %ab89 = load [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]*, [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]** %ab, align 8
  %array_getter90 = getelementptr inbounds [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]], [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]* %ab89, i128 0, i128 1, i128 1
  %ab91 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %array_getter90, align 8
  %struct_getter92 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ab91, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter93 = load [256 x i128]*, [256 x i128]** %struct_getter92, align 8
  %j94 = load i128, i128* %j, align 4
  %array_getter95 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter93, i128 0, i128 %j94
  %ab96 = load i128, i128* %array_getter95, align 4
  %sub = sub i128 %ab88, %ab96
  %out97 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.out.declare_output, align 8
  %j98 = load i128, i128* %j, align 4
  %array_getter99 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out97, i128 0, i128 0, i128 %j98
  %out100 = load i128, i128* %array_getter99, align 4
  call void @fn_intrinsic_add_constraint(i128 %out100, i128 %sub, i1* @constraint.54)
  %ptr_getter101 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.out.declare_output, align 8
  %j102 = load i128, i128* %j, align 4
  %out103 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter101, i128 0, i128 0, i128 %j102
  store i128 %sub, i128* %out103, align 4
  %ab104 = load [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]*, [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]** %ab, align 8
  %array_getter105 = getelementptr inbounds [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]], [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]* %ab104, i128 0, i128 0, i128 1
  %ab106 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %array_getter105, align 8
  %struct_getter107 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ab106, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter108 = load [256 x i128]*, [256 x i128]** %struct_getter107, align 8
  %j109 = load i128, i128* %j, align 4
  %array_getter110 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter108, i128 0, i128 %j109
  %ab111 = load i128, i128* %array_getter110, align 4
  %ab112 = load [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]*, [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]** %ab, align 8
  %array_getter113 = getelementptr inbounds [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]], [256 x [256 x %struct_template_circuit_bigmultshortlongunequal*]]* %ab112, i128 0, i128 1, i128 0
  %ab114 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %array_getter113, align 8
  %struct_getter115 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ab114, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter116 = load [256 x i128]*, [256 x i128]** %struct_getter115, align 8
  %j117 = load i128, i128* %j, align 4
  %array_getter118 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter116, i128 0, i128 %j117
  %ab119 = load i128, i128* %array_getter118, align 4
  %add120 = add i128 %ab111, %ab119
  %out121 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.out.declare_output, align 8
  %j122 = load i128, i128* %j, align 4
  %array_getter123 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out121, i128 0, i128 1, i128 %j122
  %out124 = load i128, i128* %array_getter123, align 4
  call void @fn_intrinsic_add_constraint(i128 %out124, i128 %add120, i1* @constraint.55)
  %ptr_getter125 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.out.declare_output, align 8
  %j126 = load i128, i128* %j, align 4
  %out127 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter125, i128 0, i128 1, i128 %j126
  store i128 %add120, i128* %out127, align 4
  br label %loop.latch128

loop.latch128:                                    ; preds = %loop.body81
  %j129 = load i128, i128* %j, align 4
  %add130 = add i128 %j129, 1
  store i128 %add130, i128* %j, align 4
  %j131 = load i128, i128* %j, align 4
  %ka132 = load i128, i128* %signedfp2multiplynocarryunequal.ka.declare_arg, align 4
  %kb133 = load i128, i128* %signedfp2multiplynocarryunequal.kb.declare_arg, align 4
  %add134 = add i128 %ka132, %kb133
  %sub135 = sub i128 %add134, 1
  %slt136 = icmp slt i128 %j131, %sub135
  br i1 %slt136, label %loop.body81, label %loop.exit137

loop.exit137:                                     ; preds = %loop.latch128
  br label %exit

exit:                                             ; preds = %loop.exit137
  %out138 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.out.declare_output, align 8
  %signedfp2multiplynocarryunequal.out.write_output_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %0, i32 0, i32 6
  store [256 x [256 x i128]]* %out138, [256 x [256 x i128]]** %signedfp2multiplynocarryunequal.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_signedfp2multiplynocarryunequal* @fn_template_build_signedfp2multiplynocarryunequal(i128 %0, i128 %1, i128 %2, i128 %3) {
entry:
  %struct_template_circuit_signedfp2multiplynocarryunequal = alloca %struct_template_circuit_signedfp2multiplynocarryunequal, align 8
  %signedfp2multiplynocarryunequal.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %struct_template_circuit_signedfp2multiplynocarryunequal, i32 0, i32 0
  store i128 %0, i128* %signedfp2multiplynocarryunequal.n.write_arg_inner, align 4
  %signedfp2multiplynocarryunequal.ka.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %struct_template_circuit_signedfp2multiplynocarryunequal, i32 0, i32 1
  store i128 %1, i128* %signedfp2multiplynocarryunequal.ka.write_arg_inner, align 4
  %signedfp2multiplynocarryunequal.kb.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %struct_template_circuit_signedfp2multiplynocarryunequal, i32 0, i32 2
  store i128 %2, i128* %signedfp2multiplynocarryunequal.kb.write_arg_inner, align 4
  %signedfp2multiplynocarryunequal.m_out.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %struct_template_circuit_signedfp2multiplynocarryunequal, i32 0, i32 3
  store i128 %3, i128* %signedfp2multiplynocarryunequal.m_out.write_arg_inner, align 4
  ret %struct_template_circuit_signedfp2multiplynocarryunequal* %struct_template_circuit_signedfp2multiplynocarryunequal
}

define void @fn_template_init_signedfp2multiplynocarry(%struct_template_circuit_signedfp2multiplynocarry* %0) {
entry:
  %SignedFp2MultiplyNoCarry = alloca %struct_template_circuit_signedfp2multiplynocarry*, align 8
  store %struct_template_circuit_signedfp2multiplynocarry* %0, %struct_template_circuit_signedfp2multiplynocarry** %SignedFp2MultiplyNoCarry, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %0, i32 0, i32 0
  %signedfp2multiplynocarry.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %signedfp2multiplynocarry.n.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarry.n.read_arg_inner, i128* %signedfp2multiplynocarry.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %0, i32 0, i32 1
  %signedfp2multiplynocarry.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %signedfp2multiplynocarry.k.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarry.k.read_arg_inner, i128* %signedfp2multiplynocarry.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %0, i32 0, i32 2
  %signedfp2multiplynocarry.m_out.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %signedfp2multiplynocarry.m_out.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarry.m_out.read_arg_inner, i128* %signedfp2multiplynocarry.m_out.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %0, i32 0, i32 3
  %signedfp2multiplynocarry.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %signedfp2multiplynocarry.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2multiplynocarry.a.read_input_inner, [256 x [256 x i128]]** %signedfp2multiplynocarry.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %0, i32 0, i32 4
  %signedfp2multiplynocarry.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %signedfp2multiplynocarry.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2multiplynocarry.b.read_input_inner, [256 x [256 x i128]]** %signedfp2multiplynocarry.b.declare_input, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %j = alloca i128, align 8
  %j6 = call i128 @fn_intrinsic_inline_init()
  store i128 %j6, i128* %j, align 4
  %signedfp2multiplynocarry.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %signedfp2multiplynocarry.out.declare_output, align 8
  %mult = alloca %struct_template_circuit_signedfp2multiplynocarryunequal*, align 8
  %n = load i128, i128* %signedfp2multiplynocarry.n.declare_arg, align 4
  %k = load i128, i128* %signedfp2multiplynocarry.k.declare_arg, align 4
  %k7 = load i128, i128* %signedfp2multiplynocarry.k.declare_arg, align 4
  %m_out = load i128, i128* %signedfp2multiplynocarry.m_out.declare_arg, align 4
  %call = call %struct_template_circuit_signedfp2multiplynocarryunequal* @fn_template_build_signedfp2multiplynocarryunequal(i128 %n, i128 %k, i128 %k7, i128 %m_out)
  store %struct_template_circuit_signedfp2multiplynocarryunequal* %call, %struct_template_circuit_signedfp2multiplynocarryunequal** %mult, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch42, %entry
  store i128 0, i128* %j, align 4
  br label %loop.body8

loop.body8:                                       ; preds = %loop.latch, %loop.body
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarry.a.declare_input, align 8
  %i9 = load i128, i128* %i, align 4
  %j10 = load i128, i128* %j, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i9, i128 %j10
  %a11 = load i128, i128* %array_getter, align 4
  %mult12 = load %struct_template_circuit_signedfp2multiplynocarryunequal*, %struct_template_circuit_signedfp2multiplynocarryunequal** %mult, align 8
  %struct_getter13 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %mult12, i32 0, i32 4
  %signedfp2multiplynocarryunequal.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter13, align 8
  %i14 = load i128, i128* %i, align 4
  %j15 = load i128, i128* %j, align 4
  %array_getter16 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.a.read_input_outter, i128 0, i128 %i14, i128 %j15
  %mult17 = load i128, i128* %array_getter16, align 4
  call void @fn_intrinsic_add_constraint(i128 %mult17, i128 %a11, i1* @constraint.56)
  %ptr_getter = load %struct_template_circuit_signedfp2multiplynocarryunequal*, %struct_template_circuit_signedfp2multiplynocarryunequal** %mult, align 8
  %struct_getter18 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %ptr_getter, i32 0, i32 4
  %signedfp2multiplynocarryunequal.a.read_input_outter19 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter18, align 8
  %i20 = load i128, i128* %i, align 4
  %j21 = load i128, i128* %j, align 4
  %mult22 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.a.read_input_outter19, i128 0, i128 %i20, i128 %j21
  store i128 %a11, i128* %mult22, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarry.b.declare_input, align 8
  %i23 = load i128, i128* %i, align 4
  %j24 = load i128, i128* %j, align 4
  %array_getter25 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %i23, i128 %j24
  %b26 = load i128, i128* %array_getter25, align 4
  %mult27 = load %struct_template_circuit_signedfp2multiplynocarryunequal*, %struct_template_circuit_signedfp2multiplynocarryunequal** %mult, align 8
  %struct_getter28 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %mult27, i32 0, i32 5
  %signedfp2multiplynocarryunequal.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter28, align 8
  %i29 = load i128, i128* %i, align 4
  %j30 = load i128, i128* %j, align 4
  %array_getter31 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.b.read_input_outter, i128 0, i128 %i29, i128 %j30
  %mult32 = load i128, i128* %array_getter31, align 4
  call void @fn_intrinsic_add_constraint(i128 %mult32, i128 %b26, i1* @constraint.57)
  %ptr_getter33 = load %struct_template_circuit_signedfp2multiplynocarryunequal*, %struct_template_circuit_signedfp2multiplynocarryunequal** %mult, align 8
  %struct_getter34 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %ptr_getter33, i32 0, i32 5
  %signedfp2multiplynocarryunequal.b.read_input_outter35 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter34, align 8
  %i36 = load i128, i128* %i, align 4
  %j37 = load i128, i128* %j, align 4
  %mult38 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.b.read_input_outter35, i128 0, i128 %i36, i128 %j37
  store i128 %b26, i128* %mult38, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body8
  %j39 = load i128, i128* %j, align 4
  %add = add i128 %j39, 1
  store i128 %add, i128* %j, align 4
  %j40 = load i128, i128* %j, align 4
  %k41 = load i128, i128* %signedfp2multiplynocarry.k.declare_arg, align 4
  %slt = icmp slt i128 %j40, %k41
  br i1 %slt, label %loop.body8, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch42

loop.latch42:                                     ; preds = %loop.exit
  %i43 = load i128, i128* %i, align 4
  %add44 = add i128 %i43, 1
  store i128 %add44, i128* %i, align 4
  %i45 = load i128, i128* %i, align 4
  %slt46 = icmp slt i128 %i45, 2
  br i1 %slt46, label %loop.body, label %loop.exit47

loop.exit47:                                      ; preds = %loop.latch42
  store i128 0, i128* %i, align 4
  br label %loop.body48

loop.body48:                                      ; preds = %loop.latch72, %loop.exit47
  store i128 0, i128* %j, align 4
  br label %loop.body49

loop.body49:                                      ; preds = %loop.latch65, %loop.body48
  %mult50 = load %struct_template_circuit_signedfp2multiplynocarryunequal*, %struct_template_circuit_signedfp2multiplynocarryunequal** %mult, align 8
  %struct_getter51 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %mult50, i32 0, i32 6
  %signedfp2multiplynocarryunequal.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter51, align 8
  %i52 = load i128, i128* %i, align 4
  %j53 = load i128, i128* %j, align 4
  %array_getter54 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.out.read_output_outter, i128 0, i128 %i52, i128 %j53
  %mult55 = load i128, i128* %array_getter54, align 4
  %out56 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarry.out.declare_output, align 8
  %i57 = load i128, i128* %i, align 4
  %j58 = load i128, i128* %j, align 4
  %array_getter59 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out56, i128 0, i128 %i57, i128 %j58
  %out60 = load i128, i128* %array_getter59, align 4
  call void @fn_intrinsic_add_constraint(i128 %out60, i128 %mult55, i1* @constraint.58)
  %ptr_getter61 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarry.out.declare_output, align 8
  %i62 = load i128, i128* %i, align 4
  %j63 = load i128, i128* %j, align 4
  %out64 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter61, i128 0, i128 %i62, i128 %j63
  store i128 %mult55, i128* %out64, align 4
  br label %loop.latch65

loop.latch65:                                     ; preds = %loop.body49
  %j66 = load i128, i128* %j, align 4
  %add67 = add i128 %j66, 1
  store i128 %add67, i128* %j, align 4
  %j68 = load i128, i128* %j, align 4
  %k69 = load i128, i128* %signedfp2multiplynocarry.k.declare_arg, align 4
  %mul = mul i128 2, %k69
  %sub = sub i128 %mul, 1
  %slt70 = icmp slt i128 %j68, %sub
  br i1 %slt70, label %loop.body49, label %loop.exit71

loop.exit71:                                      ; preds = %loop.latch65
  br label %loop.latch72

loop.latch72:                                     ; preds = %loop.exit71
  %i73 = load i128, i128* %i, align 4
  %add74 = add i128 %i73, 1
  store i128 %add74, i128* %i, align 4
  %i75 = load i128, i128* %i, align 4
  %slt76 = icmp slt i128 %i75, 2
  br i1 %slt76, label %loop.body48, label %loop.exit77

loop.exit77:                                      ; preds = %loop.latch72
  br label %exit

exit:                                             ; preds = %loop.exit77
  %out78 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarry.out.declare_output, align 8
  %signedfp2multiplynocarry.out.write_output_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %0, i32 0, i32 5
  store [256 x [256 x i128]]* %out78, [256 x [256 x i128]]** %signedfp2multiplynocarry.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_signedfp2multiplynocarry* @fn_template_build_signedfp2multiplynocarry(i128 %0, i128 %1, i128 %2) {
entry:
  %struct_template_circuit_signedfp2multiplynocarry = alloca %struct_template_circuit_signedfp2multiplynocarry, align 8
  %signedfp2multiplynocarry.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %struct_template_circuit_signedfp2multiplynocarry, i32 0, i32 0
  store i128 %0, i128* %signedfp2multiplynocarry.n.write_arg_inner, align 4
  %signedfp2multiplynocarry.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %struct_template_circuit_signedfp2multiplynocarry, i32 0, i32 1
  store i128 %1, i128* %signedfp2multiplynocarry.k.write_arg_inner, align 4
  %signedfp2multiplynocarry.m_out.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %struct_template_circuit_signedfp2multiplynocarry, i32 0, i32 2
  store i128 %2, i128* %signedfp2multiplynocarry.m_out.write_arg_inner, align 4
  ret %struct_template_circuit_signedfp2multiplynocarry* %struct_template_circuit_signedfp2multiplynocarry
}

define [256 x i128]* @prod(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3) {
entry:
  %prod.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %prod.n.declare_arg, align 4
  %prod.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %prod.k.declare_arg, align 4
  %prod.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %prod.a.declare_arg, align 8
  %prod.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %prod.b.declare_arg, align 8
  %prod_val = alloca [256 x i128]*, align 8
  %prod_val1 = alloca [256 x i128], align 8
  store [256 x i128]* %prod_val1, [256 x i128]** %prod_val, align 8
  %sumAndCarry = alloca [256 x i128]*, align 8
  %sumAndCarry2 = alloca [256 x i128], align 8
  store [256 x i128]* %sumAndCarry2, [256 x i128]** %sumAndCarry, align 8
  %carry = alloca [256 x i128]*, align 8
  %carry3 = alloca [256 x i128], align 8
  store [256 x i128]* %carry3, [256 x i128]** %carry, align 8
  %out = alloca [256 x i128]*, align 8
  %out4 = alloca [256 x i128], align 8
  store [256 x i128]* %out4, [256 x i128]** %out, align 8
  %a_idx = alloca i128, align 8
  %a_idx5 = call i128 @fn_intrinsic_inline_init()
  store i128 %a_idx5, i128* %a_idx, align 4
  %split = alloca [256 x [256 x i128]]*, align 8
  %split6 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %split6, [256 x [256 x i128]]** %split, align 8
  %i = alloca i128, align 8
  %i7 = call i128 @fn_intrinsic_inline_init()
  store i128 %i7, i128* %i, align 4
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %prod_val, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch60, %entry
  %ptr_getter = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i8 = load i128, i128* %i, align 4
  %prod_val9 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i8
  store i128 0, i128* %prod_val9, align 4
  %i10 = load i128, i128* %i, align 4
  %k = load i128, i128* %prod.k.declare_arg, align 4
  %slt = icmp slt i128 %i10, %k
  br i1 %slt, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  store i128 0, i128* %a_idx, align 4
  br label %loop.body11

if.false:                                         ; preds = %loop.body
  %i29 = load i128, i128* %i, align 4
  %k30 = load i128, i128* %prod.k.declare_arg, align 4
  %sub31 = sub i128 %i29, %k30
  %add32 = add i128 %sub31, 1
  store i128 %add32, i128* %a_idx, align 4
  br label %loop.body33

loop.body11:                                      ; preds = %loop.latch, %if.true
  %prod_val12 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i13 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %prod_val12, i128 0, i128 %i13
  %prod_val14 = load i128, i128* %array_getter, align 4
  %a = load [256 x i128]*, [256 x i128]** %prod.a.declare_arg, align 8
  %a_idx15 = load i128, i128* %a_idx, align 4
  %array_getter16 = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %a_idx15
  %a17 = load i128, i128* %array_getter16, align 4
  %b = load [256 x i128]*, [256 x i128]** %prod.b.declare_arg, align 8
  %i18 = load i128, i128* %i, align 4
  %a_idx19 = load i128, i128* %a_idx, align 4
  %sub = sub i128 %i18, %a_idx19
  %array_getter20 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %sub
  %b21 = load i128, i128* %array_getter20, align 4
  %mul = mul i128 %a17, %b21
  %add = add i128 %prod_val14, %mul
  %ptr_getter22 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i23 = load i128, i128* %i, align 4
  %prod_val24 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter22, i128 0, i128 %i23
  store i128 %add, i128* %prod_val24, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body11
  %a_idx25 = load i128, i128* %a_idx, align 4
  %add26 = add i128 %a_idx25, 1
  store i128 %add26, i128* %a_idx, align 4
  %a_idx27 = load i128, i128* %a_idx, align 4
  %i28 = load i128, i128* %i, align 4
  %sle = icmp sle i128 %a_idx27, %i28
  br i1 %sle, label %loop.body11, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %if.exit

loop.body33:                                      ; preds = %loop.latch53, %if.false
  %prod_val34 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i35 = load i128, i128* %i, align 4
  %array_getter36 = getelementptr inbounds [256 x i128], [256 x i128]* %prod_val34, i128 0, i128 %i35
  %prod_val37 = load i128, i128* %array_getter36, align 4
  %a38 = load [256 x i128]*, [256 x i128]** %prod.a.declare_arg, align 8
  %a_idx39 = load i128, i128* %a_idx, align 4
  %array_getter40 = getelementptr inbounds [256 x i128], [256 x i128]* %a38, i128 0, i128 %a_idx39
  %a41 = load i128, i128* %array_getter40, align 4
  %b42 = load [256 x i128]*, [256 x i128]** %prod.b.declare_arg, align 8
  %i43 = load i128, i128* %i, align 4
  %a_idx44 = load i128, i128* %a_idx, align 4
  %sub45 = sub i128 %i43, %a_idx44
  %array_getter46 = getelementptr inbounds [256 x i128], [256 x i128]* %b42, i128 0, i128 %sub45
  %b47 = load i128, i128* %array_getter46, align 4
  %mul48 = mul i128 %a41, %b47
  %add49 = add i128 %prod_val37, %mul48
  %ptr_getter50 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i51 = load i128, i128* %i, align 4
  %prod_val52 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter50, i128 0, i128 %i51
  store i128 %add49, i128* %prod_val52, align 4
  br label %loop.latch53

loop.latch53:                                     ; preds = %loop.body33
  %a_idx54 = load i128, i128* %a_idx, align 4
  %add55 = add i128 %a_idx54, 1
  store i128 %add55, i128* %a_idx, align 4
  %a_idx56 = load i128, i128* %a_idx, align 4
  %k57 = load i128, i128* %prod.k.declare_arg, align 4
  %slt58 = icmp slt i128 %a_idx56, %k57
  br i1 %slt58, label %loop.body33, label %loop.exit59

loop.exit59:                                      ; preds = %loop.latch53
  br label %if.exit

if.exit:                                          ; preds = %loop.exit59, %loop.exit
  br label %loop.latch60

loop.latch60:                                     ; preds = %if.exit
  %i61 = load i128, i128* %i, align 4
  %add62 = add i128 %i61, 1
  store i128 %add62, i128* %i, align 4
  %i63 = load i128, i128* %i, align 4
  %k64 = load i128, i128* %prod.k.declare_arg, align 4
  %mul65 = mul i128 2, %k64
  %sub66 = sub i128 %mul65, 1
  %slt67 = icmp slt i128 %i63, %sub66
  br i1 %slt67, label %loop.body, label %loop.exit68

loop.exit68:                                      ; preds = %loop.latch60
  %uniform_array69 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array69, [256 x i128]** %out, align 8
  %uniform_array70 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array70, [256 x [256 x i128]]** %split, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body71

loop.body71:                                      ; preds = %loop.latch81, %loop.exit68
  %prod_val72 = load [256 x i128]*, [256 x i128]** %prod_val, align 8
  %i73 = load i128, i128* %i, align 4
  %array_getter74 = getelementptr inbounds [256 x i128], [256 x i128]* %prod_val72, i128 0, i128 %i73
  %prod_val75 = load i128, i128* %array_getter74, align 4
  %n = load i128, i128* %prod.n.declare_arg, align 4
  %n76 = load i128, i128* %prod.n.declare_arg, align 4
  %n77 = load i128, i128* %prod.n.declare_arg, align 4
  %call = call [3 x i128]* @SplitThreeFn(i128 %prod_val75, i128 %n, i128 %n76, i128 %n77)
  %ptr_getter78 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %i79 = load i128, i128* %i, align 4
  %split80 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter78, i128 0, i128 %i79
  %4 = bitcast [256 x i128]* %split80 to i8*
  %5 = bitcast [3 x i128]* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 ptrtoint ([3 x i128]* getelementptr ([3 x i128], [3 x i128]* null, i32 1) to i64), i1 false)
  br label %loop.latch81

loop.latch81:                                     ; preds = %loop.body71
  %i82 = load i128, i128* %i, align 4
  %add83 = add i128 %i82, 1
  store i128 %add83, i128* %i, align 4
  %i84 = load i128, i128* %i, align 4
  %k85 = load i128, i128* %prod.k.declare_arg, align 4
  %mul86 = mul i128 2, %k85
  %sub87 = sub i128 %mul86, 1
  %slt88 = icmp slt i128 %i84, %sub87
  br i1 %slt88, label %loop.body71, label %loop.exit89

loop.exit89:                                      ; preds = %loop.latch81
  %uniform_array90 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array90, [256 x i128]** %carry, align 8
  %ptr_getter91 = load [256 x i128]*, [256 x i128]** %carry, align 8
  %carry92 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter91, i128 0, i128 0
  store i128 0, i128* %carry92, align 4
  %split93 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %array_getter94 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split93, i128 0, i128 0, i128 0
  %split95 = load i128, i128* %array_getter94, align 4
  %ptr_getter96 = load [256 x i128]*, [256 x i128]** %out, align 8
  %out97 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter96, i128 0, i128 0
  store i128 %split95, i128* %out97, align 4
  %k100 = load i128, i128* %prod.k.declare_arg, align 4
  %mul101 = mul i128 2, %k100
  %sub102 = sub i128 %mul101, 1
  %sgt = icmp sgt i128 %sub102, 1
  br i1 %sgt, label %if.true98, label %if.false99

if.true98:                                        ; preds = %loop.exit89
  %split103 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %array_getter104 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split103, i128 0, i128 0, i128 1
  %split105 = load i128, i128* %array_getter104, align 4
  %split106 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %array_getter107 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split106, i128 0, i128 1, i128 0
  %split108 = load i128, i128* %array_getter107, align 4
  %add109 = add i128 %split105, %split108
  %n110 = load i128, i128* %prod.n.declare_arg, align 4
  %n111 = load i128, i128* %prod.n.declare_arg, align 4
  %call112 = call [2 x i128]* @SplitFn(i128 %add109, i128 %n110, i128 %n111)
  %memcpy_ptr = getelementptr inbounds [256 x i128]*, [256 x i128]** %sumAndCarry, i128 0
  %6 = bitcast [256 x i128]** %memcpy_ptr to i8*
  %7 = bitcast [2 x i128]* %call112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 ptrtoint ([2 x i128]* getelementptr ([2 x i128], [2 x i128]* null, i32 1) to i64), i1 false)
  %sumAndCarry113 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter114 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry113, i128 0, i128 0
  %sumAndCarry115 = load i128, i128* %array_getter114, align 4
  %ptr_getter116 = load [256 x i128]*, [256 x i128]** %out, align 8
  %out117 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter116, i128 0, i128 1
  store i128 %sumAndCarry115, i128* %out117, align 4
  %sumAndCarry118 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter119 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry118, i128 0, i128 1
  %sumAndCarry120 = load i128, i128* %array_getter119, align 4
  %ptr_getter121 = load [256 x i128]*, [256 x i128]** %carry, align 8
  %carry122 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter121, i128 0, i128 1
  store i128 %sumAndCarry120, i128* %carry122, align 4
  br label %if.exit123

if.false99:                                       ; preds = %loop.exit89
  br label %if.exit123

if.exit123:                                       ; preds = %if.false99, %if.true98
  %k126 = load i128, i128* %prod.k.declare_arg, align 4
  %mul127 = mul i128 2, %k126
  %sub128 = sub i128 %mul127, 1
  %sgt129 = icmp sgt i128 %sub128, 2
  br i1 %sgt129, label %if.true124, label %if.false125

if.true124:                                       ; preds = %if.exit123
  store i128 2, i128* %i, align 4
  br label %loop.body130

if.false125:                                      ; preds = %if.exit123
  br label %if.exit203

loop.body130:                                     ; preds = %loop.latch169, %if.true124
  %split131 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %i132 = load i128, i128* %i, align 4
  %array_getter133 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split131, i128 0, i128 %i132, i128 0
  %split134 = load i128, i128* %array_getter133, align 4
  %split135 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %i136 = load i128, i128* %i, align 4
  %sub137 = sub i128 %i136, 1
  %array_getter138 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split135, i128 0, i128 %sub137, i128 1
  %split139 = load i128, i128* %array_getter138, align 4
  %add140 = add i128 %split134, %split139
  %split141 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %i142 = load i128, i128* %i, align 4
  %sub143 = sub i128 %i142, 2
  %array_getter144 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split141, i128 0, i128 %sub143, i128 2
  %split145 = load i128, i128* %array_getter144, align 4
  %add146 = add i128 %add140, %split145
  %carry147 = load [256 x i128]*, [256 x i128]** %carry, align 8
  %i148 = load i128, i128* %i, align 4
  %sub149 = sub i128 %i148, 1
  %array_getter150 = getelementptr inbounds [256 x i128], [256 x i128]* %carry147, i128 0, i128 %sub149
  %carry151 = load i128, i128* %array_getter150, align 4
  %add152 = add i128 %add146, %carry151
  %n153 = load i128, i128* %prod.n.declare_arg, align 4
  %n154 = load i128, i128* %prod.n.declare_arg, align 4
  %call155 = call [2 x i128]* @SplitFn(i128 %add152, i128 %n153, i128 %n154)
  %memcpy_ptr156 = getelementptr inbounds [256 x i128]*, [256 x i128]** %sumAndCarry, i128 0
  %8 = bitcast [256 x i128]** %memcpy_ptr156 to i8*
  %9 = bitcast [2 x i128]* %call155 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 ptrtoint ([2 x i128]* getelementptr ([2 x i128], [2 x i128]* null, i32 1) to i64), i1 false)
  %sumAndCarry157 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter158 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry157, i128 0, i128 0
  %sumAndCarry159 = load i128, i128* %array_getter158, align 4
  %ptr_getter160 = load [256 x i128]*, [256 x i128]** %out, align 8
  %i161 = load i128, i128* %i, align 4
  %out162 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter160, i128 0, i128 %i161
  store i128 %sumAndCarry159, i128* %out162, align 4
  %sumAndCarry163 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter164 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry163, i128 0, i128 1
  %sumAndCarry165 = load i128, i128* %array_getter164, align 4
  %ptr_getter166 = load [256 x i128]*, [256 x i128]** %carry, align 8
  %i167 = load i128, i128* %i, align 4
  %carry168 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter166, i128 0, i128 %i167
  store i128 %sumAndCarry165, i128* %carry168, align 4
  br label %loop.latch169

loop.latch169:                                    ; preds = %loop.body130
  %i170 = load i128, i128* %i, align 4
  %add171 = add i128 %i170, 1
  store i128 %add171, i128* %i, align 4
  %i172 = load i128, i128* %i, align 4
  %k173 = load i128, i128* %prod.k.declare_arg, align 4
  %mul174 = mul i128 2, %k173
  %sub175 = sub i128 %mul174, 1
  %slt176 = icmp slt i128 %i172, %sub175
  br i1 %slt176, label %loop.body130, label %loop.exit177

loop.exit177:                                     ; preds = %loop.latch169
  %split178 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %k179 = load i128, i128* %prod.k.declare_arg, align 4
  %mul180 = mul i128 2, %k179
  %sub181 = sub i128 %mul180, 2
  %array_getter182 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split178, i128 0, i128 %sub181, i128 1
  %split183 = load i128, i128* %array_getter182, align 4
  %split184 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %k185 = load i128, i128* %prod.k.declare_arg, align 4
  %mul186 = mul i128 2, %k185
  %sub187 = sub i128 %mul186, 3
  %array_getter188 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split184, i128 0, i128 %sub187, i128 2
  %split189 = load i128, i128* %array_getter188, align 4
  %add190 = add i128 %split183, %split189
  %carry191 = load [256 x i128]*, [256 x i128]** %carry, align 8
  %k192 = load i128, i128* %prod.k.declare_arg, align 4
  %mul193 = mul i128 2, %k192
  %sub194 = sub i128 %mul193, 2
  %array_getter195 = getelementptr inbounds [256 x i128], [256 x i128]* %carry191, i128 0, i128 %sub194
  %carry196 = load i128, i128* %array_getter195, align 4
  %add197 = add i128 %add190, %carry196
  %ptr_getter198 = load [256 x i128]*, [256 x i128]** %out, align 8
  %k199 = load i128, i128* %prod.k.declare_arg, align 4
  %mul200 = mul i128 2, %k199
  %sub201 = sub i128 %mul200, 1
  %out202 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter198, i128 0, i128 %sub201
  store i128 %add197, i128* %out202, align 4
  br label %if.exit203

if.exit203:                                       ; preds = %if.false125, %loop.exit177
  %out204 = load [256 x i128]*, [256 x i128]** %out, align 8
  ret [256 x i128]* %out204
}

define void @fn_template_init_split(%struct_template_circuit_split* %0) {
entry:
  %Split = alloca %struct_template_circuit_split*, align 8
  store %struct_template_circuit_split* %0, %struct_template_circuit_split** %Split, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %0, i32 0, i32 0
  %split.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %split.n.declare_arg = alloca i128, align 8
  store i128 %split.n.read_arg_inner, i128* %split.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %0, i32 0, i32 1
  %split.m.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %split.m.declare_arg = alloca i128, align 8
  store i128 %split.m.read_arg_inner, i128* %split.m.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %0, i32 0, i32 2
  %split.in.read_input_inner = load i128, i128* %struct_getter2, align 4
  %split.in.declare_input = alloca i128, align 8
  store i128 %split.in.read_input_inner, i128* %split.in.declare_input, align 4
  %split.small.declare_output = alloca i128, align 8
  %small = call i128 @fn_intrinsic_inline_init()
  store i128 %small, i128* %split.small.declare_output, align 4
  %split.big.declare_output = alloca i128, align 8
  %big = call i128 @fn_intrinsic_inline_init()
  store i128 %big, i128* %split.big.declare_output, align 4
  %n2b_big = alloca %struct_template_circuit_num2bits*, align 8
  %n2b_small = alloca %struct_template_circuit_num2bits*, align 8
  %in = load i128, i128* %split.in.declare_input, align 4
  %n = load i128, i128* %split.n.declare_arg, align 4
  %lshift = shl i128 1, %n
  %mod = srem i128 %in, %lshift
  %ptr_getter = load %struct_template_circuit_split*, %struct_template_circuit_split** %Split, align 8
  %split.small.write_output_inner = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %ptr_getter, i32 0, i32 3
  store i128 %mod, i128* %split.small.write_output_inner, align 4
  %Split3 = load %struct_template_circuit_split*, %struct_template_circuit_split** %Split, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %Split3, i32 0, i32 3
  %split.small.read_output_inner = load i128, i128* %struct_getter4, align 4
  store i128 %split.small.read_output_inner, i128* %split.small.declare_output, align 4
  %in5 = load i128, i128* %split.in.declare_input, align 4
  %n6 = load i128, i128* %split.n.declare_arg, align 4
  %lshift7 = shl i128 1, %n6
  %sdiv = sdiv i128 %in5, %lshift7
  %ptr_getter8 = load %struct_template_circuit_split*, %struct_template_circuit_split** %Split, align 8
  %split.big.write_output_inner = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %ptr_getter8, i32 0, i32 4
  store i128 %sdiv, i128* %split.big.write_output_inner, align 4
  %Split9 = load %struct_template_circuit_split*, %struct_template_circuit_split** %Split, align 8
  %struct_getter10 = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %Split9, i32 0, i32 4
  %split.big.read_output_inner = load i128, i128* %struct_getter10, align 4
  store i128 %split.big.read_output_inner, i128* %split.big.declare_output, align 4
  %n11 = load i128, i128* %split.n.declare_arg, align 4
  %call = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n11)
  store %struct_template_circuit_num2bits* %call, %struct_template_circuit_num2bits** %n2b_small, align 8
  %small12 = load i128, i128* %split.small.declare_output, align 4
  %n2b_small13 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b_small, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b_small13, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter14, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %small12, i1* @constraint.59)
  %ptr_getter15 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b_small, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter15, i32 0, i32 1
  store i128 %small12, i128* %num2bits.in.write_input_outter, align 4
  %m = load i128, i128* %split.m.declare_arg, align 4
  %call16 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %m)
  store %struct_template_circuit_num2bits* %call16, %struct_template_circuit_num2bits** %n2b_big, align 8
  %big17 = load i128, i128* %split.big.declare_output, align 4
  %n2b_big18 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b_big, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b_big18, i32 0, i32 1
  %num2bits.in.read_input_outter20 = load i128, i128* %struct_getter19, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter20, i128 %big17, i1* @constraint.60)
  %ptr_getter21 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b_big, align 8
  %num2bits.in.write_input_outter22 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter21, i32 0, i32 1
  store i128 %big17, i128* %num2bits.in.write_input_outter22, align 4
  %in23 = load i128, i128* %split.in.declare_input, align 4
  %small24 = load i128, i128* %split.small.declare_output, align 4
  %big25 = load i128, i128* %split.big.declare_output, align 4
  %n26 = load i128, i128* %split.n.declare_arg, align 4
  %lshift27 = shl i128 1, %n26
  %mul = mul i128 %big25, %lshift27
  %add = add i128 %small24, %mul
  call void @fn_intrinsic_add_constraint(i128 %in23, i128 %add, i1* @constraint.61)
  br label %exit

exit:                                             ; preds = %entry
  %small28 = load i128, i128* %split.small.declare_output, align 4
  %split.small.write_output_inner29 = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %0, i32 0, i32 3
  store i128 %small28, i128* %split.small.write_output_inner29, align 4
  %big30 = load i128, i128* %split.big.declare_output, align 4
  %split.big.write_output_inner31 = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %0, i32 0, i32 4
  store i128 %big30, i128* %split.big.write_output_inner31, align 4
  ret void
}

define %struct_template_circuit_split* @fn_template_build_split(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_split = alloca %struct_template_circuit_split, align 8
  %split.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %struct_template_circuit_split, i32 0, i32 0
  store i128 %0, i128* %split.n.write_arg_inner, align 4
  %split.m.write_arg_inner = getelementptr inbounds %struct_template_circuit_split, %struct_template_circuit_split* %struct_template_circuit_split, i32 0, i32 1
  store i128 %1, i128* %split.m.write_arg_inner, align 4
  ret %struct_template_circuit_split* %struct_template_circuit_split
}

define void @fn_template_init_checkcarrymodp(%struct_template_circuit_checkcarrymodp* %0) {
entry:
  %CheckCarryModP = alloca %struct_template_circuit_checkcarrymodp*, align 8
  store %struct_template_circuit_checkcarrymodp* %0, %struct_template_circuit_checkcarrymodp** %CheckCarryModP, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %0, i32 0, i32 0
  %checkcarrymodp.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %checkcarrymodp.n.declare_arg = alloca i128, align 8
  store i128 %checkcarrymodp.n.read_arg_inner, i128* %checkcarrymodp.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %0, i32 0, i32 1
  %checkcarrymodp.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %checkcarrymodp.k.declare_arg = alloca i128, align 8
  store i128 %checkcarrymodp.k.read_arg_inner, i128* %checkcarrymodp.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %0, i32 0, i32 2
  %checkcarrymodp.m.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %checkcarrymodp.m.declare_arg = alloca i128, align 8
  store i128 %checkcarrymodp.m.read_arg_inner, i128* %checkcarrymodp.m.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %0, i32 0, i32 3
  %checkcarrymodp.overflow.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %checkcarrymodp.overflow.declare_arg = alloca i128, align 8
  store i128 %checkcarrymodp.overflow.read_arg_inner, i128* %checkcarrymodp.overflow.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %0, i32 0, i32 4
  %checkcarrymodp.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %checkcarrymodp.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %checkcarrymodp.p.read_arg_inner, [256 x i128]** %checkcarrymodp.p.declare_arg, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %0, i32 0, i32 5
  %checkcarrymodp.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter5, align 8
  %checkcarrymodp.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %checkcarrymodp.in.read_input_inner, [256 x i128]** %checkcarrymodp.in.declare_input, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %0, i32 0, i32 6
  %checkcarrymodp.x.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter6, align 8
  %checkcarrymodp.x.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %checkcarrymodp.x.read_input_inner, [256 x i128]** %checkcarrymodp.x.declare_input, align 8
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %0, i32 0, i32 7
  %checkcarrymodp.y.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter7, align 8
  %checkcarrymodp.y.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %checkcarrymodp.y.read_input_inner, [256 x i128]** %checkcarrymodp.y.declare_input, align 8
  %carry_check = alloca %struct_template_circuit_checkcarrytozero*, align 8
  %i = alloca i128, align 8
  %i8 = call i128 @fn_intrinsic_inline_init()
  store i128 %i8, i128* %i, align 4
  %pX = alloca %struct_template_circuit_bigmultshortlongunequal*, align 8
  %n = load i128, i128* %checkcarrymodp.n.declare_arg, align 4
  %k = load i128, i128* %checkcarrymodp.k.declare_arg, align 4
  %m = load i128, i128* %checkcarrymodp.m.declare_arg, align 4
  %overflow = load i128, i128* %checkcarrymodp.overflow.declare_arg, align 4
  %call = call %struct_template_circuit_bigmultshortlongunequal* @fn_template_build_bigmultshortlongunequal(i128 %n, i128 %k, i128 %m, i128 %overflow)
  store %struct_template_circuit_bigmultshortlongunequal* %call, %struct_template_circuit_bigmultshortlongunequal** %pX, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %p = load [256 x i128]*, [256 x i128]** %checkcarrymodp.p.declare_arg, align 8
  %i9 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i9
  %p10 = load i128, i128* %array_getter, align 4
  %pX11 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %pX, align 8
  %struct_getter12 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %pX11, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter12, align 8
  %i13 = load i128, i128* %i, align 4
  %array_getter14 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter, i128 0, i128 %i13
  %pX15 = load i128, i128* %array_getter14, align 4
  call void @fn_intrinsic_add_constraint(i128 %pX15, i128 %p10, i1* @constraint.62)
  %ptr_getter = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %pX, align 8
  %struct_getter16 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ptr_getter, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter17 = load [256 x i128]*, [256 x i128]** %struct_getter16, align 8
  %i18 = load i128, i128* %i, align 4
  %pX19 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter17, i128 0, i128 %i18
  store i128 %p10, i128* %pX19, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i20 = load i128, i128* %i, align 4
  %add = add i128 %i20, 1
  store i128 %add, i128* %i, align 4
  %i21 = load i128, i128* %i, align 4
  %k22 = load i128, i128* %checkcarrymodp.k.declare_arg, align 4
  %slt = icmp slt i128 %i21, %k22
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %i, align 4
  br label %loop.body23

loop.body23:                                      ; preds = %loop.latch37, %loop.exit
  %X = load [256 x i128]*, [256 x i128]** %checkcarrymodp.x.declare_input, align 8
  %i24 = load i128, i128* %i, align 4
  %array_getter25 = getelementptr inbounds [256 x i128], [256 x i128]* %X, i128 0, i128 %i24
  %X26 = load i128, i128* %array_getter25, align 4
  %pX27 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %pX, align 8
  %struct_getter28 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %pX27, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter28, align 8
  %i29 = load i128, i128* %i, align 4
  %array_getter30 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.b.read_input_outter, i128 0, i128 %i29
  %pX31 = load i128, i128* %array_getter30, align 4
  call void @fn_intrinsic_add_constraint(i128 %pX31, i128 %X26, i1* @constraint.63)
  %ptr_getter32 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %pX, align 8
  %struct_getter33 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ptr_getter32, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_outter34 = load [256 x i128]*, [256 x i128]** %struct_getter33, align 8
  %i35 = load i128, i128* %i, align 4
  %pX36 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.b.read_input_outter34, i128 0, i128 %i35
  store i128 %X26, i128* %pX36, align 4
  br label %loop.latch37

loop.latch37:                                     ; preds = %loop.body23
  %i38 = load i128, i128* %i, align 4
  %add39 = add i128 %i38, 1
  store i128 %add39, i128* %i, align 4
  %i40 = load i128, i128* %i, align 4
  %m41 = load i128, i128* %checkcarrymodp.m.declare_arg, align 4
  %slt42 = icmp slt i128 %i40, %m41
  br i1 %slt42, label %loop.body23, label %loop.exit43

loop.exit43:                                      ; preds = %loop.latch37
  %n44 = load i128, i128* %checkcarrymodp.n.declare_arg, align 4
  %overflow45 = load i128, i128* %checkcarrymodp.overflow.declare_arg, align 4
  %add46 = add i128 %overflow45, 1
  %k47 = load i128, i128* %checkcarrymodp.k.declare_arg, align 4
  %m48 = load i128, i128* %checkcarrymodp.m.declare_arg, align 4
  %add49 = add i128 %k47, %m48
  %sub = sub i128 %add49, 1
  %call50 = call %struct_template_circuit_checkcarrytozero* @fn_template_build_checkcarrytozero(i128 %n44, i128 %add46, i128 %sub)
  store %struct_template_circuit_checkcarrytozero* %call50, %struct_template_circuit_checkcarrytozero** %carry_check, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body51

loop.body51:                                      ; preds = %loop.latch75, %loop.exit43
  %in = load [256 x i128]*, [256 x i128]** %checkcarrymodp.in.declare_input, align 8
  %i52 = load i128, i128* %i, align 4
  %array_getter53 = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %i52
  %in54 = load i128, i128* %array_getter53, align 4
  %pX55 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %pX, align 8
  %struct_getter56 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %pX55, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter56, align 8
  %i57 = load i128, i128* %i, align 4
  %array_getter58 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter, i128 0, i128 %i57
  %pX59 = load i128, i128* %array_getter58, align 4
  %sub60 = sub i128 %in54, %pX59
  %Y = load [256 x i128]*, [256 x i128]** %checkcarrymodp.y.declare_input, align 8
  %i61 = load i128, i128* %i, align 4
  %array_getter62 = getelementptr inbounds [256 x i128], [256 x i128]* %Y, i128 0, i128 %i61
  %Y63 = load i128, i128* %array_getter62, align 4
  %sub64 = sub i128 %sub60, %Y63
  %carry_check65 = load %struct_template_circuit_checkcarrytozero*, %struct_template_circuit_checkcarrytozero** %carry_check, align 8
  %struct_getter66 = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %carry_check65, i32 0, i32 3
  %checkcarrytozero.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter66, align 8
  %i67 = load i128, i128* %i, align 4
  %array_getter68 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrytozero.in.read_input_outter, i128 0, i128 %i67
  %carry_check69 = load i128, i128* %array_getter68, align 4
  call void @fn_intrinsic_add_constraint(i128 %carry_check69, i128 %sub64, i1* @constraint.64)
  %ptr_getter70 = load %struct_template_circuit_checkcarrytozero*, %struct_template_circuit_checkcarrytozero** %carry_check, align 8
  %struct_getter71 = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %ptr_getter70, i32 0, i32 3
  %checkcarrytozero.in.read_input_outter72 = load [256 x i128]*, [256 x i128]** %struct_getter71, align 8
  %i73 = load i128, i128* %i, align 4
  %carry_check74 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrytozero.in.read_input_outter72, i128 0, i128 %i73
  store i128 %sub64, i128* %carry_check74, align 4
  br label %loop.latch75

loop.latch75:                                     ; preds = %loop.body51
  %i76 = load i128, i128* %i, align 4
  %add77 = add i128 %i76, 1
  store i128 %add77, i128* %i, align 4
  %i78 = load i128, i128* %i, align 4
  %k79 = load i128, i128* %checkcarrymodp.k.declare_arg, align 4
  %slt80 = icmp slt i128 %i78, %k79
  br i1 %slt80, label %loop.body51, label %loop.exit81

loop.exit81:                                      ; preds = %loop.latch75
  %k82 = load i128, i128* %checkcarrymodp.k.declare_arg, align 4
  store i128 %k82, i128* %i, align 4
  br label %loop.body83

loop.body83:                                      ; preds = %loop.latch101, %loop.exit81
  %pX84 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %pX, align 8
  %struct_getter85 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %pX84, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter86 = load [256 x i128]*, [256 x i128]** %struct_getter85, align 8
  %i87 = load i128, i128* %i, align 4
  %array_getter88 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter86, i128 0, i128 %i87
  %pX89 = load i128, i128* %array_getter88, align 4
  %neg = sub i128 0, %pX89
  %carry_check90 = load %struct_template_circuit_checkcarrytozero*, %struct_template_circuit_checkcarrytozero** %carry_check, align 8
  %struct_getter91 = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %carry_check90, i32 0, i32 3
  %checkcarrytozero.in.read_input_outter92 = load [256 x i128]*, [256 x i128]** %struct_getter91, align 8
  %i93 = load i128, i128* %i, align 4
  %array_getter94 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrytozero.in.read_input_outter92, i128 0, i128 %i93
  %carry_check95 = load i128, i128* %array_getter94, align 4
  call void @fn_intrinsic_add_constraint(i128 %carry_check95, i128 %neg, i1* @constraint.65)
  %ptr_getter96 = load %struct_template_circuit_checkcarrytozero*, %struct_template_circuit_checkcarrytozero** %carry_check, align 8
  %struct_getter97 = getelementptr inbounds %struct_template_circuit_checkcarrytozero, %struct_template_circuit_checkcarrytozero* %ptr_getter96, i32 0, i32 3
  %checkcarrytozero.in.read_input_outter98 = load [256 x i128]*, [256 x i128]** %struct_getter97, align 8
  %i99 = load i128, i128* %i, align 4
  %carry_check100 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrytozero.in.read_input_outter98, i128 0, i128 %i99
  store i128 %neg, i128* %carry_check100, align 4
  br label %loop.latch101

loop.latch101:                                    ; preds = %loop.body83
  %i102 = load i128, i128* %i, align 4
  %add103 = add i128 %i102, 1
  store i128 %add103, i128* %i, align 4
  %i104 = load i128, i128* %i, align 4
  %k105 = load i128, i128* %checkcarrymodp.k.declare_arg, align 4
  %m106 = load i128, i128* %checkcarrymodp.m.declare_arg, align 4
  %add107 = add i128 %k105, %m106
  %sub108 = sub i128 %add107, 1
  %slt109 = icmp slt i128 %i104, %sub108
  br i1 %slt109, label %loop.body83, label %loop.exit110

loop.exit110:                                     ; preds = %loop.latch101
  br label %exit

exit:                                             ; preds = %loop.exit110
  ret void
}

define %struct_template_circuit_checkcarrymodp* @fn_template_build_checkcarrymodp(i128 %0, i128 %1, i128 %2, i128 %3, [256 x i128]* %4) {
entry:
  %struct_template_circuit_checkcarrymodp = alloca %struct_template_circuit_checkcarrymodp, align 8
  %checkcarrymodp.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %struct_template_circuit_checkcarrymodp, i32 0, i32 0
  store i128 %0, i128* %checkcarrymodp.n.write_arg_inner, align 4
  %checkcarrymodp.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %struct_template_circuit_checkcarrymodp, i32 0, i32 1
  store i128 %1, i128* %checkcarrymodp.k.write_arg_inner, align 4
  %checkcarrymodp.m.write_arg_inner = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %struct_template_circuit_checkcarrymodp, i32 0, i32 2
  store i128 %2, i128* %checkcarrymodp.m.write_arg_inner, align 4
  %checkcarrymodp.overflow.write_arg_inner = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %struct_template_circuit_checkcarrymodp, i32 0, i32 3
  store i128 %3, i128* %checkcarrymodp.overflow.write_arg_inner, align 4
  %checkcarrymodp.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %struct_template_circuit_checkcarrymodp, i32 0, i32 4
  store [256 x i128]* %4, [256 x i128]** %checkcarrymodp.p.write_arg_inner, align 8
  ret %struct_template_circuit_checkcarrymodp* %struct_template_circuit_checkcarrymodp
}

define void @fn_template_init_lessthan(%struct_template_circuit_lessthan* %0) {
entry:
  %LessThan = alloca %struct_template_circuit_lessthan*, align 8
  store %struct_template_circuit_lessthan* %0, %struct_template_circuit_lessthan** %LessThan, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %0, i32 0, i32 0
  %lessthan.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %lessthan.n.declare_arg = alloca i128, align 8
  store i128 %lessthan.n.read_arg_inner, i128* %lessthan.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %0, i32 0, i32 1
  %lessthan.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter1, align 8
  %lessthan.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %lessthan.in.read_input_inner, [256 x i128]** %lessthan.in.declare_input, align 8
  %lessthan.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %lessthan.out.declare_output, align 4
  %n2b = alloca %struct_template_circuit_num2bits*, align 8
  %n = load i128, i128* %lessthan.n.declare_arg, align 4
  %add = add i128 %n, 1
  %call = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %add)
  store %struct_template_circuit_num2bits* %call, %struct_template_circuit_num2bits** %n2b, align 8
  %in = load [256 x i128]*, [256 x i128]** %lessthan.in.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 0
  %in2 = load i128, i128* %array_getter, align 4
  %n3 = load i128, i128* %lessthan.n.declare_arg, align 4
  %lshift = shl i128 1, %n3
  %add4 = add i128 %in2, %lshift
  %in5 = load [256 x i128]*, [256 x i128]** %lessthan.in.declare_input, align 8
  %array_getter6 = getelementptr inbounds [256 x i128], [256 x i128]* %in5, i128 0, i128 1
  %in7 = load i128, i128* %array_getter6, align 4
  %sub = sub i128 %add4, %in7
  %n2b8 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b8, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter9, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %sub, i1* @constraint.66)
  %ptr_getter = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter, i32 0, i32 1
  store i128 %sub, i128* %num2bits.in.write_input_outter, align 4
  %n2b10 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter11 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b10, i32 0, i32 2
  %num2bits.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter11, align 8
  %n12 = load i128, i128* %lessthan.n.declare_arg, align 4
  %array_getter13 = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter, i128 0, i128 %n12
  %n2b14 = load i128, i128* %array_getter13, align 4
  %sub15 = sub i128 1, %n2b14
  %out16 = load i128, i128* %lessthan.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out16, i128 %sub15, i1* @constraint.67)
  %ptr_getter17 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %LessThan, align 8
  %lessthan.out.write_output_inner = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter17, i32 0, i32 2
  store i128 %sub15, i128* %lessthan.out.write_output_inner, align 4
  %LessThan18 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %LessThan, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %LessThan18, i32 0, i32 2
  %lessthan.out.read_output_inner = load i128, i128* %struct_getter19, align 4
  store i128 %lessthan.out.read_output_inner, i128* %lessthan.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out20 = load i128, i128* %lessthan.out.declare_output, align 4
  %lessthan.out.write_output_inner21 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %0, i32 0, i32 2
  store i128 %out20, i128* %lessthan.out.write_output_inner21, align 4
  ret void
}

define %struct_template_circuit_lessthan* @fn_template_build_lessthan(i128 %0) {
entry:
  %struct_template_circuit_lessthan = alloca %struct_template_circuit_lessthan, align 8
  %lessthan.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %struct_template_circuit_lessthan, i32 0, i32 0
  store i128 %0, i128* %lessthan.n.write_arg_inner, align 4
  ret %struct_template_circuit_lessthan* %struct_template_circuit_lessthan
}

define void @fn_template_init_lesseqthan(%struct_template_circuit_lesseqthan* %0) {
entry:
  %LessEqThan = alloca %struct_template_circuit_lesseqthan*, align 8
  store %struct_template_circuit_lesseqthan* %0, %struct_template_circuit_lesseqthan** %LessEqThan, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_lesseqthan, %struct_template_circuit_lesseqthan* %0, i32 0, i32 0
  %lesseqthan.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %lesseqthan.n.declare_arg = alloca i128, align 8
  store i128 %lesseqthan.n.read_arg_inner, i128* %lesseqthan.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_lesseqthan, %struct_template_circuit_lesseqthan* %0, i32 0, i32 1
  %lesseqthan.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter1, align 8
  %lesseqthan.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %lesseqthan.in.read_input_inner, [256 x i128]** %lesseqthan.in.declare_input, align 8
  %lesseqthan.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %lesseqthan.out.declare_output, align 4
  %lt = alloca %struct_template_circuit_lessthan*, align 8
  %n = load i128, i128* %lesseqthan.n.declare_arg, align 4
  %call = call %struct_template_circuit_lessthan* @fn_template_build_lessthan(i128 %n)
  store %struct_template_circuit_lessthan* %call, %struct_template_circuit_lessthan** %lt, align 8
  %in = load [256 x i128]*, [256 x i128]** %lesseqthan.in.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 0
  %in2 = load i128, i128* %array_getter, align 4
  %lt3 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt3, i32 0, i32 1
  %lessthan.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %array_getter5 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter, i128 0, i128 0
  %lt6 = load i128, i128* %array_getter5, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt6, i128 %in2, i1* @constraint.68)
  %ptr_getter = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter, i32 0, i32 1
  %lessthan.in.read_input_outter8 = load [256 x i128]*, [256 x i128]** %struct_getter7, align 8
  %lt9 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter8, i128 0, i128 0
  store i128 %in2, i128* %lt9, align 4
  %in10 = load [256 x i128]*, [256 x i128]** %lesseqthan.in.declare_input, align 8
  %array_getter11 = getelementptr inbounds [256 x i128], [256 x i128]* %in10, i128 0, i128 1
  %in12 = load i128, i128* %array_getter11, align 4
  %add = add i128 %in12, 1
  %lt13 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt13, i32 0, i32 1
  %lessthan.in.read_input_outter15 = load [256 x i128]*, [256 x i128]** %struct_getter14, align 8
  %array_getter16 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter15, i128 0, i128 1
  %lt17 = load i128, i128* %array_getter16, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt17, i128 %add, i1* @constraint.69)
  %ptr_getter18 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter18, i32 0, i32 1
  %lessthan.in.read_input_outter20 = load [256 x i128]*, [256 x i128]** %struct_getter19, align 8
  %lt21 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter20, i128 0, i128 1
  store i128 %add, i128* %lt21, align 4
  %lt22 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt22, i32 0, i32 2
  %lessthan.out.read_output_outter = load i128, i128* %struct_getter23, align 4
  %out24 = load i128, i128* %lesseqthan.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out24, i128 %lessthan.out.read_output_outter, i1* @constraint.70)
  %ptr_getter25 = load %struct_template_circuit_lesseqthan*, %struct_template_circuit_lesseqthan** %LessEqThan, align 8
  %lesseqthan.out.write_output_inner = getelementptr inbounds %struct_template_circuit_lesseqthan, %struct_template_circuit_lesseqthan* %ptr_getter25, i32 0, i32 2
  store i128 %lessthan.out.read_output_outter, i128* %lesseqthan.out.write_output_inner, align 4
  %LessEqThan26 = load %struct_template_circuit_lesseqthan*, %struct_template_circuit_lesseqthan** %LessEqThan, align 8
  %struct_getter27 = getelementptr inbounds %struct_template_circuit_lesseqthan, %struct_template_circuit_lesseqthan* %LessEqThan26, i32 0, i32 2
  %lesseqthan.out.read_output_inner = load i128, i128* %struct_getter27, align 4
  store i128 %lesseqthan.out.read_output_inner, i128* %lesseqthan.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out28 = load i128, i128* %lesseqthan.out.declare_output, align 4
  %lesseqthan.out.write_output_inner29 = getelementptr inbounds %struct_template_circuit_lesseqthan, %struct_template_circuit_lesseqthan* %0, i32 0, i32 2
  store i128 %out28, i128* %lesseqthan.out.write_output_inner29, align 4
  ret void
}

define %struct_template_circuit_lesseqthan* @fn_template_build_lesseqthan(i128 %0) {
entry:
  %struct_template_circuit_lesseqthan = alloca %struct_template_circuit_lesseqthan, align 8
  %lesseqthan.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_lesseqthan, %struct_template_circuit_lesseqthan* %struct_template_circuit_lesseqthan, i32 0, i32 0
  store i128 %0, i128* %lesseqthan.n.write_arg_inner, align 4
  ret %struct_template_circuit_lesseqthan* %struct_template_circuit_lesseqthan
}

define i128 @get_fp2_sgn0(i128 %0, [256 x [256 x i128]]* %1) {
entry:
  %get_fp2_sgn0.k.declare_arg = alloca i128, align 8
  store i128 %0, i128* %get_fp2_sgn0.k.declare_arg, align 4
  %get_fp2_sgn0.a.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %1, [256 x [256 x i128]]** %get_fp2_sgn0.a.declare_arg, align 8
  %sgn0 = alloca i128, align 8
  %sgn01 = call i128 @fn_intrinsic_inline_init()
  store i128 %sgn01, i128* %sgn0, align 4
  %sgn1 = alloca i128, align 8
  %sgn12 = call i128 @fn_intrinsic_inline_init()
  store i128 %sgn12, i128* %sgn1, align 4
  %z = alloca i128, align 8
  %z3 = call i128 @fn_intrinsic_inline_init()
  store i128 %z3, i128* %z, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %get_fp2_sgn0.a.declare_arg, align 8
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 0, i128 0
  %a4 = load i128, i128* %array_getter, align 4
  %mod = srem i128 %a4, 2
  store i128 %mod, i128* %sgn0, align 4
  %a5 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %get_fp2_sgn0.a.declare_arg, align 8
  %array_getter6 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a5, i128 0, i128 1, i128 0
  %a7 = load i128, i128* %array_getter6, align 4
  %mod8 = srem i128 %a7, 2
  store i128 %mod8, i128* %sgn1, align 4
  %k = load i128, i128* %get_fp2_sgn0.k.declare_arg, align 4
  %a9 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %get_fp2_sgn0.a.declare_arg, align 8
  %array_getter10 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a9, i128 0, i128 0
  %a11 = load [256 x i128], [256 x i128]* %array_getter10, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %a11, [256 x i128]* %spice_inline_array, align 4
  %call = call i128 @long_is_zero(i128 %k, [256 x i128]* %spice_inline_array)
  store i128 %call, i128* %z, align 4
  %sgn012 = load i128, i128* %sgn0, align 4
  %z13 = load i128, i128* %z, align 4
  %sgn114 = load i128, i128* %sgn1, align 4
  %and = and i128 %z13, %sgn114
  %or = or i128 %sgn012, %and
  ret i128 %or
}

define void @fn_template_init_longtoshortnoendcarry(%struct_template_circuit_longtoshortnoendcarry* %0) {
entry:
  %LongToShortNoEndCarry = alloca %struct_template_circuit_longtoshortnoendcarry*, align 8
  store %struct_template_circuit_longtoshortnoendcarry* %0, %struct_template_circuit_longtoshortnoendcarry** %LongToShortNoEndCarry, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_longtoshortnoendcarry, %struct_template_circuit_longtoshortnoendcarry* %0, i32 0, i32 0
  %longtoshortnoendcarry.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %longtoshortnoendcarry.n.declare_arg = alloca i128, align 8
  store i128 %longtoshortnoendcarry.n.read_arg_inner, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_longtoshortnoendcarry, %struct_template_circuit_longtoshortnoendcarry* %0, i32 0, i32 1
  %longtoshortnoendcarry.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %longtoshortnoendcarry.k.declare_arg = alloca i128, align 8
  store i128 %longtoshortnoendcarry.k.read_arg_inner, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_longtoshortnoendcarry, %struct_template_circuit_longtoshortnoendcarry* %0, i32 0, i32 2
  %longtoshortnoendcarry.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %longtoshortnoendcarry.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %longtoshortnoendcarry.in.read_input_inner, [256 x i128]** %longtoshortnoendcarry.in.declare_input, align 8
  %longtoshortnoendcarry.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %longtoshortnoendcarry.runningcarry.declare_inter = alloca [256 x i128]*, align 8
  %malloccall3 = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %runningCarry = bitcast i8* %malloccall3 to [256 x i128]*
  store [256 x i128]* %runningCarry, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %sumAndCarry = alloca [256 x i128]*, align 8
  %sumAndCarry5 = alloca [256 x i128], align 8
  store [256 x i128]* %sumAndCarry5, [256 x i128]** %sumAndCarry, align 8
  %outRangeChecks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %outRangeChecks6 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %outRangeChecks6, [256 x %struct_template_circuit_num2bits*]** %outRangeChecks, align 8
  %runningCarryRangeChecks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %runningCarryRangeChecks7 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %runningCarryRangeChecks7, [256 x %struct_template_circuit_num2bits*]** %runningCarryRangeChecks, align 8
  %split = alloca [256 x [256 x i128]]*, align 8
  %split8 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %split8, [256 x [256 x i128]]** %split, align 8
  %carry = alloca [256 x i128]*, align 8
  %carry9 = alloca [256 x i128], align 8
  store [256 x i128]* %carry9, [256 x i128]** %carry, align 8
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %split, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %in = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.in.declare_input, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %i10
  %in11 = load i128, i128* %array_getter, align 4
  %n = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %n12 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %n13 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %call = call [3 x i128]* @SplitThreeFn(i128 %in11, i128 %n, i128 %n12, i128 %n13)
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %i14 = load i128, i128* %i, align 4
  %split15 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 %i14
  %1 = bitcast [256 x i128]* %split15 to i8*
  %2 = bitcast [3 x i128]* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %2, i64 ptrtoint ([3 x i128]* getelementptr ([3 x i128], [3 x i128]* null, i32 1) to i64), i1 false)
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i16 = load i128, i128* %i, align 4
  %add = add i128 %i16, 1
  store i128 %add, i128* %i, align 4
  %i17 = load i128, i128* %i, align 4
  %k = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %slt = icmp slt i128 %i17, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %uniform_array18 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array18, [256 x i128]** %carry, align 8
  %ptr_getter19 = load [256 x i128]*, [256 x i128]** %carry, align 8
  %carry20 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter19, i128 0, i128 0
  store i128 0, i128* %carry20, align 4
  %split21 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %array_getter22 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split21, i128 0, i128 0, i128 0
  %split23 = load i128, i128* %array_getter22, align 4
  %ptr_getter24 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %out25 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter24, i128 0, i128 0
  store i128 %split23, i128* %out25, align 4
  %k26 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %sgt = icmp sgt i128 %k26, 1
  br i1 %sgt, label %if.true, label %if.false

if.true:                                          ; preds = %loop.exit
  %split27 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %array_getter28 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split27, i128 0, i128 0, i128 1
  %split29 = load i128, i128* %array_getter28, align 4
  %split30 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %array_getter31 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split30, i128 0, i128 1, i128 0
  %split32 = load i128, i128* %array_getter31, align 4
  %add33 = add i128 %split29, %split32
  %n34 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %n35 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %call36 = call [2 x i128]* @SplitFn(i128 %add33, i128 %n34, i128 %n35)
  %memcpy_ptr = getelementptr inbounds [256 x i128]*, [256 x i128]** %sumAndCarry, i128 0
  %3 = bitcast [256 x i128]** %memcpy_ptr to i8*
  %4 = bitcast [2 x i128]* %call36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 ptrtoint ([2 x i128]* getelementptr ([2 x i128], [2 x i128]* null, i32 1) to i64), i1 false)
  %sumAndCarry37 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter38 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry37, i128 0, i128 0
  %sumAndCarry39 = load i128, i128* %array_getter38, align 4
  %ptr_getter40 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %out41 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter40, i128 0, i128 1
  store i128 %sumAndCarry39, i128* %out41, align 4
  %sumAndCarry42 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter43 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry42, i128 0, i128 1
  %sumAndCarry44 = load i128, i128* %array_getter43, align 4
  %ptr_getter45 = load [256 x i128]*, [256 x i128]** %carry, align 8
  %carry46 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter45, i128 0, i128 1
  store i128 %sumAndCarry44, i128* %carry46, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.exit
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  %k49 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %sgt50 = icmp sgt i128 %k49, 2
  br i1 %sgt50, label %if.true47, label %if.false48

if.true47:                                        ; preds = %if.exit
  store i128 2, i128* %i, align 4
  br label %loop.body51

if.false48:                                       ; preds = %if.exit
  br label %if.exit116

loop.body51:                                      ; preds = %loop.latch89, %if.true47
  %split52 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %i53 = load i128, i128* %i, align 4
  %array_getter54 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split52, i128 0, i128 %i53, i128 0
  %split55 = load i128, i128* %array_getter54, align 4
  %split56 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %i57 = load i128, i128* %i, align 4
  %sub = sub i128 %i57, 1
  %array_getter58 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split56, i128 0, i128 %sub, i128 1
  %split59 = load i128, i128* %array_getter58, align 4
  %add60 = add i128 %split55, %split59
  %split61 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %i62 = load i128, i128* %i, align 4
  %sub63 = sub i128 %i62, 2
  %array_getter64 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split61, i128 0, i128 %sub63, i128 2
  %split65 = load i128, i128* %array_getter64, align 4
  %add66 = add i128 %add60, %split65
  %carry67 = load [256 x i128]*, [256 x i128]** %carry, align 8
  %i68 = load i128, i128* %i, align 4
  %sub69 = sub i128 %i68, 1
  %array_getter70 = getelementptr inbounds [256 x i128], [256 x i128]* %carry67, i128 0, i128 %sub69
  %carry71 = load i128, i128* %array_getter70, align 4
  %add72 = add i128 %add66, %carry71
  %n73 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %n74 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %call75 = call [2 x i128]* @SplitFn(i128 %add72, i128 %n73, i128 %n74)
  %memcpy_ptr76 = getelementptr inbounds [256 x i128]*, [256 x i128]** %sumAndCarry, i128 0
  %5 = bitcast [256 x i128]** %memcpy_ptr76 to i8*
  %6 = bitcast [2 x i128]* %call75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 ptrtoint ([2 x i128]* getelementptr ([2 x i128], [2 x i128]* null, i32 1) to i64), i1 false)
  %sumAndCarry77 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter78 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry77, i128 0, i128 0
  %sumAndCarry79 = load i128, i128* %array_getter78, align 4
  %ptr_getter80 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %i81 = load i128, i128* %i, align 4
  %out82 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter80, i128 0, i128 %i81
  store i128 %sumAndCarry79, i128* %out82, align 4
  %sumAndCarry83 = load [256 x i128]*, [256 x i128]** %sumAndCarry, align 8
  %array_getter84 = getelementptr inbounds [256 x i128], [256 x i128]* %sumAndCarry83, i128 0, i128 1
  %sumAndCarry85 = load i128, i128* %array_getter84, align 4
  %ptr_getter86 = load [256 x i128]*, [256 x i128]** %carry, align 8
  %i87 = load i128, i128* %i, align 4
  %carry88 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter86, i128 0, i128 %i87
  store i128 %sumAndCarry85, i128* %carry88, align 4
  br label %loop.latch89

loop.latch89:                                     ; preds = %loop.body51
  %i90 = load i128, i128* %i, align 4
  %add91 = add i128 %i90, 1
  store i128 %add91, i128* %i, align 4
  %i92 = load i128, i128* %i, align 4
  %k93 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %slt94 = icmp slt i128 %i92, %k93
  br i1 %slt94, label %loop.body51, label %loop.exit95

loop.exit95:                                      ; preds = %loop.latch89
  %split96 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %k97 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %sub98 = sub i128 %k97, 1
  %array_getter99 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split96, i128 0, i128 %sub98, i128 1
  %split100 = load i128, i128* %array_getter99, align 4
  %split101 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %split, align 8
  %k102 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %sub103 = sub i128 %k102, 2
  %array_getter104 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %split101, i128 0, i128 %sub103, i128 2
  %split105 = load i128, i128* %array_getter104, align 4
  %add106 = add i128 %split100, %split105
  %carry107 = load [256 x i128]*, [256 x i128]** %carry, align 8
  %k108 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %sub109 = sub i128 %k108, 1
  %array_getter110 = getelementptr inbounds [256 x i128], [256 x i128]* %carry107, i128 0, i128 %sub109
  %carry111 = load i128, i128* %array_getter110, align 4
  %add112 = add i128 %add106, %carry111
  %ptr_getter113 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %k114 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %out115 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter113, i128 0, i128 %k114
  store i128 %add112, i128* %out115, align 4
  br label %if.exit116

if.exit116:                                       ; preds = %if.false48, %loop.exit95
  store i128 0, i128* %i, align 4
  br label %loop.body117

loop.body117:                                     ; preds = %loop.latch136, %if.exit116
  %n118 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %call119 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n118)
  %ptr_getter120 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %outRangeChecks, align 8
  %i121 = load i128, i128* %i, align 4
  %outRangeChecks122 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter120, i128 0, i128 %i121
  store %struct_template_circuit_num2bits* %call119, %struct_template_circuit_num2bits** %outRangeChecks122, align 8
  %out123 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %i124 = load i128, i128* %i, align 4
  %array_getter125 = getelementptr inbounds [256 x i128], [256 x i128]* %out123, i128 0, i128 %i124
  %out126 = load i128, i128* %array_getter125, align 4
  %outRangeChecks127 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %outRangeChecks, align 8
  %i128 = load i128, i128* %i, align 4
  %array_getter129 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %outRangeChecks127, i128 0, i128 %i128
  %outRangeChecks130 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter129, align 8
  %struct_getter131 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %outRangeChecks130, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter131, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %out126, i1* @constraint.71)
  %ptr_getter132 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %outRangeChecks, align 8
  %i133 = load i128, i128* %i, align 4
  %array_getter134 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter132, i128 0, i128 %i133
  %outRangeChecks135 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter134, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %outRangeChecks135, i32 0, i32 1
  store i128 %out126, i128* %num2bits.in.write_input_outter, align 4
  br label %loop.latch136

loop.latch136:                                    ; preds = %loop.body117
  %i137 = load i128, i128* %i, align 4
  %add138 = add i128 %i137, 1
  store i128 %add138, i128* %i, align 4
  %i139 = load i128, i128* %i, align 4
  %k140 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %add141 = add i128 %k140, 1
  %slt142 = icmp slt i128 %i139, %add141
  br i1 %slt142, label %loop.body117, label %loop.exit143

loop.exit143:                                     ; preds = %loop.latch136
  %in144 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.in.declare_input, align 8
  %array_getter145 = getelementptr inbounds [256 x i128], [256 x i128]* %in144, i128 0, i128 0
  %in146 = load i128, i128* %array_getter145, align 4
  %out147 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %array_getter148 = getelementptr inbounds [256 x i128], [256 x i128]* %out147, i128 0, i128 0
  %out149 = load i128, i128* %array_getter148, align 4
  %sub150 = sub i128 %in146, %out149
  %n151 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %lshift = shl i128 1, %n151
  %sdiv = sdiv i128 %sub150, %lshift
  %ptr_getter152 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %runningCarry153 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter152, i128 0, i128 0
  store i128 %sdiv, i128* %runningCarry153, align 4
  %n154 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %k155 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %call156 = call i128 @log_ceil(i128 %k155)
  %add157 = add i128 %n154, %call156
  %call158 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %add157)
  %ptr_getter159 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %runningCarryRangeChecks, align 8
  %runningCarryRangeChecks160 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter159, i128 0, i128 0
  store %struct_template_circuit_num2bits* %call158, %struct_template_circuit_num2bits** %runningCarryRangeChecks160, align 8
  %runningCarry161 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %array_getter162 = getelementptr inbounds [256 x i128], [256 x i128]* %runningCarry161, i128 0, i128 0
  %runningCarry163 = load i128, i128* %array_getter162, align 4
  %runningCarryRangeChecks164 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %runningCarryRangeChecks, align 8
  %array_getter165 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %runningCarryRangeChecks164, i128 0, i128 0
  %runningCarryRangeChecks166 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter165, align 8
  %struct_getter167 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %runningCarryRangeChecks166, i32 0, i32 1
  %num2bits.in.read_input_outter168 = load i128, i128* %struct_getter167, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter168, i128 %runningCarry163, i1* @constraint.72)
  %ptr_getter169 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %runningCarryRangeChecks, align 8
  %array_getter170 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter169, i128 0, i128 0
  %runningCarryRangeChecks171 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter170, align 8
  %num2bits.in.write_input_outter172 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %runningCarryRangeChecks171, i32 0, i32 1
  store i128 %runningCarry163, i128* %num2bits.in.write_input_outter172, align 4
  %runningCarry173 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %array_getter174 = getelementptr inbounds [256 x i128], [256 x i128]* %runningCarry173, i128 0, i128 0
  %runningCarry175 = load i128, i128* %array_getter174, align 4
  %n176 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %lshift177 = shl i128 1, %n176
  %mul = mul i128 %runningCarry175, %lshift177
  %in178 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.in.declare_input, align 8
  %array_getter179 = getelementptr inbounds [256 x i128], [256 x i128]* %in178, i128 0, i128 0
  %in180 = load i128, i128* %array_getter179, align 4
  %out181 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %array_getter182 = getelementptr inbounds [256 x i128], [256 x i128]* %out181, i128 0, i128 0
  %out183 = load i128, i128* %array_getter182, align 4
  %sub184 = sub i128 %in180, %out183
  call void @fn_intrinsic_add_constraint(i128 %mul, i128 %sub184, i1* @constraint.73)
  store i128 1, i128* %i, align 4
  br label %loop.body185

loop.body185:                                     ; preds = %loop.latch252, %loop.exit143
  %in186 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.in.declare_input, align 8
  %i187 = load i128, i128* %i, align 4
  %array_getter188 = getelementptr inbounds [256 x i128], [256 x i128]* %in186, i128 0, i128 %i187
  %in189 = load i128, i128* %array_getter188, align 4
  %out190 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %i191 = load i128, i128* %i, align 4
  %array_getter192 = getelementptr inbounds [256 x i128], [256 x i128]* %out190, i128 0, i128 %i191
  %out193 = load i128, i128* %array_getter192, align 4
  %sub194 = sub i128 %in189, %out193
  %runningCarry195 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %i196 = load i128, i128* %i, align 4
  %sub197 = sub i128 %i196, 1
  %array_getter198 = getelementptr inbounds [256 x i128], [256 x i128]* %runningCarry195, i128 0, i128 %sub197
  %runningCarry199 = load i128, i128* %array_getter198, align 4
  %add200 = add i128 %sub194, %runningCarry199
  %n201 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %lshift202 = shl i128 1, %n201
  %sdiv203 = sdiv i128 %add200, %lshift202
  %ptr_getter204 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %i205 = load i128, i128* %i, align 4
  %runningCarry206 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter204, i128 0, i128 %i205
  store i128 %sdiv203, i128* %runningCarry206, align 4
  %n207 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %k208 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %call209 = call i128 @log_ceil(i128 %k208)
  %add210 = add i128 %n207, %call209
  %call211 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %add210)
  %ptr_getter212 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %runningCarryRangeChecks, align 8
  %i213 = load i128, i128* %i, align 4
  %runningCarryRangeChecks214 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter212, i128 0, i128 %i213
  store %struct_template_circuit_num2bits* %call211, %struct_template_circuit_num2bits** %runningCarryRangeChecks214, align 8
  %runningCarry215 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %i216 = load i128, i128* %i, align 4
  %array_getter217 = getelementptr inbounds [256 x i128], [256 x i128]* %runningCarry215, i128 0, i128 %i216
  %runningCarry218 = load i128, i128* %array_getter217, align 4
  %runningCarryRangeChecks219 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %runningCarryRangeChecks, align 8
  %i220 = load i128, i128* %i, align 4
  %array_getter221 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %runningCarryRangeChecks219, i128 0, i128 %i220
  %runningCarryRangeChecks222 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter221, align 8
  %struct_getter223 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %runningCarryRangeChecks222, i32 0, i32 1
  %num2bits.in.read_input_outter224 = load i128, i128* %struct_getter223, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter224, i128 %runningCarry218, i1* @constraint.74)
  %ptr_getter225 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %runningCarryRangeChecks, align 8
  %i226 = load i128, i128* %i, align 4
  %array_getter227 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter225, i128 0, i128 %i226
  %runningCarryRangeChecks228 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter227, align 8
  %num2bits.in.write_input_outter229 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %runningCarryRangeChecks228, i32 0, i32 1
  store i128 %runningCarry218, i128* %num2bits.in.write_input_outter229, align 4
  %runningCarry230 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %i231 = load i128, i128* %i, align 4
  %array_getter232 = getelementptr inbounds [256 x i128], [256 x i128]* %runningCarry230, i128 0, i128 %i231
  %runningCarry233 = load i128, i128* %array_getter232, align 4
  %n234 = load i128, i128* %longtoshortnoendcarry.n.declare_arg, align 4
  %lshift235 = shl i128 1, %n234
  %mul236 = mul i128 %runningCarry233, %lshift235
  %in237 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.in.declare_input, align 8
  %i238 = load i128, i128* %i, align 4
  %array_getter239 = getelementptr inbounds [256 x i128], [256 x i128]* %in237, i128 0, i128 %i238
  %in240 = load i128, i128* %array_getter239, align 4
  %out241 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %i242 = load i128, i128* %i, align 4
  %array_getter243 = getelementptr inbounds [256 x i128], [256 x i128]* %out241, i128 0, i128 %i242
  %out244 = load i128, i128* %array_getter243, align 4
  %sub245 = sub i128 %in240, %out244
  %runningCarry246 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %i247 = load i128, i128* %i, align 4
  %sub248 = sub i128 %i247, 1
  %array_getter249 = getelementptr inbounds [256 x i128], [256 x i128]* %runningCarry246, i128 0, i128 %sub248
  %runningCarry250 = load i128, i128* %array_getter249, align 4
  %add251 = add i128 %sub245, %runningCarry250
  call void @fn_intrinsic_add_constraint(i128 %mul236, i128 %add251, i1* @constraint.75)
  br label %loop.latch252

loop.latch252:                                    ; preds = %loop.body185
  %i253 = load i128, i128* %i, align 4
  %add254 = add i128 %i253, 1
  store i128 %add254, i128* %i, align 4
  %i255 = load i128, i128* %i, align 4
  %k256 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %slt257 = icmp slt i128 %i255, %k256
  br i1 %slt257, label %loop.body185, label %loop.exit258

loop.exit258:                                     ; preds = %loop.latch252
  %runningCarry259 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %k260 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %sub261 = sub i128 %k260, 1
  %array_getter262 = getelementptr inbounds [256 x i128], [256 x i128]* %runningCarry259, i128 0, i128 %sub261
  %runningCarry263 = load i128, i128* %array_getter262, align 4
  %out264 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %k265 = load i128, i128* %longtoshortnoendcarry.k.declare_arg, align 4
  %array_getter266 = getelementptr inbounds [256 x i128], [256 x i128]* %out264, i128 0, i128 %k265
  %out267 = load i128, i128* %array_getter266, align 4
  call void @fn_intrinsic_add_constraint(i128 %runningCarry263, i128 %out267, i1* @constraint.76)
  br label %exit

exit:                                             ; preds = %loop.exit258
  %runningCarry268 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.runningcarry.declare_inter, align 8
  %longtoshortnoendcarry.runningcarry.write_inter_inner = getelementptr inbounds %struct_template_circuit_longtoshortnoendcarry, %struct_template_circuit_longtoshortnoendcarry* %0, i32 0, i32 3
  store [256 x i128]* %runningCarry268, [256 x i128]** %longtoshortnoendcarry.runningcarry.write_inter_inner, align 8
  %out269 = load [256 x i128]*, [256 x i128]** %longtoshortnoendcarry.out.declare_output, align 8
  %longtoshortnoendcarry.out.write_output_inner = getelementptr inbounds %struct_template_circuit_longtoshortnoendcarry, %struct_template_circuit_longtoshortnoendcarry* %0, i32 0, i32 4
  store [256 x i128]* %out269, [256 x i128]** %longtoshortnoendcarry.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_longtoshortnoendcarry* @fn_template_build_longtoshortnoendcarry(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_longtoshortnoendcarry = alloca %struct_template_circuit_longtoshortnoendcarry, align 8
  %longtoshortnoendcarry.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_longtoshortnoendcarry, %struct_template_circuit_longtoshortnoendcarry* %struct_template_circuit_longtoshortnoendcarry, i32 0, i32 0
  store i128 %0, i128* %longtoshortnoendcarry.n.write_arg_inner, align 4
  %longtoshortnoendcarry.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_longtoshortnoendcarry, %struct_template_circuit_longtoshortnoendcarry* %struct_template_circuit_longtoshortnoendcarry, i32 0, i32 1
  store i128 %1, i128* %longtoshortnoendcarry.k.write_arg_inner, align 4
  ret %struct_template_circuit_longtoshortnoendcarry* %struct_template_circuit_longtoshortnoendcarry
}

define [256 x i128]* @long_sub_mod(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3, [256 x i128]* %4) {
entry:
  %long_sub_mod.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_sub_mod.n.declare_arg, align 4
  %long_sub_mod.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %long_sub_mod.k.declare_arg, align 4
  %long_sub_mod.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %long_sub_mod.a.declare_arg, align 8
  %long_sub_mod.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %long_sub_mod.b.declare_arg, align 8
  %long_sub_mod.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %long_sub_mod.p.declare_arg, align 8
  %n = load i128, i128* %long_sub_mod.n.declare_arg, align 4
  %k = load i128, i128* %long_sub_mod.k.declare_arg, align 4
  %b = load [256 x i128]*, [256 x i128]** %long_sub_mod.b.declare_arg, align 8
  %a = load [256 x i128]*, [256 x i128]** %long_sub_mod.a.declare_arg, align 8
  %call = call i128 @long_gt(i128 %n, i128 %k, [256 x i128]* %b, [256 x i128]* %a)
  %eq = icmp eq i128 %call, 1
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %entry
  %n1 = load i128, i128* %long_sub_mod.n.declare_arg, align 4
  %k2 = load i128, i128* %long_sub_mod.k.declare_arg, align 4
  %a3 = load [256 x i128]*, [256 x i128]** %long_sub_mod.a.declare_arg, align 8
  %n4 = load i128, i128* %long_sub_mod.n.declare_arg, align 4
  %k5 = load i128, i128* %long_sub_mod.k.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %long_sub_mod.p.declare_arg, align 8
  %b6 = load [256 x i128]*, [256 x i128]** %long_sub_mod.b.declare_arg, align 8
  %call7 = call [256 x i128]* @long_sub(i128 %n4, i128 %k5, [256 x i128]* %p, [256 x i128]* %b6)
  %call8 = call [256 x i128]* @long_add(i128 %n1, i128 %k2, [256 x i128]* %a3, [256 x i128]* %call7)
  ret [256 x i128]* %call8

if.false:                                         ; preds = %entry
  %n9 = load i128, i128* %long_sub_mod.n.declare_arg, align 4
  %k10 = load i128, i128* %long_sub_mod.k.declare_arg, align 4
  %a11 = load [256 x i128]*, [256 x i128]** %long_sub_mod.a.declare_arg, align 8
  %b12 = load [256 x i128]*, [256 x i128]** %long_sub_mod.b.declare_arg, align 8
  %call13 = call [256 x i128]* @long_sub(i128 %n9, i128 %k10, [256 x i128]* %a11, [256 x i128]* %b12)
  ret [256 x i128]* %call13
}

define void @fn_template_init_modsum(%struct_template_circuit_modsum* %0) {
entry:
  %ModSum = alloca %struct_template_circuit_modsum*, align 8
  store %struct_template_circuit_modsum* %0, %struct_template_circuit_modsum** %ModSum, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %0, i32 0, i32 0
  %modsum.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %modsum.n.declare_arg = alloca i128, align 8
  store i128 %modsum.n.read_arg_inner, i128* %modsum.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %0, i32 0, i32 1
  %modsum.a.read_input_inner = load i128, i128* %struct_getter1, align 4
  %modsum.a.declare_input = alloca i128, align 8
  store i128 %modsum.a.read_input_inner, i128* %modsum.a.declare_input, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %0, i32 0, i32 2
  %modsum.b.read_input_inner = load i128, i128* %struct_getter2, align 4
  %modsum.b.declare_input = alloca i128, align 8
  store i128 %modsum.b.read_input_inner, i128* %modsum.b.declare_input, align 4
  %modsum.sum.declare_output = alloca i128, align 8
  %sum = call i128 @fn_intrinsic_inline_init()
  store i128 %sum, i128* %modsum.sum.declare_output, align 4
  %n2b = alloca %struct_template_circuit_num2bits*, align 8
  %modsum.carry.declare_output = alloca i128, align 8
  %carry = call i128 @fn_intrinsic_inline_init()
  store i128 %carry, i128* %modsum.carry.declare_output, align 4
  %n = load i128, i128* %modsum.n.declare_arg, align 4
  %add = add i128 %n, 1
  %call = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %add)
  store %struct_template_circuit_num2bits* %call, %struct_template_circuit_num2bits** %n2b, align 8
  %a = load i128, i128* %modsum.a.declare_input, align 4
  %b = load i128, i128* %modsum.b.declare_input, align 4
  %add3 = add i128 %a, %b
  %n2b4 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b4, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter5, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %add3, i1* @constraint.77)
  %ptr_getter = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter, i32 0, i32 1
  store i128 %add3, i128* %num2bits.in.write_input_outter, align 4
  %n2b6 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b6, i32 0, i32 2
  %num2bits.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter7, align 8
  %n8 = load i128, i128* %modsum.n.declare_arg, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter, i128 0, i128 %n8
  %n2b9 = load i128, i128* %array_getter, align 4
  %carry10 = load i128, i128* %modsum.carry.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %carry10, i128 %n2b9, i1* @constraint.78)
  %ptr_getter11 = load %struct_template_circuit_modsum*, %struct_template_circuit_modsum** %ModSum, align 8
  %modsum.carry.write_output_inner = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %ptr_getter11, i32 0, i32 4
  store i128 %n2b9, i128* %modsum.carry.write_output_inner, align 4
  %ModSum12 = load %struct_template_circuit_modsum*, %struct_template_circuit_modsum** %ModSum, align 8
  %struct_getter13 = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %ModSum12, i32 0, i32 4
  %modsum.carry.read_output_inner = load i128, i128* %struct_getter13, align 4
  store i128 %modsum.carry.read_output_inner, i128* %modsum.carry.declare_output, align 4
  %a14 = load i128, i128* %modsum.a.declare_input, align 4
  %b15 = load i128, i128* %modsum.b.declare_input, align 4
  %add16 = add i128 %a14, %b15
  %carry17 = load i128, i128* %modsum.carry.declare_output, align 4
  %n18 = load i128, i128* %modsum.n.declare_arg, align 4
  %lshift = shl i128 1, %n18
  %mul = mul i128 %carry17, %lshift
  %sub = sub i128 %add16, %mul
  %sum19 = load i128, i128* %modsum.sum.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %sum19, i128 %sub, i1* @constraint.79)
  %ptr_getter20 = load %struct_template_circuit_modsum*, %struct_template_circuit_modsum** %ModSum, align 8
  %modsum.sum.write_output_inner = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %ptr_getter20, i32 0, i32 3
  store i128 %sub, i128* %modsum.sum.write_output_inner, align 4
  %ModSum21 = load %struct_template_circuit_modsum*, %struct_template_circuit_modsum** %ModSum, align 8
  %struct_getter22 = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %ModSum21, i32 0, i32 3
  %modsum.sum.read_output_inner = load i128, i128* %struct_getter22, align 4
  store i128 %modsum.sum.read_output_inner, i128* %modsum.sum.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %sum23 = load i128, i128* %modsum.sum.declare_output, align 4
  %modsum.sum.write_output_inner24 = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %0, i32 0, i32 3
  store i128 %sum23, i128* %modsum.sum.write_output_inner24, align 4
  %carry25 = load i128, i128* %modsum.carry.declare_output, align 4
  %modsum.carry.write_output_inner26 = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %0, i32 0, i32 4
  store i128 %carry25, i128* %modsum.carry.write_output_inner26, align 4
  ret void
}

define %struct_template_circuit_modsum* @fn_template_build_modsum(i128 %0) {
entry:
  %struct_template_circuit_modsum = alloca %struct_template_circuit_modsum, align 8
  %modsum.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %struct_template_circuit_modsum, i32 0, i32 0
  store i128 %0, i128* %modsum.n.write_arg_inner, align 4
  ret %struct_template_circuit_modsum* %struct_template_circuit_modsum
}

define void @fn_template_init_modsubthree(%struct_template_circuit_modsubthree* %0) {
entry:
  %ModSubThree = alloca %struct_template_circuit_modsubthree*, align 8
  store %struct_template_circuit_modsubthree* %0, %struct_template_circuit_modsubthree** %ModSubThree, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %0, i32 0, i32 0
  %modsubthree.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %modsubthree.n.declare_arg = alloca i128, align 8
  store i128 %modsubthree.n.read_arg_inner, i128* %modsubthree.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %0, i32 0, i32 1
  %modsubthree.a.read_input_inner = load i128, i128* %struct_getter1, align 4
  %modsubthree.a.declare_input = alloca i128, align 8
  store i128 %modsubthree.a.read_input_inner, i128* %modsubthree.a.declare_input, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %0, i32 0, i32 2
  %modsubthree.b.read_input_inner = load i128, i128* %struct_getter2, align 4
  %modsubthree.b.declare_input = alloca i128, align 8
  store i128 %modsubthree.b.read_input_inner, i128* %modsubthree.b.declare_input, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %0, i32 0, i32 3
  %modsubthree.c.read_input_inner = load i128, i128* %struct_getter3, align 4
  %modsubthree.c.declare_input = alloca i128, align 8
  store i128 %modsubthree.c.read_input_inner, i128* %modsubthree.c.declare_input, align 4
  %modsubthree.b_plus_c.declare_inter = alloca i128, align 8
  %b_plus_c = call i128 @fn_intrinsic_inline_init()
  store i128 %b_plus_c, i128* %modsubthree.b_plus_c.declare_inter, align 4
  %modsubthree.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %modsubthree.out.declare_output, align 4
  %modsubthree.borrow.declare_output = alloca i128, align 8
  %borrow = call i128 @fn_intrinsic_inline_init()
  store i128 %borrow, i128* %modsubthree.borrow.declare_output, align 4
  %lt = alloca %struct_template_circuit_lessthan*, align 8
  %b = load i128, i128* %modsubthree.b.declare_input, align 4
  %c = load i128, i128* %modsubthree.c.declare_input, align 4
  %add = add i128 %b, %c
  %b_plus_c4 = load i128, i128* %modsubthree.b_plus_c.declare_inter, align 4
  call void @fn_intrinsic_add_constraint(i128 %b_plus_c4, i128 %add, i1* @constraint.80)
  %ptr_getter = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %ModSubThree, align 8
  %modsubthree.b_plus_c.write_inter_inner = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %ptr_getter, i32 0, i32 4
  store i128 %add, i128* %modsubthree.b_plus_c.write_inter_inner, align 4
  %ModSubThree5 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %ModSubThree, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %ModSubThree5, i32 0, i32 4
  %modsubthree.b_plus_c.read_inter_inner = load i128, i128* %struct_getter6, align 4
  store i128 %modsubthree.b_plus_c.read_inter_inner, i128* %modsubthree.b_plus_c.declare_inter, align 4
  %n = load i128, i128* %modsubthree.n.declare_arg, align 4
  %add7 = add i128 %n, 1
  %call = call %struct_template_circuit_lessthan* @fn_template_build_lessthan(i128 %add7)
  store %struct_template_circuit_lessthan* %call, %struct_template_circuit_lessthan** %lt, align 8
  %a = load i128, i128* %modsubthree.a.declare_input, align 4
  %lt8 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt8, i32 0, i32 1
  %lessthan.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter9, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter, i128 0, i128 0
  %lt10 = load i128, i128* %array_getter, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt10, i128 %a, i1* @constraint.81)
  %ptr_getter11 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter12 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter11, i32 0, i32 1
  %lessthan.in.read_input_outter13 = load [256 x i128]*, [256 x i128]** %struct_getter12, align 8
  %lt14 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter13, i128 0, i128 0
  store i128 %a, i128* %lt14, align 4
  %b_plus_c15 = load i128, i128* %modsubthree.b_plus_c.declare_inter, align 4
  %lt16 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter17 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt16, i32 0, i32 1
  %lessthan.in.read_input_outter18 = load [256 x i128]*, [256 x i128]** %struct_getter17, align 8
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter18, i128 0, i128 1
  %lt20 = load i128, i128* %array_getter19, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt20, i128 %b_plus_c15, i1* @constraint.82)
  %ptr_getter21 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter22 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter21, i32 0, i32 1
  %lessthan.in.read_input_outter23 = load [256 x i128]*, [256 x i128]** %struct_getter22, align 8
  %lt24 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter23, i128 0, i128 1
  store i128 %b_plus_c15, i128* %lt24, align 4
  %lt25 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt25, i32 0, i32 2
  %lessthan.out.read_output_outter = load i128, i128* %struct_getter26, align 4
  %borrow27 = load i128, i128* %modsubthree.borrow.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %borrow27, i128 %lessthan.out.read_output_outter, i1* @constraint.83)
  %ptr_getter28 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %ModSubThree, align 8
  %modsubthree.borrow.write_output_inner = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %ptr_getter28, i32 0, i32 6
  store i128 %lessthan.out.read_output_outter, i128* %modsubthree.borrow.write_output_inner, align 4
  %ModSubThree29 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %ModSubThree, align 8
  %struct_getter30 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %ModSubThree29, i32 0, i32 6
  %modsubthree.borrow.read_output_inner = load i128, i128* %struct_getter30, align 4
  store i128 %modsubthree.borrow.read_output_inner, i128* %modsubthree.borrow.declare_output, align 4
  %borrow31 = load i128, i128* %modsubthree.borrow.declare_output, align 4
  %n32 = load i128, i128* %modsubthree.n.declare_arg, align 4
  %lshift = shl i128 1, %n32
  %mul = mul i128 %borrow31, %lshift
  %a33 = load i128, i128* %modsubthree.a.declare_input, align 4
  %add34 = add i128 %mul, %a33
  %b_plus_c35 = load i128, i128* %modsubthree.b_plus_c.declare_inter, align 4
  %sub = sub i128 %add34, %b_plus_c35
  %out36 = load i128, i128* %modsubthree.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out36, i128 %sub, i1* @constraint.84)
  %ptr_getter37 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %ModSubThree, align 8
  %modsubthree.out.write_output_inner = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %ptr_getter37, i32 0, i32 5
  store i128 %sub, i128* %modsubthree.out.write_output_inner, align 4
  %ModSubThree38 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %ModSubThree, align 8
  %struct_getter39 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %ModSubThree38, i32 0, i32 5
  %modsubthree.out.read_output_inner = load i128, i128* %struct_getter39, align 4
  store i128 %modsubthree.out.read_output_inner, i128* %modsubthree.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %b_plus_c40 = load i128, i128* %modsubthree.b_plus_c.declare_inter, align 4
  %modsubthree.b_plus_c.write_inter_inner41 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %0, i32 0, i32 4
  store i128 %b_plus_c40, i128* %modsubthree.b_plus_c.write_inter_inner41, align 4
  %out42 = load i128, i128* %modsubthree.out.declare_output, align 4
  %modsubthree.out.write_output_inner43 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %0, i32 0, i32 5
  store i128 %out42, i128* %modsubthree.out.write_output_inner43, align 4
  %borrow44 = load i128, i128* %modsubthree.borrow.declare_output, align 4
  %modsubthree.borrow.write_output_inner45 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %0, i32 0, i32 6
  store i128 %borrow44, i128* %modsubthree.borrow.write_output_inner45, align 4
  ret void
}

define %struct_template_circuit_modsubthree* @fn_template_build_modsubthree(i128 %0) {
entry:
  %struct_template_circuit_modsubthree = alloca %struct_template_circuit_modsubthree, align 8
  %modsubthree.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %struct_template_circuit_modsubthree, i32 0, i32 0
  store i128 %0, i128* %modsubthree.n.write_arg_inner, align 4
  ret %struct_template_circuit_modsubthree* %struct_template_circuit_modsubthree
}

define void @fn_template_init_modsub(%struct_template_circuit_modsub* %0) {
entry:
  %ModSub = alloca %struct_template_circuit_modsub*, align 8
  store %struct_template_circuit_modsub* %0, %struct_template_circuit_modsub** %ModSub, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %0, i32 0, i32 0
  %modsub.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %modsub.n.declare_arg = alloca i128, align 8
  store i128 %modsub.n.read_arg_inner, i128* %modsub.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %0, i32 0, i32 1
  %modsub.a.read_input_inner = load i128, i128* %struct_getter1, align 4
  %modsub.a.declare_input = alloca i128, align 8
  store i128 %modsub.a.read_input_inner, i128* %modsub.a.declare_input, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %0, i32 0, i32 2
  %modsub.b.read_input_inner = load i128, i128* %struct_getter2, align 4
  %modsub.b.declare_input = alloca i128, align 8
  store i128 %modsub.b.read_input_inner, i128* %modsub.b.declare_input, align 4
  %modsub.borrow.declare_output = alloca i128, align 8
  %borrow = call i128 @fn_intrinsic_inline_init()
  store i128 %borrow, i128* %modsub.borrow.declare_output, align 4
  %lt = alloca %struct_template_circuit_lessthan*, align 8
  %modsub.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %modsub.out.declare_output, align 4
  %n = load i128, i128* %modsub.n.declare_arg, align 4
  %call = call %struct_template_circuit_lessthan* @fn_template_build_lessthan(i128 %n)
  store %struct_template_circuit_lessthan* %call, %struct_template_circuit_lessthan** %lt, align 8
  %a = load i128, i128* %modsub.a.declare_input, align 4
  %lt3 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt3, i32 0, i32 1
  %lessthan.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter, i128 0, i128 0
  %lt5 = load i128, i128* %array_getter, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt5, i128 %a, i1* @constraint.85)
  %ptr_getter = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter, i32 0, i32 1
  %lessthan.in.read_input_outter7 = load [256 x i128]*, [256 x i128]** %struct_getter6, align 8
  %lt8 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter7, i128 0, i128 0
  store i128 %a, i128* %lt8, align 4
  %b = load i128, i128* %modsub.b.declare_input, align 4
  %lt9 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter10 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt9, i32 0, i32 1
  %lessthan.in.read_input_outter11 = load [256 x i128]*, [256 x i128]** %struct_getter10, align 8
  %array_getter12 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter11, i128 0, i128 1
  %lt13 = load i128, i128* %array_getter12, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt13, i128 %b, i1* @constraint.86)
  %ptr_getter14 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter15 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter14, i32 0, i32 1
  %lessthan.in.read_input_outter16 = load [256 x i128]*, [256 x i128]** %struct_getter15, align 8
  %lt17 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter16, i128 0, i128 1
  store i128 %b, i128* %lt17, align 4
  %lt18 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt18, i32 0, i32 2
  %lessthan.out.read_output_outter = load i128, i128* %struct_getter19, align 4
  %borrow20 = load i128, i128* %modsub.borrow.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %borrow20, i128 %lessthan.out.read_output_outter, i1* @constraint.87)
  %ptr_getter21 = load %struct_template_circuit_modsub*, %struct_template_circuit_modsub** %ModSub, align 8
  %modsub.borrow.write_output_inner = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %ptr_getter21, i32 0, i32 4
  store i128 %lessthan.out.read_output_outter, i128* %modsub.borrow.write_output_inner, align 4
  %ModSub22 = load %struct_template_circuit_modsub*, %struct_template_circuit_modsub** %ModSub, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %ModSub22, i32 0, i32 4
  %modsub.borrow.read_output_inner = load i128, i128* %struct_getter23, align 4
  store i128 %modsub.borrow.read_output_inner, i128* %modsub.borrow.declare_output, align 4
  %borrow24 = load i128, i128* %modsub.borrow.declare_output, align 4
  %n25 = load i128, i128* %modsub.n.declare_arg, align 4
  %lshift = shl i128 1, %n25
  %mul = mul i128 %borrow24, %lshift
  %a26 = load i128, i128* %modsub.a.declare_input, align 4
  %add = add i128 %mul, %a26
  %b27 = load i128, i128* %modsub.b.declare_input, align 4
  %sub = sub i128 %add, %b27
  %out28 = load i128, i128* %modsub.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out28, i128 %sub, i1* @constraint.88)
  %ptr_getter29 = load %struct_template_circuit_modsub*, %struct_template_circuit_modsub** %ModSub, align 8
  %modsub.out.write_output_inner = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %ptr_getter29, i32 0, i32 3
  store i128 %sub, i128* %modsub.out.write_output_inner, align 4
  %ModSub30 = load %struct_template_circuit_modsub*, %struct_template_circuit_modsub** %ModSub, align 8
  %struct_getter31 = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %ModSub30, i32 0, i32 3
  %modsub.out.read_output_inner = load i128, i128* %struct_getter31, align 4
  store i128 %modsub.out.read_output_inner, i128* %modsub.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out32 = load i128, i128* %modsub.out.declare_output, align 4
  %modsub.out.write_output_inner33 = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %0, i32 0, i32 3
  store i128 %out32, i128* %modsub.out.write_output_inner33, align 4
  %borrow34 = load i128, i128* %modsub.borrow.declare_output, align 4
  %modsub.borrow.write_output_inner35 = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %0, i32 0, i32 4
  store i128 %borrow34, i128* %modsub.borrow.write_output_inner35, align 4
  ret void
}

define %struct_template_circuit_modsub* @fn_template_build_modsub(i128 %0) {
entry:
  %struct_template_circuit_modsub = alloca %struct_template_circuit_modsub, align 8
  %modsub.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %struct_template_circuit_modsub, i32 0, i32 0
  store i128 %0, i128* %modsub.n.write_arg_inner, align 4
  ret %struct_template_circuit_modsub* %struct_template_circuit_modsub
}

define i128 @short_div(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3) {
entry:
  %short_div.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %short_div.n.declare_arg, align 4
  %short_div.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %short_div.k.declare_arg, align 4
  %short_div.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %short_div.a.declare_arg, align 8
  %short_div.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %short_div.b.declare_arg, align 8
  %ret = alloca i128, align 8
  %ret1 = call i128 @fn_intrinsic_inline_init()
  store i128 %ret1, i128* %ret, align 4
  %norm_b = alloca [256 x i128]*, align 8
  %norm_b2 = alloca [256 x i128], align 8
  store [256 x i128]* %norm_b2, [256 x i128]** %norm_b, align 8
  %scale = alloca i128, align 8
  %scale3 = call i128 @fn_intrinsic_inline_init()
  store i128 %scale3, i128* %scale, align 4
  %norm_a = alloca [256 x i128]*, align 8
  %norm_a4 = alloca [256 x i128], align 8
  store [256 x i128]* %norm_a4, [256 x i128]** %norm_a, align 8
  %n = load i128, i128* %short_div.n.declare_arg, align 4
  %lshift = shl i128 1, %n
  %b = load [256 x i128]*, [256 x i128]** %short_div.b.declare_arg, align 8
  %k = load i128, i128* %short_div.k.declare_arg, align 4
  %sub = sub i128 %k, 1
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %sub
  %b5 = load i128, i128* %array_getter, align 4
  %add = add i128 1, %b5
  %sdiv = sdiv i128 %lshift, %add
  store i128 %sdiv, i128* %scale, align 4
  %n6 = load i128, i128* %short_div.n.declare_arg, align 4
  %k7 = load i128, i128* %short_div.k.declare_arg, align 4
  %add8 = add i128 %k7, 1
  %scale9 = load i128, i128* %scale, align 4
  %a = load [256 x i128]*, [256 x i128]** %short_div.a.declare_arg, align 8
  %call = call [256 x i128]* @long_scalar_mult(i128 %n6, i128 %add8, i128 %scale9, [256 x i128]* %a)
  store [256 x i128]* %call, [256 x i128]** %norm_a, align 8
  %n10 = load i128, i128* %short_div.n.declare_arg, align 4
  %k11 = load i128, i128* %short_div.k.declare_arg, align 4
  %scale12 = load i128, i128* %scale, align 4
  %b13 = load [256 x i128]*, [256 x i128]** %short_div.b.declare_arg, align 8
  %call14 = call [256 x i128]* @long_scalar_mult(i128 %n10, i128 %k11, i128 %scale12, [256 x i128]* %b13)
  store [256 x i128]* %call14, [256 x i128]** %norm_b, align 8
  store i128 0, i128* %ret, align 4
  %norm_b15 = load [256 x i128]*, [256 x i128]** %norm_b, align 8
  %k16 = load i128, i128* %short_div.k.declare_arg, align 4
  %array_getter17 = getelementptr inbounds [256 x i128], [256 x i128]* %norm_b15, i128 0, i128 %k16
  %norm_b18 = load i128, i128* %array_getter17, align 4
  %ne = icmp ne i128 %norm_b18, 0
  br i1 %ne, label %if.true, label %if.false

if.true:                                          ; preds = %entry
  %n19 = load i128, i128* %short_div.n.declare_arg, align 4
  %k20 = load i128, i128* %short_div.k.declare_arg, align 4
  %add21 = add i128 %k20, 1
  %norm_a22 = load [256 x i128]*, [256 x i128]** %norm_a, align 8
  %norm_b23 = load [256 x i128]*, [256 x i128]** %norm_b, align 8
  %call24 = call i128 @short_div_norm(i128 %n19, i128 %add21, [256 x i128]* %norm_a22, [256 x i128]* %norm_b23)
  store i128 %call24, i128* %ret, align 4
  br label %if.exit

if.false:                                         ; preds = %entry
  %n25 = load i128, i128* %short_div.n.declare_arg, align 4
  %k26 = load i128, i128* %short_div.k.declare_arg, align 4
  %norm_a27 = load [256 x i128]*, [256 x i128]** %norm_a, align 8
  %norm_b28 = load [256 x i128]*, [256 x i128]** %norm_b, align 8
  %call29 = call i128 @short_div_norm(i128 %n25, i128 %k26, [256 x i128]* %norm_a27, [256 x i128]* %norm_b28)
  store i128 %call29, i128* %ret, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  %ret30 = load i128, i128* %ret, align 4
  ret i128 %ret30
}

define void @fn_template_init_bigmult(%struct_template_circuit_bigmult* %0) {
entry:
  %BigMult = alloca %struct_template_circuit_bigmult*, align 8
  store %struct_template_circuit_bigmult* %0, %struct_template_circuit_bigmult** %BigMult, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %0, i32 0, i32 0
  %bigmult.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigmult.n.declare_arg = alloca i128, align 8
  store i128 %bigmult.n.read_arg_inner, i128* %bigmult.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %0, i32 0, i32 1
  %bigmult.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigmult.k.declare_arg = alloca i128, align 8
  store i128 %bigmult.k.read_arg_inner, i128* %bigmult.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %0, i32 0, i32 2
  %bigmult.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %bigmult.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmult.a.read_input_inner, [256 x i128]** %bigmult.a.declare_input, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %0, i32 0, i32 3
  %bigmult.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %bigmult.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmult.b.read_input_inner, [256 x i128]** %bigmult.b.declare_input, align 8
  %bigmult.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %bigmult.out.declare_output, align 8
  %LOGK = alloca i128, align 8
  %LOGK4 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK4, i128* %LOGK, align 4
  %mult = alloca %struct_template_circuit_bigmultshortlong*, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %longshort = alloca %struct_template_circuit_longtoshortnoendcarry*, align 8
  %k = load i128, i128* %bigmult.k.declare_arg, align 4
  %call = call i128 @log_ceil(i128 %k)
  store i128 %call, i128* %LOGK, align 4
  %n = load i128, i128* %bigmult.n.declare_arg, align 4
  %k6 = load i128, i128* %bigmult.k.declare_arg, align 4
  %n7 = load i128, i128* %bigmult.n.declare_arg, align 4
  %mul = mul i128 2, %n7
  %LOGK8 = load i128, i128* %LOGK, align 4
  %add = add i128 %mul, %LOGK8
  %call9 = call %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %n, i128 %k6, i128 %add)
  store %struct_template_circuit_bigmultshortlong* %call9, %struct_template_circuit_bigmultshortlong** %mult, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %bigmult.a.declare_input, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i10
  %a11 = load i128, i128* %array_getter, align 4
  %mult12 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %mult, align 8
  %struct_getter13 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %mult12, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter13, align 8
  %i14 = load i128, i128* %i, align 4
  %array_getter15 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter, i128 0, i128 %i14
  %mult16 = load i128, i128* %array_getter15, align 4
  call void @fn_intrinsic_add_constraint(i128 %mult16, i128 %a11, i1* @constraint.89)
  %ptr_getter = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %mult, align 8
  %struct_getter17 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter18 = load [256 x i128]*, [256 x i128]** %struct_getter17, align 8
  %i19 = load i128, i128* %i, align 4
  %mult20 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter18, i128 0, i128 %i19
  store i128 %a11, i128* %mult20, align 4
  %b = load [256 x i128]*, [256 x i128]** %bigmult.b.declare_input, align 8
  %i21 = load i128, i128* %i, align 4
  %array_getter22 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i21
  %b23 = load i128, i128* %array_getter22, align 4
  %mult24 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %mult, align 8
  %struct_getter25 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %mult24, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter25, align 8
  %i26 = load i128, i128* %i, align 4
  %array_getter27 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter, i128 0, i128 %i26
  %mult28 = load i128, i128* %array_getter27, align 4
  call void @fn_intrinsic_add_constraint(i128 %mult28, i128 %b23, i1* @constraint.90)
  %ptr_getter29 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %mult, align 8
  %struct_getter30 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter29, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter31 = load [256 x i128]*, [256 x i128]** %struct_getter30, align 8
  %i32 = load i128, i128* %i, align 4
  %mult33 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter31, i128 0, i128 %i32
  store i128 %b23, i128* %mult33, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i34 = load i128, i128* %i, align 4
  %add35 = add i128 %i34, 1
  store i128 %add35, i128* %i, align 4
  %i36 = load i128, i128* %i, align 4
  %k37 = load i128, i128* %bigmult.k.declare_arg, align 4
  %slt = icmp slt i128 %i36, %k37
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n38 = load i128, i128* %bigmult.n.declare_arg, align 4
  %k39 = load i128, i128* %bigmult.k.declare_arg, align 4
  %mul40 = mul i128 2, %k39
  %sub = sub i128 %mul40, 1
  %call41 = call %struct_template_circuit_longtoshortnoendcarry* @fn_template_build_longtoshortnoendcarry(i128 %n38, i128 %sub)
  store %struct_template_circuit_longtoshortnoendcarry* %call41, %struct_template_circuit_longtoshortnoendcarry** %longshort, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body42

loop.body42:                                      ; preds = %loop.latch58, %loop.exit
  %mult43 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %mult, align 8
  %struct_getter44 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %mult43, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter44, align 8
  %i45 = load i128, i128* %i, align 4
  %array_getter46 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter, i128 0, i128 %i45
  %mult47 = load i128, i128* %array_getter46, align 4
  %longshort48 = load %struct_template_circuit_longtoshortnoendcarry*, %struct_template_circuit_longtoshortnoendcarry** %longshort, align 8
  %struct_getter49 = getelementptr inbounds %struct_template_circuit_longtoshortnoendcarry, %struct_template_circuit_longtoshortnoendcarry* %longshort48, i32 0, i32 2
  %longtoshortnoendcarry.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter49, align 8
  %i50 = load i128, i128* %i, align 4
  %array_getter51 = getelementptr inbounds [256 x i128], [256 x i128]* %longtoshortnoendcarry.in.read_input_outter, i128 0, i128 %i50
  %longshort52 = load i128, i128* %array_getter51, align 4
  call void @fn_intrinsic_add_constraint(i128 %longshort52, i128 %mult47, i1* @constraint.91)
  %ptr_getter53 = load %struct_template_circuit_longtoshortnoendcarry*, %struct_template_circuit_longtoshortnoendcarry** %longshort, align 8
  %struct_getter54 = getelementptr inbounds %struct_template_circuit_longtoshortnoendcarry, %struct_template_circuit_longtoshortnoendcarry* %ptr_getter53, i32 0, i32 2
  %longtoshortnoendcarry.in.read_input_outter55 = load [256 x i128]*, [256 x i128]** %struct_getter54, align 8
  %i56 = load i128, i128* %i, align 4
  %longshort57 = getelementptr inbounds [256 x i128], [256 x i128]* %longtoshortnoendcarry.in.read_input_outter55, i128 0, i128 %i56
  store i128 %mult47, i128* %longshort57, align 4
  br label %loop.latch58

loop.latch58:                                     ; preds = %loop.body42
  %i59 = load i128, i128* %i, align 4
  %add60 = add i128 %i59, 1
  store i128 %add60, i128* %i, align 4
  %i61 = load i128, i128* %i, align 4
  %k62 = load i128, i128* %bigmult.k.declare_arg, align 4
  %mul63 = mul i128 2, %k62
  %sub64 = sub i128 %mul63, 1
  %slt65 = icmp slt i128 %i61, %sub64
  br i1 %slt65, label %loop.body42, label %loop.exit66

loop.exit66:                                      ; preds = %loop.latch58
  store i128 0, i128* %i, align 4
  br label %loop.body67

loop.body67:                                      ; preds = %loop.latch80, %loop.exit66
  %longshort68 = load %struct_template_circuit_longtoshortnoendcarry*, %struct_template_circuit_longtoshortnoendcarry** %longshort, align 8
  %struct_getter69 = getelementptr inbounds %struct_template_circuit_longtoshortnoendcarry, %struct_template_circuit_longtoshortnoendcarry* %longshort68, i32 0, i32 4
  %longtoshortnoendcarry.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter69, align 8
  %i70 = load i128, i128* %i, align 4
  %array_getter71 = getelementptr inbounds [256 x i128], [256 x i128]* %longtoshortnoendcarry.out.read_output_outter, i128 0, i128 %i70
  %longshort72 = load i128, i128* %array_getter71, align 4
  %out73 = load [256 x i128]*, [256 x i128]** %bigmult.out.declare_output, align 8
  %i74 = load i128, i128* %i, align 4
  %array_getter75 = getelementptr inbounds [256 x i128], [256 x i128]* %out73, i128 0, i128 %i74
  %out76 = load i128, i128* %array_getter75, align 4
  call void @fn_intrinsic_add_constraint(i128 %out76, i128 %longshort72, i1* @constraint.92)
  %ptr_getter77 = load [256 x i128]*, [256 x i128]** %bigmult.out.declare_output, align 8
  %i78 = load i128, i128* %i, align 4
  %out79 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter77, i128 0, i128 %i78
  store i128 %longshort72, i128* %out79, align 4
  br label %loop.latch80

loop.latch80:                                     ; preds = %loop.body67
  %i81 = load i128, i128* %i, align 4
  %add82 = add i128 %i81, 1
  store i128 %add82, i128* %i, align 4
  %i83 = load i128, i128* %i, align 4
  %k84 = load i128, i128* %bigmult.k.declare_arg, align 4
  %mul85 = mul i128 2, %k84
  %slt86 = icmp slt i128 %i83, %mul85
  br i1 %slt86, label %loop.body67, label %loop.exit87

loop.exit87:                                      ; preds = %loop.latch80
  br label %exit

exit:                                             ; preds = %loop.exit87
  %out88 = load [256 x i128]*, [256 x i128]** %bigmult.out.declare_output, align 8
  %bigmult.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %0, i32 0, i32 4
  store [256 x i128]* %out88, [256 x i128]** %bigmult.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigmult* @fn_template_build_bigmult(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_bigmult = alloca %struct_template_circuit_bigmult, align 8
  %bigmult.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %struct_template_circuit_bigmult, i32 0, i32 0
  store i128 %0, i128* %bigmult.n.write_arg_inner, align 4
  %bigmult.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %struct_template_circuit_bigmult, i32 0, i32 1
  store i128 %1, i128* %bigmult.k.write_arg_inner, align 4
  ret %struct_template_circuit_bigmult* %struct_template_circuit_bigmult
}

define void @fn_template_init_rangecheck2d(%struct_template_circuit_rangecheck2d* %0) {
entry:
  %RangeCheck2D = alloca %struct_template_circuit_rangecheck2d*, align 8
  store %struct_template_circuit_rangecheck2d* %0, %struct_template_circuit_rangecheck2d** %RangeCheck2D, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %0, i32 0, i32 0
  %rangecheck2d.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %rangecheck2d.n.declare_arg = alloca i128, align 8
  store i128 %rangecheck2d.n.read_arg_inner, i128* %rangecheck2d.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %0, i32 0, i32 1
  %rangecheck2d.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %rangecheck2d.k.declare_arg = alloca i128, align 8
  store i128 %rangecheck2d.k.read_arg_inner, i128* %rangecheck2d.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %0, i32 0, i32 2
  %rangecheck2d.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter2, align 8
  %rangecheck2d.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %rangecheck2d.in.read_input_inner, [256 x [256 x i128]]** %rangecheck2d.in.declare_input, align 8
  %range_checks = alloca [256 x [256 x %struct_template_circuit_num2bits*]]*, align 8
  %range_checks3 = alloca [256 x [256 x %struct_template_circuit_num2bits*]], align 8
  store [256 x [256 x %struct_template_circuit_num2bits*]]* %range_checks3, [256 x [256 x %struct_template_circuit_num2bits*]]** %range_checks, align 8
  %eps = alloca i128, align 8
  %eps4 = call i128 @fn_intrinsic_inline_init()
  store i128 %eps4, i128* %eps, align 4
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  store i128 0, i128* %eps, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch26, %entry
  store i128 0, i128* %i, align 4
  br label %loop.body6

loop.body6:                                       ; preds = %loop.latch, %loop.body
  %n = load i128, i128* %rangecheck2d.n.declare_arg, align 4
  %call = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n)
  %ptr_getter = load [256 x [256 x %struct_template_circuit_num2bits*]]*, [256 x [256 x %struct_template_circuit_num2bits*]]** %range_checks, align 8
  %eps7 = load i128, i128* %eps, align 4
  %i8 = load i128, i128* %i, align 4
  %range_checks9 = getelementptr inbounds [256 x [256 x %struct_template_circuit_num2bits*]], [256 x [256 x %struct_template_circuit_num2bits*]]* %ptr_getter, i128 0, i128 %eps7, i128 %i8
  store %struct_template_circuit_num2bits* %call, %struct_template_circuit_num2bits** %range_checks9, align 8
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %rangecheck2d.in.declare_input, align 8
  %eps10 = load i128, i128* %eps, align 4
  %i11 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %eps10, i128 %i11
  %in12 = load i128, i128* %array_getter, align 4
  %range_checks13 = load [256 x [256 x %struct_template_circuit_num2bits*]]*, [256 x [256 x %struct_template_circuit_num2bits*]]** %range_checks, align 8
  %eps14 = load i128, i128* %eps, align 4
  %i15 = load i128, i128* %i, align 4
  %array_getter16 = getelementptr inbounds [256 x [256 x %struct_template_circuit_num2bits*]], [256 x [256 x %struct_template_circuit_num2bits*]]* %range_checks13, i128 0, i128 %eps14, i128 %i15
  %range_checks17 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter16, align 8
  %struct_getter18 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %range_checks17, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter18, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %in12, i1* @constraint.93)
  %ptr_getter19 = load [256 x [256 x %struct_template_circuit_num2bits*]]*, [256 x [256 x %struct_template_circuit_num2bits*]]** %range_checks, align 8
  %eps20 = load i128, i128* %eps, align 4
  %i21 = load i128, i128* %i, align 4
  %array_getter22 = getelementptr inbounds [256 x [256 x %struct_template_circuit_num2bits*]], [256 x [256 x %struct_template_circuit_num2bits*]]* %ptr_getter19, i128 0, i128 %eps20, i128 %i21
  %range_checks23 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter22, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %range_checks23, i32 0, i32 1
  store i128 %in12, i128* %num2bits.in.write_input_outter, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body6
  %i24 = load i128, i128* %i, align 4
  %add = add i128 %i24, 1
  store i128 %add, i128* %i, align 4
  %i25 = load i128, i128* %i, align 4
  %k = load i128, i128* %rangecheck2d.k.declare_arg, align 4
  %slt = icmp slt i128 %i25, %k
  br i1 %slt, label %loop.body6, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch26

loop.latch26:                                     ; preds = %loop.exit
  %eps27 = load i128, i128* %eps, align 4
  %add28 = add i128 %eps27, 1
  store i128 %add28, i128* %eps, align 4
  %eps29 = load i128, i128* %eps, align 4
  %slt30 = icmp slt i128 %eps29, 2
  br i1 %slt30, label %loop.body, label %loop.exit31

loop.exit31:                                      ; preds = %loop.latch26
  br label %exit

exit:                                             ; preds = %loop.exit31
  ret void
}

define %struct_template_circuit_rangecheck2d* @fn_template_build_rangecheck2d(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_rangecheck2d = alloca %struct_template_circuit_rangecheck2d, align 8
  %rangecheck2d.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %struct_template_circuit_rangecheck2d, i32 0, i32 0
  store i128 %0, i128* %rangecheck2d.n.write_arg_inner, align 4
  %rangecheck2d.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %struct_template_circuit_rangecheck2d, i32 0, i32 1
  store i128 %1, i128* %rangecheck2d.k.write_arg_inner, align 4
  ret %struct_template_circuit_rangecheck2d* %struct_template_circuit_rangecheck2d
}

define void @fn_template_init_modprod(%struct_template_circuit_modprod* %0) {
entry:
  %ModProd = alloca %struct_template_circuit_modprod*, align 8
  store %struct_template_circuit_modprod* %0, %struct_template_circuit_modprod** %ModProd, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_modprod, %struct_template_circuit_modprod* %0, i32 0, i32 0
  %modprod.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %modprod.n.declare_arg = alloca i128, align 8
  store i128 %modprod.n.read_arg_inner, i128* %modprod.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_modprod, %struct_template_circuit_modprod* %0, i32 0, i32 1
  %modprod.a.read_input_inner = load i128, i128* %struct_getter1, align 4
  %modprod.a.declare_input = alloca i128, align 8
  store i128 %modprod.a.read_input_inner, i128* %modprod.a.declare_input, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_modprod, %struct_template_circuit_modprod* %0, i32 0, i32 2
  %modprod.b.read_input_inner = load i128, i128* %struct_getter2, align 4
  %modprod.b.declare_input = alloca i128, align 8
  store i128 %modprod.b.read_input_inner, i128* %modprod.b.declare_input, align 4
  %b2n1 = alloca %struct_template_circuit_bits2num*, align 8
  %modprod.carry.declare_output = alloca i128, align 8
  %carry = call i128 @fn_intrinsic_inline_init()
  store i128 %carry, i128* %modprod.carry.declare_output, align 4
  %i = alloca i128, align 8
  %i3 = call i128 @fn_intrinsic_inline_init()
  store i128 %i3, i128* %i, align 4
  %n2b = alloca %struct_template_circuit_num2bits*, align 8
  %b2n2 = alloca %struct_template_circuit_bits2num*, align 8
  %modprod.prod.declare_output = alloca i128, align 8
  %prod = call i128 @fn_intrinsic_inline_init()
  store i128 %prod, i128* %modprod.prod.declare_output, align 4
  %n = load i128, i128* %modprod.n.declare_arg, align 4
  %mul = mul i128 2, %n
  %call = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %mul)
  store %struct_template_circuit_num2bits* %call, %struct_template_circuit_num2bits** %n2b, align 8
  %a = load i128, i128* %modprod.a.declare_input, align 4
  %b = load i128, i128* %modprod.b.declare_input, align 4
  %mul4 = mul i128 %a, %b
  %n2b5 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b5, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter6, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %mul4, i1* @constraint.94)
  %ptr_getter = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter, i32 0, i32 1
  store i128 %mul4, i128* %num2bits.in.write_input_outter, align 4
  %n7 = load i128, i128* %modprod.n.declare_arg, align 4
  %call8 = call %struct_template_circuit_bits2num* @fn_template_build_bits2num(i128 %n7)
  store %struct_template_circuit_bits2num* %call8, %struct_template_circuit_bits2num** %b2n1, align 8
  %n9 = load i128, i128* %modprod.n.declare_arg, align 4
  %call10 = call %struct_template_circuit_bits2num* @fn_template_build_bits2num(i128 %n9)
  store %struct_template_circuit_bits2num* %call10, %struct_template_circuit_bits2num** %b2n2, align 8
  store i128 0, i128* %i, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %n2b11 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter12 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b11, i32 0, i32 2
  %num2bits.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter12, align 8
  %i13 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter, i128 0, i128 %i13
  %n2b14 = load i128, i128* %array_getter, align 4
  %b2n115 = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %b2n1, align 8
  %struct_getter16 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %b2n115, i32 0, i32 1
  %bits2num.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter16, align 8
  %i17 = load i128, i128* %i, align 4
  %array_getter18 = getelementptr inbounds [256 x i128], [256 x i128]* %bits2num.in.read_input_outter, i128 0, i128 %i17
  %b2n119 = load i128, i128* %array_getter18, align 4
  call void @fn_intrinsic_add_constraint(i128 %b2n119, i128 %n2b14, i1* @constraint.95)
  %ptr_getter20 = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %b2n1, align 8
  %struct_getter21 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %ptr_getter20, i32 0, i32 1
  %bits2num.in.read_input_outter22 = load [256 x i128]*, [256 x i128]** %struct_getter21, align 8
  %i23 = load i128, i128* %i, align 4
  %b2n124 = getelementptr inbounds [256 x i128], [256 x i128]* %bits2num.in.read_input_outter22, i128 0, i128 %i23
  store i128 %n2b14, i128* %b2n124, align 4
  %n2b25 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b25, i32 0, i32 2
  %num2bits.out.read_output_outter27 = load [256 x i128]*, [256 x i128]** %struct_getter26, align 8
  %i28 = load i128, i128* %i, align 4
  %n29 = load i128, i128* %modprod.n.declare_arg, align 4
  %add = add i128 %i28, %n29
  %array_getter30 = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter27, i128 0, i128 %add
  %n2b31 = load i128, i128* %array_getter30, align 4
  %b2n232 = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %b2n2, align 8
  %struct_getter33 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %b2n232, i32 0, i32 1
  %bits2num.in.read_input_outter34 = load [256 x i128]*, [256 x i128]** %struct_getter33, align 8
  %i35 = load i128, i128* %i, align 4
  %array_getter36 = getelementptr inbounds [256 x i128], [256 x i128]* %bits2num.in.read_input_outter34, i128 0, i128 %i35
  %b2n237 = load i128, i128* %array_getter36, align 4
  call void @fn_intrinsic_add_constraint(i128 %b2n237, i128 %n2b31, i1* @constraint.96)
  %ptr_getter38 = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %b2n2, align 8
  %struct_getter39 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %ptr_getter38, i32 0, i32 1
  %bits2num.in.read_input_outter40 = load [256 x i128]*, [256 x i128]** %struct_getter39, align 8
  %i41 = load i128, i128* %i, align 4
  %b2n242 = getelementptr inbounds [256 x i128], [256 x i128]* %bits2num.in.read_input_outter40, i128 0, i128 %i41
  store i128 %n2b31, i128* %b2n242, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i43 = load i128, i128* %i, align 4
  %add44 = add i128 %i43, 1
  store i128 %add44, i128* %i, align 4
  %i45 = load i128, i128* %i, align 4
  %n46 = load i128, i128* %modprod.n.declare_arg, align 4
  %slt = icmp slt i128 %i45, %n46
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %b2n147 = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %b2n1, align 8
  %struct_getter48 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %b2n147, i32 0, i32 2
  %bits2num.out.read_output_outter = load i128, i128* %struct_getter48, align 4
  %prod49 = load i128, i128* %modprod.prod.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %prod49, i128 %bits2num.out.read_output_outter, i1* @constraint.97)
  %ptr_getter50 = load %struct_template_circuit_modprod*, %struct_template_circuit_modprod** %ModProd, align 8
  %modprod.prod.write_output_inner = getelementptr inbounds %struct_template_circuit_modprod, %struct_template_circuit_modprod* %ptr_getter50, i32 0, i32 3
  store i128 %bits2num.out.read_output_outter, i128* %modprod.prod.write_output_inner, align 4
  %ModProd51 = load %struct_template_circuit_modprod*, %struct_template_circuit_modprod** %ModProd, align 8
  %struct_getter52 = getelementptr inbounds %struct_template_circuit_modprod, %struct_template_circuit_modprod* %ModProd51, i32 0, i32 3
  %modprod.prod.read_output_inner = load i128, i128* %struct_getter52, align 4
  store i128 %modprod.prod.read_output_inner, i128* %modprod.prod.declare_output, align 4
  %b2n253 = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %b2n2, align 8
  %struct_getter54 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %b2n253, i32 0, i32 2
  %bits2num.out.read_output_outter55 = load i128, i128* %struct_getter54, align 4
  %carry56 = load i128, i128* %modprod.carry.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %carry56, i128 %bits2num.out.read_output_outter55, i1* @constraint.98)
  %ptr_getter57 = load %struct_template_circuit_modprod*, %struct_template_circuit_modprod** %ModProd, align 8
  %modprod.carry.write_output_inner = getelementptr inbounds %struct_template_circuit_modprod, %struct_template_circuit_modprod* %ptr_getter57, i32 0, i32 4
  store i128 %bits2num.out.read_output_outter55, i128* %modprod.carry.write_output_inner, align 4
  %ModProd58 = load %struct_template_circuit_modprod*, %struct_template_circuit_modprod** %ModProd, align 8
  %struct_getter59 = getelementptr inbounds %struct_template_circuit_modprod, %struct_template_circuit_modprod* %ModProd58, i32 0, i32 4
  %modprod.carry.read_output_inner = load i128, i128* %struct_getter59, align 4
  store i128 %modprod.carry.read_output_inner, i128* %modprod.carry.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit
  %prod60 = load i128, i128* %modprod.prod.declare_output, align 4
  %modprod.prod.write_output_inner61 = getelementptr inbounds %struct_template_circuit_modprod, %struct_template_circuit_modprod* %0, i32 0, i32 3
  store i128 %prod60, i128* %modprod.prod.write_output_inner61, align 4
  %carry62 = load i128, i128* %modprod.carry.declare_output, align 4
  %modprod.carry.write_output_inner63 = getelementptr inbounds %struct_template_circuit_modprod, %struct_template_circuit_modprod* %0, i32 0, i32 4
  store i128 %carry62, i128* %modprod.carry.write_output_inner63, align 4
  ret void
}

define %struct_template_circuit_modprod* @fn_template_build_modprod(i128 %0) {
entry:
  %struct_template_circuit_modprod = alloca %struct_template_circuit_modprod, align 8
  %modprod.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_modprod, %struct_template_circuit_modprod* %struct_template_circuit_modprod, i32 0, i32 0
  store i128 %0, i128* %modprod.n.write_arg_inner, align 4
  ret %struct_template_circuit_modprod* %struct_template_circuit_modprod
}

define void @fn_template_init_modsumfour(%struct_template_circuit_modsumfour* %0) {
entry:
  %ModSumFour = alloca %struct_template_circuit_modsumfour*, align 8
  store %struct_template_circuit_modsumfour* %0, %struct_template_circuit_modsumfour** %ModSumFour, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %0, i32 0, i32 0
  %modsumfour.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %modsumfour.n.declare_arg = alloca i128, align 8
  store i128 %modsumfour.n.read_arg_inner, i128* %modsumfour.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %0, i32 0, i32 1
  %modsumfour.a.read_input_inner = load i128, i128* %struct_getter1, align 4
  %modsumfour.a.declare_input = alloca i128, align 8
  store i128 %modsumfour.a.read_input_inner, i128* %modsumfour.a.declare_input, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %0, i32 0, i32 2
  %modsumfour.b.read_input_inner = load i128, i128* %struct_getter2, align 4
  %modsumfour.b.declare_input = alloca i128, align 8
  store i128 %modsumfour.b.read_input_inner, i128* %modsumfour.b.declare_input, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %0, i32 0, i32 3
  %modsumfour.c.read_input_inner = load i128, i128* %struct_getter3, align 4
  %modsumfour.c.declare_input = alloca i128, align 8
  store i128 %modsumfour.c.read_input_inner, i128* %modsumfour.c.declare_input, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %0, i32 0, i32 4
  %modsumfour.d.read_input_inner = load i128, i128* %struct_getter4, align 4
  %modsumfour.d.declare_input = alloca i128, align 8
  store i128 %modsumfour.d.read_input_inner, i128* %modsumfour.d.declare_input, align 4
  %n2b = alloca %struct_template_circuit_num2bits*, align 8
  %modsumfour.sum.declare_output = alloca i128, align 8
  %sum = call i128 @fn_intrinsic_inline_init()
  store i128 %sum, i128* %modsumfour.sum.declare_output, align 4
  %modsumfour.carry.declare_output = alloca i128, align 8
  %carry = call i128 @fn_intrinsic_inline_init()
  store i128 %carry, i128* %modsumfour.carry.declare_output, align 4
  %n = load i128, i128* %modsumfour.n.declare_arg, align 4
  %add = add i128 %n, 2
  %call = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %add)
  store %struct_template_circuit_num2bits* %call, %struct_template_circuit_num2bits** %n2b, align 8
  %a = load i128, i128* %modsumfour.a.declare_input, align 4
  %b = load i128, i128* %modsumfour.b.declare_input, align 4
  %add5 = add i128 %a, %b
  %c = load i128, i128* %modsumfour.c.declare_input, align 4
  %add6 = add i128 %add5, %c
  %d = load i128, i128* %modsumfour.d.declare_input, align 4
  %add7 = add i128 %add6, %d
  %n2b8 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b8, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter9, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %add7, i1* @constraint.99)
  %ptr_getter = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter, i32 0, i32 1
  store i128 %add7, i128* %num2bits.in.write_input_outter, align 4
  %n2b10 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter11 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b10, i32 0, i32 2
  %num2bits.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter11, align 8
  %n12 = load i128, i128* %modsumfour.n.declare_arg, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter, i128 0, i128 %n12
  %n2b13 = load i128, i128* %array_getter, align 4
  %n2b14 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter15 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b14, i32 0, i32 2
  %num2bits.out.read_output_outter16 = load [256 x i128]*, [256 x i128]** %struct_getter15, align 8
  %n17 = load i128, i128* %modsumfour.n.declare_arg, align 4
  %add18 = add i128 %n17, 1
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter16, i128 0, i128 %add18
  %n2b20 = load i128, i128* %array_getter19, align 4
  %mul = mul i128 2, %n2b20
  %add21 = add i128 %n2b13, %mul
  %carry22 = load i128, i128* %modsumfour.carry.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %carry22, i128 %add21, i1* @constraint.100)
  %ptr_getter23 = load %struct_template_circuit_modsumfour*, %struct_template_circuit_modsumfour** %ModSumFour, align 8
  %modsumfour.carry.write_output_inner = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %ptr_getter23, i32 0, i32 6
  store i128 %add21, i128* %modsumfour.carry.write_output_inner, align 4
  %ModSumFour24 = load %struct_template_circuit_modsumfour*, %struct_template_circuit_modsumfour** %ModSumFour, align 8
  %struct_getter25 = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %ModSumFour24, i32 0, i32 6
  %modsumfour.carry.read_output_inner = load i128, i128* %struct_getter25, align 4
  store i128 %modsumfour.carry.read_output_inner, i128* %modsumfour.carry.declare_output, align 4
  %a26 = load i128, i128* %modsumfour.a.declare_input, align 4
  %b27 = load i128, i128* %modsumfour.b.declare_input, align 4
  %add28 = add i128 %a26, %b27
  %c29 = load i128, i128* %modsumfour.c.declare_input, align 4
  %add30 = add i128 %add28, %c29
  %d31 = load i128, i128* %modsumfour.d.declare_input, align 4
  %add32 = add i128 %add30, %d31
  %carry33 = load i128, i128* %modsumfour.carry.declare_output, align 4
  %n34 = load i128, i128* %modsumfour.n.declare_arg, align 4
  %lshift = shl i128 1, %n34
  %mul35 = mul i128 %carry33, %lshift
  %sub = sub i128 %add32, %mul35
  %sum36 = load i128, i128* %modsumfour.sum.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %sum36, i128 %sub, i1* @constraint.101)
  %ptr_getter37 = load %struct_template_circuit_modsumfour*, %struct_template_circuit_modsumfour** %ModSumFour, align 8
  %modsumfour.sum.write_output_inner = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %ptr_getter37, i32 0, i32 5
  store i128 %sub, i128* %modsumfour.sum.write_output_inner, align 4
  %ModSumFour38 = load %struct_template_circuit_modsumfour*, %struct_template_circuit_modsumfour** %ModSumFour, align 8
  %struct_getter39 = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %ModSumFour38, i32 0, i32 5
  %modsumfour.sum.read_output_inner = load i128, i128* %struct_getter39, align 4
  store i128 %modsumfour.sum.read_output_inner, i128* %modsumfour.sum.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %sum40 = load i128, i128* %modsumfour.sum.declare_output, align 4
  %modsumfour.sum.write_output_inner41 = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %0, i32 0, i32 5
  store i128 %sum40, i128* %modsumfour.sum.write_output_inner41, align 4
  %carry42 = load i128, i128* %modsumfour.carry.declare_output, align 4
  %modsumfour.carry.write_output_inner43 = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %0, i32 0, i32 6
  store i128 %carry42, i128* %modsumfour.carry.write_output_inner43, align 4
  ret void
}

define %struct_template_circuit_modsumfour* @fn_template_build_modsumfour(i128 %0) {
entry:
  %struct_template_circuit_modsumfour = alloca %struct_template_circuit_modsumfour, align 8
  %modsumfour.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_modsumfour, %struct_template_circuit_modsumfour* %struct_template_circuit_modsumfour, i32 0, i32 0
  store i128 %0, i128* %modsumfour.n.write_arg_inner, align 4
  ret %struct_template_circuit_modsumfour* %struct_template_circuit_modsumfour
}

define void @fn_template_init_bigisequal(%struct_template_circuit_bigisequal* %0) {
entry:
  %BigIsEqual = alloca %struct_template_circuit_bigisequal*, align 8
  store %struct_template_circuit_bigisequal* %0, %struct_template_circuit_bigisequal** %BigIsEqual, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigisequal, %struct_template_circuit_bigisequal* %0, i32 0, i32 0
  %bigisequal.k.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigisequal.k.declare_arg = alloca i128, align 8
  store i128 %bigisequal.k.read_arg_inner, i128* %bigisequal.k.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigisequal, %struct_template_circuit_bigisequal* %0, i32 0, i32 1
  %bigisequal.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter1, align 8
  %bigisequal.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigisequal.a.read_input_inner, [256 x i128]** %bigisequal.a.declare_input, align 8
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigisequal, %struct_template_circuit_bigisequal* %0, i32 0, i32 2
  %bigisequal.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %bigisequal.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigisequal.b.read_input_inner, [256 x i128]** %bigisequal.b.declare_input, align 8
  %total = alloca i128, align 8
  %total3 = call i128 @fn_intrinsic_inline_init()
  store i128 %total3, i128* %total, align 4
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %checkZero = alloca %struct_template_circuit_iszero*, align 8
  %bigisequal.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %bigisequal.out.declare_output, align 4
  %isEquals = alloca [256 x %struct_template_circuit_isequal*]*, align 8
  %isEquals5 = alloca [256 x %struct_template_circuit_isequal*], align 8
  store [256 x %struct_template_circuit_isequal*]* %isEquals5, [256 x %struct_template_circuit_isequal*]** %isEquals, align 8
  %k = load i128, i128* %bigisequal.k.declare_arg, align 4
  store i128 %k, i128* %total, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %call = call %struct_template_circuit_isequal* @fn_template_build_isequal()
  %ptr_getter = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEquals, align 8
  %i6 = load i128, i128* %i, align 4
  %isEquals7 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter, i128 0, i128 %i6
  store %struct_template_circuit_isequal* %call, %struct_template_circuit_isequal** %isEquals7, align 8
  %a = load [256 x i128]*, [256 x i128]** %bigisequal.a.declare_input, align 8
  %i8 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i8
  %a9 = load i128, i128* %array_getter, align 4
  %isEquals10 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEquals, align 8
  %i11 = load i128, i128* %i, align 4
  %array_getter12 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %isEquals10, i128 0, i128 %i11
  %isEquals13 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter12, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEquals13, i32 0, i32 0
  %isequal.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter14, align 8
  %array_getter15 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter, i128 0, i128 0
  %isEquals16 = load i128, i128* %array_getter15, align 4
  call void @fn_intrinsic_add_constraint(i128 %isEquals16, i128 %a9, i1* @constraint.102)
  %ptr_getter17 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEquals, align 8
  %i18 = load i128, i128* %i, align 4
  %array_getter19 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter17, i128 0, i128 %i18
  %isEquals20 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter19, align 8
  %struct_getter21 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEquals20, i32 0, i32 0
  %isequal.in.read_input_outter22 = load [256 x i128]*, [256 x i128]** %struct_getter21, align 8
  %isEquals23 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter22, i128 0, i128 0
  store i128 %a9, i128* %isEquals23, align 4
  %b = load [256 x i128]*, [256 x i128]** %bigisequal.b.declare_input, align 8
  %i24 = load i128, i128* %i, align 4
  %array_getter25 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i24
  %b26 = load i128, i128* %array_getter25, align 4
  %isEquals27 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEquals, align 8
  %i28 = load i128, i128* %i, align 4
  %array_getter29 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %isEquals27, i128 0, i128 %i28
  %isEquals30 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter29, align 8
  %struct_getter31 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEquals30, i32 0, i32 0
  %isequal.in.read_input_outter32 = load [256 x i128]*, [256 x i128]** %struct_getter31, align 8
  %array_getter33 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter32, i128 0, i128 1
  %isEquals34 = load i128, i128* %array_getter33, align 4
  call void @fn_intrinsic_add_constraint(i128 %isEquals34, i128 %b26, i1* @constraint.103)
  %ptr_getter35 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEquals, align 8
  %i36 = load i128, i128* %i, align 4
  %array_getter37 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter35, i128 0, i128 %i36
  %isEquals38 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter37, align 8
  %struct_getter39 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEquals38, i32 0, i32 0
  %isequal.in.read_input_outter40 = load [256 x i128]*, [256 x i128]** %struct_getter39, align 8
  %isEquals41 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter40, i128 0, i128 1
  store i128 %b26, i128* %isEquals41, align 4
  %total42 = load i128, i128* %total, align 4
  %isEquals43 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEquals, align 8
  %i44 = load i128, i128* %i, align 4
  %array_getter45 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %isEquals43, i128 0, i128 %i44
  %isEquals46 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter45, align 8
  %struct_getter47 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEquals46, i32 0, i32 1
  %isequal.out.read_output_outter = load i128, i128* %struct_getter47, align 4
  %sub = sub i128 %total42, %isequal.out.read_output_outter
  store i128 %sub, i128* %total, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i48 = load i128, i128* %i, align 4
  %add = add i128 %i48, 1
  store i128 %add, i128* %i, align 4
  %i49 = load i128, i128* %i, align 4
  %k50 = load i128, i128* %bigisequal.k.declare_arg, align 4
  %slt = icmp slt i128 %i49, %k50
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %call51 = call %struct_template_circuit_iszero* @fn_template_build_iszero()
  store %struct_template_circuit_iszero* %call51, %struct_template_circuit_iszero** %checkZero, align 8
  %total52 = load i128, i128* %total, align 4
  %checkZero53 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %struct_getter54 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %checkZero53, i32 0, i32 0
  %iszero.in.read_input_outter = load i128, i128* %struct_getter54, align 4
  call void @fn_intrinsic_add_constraint(i128 %iszero.in.read_input_outter, i128 %total52, i1* @constraint.104)
  %ptr_getter55 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %iszero.in.write_input_outter = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %ptr_getter55, i32 0, i32 0
  store i128 %total52, i128* %iszero.in.write_input_outter, align 4
  %checkZero56 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %struct_getter57 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %checkZero56, i32 0, i32 2
  %iszero.out.read_output_outter = load i128, i128* %struct_getter57, align 4
  %out58 = load i128, i128* %bigisequal.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out58, i128 %iszero.out.read_output_outter, i1* @constraint.105)
  %ptr_getter59 = load %struct_template_circuit_bigisequal*, %struct_template_circuit_bigisequal** %BigIsEqual, align 8
  %bigisequal.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigisequal, %struct_template_circuit_bigisequal* %ptr_getter59, i32 0, i32 3
  store i128 %iszero.out.read_output_outter, i128* %bigisequal.out.write_output_inner, align 4
  %BigIsEqual60 = load %struct_template_circuit_bigisequal*, %struct_template_circuit_bigisequal** %BigIsEqual, align 8
  %struct_getter61 = getelementptr inbounds %struct_template_circuit_bigisequal, %struct_template_circuit_bigisequal* %BigIsEqual60, i32 0, i32 3
  %bigisequal.out.read_output_inner = load i128, i128* %struct_getter61, align 4
  store i128 %bigisequal.out.read_output_inner, i128* %bigisequal.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit
  %out62 = load i128, i128* %bigisequal.out.declare_output, align 4
  %bigisequal.out.write_output_inner63 = getelementptr inbounds %struct_template_circuit_bigisequal, %struct_template_circuit_bigisequal* %0, i32 0, i32 3
  store i128 %out62, i128* %bigisequal.out.write_output_inner63, align 4
  ret void
}

define %struct_template_circuit_bigisequal* @fn_template_build_bigisequal(i128 %0) {
entry:
  %struct_template_circuit_bigisequal = alloca %struct_template_circuit_bigisequal, align 8
  %bigisequal.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigisequal, %struct_template_circuit_bigisequal* %struct_template_circuit_bigisequal, i32 0, i32 0
  store i128 %0, i128* %bigisequal.k.write_arg_inner, align 4
  ret %struct_template_circuit_bigisequal* %struct_template_circuit_bigisequal
}

define void @fn_template_init_splitthree(%struct_template_circuit_splitthree* %0) {
entry:
  %SplitThree = alloca %struct_template_circuit_splitthree*, align 8
  store %struct_template_circuit_splitthree* %0, %struct_template_circuit_splitthree** %SplitThree, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %0, i32 0, i32 0
  %splitthree.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %splitthree.n.declare_arg = alloca i128, align 8
  store i128 %splitthree.n.read_arg_inner, i128* %splitthree.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %0, i32 0, i32 1
  %splitthree.m.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %splitthree.m.declare_arg = alloca i128, align 8
  store i128 %splitthree.m.read_arg_inner, i128* %splitthree.m.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %0, i32 0, i32 2
  %splitthree.k.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %splitthree.k.declare_arg = alloca i128, align 8
  store i128 %splitthree.k.read_arg_inner, i128* %splitthree.k.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %0, i32 0, i32 3
  %splitthree.in.read_input_inner = load i128, i128* %struct_getter3, align 4
  %splitthree.in.declare_input = alloca i128, align 8
  store i128 %splitthree.in.read_input_inner, i128* %splitthree.in.declare_input, align 4
  %splitthree.small.declare_output = alloca i128, align 8
  %small = call i128 @fn_intrinsic_inline_init()
  store i128 %small, i128* %splitthree.small.declare_output, align 4
  %splitthree.big.declare_output = alloca i128, align 8
  %big = call i128 @fn_intrinsic_inline_init()
  store i128 %big, i128* %splitthree.big.declare_output, align 4
  %n2b_big = alloca %struct_template_circuit_num2bits*, align 8
  %splitthree.medium.declare_output = alloca i128, align 8
  %medium = call i128 @fn_intrinsic_inline_init()
  store i128 %medium, i128* %splitthree.medium.declare_output, align 4
  %n2b_medium = alloca %struct_template_circuit_num2bits*, align 8
  %n2b_small = alloca %struct_template_circuit_num2bits*, align 8
  %in = load i128, i128* %splitthree.in.declare_input, align 4
  %n = load i128, i128* %splitthree.n.declare_arg, align 4
  %lshift = shl i128 1, %n
  %mod = srem i128 %in, %lshift
  %ptr_getter = load %struct_template_circuit_splitthree*, %struct_template_circuit_splitthree** %SplitThree, align 8
  %splitthree.small.write_output_inner = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %ptr_getter, i32 0, i32 4
  store i128 %mod, i128* %splitthree.small.write_output_inner, align 4
  %SplitThree4 = load %struct_template_circuit_splitthree*, %struct_template_circuit_splitthree** %SplitThree, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %SplitThree4, i32 0, i32 4
  %splitthree.small.read_output_inner = load i128, i128* %struct_getter5, align 4
  store i128 %splitthree.small.read_output_inner, i128* %splitthree.small.declare_output, align 4
  %in6 = load i128, i128* %splitthree.in.declare_input, align 4
  %n7 = load i128, i128* %splitthree.n.declare_arg, align 4
  %lshift8 = shl i128 1, %n7
  %sdiv = sdiv i128 %in6, %lshift8
  %m = load i128, i128* %splitthree.m.declare_arg, align 4
  %lshift9 = shl i128 1, %m
  %mod10 = srem i128 %sdiv, %lshift9
  %ptr_getter11 = load %struct_template_circuit_splitthree*, %struct_template_circuit_splitthree** %SplitThree, align 8
  %splitthree.medium.write_output_inner = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %ptr_getter11, i32 0, i32 5
  store i128 %mod10, i128* %splitthree.medium.write_output_inner, align 4
  %SplitThree12 = load %struct_template_circuit_splitthree*, %struct_template_circuit_splitthree** %SplitThree, align 8
  %struct_getter13 = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %SplitThree12, i32 0, i32 5
  %splitthree.medium.read_output_inner = load i128, i128* %struct_getter13, align 4
  store i128 %splitthree.medium.read_output_inner, i128* %splitthree.medium.declare_output, align 4
  %in14 = load i128, i128* %splitthree.in.declare_input, align 4
  %n15 = load i128, i128* %splitthree.n.declare_arg, align 4
  %m16 = load i128, i128* %splitthree.m.declare_arg, align 4
  %add = add i128 %n15, %m16
  %lshift17 = shl i128 1, %add
  %sdiv18 = sdiv i128 %in14, %lshift17
  %ptr_getter19 = load %struct_template_circuit_splitthree*, %struct_template_circuit_splitthree** %SplitThree, align 8
  %splitthree.big.write_output_inner = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %ptr_getter19, i32 0, i32 6
  store i128 %sdiv18, i128* %splitthree.big.write_output_inner, align 4
  %SplitThree20 = load %struct_template_circuit_splitthree*, %struct_template_circuit_splitthree** %SplitThree, align 8
  %struct_getter21 = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %SplitThree20, i32 0, i32 6
  %splitthree.big.read_output_inner = load i128, i128* %struct_getter21, align 4
  store i128 %splitthree.big.read_output_inner, i128* %splitthree.big.declare_output, align 4
  %n22 = load i128, i128* %splitthree.n.declare_arg, align 4
  %call = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n22)
  store %struct_template_circuit_num2bits* %call, %struct_template_circuit_num2bits** %n2b_small, align 8
  %small23 = load i128, i128* %splitthree.small.declare_output, align 4
  %n2b_small24 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b_small, align 8
  %struct_getter25 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b_small24, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter25, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %small23, i1* @constraint.106)
  %ptr_getter26 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b_small, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter26, i32 0, i32 1
  store i128 %small23, i128* %num2bits.in.write_input_outter, align 4
  %m27 = load i128, i128* %splitthree.m.declare_arg, align 4
  %call28 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %m27)
  store %struct_template_circuit_num2bits* %call28, %struct_template_circuit_num2bits** %n2b_medium, align 8
  %medium29 = load i128, i128* %splitthree.medium.declare_output, align 4
  %n2b_medium30 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b_medium, align 8
  %struct_getter31 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b_medium30, i32 0, i32 1
  %num2bits.in.read_input_outter32 = load i128, i128* %struct_getter31, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter32, i128 %medium29, i1* @constraint.107)
  %ptr_getter33 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b_medium, align 8
  %num2bits.in.write_input_outter34 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter33, i32 0, i32 1
  store i128 %medium29, i128* %num2bits.in.write_input_outter34, align 4
  %k = load i128, i128* %splitthree.k.declare_arg, align 4
  %call35 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %k)
  store %struct_template_circuit_num2bits* %call35, %struct_template_circuit_num2bits** %n2b_big, align 8
  %big36 = load i128, i128* %splitthree.big.declare_output, align 4
  %n2b_big37 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b_big, align 8
  %struct_getter38 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b_big37, i32 0, i32 1
  %num2bits.in.read_input_outter39 = load i128, i128* %struct_getter38, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter39, i128 %big36, i1* @constraint.108)
  %ptr_getter40 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b_big, align 8
  %num2bits.in.write_input_outter41 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter40, i32 0, i32 1
  store i128 %big36, i128* %num2bits.in.write_input_outter41, align 4
  %in42 = load i128, i128* %splitthree.in.declare_input, align 4
  %small43 = load i128, i128* %splitthree.small.declare_output, align 4
  %medium44 = load i128, i128* %splitthree.medium.declare_output, align 4
  %n45 = load i128, i128* %splitthree.n.declare_arg, align 4
  %lshift46 = shl i128 1, %n45
  %mul = mul i128 %medium44, %lshift46
  %add47 = add i128 %small43, %mul
  %big48 = load i128, i128* %splitthree.big.declare_output, align 4
  %n49 = load i128, i128* %splitthree.n.declare_arg, align 4
  %m50 = load i128, i128* %splitthree.m.declare_arg, align 4
  %add51 = add i128 %n49, %m50
  %lshift52 = shl i128 1, %add51
  %mul53 = mul i128 %big48, %lshift52
  %add54 = add i128 %add47, %mul53
  call void @fn_intrinsic_add_constraint(i128 %in42, i128 %add54, i1* @constraint.109)
  br label %exit

exit:                                             ; preds = %entry
  %small55 = load i128, i128* %splitthree.small.declare_output, align 4
  %splitthree.small.write_output_inner56 = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %0, i32 0, i32 4
  store i128 %small55, i128* %splitthree.small.write_output_inner56, align 4
  %medium57 = load i128, i128* %splitthree.medium.declare_output, align 4
  %splitthree.medium.write_output_inner58 = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %0, i32 0, i32 5
  store i128 %medium57, i128* %splitthree.medium.write_output_inner58, align 4
  %big59 = load i128, i128* %splitthree.big.declare_output, align 4
  %splitthree.big.write_output_inner60 = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %0, i32 0, i32 6
  store i128 %big59, i128* %splitthree.big.write_output_inner60, align 4
  ret void
}

define %struct_template_circuit_splitthree* @fn_template_build_splitthree(i128 %0, i128 %1, i128 %2) {
entry:
  %struct_template_circuit_splitthree = alloca %struct_template_circuit_splitthree, align 8
  %splitthree.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %struct_template_circuit_splitthree, i32 0, i32 0
  store i128 %0, i128* %splitthree.n.write_arg_inner, align 4
  %splitthree.m.write_arg_inner = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %struct_template_circuit_splitthree, i32 0, i32 1
  store i128 %1, i128* %splitthree.m.write_arg_inner, align 4
  %splitthree.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_splitthree, %struct_template_circuit_splitthree* %struct_template_circuit_splitthree, i32 0, i32 2
  store i128 %2, i128* %splitthree.k.write_arg_inner, align 4
  ret %struct_template_circuit_splitthree* %struct_template_circuit_splitthree
}

define void @fn_template_init_bigsub(%struct_template_circuit_bigsub* %0) {
entry:
  %BigSub = alloca %struct_template_circuit_bigsub*, align 8
  store %struct_template_circuit_bigsub* %0, %struct_template_circuit_bigsub** %BigSub, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %0, i32 0, i32 0
  %bigsub.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigsub.n.declare_arg = alloca i128, align 8
  store i128 %bigsub.n.read_arg_inner, i128* %bigsub.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %0, i32 0, i32 1
  %bigsub.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigsub.k.declare_arg = alloca i128, align 8
  store i128 %bigsub.k.read_arg_inner, i128* %bigsub.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %0, i32 0, i32 2
  %bigsub.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %bigsub.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigsub.a.read_input_inner, [256 x i128]** %bigsub.a.declare_input, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %0, i32 0, i32 3
  %bigsub.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %bigsub.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigsub.b.read_input_inner, [256 x i128]** %bigsub.b.declare_input, align 8
  %bigsub.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %bigsub.out.declare_output, align 8
  %bigsub.underflow.declare_output = alloca i128, align 8
  %underflow = call i128 @fn_intrinsic_inline_init()
  store i128 %underflow, i128* %bigsub.underflow.declare_output, align 4
  %unit = alloca [256 x %struct_template_circuit_modsubthree*]*, align 8
  %unit4 = alloca [256 x %struct_template_circuit_modsubthree*], align 8
  store [256 x %struct_template_circuit_modsubthree*]* %unit4, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %unit0 = alloca %struct_template_circuit_modsub*, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %n = load i128, i128* %bigsub.n.declare_arg, align 4
  %call = call %struct_template_circuit_modsub* @fn_template_build_modsub(i128 %n)
  store %struct_template_circuit_modsub* %call, %struct_template_circuit_modsub** %unit0, align 8
  %a = load [256 x i128]*, [256 x i128]** %bigsub.a.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 0
  %a6 = load i128, i128* %array_getter, align 4
  %unit07 = load %struct_template_circuit_modsub*, %struct_template_circuit_modsub** %unit0, align 8
  %struct_getter8 = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %unit07, i32 0, i32 1
  %modsub.a.read_input_outter = load i128, i128* %struct_getter8, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsub.a.read_input_outter, i128 %a6, i1* @constraint.110)
  %ptr_getter = load %struct_template_circuit_modsub*, %struct_template_circuit_modsub** %unit0, align 8
  %modsub.a.write_input_outter = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %ptr_getter, i32 0, i32 1
  store i128 %a6, i128* %modsub.a.write_input_outter, align 4
  %b = load [256 x i128]*, [256 x i128]** %bigsub.b.declare_input, align 8
  %array_getter9 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 0
  %b10 = load i128, i128* %array_getter9, align 4
  %unit011 = load %struct_template_circuit_modsub*, %struct_template_circuit_modsub** %unit0, align 8
  %struct_getter12 = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %unit011, i32 0, i32 2
  %modsub.b.read_input_outter = load i128, i128* %struct_getter12, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsub.b.read_input_outter, i128 %b10, i1* @constraint.111)
  %ptr_getter13 = load %struct_template_circuit_modsub*, %struct_template_circuit_modsub** %unit0, align 8
  %modsub.b.write_input_outter = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %ptr_getter13, i32 0, i32 2
  store i128 %b10, i128* %modsub.b.write_input_outter, align 4
  %unit014 = load %struct_template_circuit_modsub*, %struct_template_circuit_modsub** %unit0, align 8
  %struct_getter15 = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %unit014, i32 0, i32 3
  %modsub.out.read_output_outter = load i128, i128* %struct_getter15, align 4
  %out16 = load [256 x i128]*, [256 x i128]** %bigsub.out.declare_output, align 8
  %array_getter17 = getelementptr inbounds [256 x i128], [256 x i128]* %out16, i128 0, i128 0
  %out18 = load i128, i128* %array_getter17, align 4
  call void @fn_intrinsic_add_constraint(i128 %out18, i128 %modsub.out.read_output_outter, i1* @constraint.112)
  %ptr_getter19 = load [256 x i128]*, [256 x i128]** %bigsub.out.declare_output, align 8
  %out20 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter19, i128 0, i128 0
  store i128 %modsub.out.read_output_outter, i128* %out20, align 4
  store i128 1, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %n21 = load i128, i128* %bigsub.n.declare_arg, align 4
  %call22 = call %struct_template_circuit_modsubthree* @fn_template_build_modsubthree(i128 %n21)
  %ptr_getter23 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i24 = load i128, i128* %i, align 4
  %sub = sub i128 %i24, 1
  %unit25 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %ptr_getter23, i128 0, i128 %sub
  store %struct_template_circuit_modsubthree* %call22, %struct_template_circuit_modsubthree** %unit25, align 8
  %a26 = load [256 x i128]*, [256 x i128]** %bigsub.a.declare_input, align 8
  %i27 = load i128, i128* %i, align 4
  %array_getter28 = getelementptr inbounds [256 x i128], [256 x i128]* %a26, i128 0, i128 %i27
  %a29 = load i128, i128* %array_getter28, align 4
  %unit30 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i31 = load i128, i128* %i, align 4
  %sub32 = sub i128 %i31, 1
  %array_getter33 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %unit30, i128 0, i128 %sub32
  %unit34 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter33, align 8
  %struct_getter35 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit34, i32 0, i32 1
  %modsubthree.a.read_input_outter = load i128, i128* %struct_getter35, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsubthree.a.read_input_outter, i128 %a29, i1* @constraint.113)
  %ptr_getter36 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i37 = load i128, i128* %i, align 4
  %sub38 = sub i128 %i37, 1
  %array_getter39 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %ptr_getter36, i128 0, i128 %sub38
  %unit40 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter39, align 8
  %modsubthree.a.write_input_outter = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit40, i32 0, i32 1
  store i128 %a29, i128* %modsubthree.a.write_input_outter, align 4
  %b41 = load [256 x i128]*, [256 x i128]** %bigsub.b.declare_input, align 8
  %i42 = load i128, i128* %i, align 4
  %array_getter43 = getelementptr inbounds [256 x i128], [256 x i128]* %b41, i128 0, i128 %i42
  %b44 = load i128, i128* %array_getter43, align 4
  %unit45 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i46 = load i128, i128* %i, align 4
  %sub47 = sub i128 %i46, 1
  %array_getter48 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %unit45, i128 0, i128 %sub47
  %unit49 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter48, align 8
  %struct_getter50 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit49, i32 0, i32 2
  %modsubthree.b.read_input_outter = load i128, i128* %struct_getter50, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsubthree.b.read_input_outter, i128 %b44, i1* @constraint.114)
  %ptr_getter51 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i52 = load i128, i128* %i, align 4
  %sub53 = sub i128 %i52, 1
  %array_getter54 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %ptr_getter51, i128 0, i128 %sub53
  %unit55 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter54, align 8
  %modsubthree.b.write_input_outter = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit55, i32 0, i32 2
  store i128 %b44, i128* %modsubthree.b.write_input_outter, align 4
  %i56 = load i128, i128* %i, align 4
  %eq = icmp eq i128 %i56, 1
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  %unit057 = load %struct_template_circuit_modsub*, %struct_template_circuit_modsub** %unit0, align 8
  %struct_getter58 = getelementptr inbounds %struct_template_circuit_modsub, %struct_template_circuit_modsub* %unit057, i32 0, i32 4
  %modsub.borrow.read_output_outter = load i128, i128* %struct_getter58, align 4
  %unit59 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i60 = load i128, i128* %i, align 4
  %sub61 = sub i128 %i60, 1
  %array_getter62 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %unit59, i128 0, i128 %sub61
  %unit63 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter62, align 8
  %struct_getter64 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit63, i32 0, i32 3
  %modsubthree.c.read_input_outter = load i128, i128* %struct_getter64, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsubthree.c.read_input_outter, i128 %modsub.borrow.read_output_outter, i1* @constraint.115)
  %ptr_getter65 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i66 = load i128, i128* %i, align 4
  %sub67 = sub i128 %i66, 1
  %array_getter68 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %ptr_getter65, i128 0, i128 %sub67
  %unit69 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter68, align 8
  %modsubthree.c.write_input_outter = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit69, i32 0, i32 3
  store i128 %modsub.borrow.read_output_outter, i128* %modsubthree.c.write_input_outter, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body
  %unit70 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i71 = load i128, i128* %i, align 4
  %sub72 = sub i128 %i71, 2
  %array_getter73 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %unit70, i128 0, i128 %sub72
  %unit74 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter73, align 8
  %struct_getter75 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit74, i32 0, i32 6
  %modsubthree.borrow.read_output_outter = load i128, i128* %struct_getter75, align 4
  %unit76 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i77 = load i128, i128* %i, align 4
  %sub78 = sub i128 %i77, 1
  %array_getter79 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %unit76, i128 0, i128 %sub78
  %unit80 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter79, align 8
  %struct_getter81 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit80, i32 0, i32 3
  %modsubthree.c.read_input_outter82 = load i128, i128* %struct_getter81, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsubthree.c.read_input_outter82, i128 %modsubthree.borrow.read_output_outter, i1* @constraint.116)
  %ptr_getter83 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i84 = load i128, i128* %i, align 4
  %sub85 = sub i128 %i84, 1
  %array_getter86 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %ptr_getter83, i128 0, i128 %sub85
  %unit87 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter86, align 8
  %modsubthree.c.write_input_outter88 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit87, i32 0, i32 3
  store i128 %modsubthree.borrow.read_output_outter, i128* %modsubthree.c.write_input_outter88, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  %unit89 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %i90 = load i128, i128* %i, align 4
  %sub91 = sub i128 %i90, 1
  %array_getter92 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %unit89, i128 0, i128 %sub91
  %unit93 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter92, align 8
  %struct_getter94 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit93, i32 0, i32 5
  %modsubthree.out.read_output_outter = load i128, i128* %struct_getter94, align 4
  %out95 = load [256 x i128]*, [256 x i128]** %bigsub.out.declare_output, align 8
  %i96 = load i128, i128* %i, align 4
  %array_getter97 = getelementptr inbounds [256 x i128], [256 x i128]* %out95, i128 0, i128 %i96
  %out98 = load i128, i128* %array_getter97, align 4
  call void @fn_intrinsic_add_constraint(i128 %out98, i128 %modsubthree.out.read_output_outter, i1* @constraint.117)
  %ptr_getter99 = load [256 x i128]*, [256 x i128]** %bigsub.out.declare_output, align 8
  %i100 = load i128, i128* %i, align 4
  %out101 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter99, i128 0, i128 %i100
  store i128 %modsubthree.out.read_output_outter, i128* %out101, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %i102 = load i128, i128* %i, align 4
  %add = add i128 %i102, 1
  store i128 %add, i128* %i, align 4
  %i103 = load i128, i128* %i, align 4
  %k = load i128, i128* %bigsub.k.declare_arg, align 4
  %slt = icmp slt i128 %i103, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %unit104 = load [256 x %struct_template_circuit_modsubthree*]*, [256 x %struct_template_circuit_modsubthree*]** %unit, align 8
  %k105 = load i128, i128* %bigsub.k.declare_arg, align 4
  %sub106 = sub i128 %k105, 2
  %array_getter107 = getelementptr inbounds [256 x %struct_template_circuit_modsubthree*], [256 x %struct_template_circuit_modsubthree*]* %unit104, i128 0, i128 %sub106
  %unit108 = load %struct_template_circuit_modsubthree*, %struct_template_circuit_modsubthree** %array_getter107, align 8
  %struct_getter109 = getelementptr inbounds %struct_template_circuit_modsubthree, %struct_template_circuit_modsubthree* %unit108, i32 0, i32 6
  %modsubthree.borrow.read_output_outter110 = load i128, i128* %struct_getter109, align 4
  %underflow111 = load i128, i128* %bigsub.underflow.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %underflow111, i128 %modsubthree.borrow.read_output_outter110, i1* @constraint.118)
  %ptr_getter112 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %BigSub, align 8
  %bigsub.underflow.write_output_inner = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter112, i32 0, i32 5
  store i128 %modsubthree.borrow.read_output_outter110, i128* %bigsub.underflow.write_output_inner, align 4
  %BigSub113 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %BigSub, align 8
  %struct_getter114 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %BigSub113, i32 0, i32 5
  %bigsub.underflow.read_output_inner = load i128, i128* %struct_getter114, align 4
  store i128 %bigsub.underflow.read_output_inner, i128* %bigsub.underflow.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit
  %out115 = load [256 x i128]*, [256 x i128]** %bigsub.out.declare_output, align 8
  %bigsub.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %0, i32 0, i32 4
  store [256 x i128]* %out115, [256 x i128]** %bigsub.out.write_output_inner, align 8
  %underflow116 = load i128, i128* %bigsub.underflow.declare_output, align 4
  %bigsub.underflow.write_output_inner117 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %0, i32 0, i32 5
  store i128 %underflow116, i128* %bigsub.underflow.write_output_inner117, align 4
  ret void
}

define %struct_template_circuit_bigsub* @fn_template_build_bigsub(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_bigsub = alloca %struct_template_circuit_bigsub, align 8
  %bigsub.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %struct_template_circuit_bigsub, i32 0, i32 0
  store i128 %0, i128* %bigsub.n.write_arg_inner, align 4
  %bigsub.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %struct_template_circuit_bigsub, i32 0, i32 1
  store i128 %1, i128* %bigsub.k.write_arg_inner, align 4
  ret %struct_template_circuit_bigsub* %struct_template_circuit_bigsub
}

define void @fn_template_init_greaterthan(%struct_template_circuit_greaterthan* %0) {
entry:
  %GreaterThan = alloca %struct_template_circuit_greaterthan*, align 8
  store %struct_template_circuit_greaterthan* %0, %struct_template_circuit_greaterthan** %GreaterThan, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_greaterthan, %struct_template_circuit_greaterthan* %0, i32 0, i32 0
  %greaterthan.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %greaterthan.n.declare_arg = alloca i128, align 8
  store i128 %greaterthan.n.read_arg_inner, i128* %greaterthan.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_greaterthan, %struct_template_circuit_greaterthan* %0, i32 0, i32 1
  %greaterthan.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter1, align 8
  %greaterthan.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %greaterthan.in.read_input_inner, [256 x i128]** %greaterthan.in.declare_input, align 8
  %greaterthan.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %greaterthan.out.declare_output, align 4
  %lt = alloca %struct_template_circuit_lessthan*, align 8
  %n = load i128, i128* %greaterthan.n.declare_arg, align 4
  %call = call %struct_template_circuit_lessthan* @fn_template_build_lessthan(i128 %n)
  store %struct_template_circuit_lessthan* %call, %struct_template_circuit_lessthan** %lt, align 8
  %in = load [256 x i128]*, [256 x i128]** %greaterthan.in.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 1
  %in2 = load i128, i128* %array_getter, align 4
  %lt3 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt3, i32 0, i32 1
  %lessthan.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %array_getter5 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter, i128 0, i128 0
  %lt6 = load i128, i128* %array_getter5, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt6, i128 %in2, i1* @constraint.119)
  %ptr_getter = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter, i32 0, i32 1
  %lessthan.in.read_input_outter8 = load [256 x i128]*, [256 x i128]** %struct_getter7, align 8
  %lt9 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter8, i128 0, i128 0
  store i128 %in2, i128* %lt9, align 4
  %in10 = load [256 x i128]*, [256 x i128]** %greaterthan.in.declare_input, align 8
  %array_getter11 = getelementptr inbounds [256 x i128], [256 x i128]* %in10, i128 0, i128 0
  %in12 = load i128, i128* %array_getter11, align 4
  %lt13 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt13, i32 0, i32 1
  %lessthan.in.read_input_outter15 = load [256 x i128]*, [256 x i128]** %struct_getter14, align 8
  %array_getter16 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter15, i128 0, i128 1
  %lt17 = load i128, i128* %array_getter16, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt17, i128 %in12, i1* @constraint.120)
  %ptr_getter18 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter18, i32 0, i32 1
  %lessthan.in.read_input_outter20 = load [256 x i128]*, [256 x i128]** %struct_getter19, align 8
  %lt21 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter20, i128 0, i128 1
  store i128 %in12, i128* %lt21, align 4
  %lt22 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt22, i32 0, i32 2
  %lessthan.out.read_output_outter = load i128, i128* %struct_getter23, align 4
  %out24 = load i128, i128* %greaterthan.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out24, i128 %lessthan.out.read_output_outter, i1* @constraint.121)
  %ptr_getter25 = load %struct_template_circuit_greaterthan*, %struct_template_circuit_greaterthan** %GreaterThan, align 8
  %greaterthan.out.write_output_inner = getelementptr inbounds %struct_template_circuit_greaterthan, %struct_template_circuit_greaterthan* %ptr_getter25, i32 0, i32 2
  store i128 %lessthan.out.read_output_outter, i128* %greaterthan.out.write_output_inner, align 4
  %GreaterThan26 = load %struct_template_circuit_greaterthan*, %struct_template_circuit_greaterthan** %GreaterThan, align 8
  %struct_getter27 = getelementptr inbounds %struct_template_circuit_greaterthan, %struct_template_circuit_greaterthan* %GreaterThan26, i32 0, i32 2
  %greaterthan.out.read_output_inner = load i128, i128* %struct_getter27, align 4
  store i128 %greaterthan.out.read_output_inner, i128* %greaterthan.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out28 = load i128, i128* %greaterthan.out.declare_output, align 4
  %greaterthan.out.write_output_inner29 = getelementptr inbounds %struct_template_circuit_greaterthan, %struct_template_circuit_greaterthan* %0, i32 0, i32 2
  store i128 %out28, i128* %greaterthan.out.write_output_inner29, align 4
  ret void
}

define %struct_template_circuit_greaterthan* @fn_template_build_greaterthan(i128 %0) {
entry:
  %struct_template_circuit_greaterthan = alloca %struct_template_circuit_greaterthan, align 8
  %greaterthan.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_greaterthan, %struct_template_circuit_greaterthan* %struct_template_circuit_greaterthan, i32 0, i32 0
  store i128 %0, i128* %greaterthan.n.write_arg_inner, align 4
  ret %struct_template_circuit_greaterthan* %struct_template_circuit_greaterthan
}

define void @fn_template_init_num2bits_strict(%struct_template_circuit_num2bits_strict* %0) {
entry:
  %Num2Bits_strict = alloca %struct_template_circuit_num2bits_strict*, align 8
  store %struct_template_circuit_num2bits_strict* %0, %struct_template_circuit_num2bits_strict** %Num2Bits_strict, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_num2bits_strict, %struct_template_circuit_num2bits_strict* %0, i32 0, i32 0
  %num2bits_strict.in.read_input_inner = load i128, i128* %struct_getter, align 4
  %num2bits_strict.in.declare_input = alloca i128, align 8
  store i128 %num2bits_strict.in.read_input_inner, i128* %num2bits_strict.in.declare_input, align 4
  %n2b = alloca %struct_template_circuit_num2bits*, align 8
  %num2bits_strict.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %num2bits_strict.out.declare_output, align 8
  %aliasCheck = alloca %struct_template_circuit_aliascheck*, align 8
  %i = alloca i128, align 8
  %i1 = call i128 @fn_intrinsic_inline_init()
  store i128 %i1, i128* %i, align 4
  %call = call %struct_template_circuit_aliascheck* @fn_template_build_aliascheck()
  store %struct_template_circuit_aliascheck* %call, %struct_template_circuit_aliascheck** %aliasCheck, align 8
  %call2 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 254)
  store %struct_template_circuit_num2bits* %call2, %struct_template_circuit_num2bits** %n2b, align 8
  %in = load i128, i128* %num2bits_strict.in.declare_input, align 4
  %n2b3 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b3, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter4, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %in, i1* @constraint.122)
  %ptr_getter = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %ptr_getter, i32 0, i32 1
  store i128 %in, i128* %num2bits.in.write_input_outter, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %n2b5 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b5, i32 0, i32 2
  %num2bits.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter6, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter, i128 0, i128 %i7
  %n2b8 = load i128, i128* %array_getter, align 4
  %out9 = load [256 x i128]*, [256 x i128]** %num2bits_strict.out.declare_output, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter11 = getelementptr inbounds [256 x i128], [256 x i128]* %out9, i128 0, i128 %i10
  %out12 = load i128, i128* %array_getter11, align 4
  call void @fn_intrinsic_add_constraint(i128 %out12, i128 %n2b8, i1* @constraint.123)
  %ptr_getter13 = load [256 x i128]*, [256 x i128]** %num2bits_strict.out.declare_output, align 8
  %i14 = load i128, i128* %i, align 4
  %out15 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter13, i128 0, i128 %i14
  store i128 %n2b8, i128* %out15, align 4
  %n2b16 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %n2b, align 8
  %struct_getter17 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %n2b16, i32 0, i32 2
  %num2bits.out.read_output_outter18 = load [256 x i128]*, [256 x i128]** %struct_getter17, align 8
  %i19 = load i128, i128* %i, align 4
  %array_getter20 = getelementptr inbounds [256 x i128], [256 x i128]* %num2bits.out.read_output_outter18, i128 0, i128 %i19
  %n2b21 = load i128, i128* %array_getter20, align 4
  %aliasCheck22 = load %struct_template_circuit_aliascheck*, %struct_template_circuit_aliascheck** %aliasCheck, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_aliascheck, %struct_template_circuit_aliascheck* %aliasCheck22, i32 0, i32 0
  %aliascheck.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter23, align 8
  %i24 = load i128, i128* %i, align 4
  %array_getter25 = getelementptr inbounds [256 x i128], [256 x i128]* %aliascheck.in.read_input_outter, i128 0, i128 %i24
  %aliasCheck26 = load i128, i128* %array_getter25, align 4
  call void @fn_intrinsic_add_constraint(i128 %aliasCheck26, i128 %n2b21, i1* @constraint.124)
  %ptr_getter27 = load %struct_template_circuit_aliascheck*, %struct_template_circuit_aliascheck** %aliasCheck, align 8
  %struct_getter28 = getelementptr inbounds %struct_template_circuit_aliascheck, %struct_template_circuit_aliascheck* %ptr_getter27, i32 0, i32 0
  %aliascheck.in.read_input_outter29 = load [256 x i128]*, [256 x i128]** %struct_getter28, align 8
  %i30 = load i128, i128* %i, align 4
  %aliasCheck31 = getelementptr inbounds [256 x i128], [256 x i128]* %aliascheck.in.read_input_outter29, i128 0, i128 %i30
  store i128 %n2b21, i128* %aliasCheck31, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i32 = load i128, i128* %i, align 4
  %add = add i128 %i32, 1
  store i128 %add, i128* %i, align 4
  %i33 = load i128, i128* %i, align 4
  %slt = icmp slt i128 %i33, 254
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %exit

exit:                                             ; preds = %loop.exit
  %out34 = load [256 x i128]*, [256 x i128]** %num2bits_strict.out.declare_output, align 8
  %num2bits_strict.out.write_output_inner = getelementptr inbounds %struct_template_circuit_num2bits_strict, %struct_template_circuit_num2bits_strict* %0, i32 0, i32 1
  store [256 x i128]* %out34, [256 x i128]** %num2bits_strict.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_num2bits_strict* @fn_template_build_num2bits_strict() {
entry:
  %struct_template_circuit_num2bits_strict = alloca %struct_template_circuit_num2bits_strict, align 8
  ret %struct_template_circuit_num2bits_strict* %struct_template_circuit_num2bits_strict
}

define void @fn_template_init_fpnegate(%struct_template_circuit_fpnegate* %0) {
entry:
  %FpNegate = alloca %struct_template_circuit_fpnegate*, align 8
  store %struct_template_circuit_fpnegate* %0, %struct_template_circuit_fpnegate** %FpNegate, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %0, i32 0, i32 0
  %fpnegate.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fpnegate.n.declare_arg = alloca i128, align 8
  store i128 %fpnegate.n.read_arg_inner, i128* %fpnegate.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %0, i32 0, i32 1
  %fpnegate.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fpnegate.k.declare_arg = alloca i128, align 8
  store i128 %fpnegate.k.read_arg_inner, i128* %fpnegate.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %0, i32 0, i32 2
  %fpnegate.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fpnegate.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpnegate.p.read_arg_inner, [256 x i128]** %fpnegate.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %0, i32 0, i32 3
  %fpnegate.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %fpnegate.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpnegate.in.read_input_inner, [256 x i128]** %fpnegate.in.declare_input, align 8
  %is_zero = alloca %struct_template_circuit_bigiszero*, align 8
  %idx = alloca i128, align 8
  %idx4 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx4, i128* %idx, align 4
  %fpnegate.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %fpnegate.out.declare_output, align 8
  %neg = alloca %struct_template_circuit_bigsub*, align 8
  %n = load i128, i128* %fpnegate.n.declare_arg, align 4
  %k = load i128, i128* %fpnegate.k.declare_arg, align 4
  %call = call %struct_template_circuit_bigsub* @fn_template_build_bigsub(i128 %n, i128 %k)
  store %struct_template_circuit_bigsub* %call, %struct_template_circuit_bigsub** %neg, align 8
  %k5 = load i128, i128* %fpnegate.k.declare_arg, align 4
  %call6 = call %struct_template_circuit_bigiszero* @fn_template_build_bigiszero(i128 %k5)
  store %struct_template_circuit_bigiszero* %call6, %struct_template_circuit_bigiszero** %is_zero, align 8
  store i128 0, i128* %idx, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %p = load [256 x i128]*, [256 x i128]** %fpnegate.p.declare_arg, align 8
  %idx7 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %idx7
  %p8 = load i128, i128* %array_getter, align 4
  %neg9 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %neg, align 8
  %struct_getter10 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %neg9, i32 0, i32 2
  %bigsub.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter10, align 8
  %idx11 = load i128, i128* %idx, align 4
  %array_getter12 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter, i128 0, i128 %idx11
  %neg13 = load i128, i128* %array_getter12, align 4
  call void @fn_intrinsic_add_constraint(i128 %neg13, i128 %p8, i1* @constraint.125)
  %ptr_getter = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %neg, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter, i32 0, i32 2
  %bigsub.a.read_input_outter15 = load [256 x i128]*, [256 x i128]** %struct_getter14, align 8
  %idx16 = load i128, i128* %idx, align 4
  %neg17 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter15, i128 0, i128 %idx16
  store i128 %p8, i128* %neg17, align 4
  %in = load [256 x i128]*, [256 x i128]** %fpnegate.in.declare_input, align 8
  %idx18 = load i128, i128* %idx, align 4
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %idx18
  %in20 = load i128, i128* %array_getter19, align 4
  %neg21 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %neg, align 8
  %struct_getter22 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %neg21, i32 0, i32 3
  %bigsub.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter22, align 8
  %idx23 = load i128, i128* %idx, align 4
  %array_getter24 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter, i128 0, i128 %idx23
  %neg25 = load i128, i128* %array_getter24, align 4
  call void @fn_intrinsic_add_constraint(i128 %neg25, i128 %in20, i1* @constraint.126)
  %ptr_getter26 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %neg, align 8
  %struct_getter27 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter26, i32 0, i32 3
  %bigsub.b.read_input_outter28 = load [256 x i128]*, [256 x i128]** %struct_getter27, align 8
  %idx29 = load i128, i128* %idx, align 4
  %neg30 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter28, i128 0, i128 %idx29
  store i128 %in20, i128* %neg30, align 4
  %in31 = load [256 x i128]*, [256 x i128]** %fpnegate.in.declare_input, align 8
  %idx32 = load i128, i128* %idx, align 4
  %array_getter33 = getelementptr inbounds [256 x i128], [256 x i128]* %in31, i128 0, i128 %idx32
  %in34 = load i128, i128* %array_getter33, align 4
  %is_zero35 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %is_zero, align 8
  %struct_getter36 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %is_zero35, i32 0, i32 1
  %bigiszero.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter36, align 8
  %idx37 = load i128, i128* %idx, align 4
  %array_getter38 = getelementptr inbounds [256 x i128], [256 x i128]* %bigiszero.in.read_input_outter, i128 0, i128 %idx37
  %is_zero39 = load i128, i128* %array_getter38, align 4
  call void @fn_intrinsic_add_constraint(i128 %is_zero39, i128 %in34, i1* @constraint.127)
  %ptr_getter40 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %is_zero, align 8
  %struct_getter41 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %ptr_getter40, i32 0, i32 1
  %bigiszero.in.read_input_outter42 = load [256 x i128]*, [256 x i128]** %struct_getter41, align 8
  %idx43 = load i128, i128* %idx, align 4
  %is_zero44 = getelementptr inbounds [256 x i128], [256 x i128]* %bigiszero.in.read_input_outter42, i128 0, i128 %idx43
  store i128 %in34, i128* %is_zero44, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %idx45 = load i128, i128* %idx, align 4
  %add = add i128 %idx45, 1
  store i128 %add, i128* %idx, align 4
  %idx46 = load i128, i128* %idx, align 4
  %k47 = load i128, i128* %fpnegate.k.declare_arg, align 4
  %slt = icmp slt i128 %idx46, %k47
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %neg48 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %neg, align 8
  %struct_getter49 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %neg48, i32 0, i32 5
  %bigsub.underflow.read_output_outter = load i128, i128* %struct_getter49, align 4
  call void @fn_intrinsic_add_constraint(i128 %bigsub.underflow.read_output_outter, i128 0, i1* @constraint.128)
  store i128 0, i128* %idx, align 4
  br label %loop.body50

loop.body50:                                      ; preds = %loop.latch65, %loop.exit
  %is_zero51 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %is_zero, align 8
  %struct_getter52 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %is_zero51, i32 0, i32 2
  %bigiszero.out.read_output_outter = load i128, i128* %struct_getter52, align 4
  %sub = sub i128 1, %bigiszero.out.read_output_outter
  %neg53 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %neg, align 8
  %struct_getter54 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %neg53, i32 0, i32 4
  %bigsub.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter54, align 8
  %idx55 = load i128, i128* %idx, align 4
  %array_getter56 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.out.read_output_outter, i128 0, i128 %idx55
  %neg57 = load i128, i128* %array_getter56, align 4
  %mul = mul i128 %sub, %neg57
  %out58 = load [256 x i128]*, [256 x i128]** %fpnegate.out.declare_output, align 8
  %idx59 = load i128, i128* %idx, align 4
  %array_getter60 = getelementptr inbounds [256 x i128], [256 x i128]* %out58, i128 0, i128 %idx59
  %out61 = load i128, i128* %array_getter60, align 4
  call void @fn_intrinsic_add_constraint(i128 %out61, i128 %mul, i1* @constraint.129)
  %ptr_getter62 = load [256 x i128]*, [256 x i128]** %fpnegate.out.declare_output, align 8
  %idx63 = load i128, i128* %idx, align 4
  %out64 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter62, i128 0, i128 %idx63
  store i128 %mul, i128* %out64, align 4
  br label %loop.latch65

loop.latch65:                                     ; preds = %loop.body50
  %idx66 = load i128, i128* %idx, align 4
  %add67 = add i128 %idx66, 1
  store i128 %add67, i128* %idx, align 4
  %idx68 = load i128, i128* %idx, align 4
  %k69 = load i128, i128* %fpnegate.k.declare_arg, align 4
  %slt70 = icmp slt i128 %idx68, %k69
  br i1 %slt70, label %loop.body50, label %loop.exit71

loop.exit71:                                      ; preds = %loop.latch65
  br label %exit

exit:                                             ; preds = %loop.exit71
  %out72 = load [256 x i128]*, [256 x i128]** %fpnegate.out.declare_output, align 8
  %fpnegate.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %0, i32 0, i32 4
  store [256 x i128]* %out72, [256 x i128]** %fpnegate.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fpnegate* @fn_template_build_fpnegate(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fpnegate = alloca %struct_template_circuit_fpnegate, align 8
  %fpnegate.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %struct_template_circuit_fpnegate, i32 0, i32 0
  store i128 %0, i128* %fpnegate.n.write_arg_inner, align 4
  %fpnegate.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %struct_template_circuit_fpnegate, i32 0, i32 1
  store i128 %1, i128* %fpnegate.k.write_arg_inner, align 4
  %fpnegate.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %struct_template_circuit_fpnegate, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fpnegate.p.write_arg_inner, align 8
  ret %struct_template_circuit_fpnegate* %struct_template_circuit_fpnegate
}

define [256 x [256 x i128]]* @find_Fp2_diff(i128 %0, i128 %1, [256 x [256 x i128]]* %2, [256 x [256 x i128]]* %3, [256 x i128]* %4) {
entry:
  %find_fp2_diff.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %find_fp2_diff.n.declare_arg, align 4
  %find_fp2_diff.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %find_fp2_diff.k.declare_arg, align 4
  %find_fp2_diff.a.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %2, [256 x [256 x i128]]** %find_fp2_diff.a.declare_arg, align 8
  %find_fp2_diff.b.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %3, [256 x [256 x i128]]** %find_fp2_diff.b.declare_arg, align 8
  %find_fp2_diff.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %find_fp2_diff.p.declare_arg, align 8
  %out = alloca [256 x [256 x i128]]*, align 8
  %out1 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out1, [256 x [256 x i128]]** %out, align 8
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %out, align 8
  %n = load i128, i128* %find_fp2_diff.n.declare_arg, align 4
  %k = load i128, i128* %find_fp2_diff.k.declare_arg, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_diff.a.declare_arg, align 8
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 0
  %a2 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %a2, [256 x i128]* %spice_inline_array, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_diff.b.declare_arg, align 8
  %array_getter3 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 0
  %b4 = load [256 x i128], [256 x i128]* %array_getter3, align 4
  %spice_inline_array5 = alloca [256 x i128], align 8
  store [256 x i128] %b4, [256 x i128]* %spice_inline_array5, align 4
  %p = load [256 x i128]*, [256 x i128]** %find_fp2_diff.p.declare_arg, align 8
  %call = call [256 x i128]* @long_sub_mod(i128 %n, i128 %k, [256 x i128]* %spice_inline_array, [256 x i128]* %spice_inline_array5, [256 x i128]* %p)
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out6 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 0
  %5 = bitcast [256 x i128]* %out6 to i8*
  %6 = bitcast [256 x i128]* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  %n7 = load i128, i128* %find_fp2_diff.n.declare_arg, align 4
  %k8 = load i128, i128* %find_fp2_diff.k.declare_arg, align 4
  %a9 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_diff.a.declare_arg, align 8
  %array_getter10 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a9, i128 0, i128 1
  %a11 = load [256 x i128], [256 x i128]* %array_getter10, align 4
  %spice_inline_array12 = alloca [256 x i128], align 8
  store [256 x i128] %a11, [256 x i128]* %spice_inline_array12, align 4
  %b13 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_diff.b.declare_arg, align 8
  %array_getter14 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b13, i128 0, i128 1
  %b15 = load [256 x i128], [256 x i128]* %array_getter14, align 4
  %spice_inline_array16 = alloca [256 x i128], align 8
  store [256 x i128] %b15, [256 x i128]* %spice_inline_array16, align 4
  %p17 = load [256 x i128]*, [256 x i128]** %find_fp2_diff.p.declare_arg, align 8
  %call18 = call [256 x i128]* @long_sub_mod(i128 %n7, i128 %k8, [256 x i128]* %spice_inline_array12, [256 x i128]* %spice_inline_array16, [256 x i128]* %p17)
  %ptr_getter19 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out20 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter19, i128 0, i128 1
  %7 = bitcast [256 x i128]* %out20 to i8*
  %8 = bitcast [256 x i128]* %call18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  %out21 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  ret [256 x [256 x i128]]* %out21
}

define void @fn_template_init_bits2num_strict(%struct_template_circuit_bits2num_strict* %0) {
entry:
  %Bits2Num_strict = alloca %struct_template_circuit_bits2num_strict*, align 8
  store %struct_template_circuit_bits2num_strict* %0, %struct_template_circuit_bits2num_strict** %Bits2Num_strict, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bits2num_strict, %struct_template_circuit_bits2num_strict* %0, i32 0, i32 0
  %bits2num_strict.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter, align 8
  %bits2num_strict.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bits2num_strict.in.read_input_inner, [256 x i128]** %bits2num_strict.in.declare_input, align 8
  %i = alloca i128, align 8
  %i1 = call i128 @fn_intrinsic_inline_init()
  store i128 %i1, i128* %i, align 4
  %bits2num_strict.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %bits2num_strict.out.declare_output, align 4
  %aliasCheck = alloca %struct_template_circuit_aliascheck*, align 8
  %b2n = alloca %struct_template_circuit_bits2num*, align 8
  %call = call %struct_template_circuit_aliascheck* @fn_template_build_aliascheck()
  store %struct_template_circuit_aliascheck* %call, %struct_template_circuit_aliascheck** %aliasCheck, align 8
  %call2 = call %struct_template_circuit_bits2num* @fn_template_build_bits2num(i128 254)
  store %struct_template_circuit_bits2num* %call2, %struct_template_circuit_bits2num** %b2n, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %in = load [256 x i128]*, [256 x i128]** %bits2num_strict.in.declare_input, align 8
  %i3 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %i3
  %in4 = load i128, i128* %array_getter, align 4
  %b2n5 = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %b2n, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %b2n5, i32 0, i32 1
  %bits2num.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter6, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter8 = getelementptr inbounds [256 x i128], [256 x i128]* %bits2num.in.read_input_outter, i128 0, i128 %i7
  %b2n9 = load i128, i128* %array_getter8, align 4
  call void @fn_intrinsic_add_constraint(i128 %b2n9, i128 %in4, i1* @constraint.130)
  %ptr_getter = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %b2n, align 8
  %struct_getter10 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %ptr_getter, i32 0, i32 1
  %bits2num.in.read_input_outter11 = load [256 x i128]*, [256 x i128]** %struct_getter10, align 8
  %i12 = load i128, i128* %i, align 4
  %b2n13 = getelementptr inbounds [256 x i128], [256 x i128]* %bits2num.in.read_input_outter11, i128 0, i128 %i12
  store i128 %in4, i128* %b2n13, align 4
  %in14 = load [256 x i128]*, [256 x i128]** %bits2num_strict.in.declare_input, align 8
  %i15 = load i128, i128* %i, align 4
  %array_getter16 = getelementptr inbounds [256 x i128], [256 x i128]* %in14, i128 0, i128 %i15
  %in17 = load i128, i128* %array_getter16, align 4
  %aliasCheck18 = load %struct_template_circuit_aliascheck*, %struct_template_circuit_aliascheck** %aliasCheck, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_aliascheck, %struct_template_circuit_aliascheck* %aliasCheck18, i32 0, i32 0
  %aliascheck.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter19, align 8
  %i20 = load i128, i128* %i, align 4
  %array_getter21 = getelementptr inbounds [256 x i128], [256 x i128]* %aliascheck.in.read_input_outter, i128 0, i128 %i20
  %aliasCheck22 = load i128, i128* %array_getter21, align 4
  call void @fn_intrinsic_add_constraint(i128 %aliasCheck22, i128 %in17, i1* @constraint.131)
  %ptr_getter23 = load %struct_template_circuit_aliascheck*, %struct_template_circuit_aliascheck** %aliasCheck, align 8
  %struct_getter24 = getelementptr inbounds %struct_template_circuit_aliascheck, %struct_template_circuit_aliascheck* %ptr_getter23, i32 0, i32 0
  %aliascheck.in.read_input_outter25 = load [256 x i128]*, [256 x i128]** %struct_getter24, align 8
  %i26 = load i128, i128* %i, align 4
  %aliasCheck27 = getelementptr inbounds [256 x i128], [256 x i128]* %aliascheck.in.read_input_outter25, i128 0, i128 %i26
  store i128 %in17, i128* %aliasCheck27, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i28 = load i128, i128* %i, align 4
  %add = add i128 %i28, 1
  store i128 %add, i128* %i, align 4
  %i29 = load i128, i128* %i, align 4
  %slt = icmp slt i128 %i29, 254
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %b2n30 = load %struct_template_circuit_bits2num*, %struct_template_circuit_bits2num** %b2n, align 8
  %struct_getter31 = getelementptr inbounds %struct_template_circuit_bits2num, %struct_template_circuit_bits2num* %b2n30, i32 0, i32 2
  %bits2num.out.read_output_outter = load i128, i128* %struct_getter31, align 4
  %out32 = load i128, i128* %bits2num_strict.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out32, i128 %bits2num.out.read_output_outter, i1* @constraint.132)
  %ptr_getter33 = load %struct_template_circuit_bits2num_strict*, %struct_template_circuit_bits2num_strict** %Bits2Num_strict, align 8
  %bits2num_strict.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bits2num_strict, %struct_template_circuit_bits2num_strict* %ptr_getter33, i32 0, i32 1
  store i128 %bits2num.out.read_output_outter, i128* %bits2num_strict.out.write_output_inner, align 4
  %Bits2Num_strict34 = load %struct_template_circuit_bits2num_strict*, %struct_template_circuit_bits2num_strict** %Bits2Num_strict, align 8
  %struct_getter35 = getelementptr inbounds %struct_template_circuit_bits2num_strict, %struct_template_circuit_bits2num_strict* %Bits2Num_strict34, i32 0, i32 1
  %bits2num_strict.out.read_output_inner = load i128, i128* %struct_getter35, align 4
  store i128 %bits2num_strict.out.read_output_inner, i128* %bits2num_strict.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit
  %out36 = load i128, i128* %bits2num_strict.out.declare_output, align 4
  %bits2num_strict.out.write_output_inner37 = getelementptr inbounds %struct_template_circuit_bits2num_strict, %struct_template_circuit_bits2num_strict* %0, i32 0, i32 1
  store i128 %out36, i128* %bits2num_strict.out.write_output_inner37, align 4
  ret void
}

define %struct_template_circuit_bits2num_strict* @fn_template_build_bits2num_strict() {
entry:
  %struct_template_circuit_bits2num_strict = alloca %struct_template_circuit_bits2num_strict, align 8
  ret %struct_template_circuit_bits2num_strict* %struct_template_circuit_bits2num_strict
}

define [256 x [256 x i128]]* @long_div2(i128 %0, i128 %1, i128 %2, [256 x i128]* %3, [256 x i128]* %4) {
entry:
  %long_div2.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_div2.n.declare_arg, align 4
  %long_div2.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %long_div2.k.declare_arg, align 4
  %long_div2.m.declare_arg = alloca i128, align 8
  store i128 %2, i128* %long_div2.m.declare_arg, align 4
  %long_div2.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %long_div2.a.declare_arg, align 8
  %long_div2.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %long_div2.b.declare_arg, align 8
  %subtrahend = alloca [256 x i128]*, align 8
  %subtrahend1 = alloca [256 x i128], align 8
  store [256 x i128]* %subtrahend1, [256 x i128]** %subtrahend, align 8
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %out = alloca [256 x [256 x i128]]*, align 8
  %out3 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out3, [256 x [256 x i128]]** %out, align 8
  %remainder = alloca [256 x i128]*, align 8
  %remainder4 = alloca [256 x i128], align 8
  store [256 x i128]* %remainder4, [256 x i128]** %remainder, align 8
  %mult_shift = alloca [256 x i128]*, align 8
  %mult_shift5 = alloca [256 x i128], align 8
  store [256 x i128]* %mult_shift5, [256 x i128]** %mult_shift, align 8
  %dividend = alloca [256 x i128]*, align 8
  %dividend6 = alloca [256 x i128], align 8
  store [256 x i128]* %dividend6, [256 x i128]** %dividend, align 8
  %j = alloca i128, align 8
  %j7 = call i128 @fn_intrinsic_inline_init()
  store i128 %j7, i128* %j, align 4
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %out, align 8
  %uniform_array8 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array8, [256 x i128]** %remainder, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %long_div2.a.declare_arg, align 8
  %i9 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i9
  %a10 = load i128, i128* %array_getter, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %remainder, align 8
  %i11 = load i128, i128* %i, align 4
  %remainder12 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i11
  store i128 %a10, i128* %remainder12, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i13 = load i128, i128* %i, align 4
  %add = add i128 %i13, 1
  store i128 %add, i128* %i, align 4
  %i14 = load i128, i128* %i, align 4
  %m = load i128, i128* %long_div2.m.declare_arg, align 4
  %k = load i128, i128* %long_div2.k.declare_arg, align 4
  %add15 = add i128 %m, %k
  %slt = icmp slt i128 %i14, %add15
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %uniform_array16 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array16, [256 x i128]** %dividend, align 8
  %m17 = load i128, i128* %long_div2.m.declare_arg, align 4
  store i128 %m17, i128* %i, align 4
  br label %loop.body18

loop.body18:                                      ; preds = %loop.latch117, %loop.exit
  %i19 = load i128, i128* %i, align 4
  %m20 = load i128, i128* %long_div2.m.declare_arg, align 4
  %eq = icmp eq i128 %i19, %m20
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body18
  %ptr_getter21 = load [256 x i128]*, [256 x i128]** %dividend, align 8
  %k22 = load i128, i128* %long_div2.k.declare_arg, align 4
  %dividend23 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter21, i128 0, i128 %k22
  store i128 0, i128* %dividend23, align 4
  %k24 = load i128, i128* %long_div2.k.declare_arg, align 4
  %sub = sub i128 %k24, 1
  store i128 %sub, i128* %j, align 4
  br label %loop.body25

if.false:                                         ; preds = %loop.body18
  %k40 = load i128, i128* %long_div2.k.declare_arg, align 4
  store i128 %k40, i128* %j, align 4
  br label %loop.body41

loop.body25:                                      ; preds = %loop.latch35, %if.true
  %remainder26 = load [256 x i128]*, [256 x i128]** %remainder, align 8
  %j27 = load i128, i128* %j, align 4
  %m28 = load i128, i128* %long_div2.m.declare_arg, align 4
  %add29 = add i128 %j27, %m28
  %array_getter30 = getelementptr inbounds [256 x i128], [256 x i128]* %remainder26, i128 0, i128 %add29
  %remainder31 = load i128, i128* %array_getter30, align 4
  %ptr_getter32 = load [256 x i128]*, [256 x i128]** %dividend, align 8
  %j33 = load i128, i128* %j, align 4
  %dividend34 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter32, i128 0, i128 %j33
  store i128 %remainder31, i128* %dividend34, align 4
  br label %loop.latch35

loop.latch35:                                     ; preds = %loop.body25
  %j36 = load i128, i128* %j, align 4
  %sub37 = sub i128 %j36, 1
  store i128 %sub37, i128* %j, align 4
  %j38 = load i128, i128* %j, align 4
  %sge = icmp sge i128 %j38, 0
  br i1 %sge, label %loop.body25, label %loop.exit39

loop.exit39:                                      ; preds = %loop.latch35
  br label %if.exit

loop.body41:                                      ; preds = %loop.latch51, %if.false
  %remainder42 = load [256 x i128]*, [256 x i128]** %remainder, align 8
  %j43 = load i128, i128* %j, align 4
  %i44 = load i128, i128* %i, align 4
  %add45 = add i128 %j43, %i44
  %array_getter46 = getelementptr inbounds [256 x i128], [256 x i128]* %remainder42, i128 0, i128 %add45
  %remainder47 = load i128, i128* %array_getter46, align 4
  %ptr_getter48 = load [256 x i128]*, [256 x i128]** %dividend, align 8
  %j49 = load i128, i128* %j, align 4
  %dividend50 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter48, i128 0, i128 %j49
  store i128 %remainder47, i128* %dividend50, align 4
  br label %loop.latch51

loop.latch51:                                     ; preds = %loop.body41
  %j52 = load i128, i128* %j, align 4
  %sub53 = sub i128 %j52, 1
  store i128 %sub53, i128* %j, align 4
  %j54 = load i128, i128* %j, align 4
  %sge55 = icmp sge i128 %j54, 0
  br i1 %sge55, label %loop.body41, label %loop.exit56

loop.exit56:                                      ; preds = %loop.latch51
  br label %if.exit

if.exit:                                          ; preds = %loop.exit56, %loop.exit39
  %n = load i128, i128* %long_div2.n.declare_arg, align 4
  %k57 = load i128, i128* %long_div2.k.declare_arg, align 4
  %dividend58 = load [256 x i128]*, [256 x i128]** %dividend, align 8
  %b = load [256 x i128]*, [256 x i128]** %long_div2.b.declare_arg, align 8
  %call = call i128 @short_div(i128 %n, i128 %k57, [256 x i128]* %dividend58, [256 x i128]* %b)
  %ptr_getter59 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %i60 = load i128, i128* %i, align 4
  %out61 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter59, i128 0, i128 0, i128 %i60
  store i128 %call, i128* %out61, align 4
  %n62 = load i128, i128* %long_div2.n.declare_arg, align 4
  %k63 = load i128, i128* %long_div2.k.declare_arg, align 4
  %out64 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %i65 = load i128, i128* %i, align 4
  %array_getter66 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out64, i128 0, i128 0, i128 %i65
  %out67 = load i128, i128* %array_getter66, align 4
  %b68 = load [256 x i128]*, [256 x i128]** %long_div2.b.declare_arg, align 8
  %call69 = call [256 x i128]* @long_scalar_mult(i128 %n62, i128 %k63, i128 %out67, [256 x i128]* %b68)
  store [256 x i128]* %call69, [256 x i128]** %mult_shift, align 8
  %uniform_array70 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array70, [256 x i128]** %subtrahend, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body71

loop.body71:                                      ; preds = %loop.latch75, %if.exit
  %ptr_getter72 = load [256 x i128]*, [256 x i128]** %subtrahend, align 8
  %j73 = load i128, i128* %j, align 4
  %subtrahend74 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter72, i128 0, i128 %j73
  store i128 0, i128* %subtrahend74, align 4
  br label %loop.latch75

loop.latch75:                                     ; preds = %loop.body71
  %j76 = load i128, i128* %j, align 4
  %add77 = add i128 %j76, 1
  store i128 %add77, i128* %j, align 4
  %j78 = load i128, i128* %j, align 4
  %m79 = load i128, i128* %long_div2.m.declare_arg, align 4
  %k80 = load i128, i128* %long_div2.k.declare_arg, align 4
  %add81 = add i128 %m79, %k80
  %slt82 = icmp slt i128 %j78, %add81
  br i1 %slt82, label %loop.body71, label %loop.exit83

loop.exit83:                                      ; preds = %loop.latch75
  store i128 0, i128* %j, align 4
  br label %loop.body84

loop.body84:                                      ; preds = %loop.latch104, %loop.exit83
  %i87 = load i128, i128* %i, align 4
  %j88 = load i128, i128* %j, align 4
  %add89 = add i128 %i87, %j88
  %m90 = load i128, i128* %long_div2.m.declare_arg, align 4
  %k91 = load i128, i128* %long_div2.k.declare_arg, align 4
  %add92 = add i128 %m90, %k91
  %slt93 = icmp slt i128 %add89, %add92
  br i1 %slt93, label %if.true85, label %if.false86

if.true85:                                        ; preds = %loop.body84
  %mult_shift94 = load [256 x i128]*, [256 x i128]** %mult_shift, align 8
  %j95 = load i128, i128* %j, align 4
  %array_getter96 = getelementptr inbounds [256 x i128], [256 x i128]* %mult_shift94, i128 0, i128 %j95
  %mult_shift97 = load i128, i128* %array_getter96, align 4
  %ptr_getter98 = load [256 x i128]*, [256 x i128]** %subtrahend, align 8
  %i99 = load i128, i128* %i, align 4
  %j100 = load i128, i128* %j, align 4
  %add101 = add i128 %i99, %j100
  %subtrahend102 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter98, i128 0, i128 %add101
  store i128 %mult_shift97, i128* %subtrahend102, align 4
  br label %if.exit103

if.false86:                                       ; preds = %loop.body84
  br label %if.exit103

if.exit103:                                       ; preds = %if.false86, %if.true85
  br label %loop.latch104

loop.latch104:                                    ; preds = %if.exit103
  %j105 = load i128, i128* %j, align 4
  %add106 = add i128 %j105, 1
  store i128 %add106, i128* %j, align 4
  %j107 = load i128, i128* %j, align 4
  %k108 = load i128, i128* %long_div2.k.declare_arg, align 4
  %sle = icmp sle i128 %j107, %k108
  br i1 %sle, label %loop.body84, label %loop.exit109

loop.exit109:                                     ; preds = %loop.latch104
  %n110 = load i128, i128* %long_div2.n.declare_arg, align 4
  %m111 = load i128, i128* %long_div2.m.declare_arg, align 4
  %k112 = load i128, i128* %long_div2.k.declare_arg, align 4
  %add113 = add i128 %m111, %k112
  %remainder114 = load [256 x i128]*, [256 x i128]** %remainder, align 8
  %subtrahend115 = load [256 x i128]*, [256 x i128]** %subtrahend, align 8
  %call116 = call [256 x i128]* @long_sub(i128 %n110, i128 %add113, [256 x i128]* %remainder114, [256 x i128]* %subtrahend115)
  store [256 x i128]* %call116, [256 x i128]** %remainder, align 8
  br label %loop.latch117

loop.latch117:                                    ; preds = %loop.exit109
  %i118 = load i128, i128* %i, align 4
  %sub119 = sub i128 %i118, 1
  store i128 %sub119, i128* %i, align 4
  %i120 = load i128, i128* %i, align 4
  %sge121 = icmp sge i128 %i120, 0
  br i1 %sge121, label %loop.body18, label %loop.exit122

loop.exit122:                                     ; preds = %loop.latch117
  store i128 0, i128* %i, align 4
  br label %loop.body123

loop.body123:                                     ; preds = %loop.latch131, %loop.exit122
  %remainder124 = load [256 x i128]*, [256 x i128]** %remainder, align 8
  %i125 = load i128, i128* %i, align 4
  %array_getter126 = getelementptr inbounds [256 x i128], [256 x i128]* %remainder124, i128 0, i128 %i125
  %remainder127 = load i128, i128* %array_getter126, align 4
  %ptr_getter128 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %i129 = load i128, i128* %i, align 4
  %out130 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter128, i128 0, i128 1, i128 %i129
  store i128 %remainder127, i128* %out130, align 4
  br label %loop.latch131

loop.latch131:                                    ; preds = %loop.body123
  %i132 = load i128, i128* %i, align 4
  %add133 = add i128 %i132, 1
  store i128 %add133, i128* %i, align 4
  %i134 = load i128, i128* %i, align 4
  %k135 = load i128, i128* %long_div2.k.declare_arg, align 4
  %slt136 = icmp slt i128 %i134, %k135
  br i1 %slt136, label %loop.body123, label %loop.exit137

loop.exit137:                                     ; preds = %loop.latch131
  %ptr_getter138 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %k139 = load i128, i128* %long_div2.k.declare_arg, align 4
  %out140 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter138, i128 0, i128 1, i128 %k139
  store i128 0, i128* %out140, align 4
  %out141 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  ret [256 x [256 x i128]]* %out141
}

define void @fn_template_init_fp2frobeniusmap(%struct_template_circuit_fp2frobeniusmap* %0) {
entry:
  %Fp2FrobeniusMap = alloca %struct_template_circuit_fp2frobeniusmap*, align 8
  store %struct_template_circuit_fp2frobeniusmap* %0, %struct_template_circuit_fp2frobeniusmap** %Fp2FrobeniusMap, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2frobeniusmap, %struct_template_circuit_fp2frobeniusmap* %0, i32 0, i32 0
  %fp2frobeniusmap.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2frobeniusmap.n.declare_arg = alloca i128, align 8
  store i128 %fp2frobeniusmap.n.read_arg_inner, i128* %fp2frobeniusmap.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2frobeniusmap, %struct_template_circuit_fp2frobeniusmap* %0, i32 0, i32 1
  %fp2frobeniusmap.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2frobeniusmap.k.declare_arg = alloca i128, align 8
  store i128 %fp2frobeniusmap.k.read_arg_inner, i128* %fp2frobeniusmap.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2frobeniusmap, %struct_template_circuit_fp2frobeniusmap* %0, i32 0, i32 2
  %fp2frobeniusmap.power.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %fp2frobeniusmap.power.declare_arg = alloca i128, align 8
  store i128 %fp2frobeniusmap.power.read_arg_inner, i128* %fp2frobeniusmap.power.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2frobeniusmap, %struct_template_circuit_fp2frobeniusmap* %0, i32 0, i32 3
  %fp2frobeniusmap.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %fp2frobeniusmap.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2frobeniusmap.p.read_arg_inner, [256 x i128]** %fp2frobeniusmap.p.declare_arg, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_fp2frobeniusmap, %struct_template_circuit_fp2frobeniusmap* %0, i32 0, i32 4
  %fp2frobeniusmap.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %fp2frobeniusmap.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2frobeniusmap.in.read_input_inner, [256 x [256 x i128]]** %fp2frobeniusmap.in.declare_input, align 8
  %fp2frobeniusmap.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %fp2frobeniusmap.out.declare_output, align 8
  %neg1 = alloca %struct_template_circuit_fpnegate*, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %pow = alloca i128, align 8
  %pow6 = call i128 @fn_intrinsic_inline_init()
  store i128 %pow6, i128* %pow, align 4
  %power = load i128, i128* %fp2frobeniusmap.power.declare_arg, align 4
  %mod = srem i128 %power, 2
  store i128 %mod, i128* %pow, align 4
  %n = load i128, i128* %fp2frobeniusmap.n.declare_arg, align 4
  %k = load i128, i128* %fp2frobeniusmap.k.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2frobeniusmap.p.declare_arg, align 8
  %call = call %struct_template_circuit_fpnegate* @fn_template_build_fpnegate(i128 %n, i128 %k, [256 x i128]* %p)
  store %struct_template_circuit_fpnegate* %call, %struct_template_circuit_fpnegate** %neg1, align 8
  %pow7 = load i128, i128* %pow, align 4
  %eq = icmp eq i128 %pow7, 0
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %entry
  store i128 0, i128* %i, align 4
  br label %loop.body

if.false:                                         ; preds = %entry
  store i128 0, i128* %i, align 4
  br label %loop.body30

loop.body:                                        ; preds = %loop.latch, %if.true
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.in.declare_input, align 8
  %i8 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 0, i128 %i8
  %in9 = load i128, i128* %array_getter, align 4
  %out10 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.out.declare_output, align 8
  %i11 = load i128, i128* %i, align 4
  %array_getter12 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out10, i128 0, i128 0, i128 %i11
  %out13 = load i128, i128* %array_getter12, align 4
  call void @fn_intrinsic_add_constraint(i128 %out13, i128 %in9, i1* @constraint.133)
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.out.declare_output, align 8
  %i14 = load i128, i128* %i, align 4
  %out15 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 0, i128 %i14
  store i128 %in9, i128* %out15, align 4
  %in16 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.in.declare_input, align 8
  %i17 = load i128, i128* %i, align 4
  %array_getter18 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in16, i128 0, i128 1, i128 %i17
  %in19 = load i128, i128* %array_getter18, align 4
  %out20 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.out.declare_output, align 8
  %i21 = load i128, i128* %i, align 4
  %array_getter22 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out20, i128 0, i128 1, i128 %i21
  %out23 = load i128, i128* %array_getter22, align 4
  call void @fn_intrinsic_add_constraint(i128 %out23, i128 %in19, i1* @constraint.134)
  %ptr_getter24 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.out.declare_output, align 8
  %i25 = load i128, i128* %i, align 4
  %out26 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter24, i128 0, i128 1, i128 %i25
  store i128 %in19, i128* %out26, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i27 = load i128, i128* %i, align 4
  %add = add i128 %i27, 1
  store i128 %add, i128* %i, align 4
  %i28 = load i128, i128* %i, align 4
  %k29 = load i128, i128* %fp2frobeniusmap.k.declare_arg, align 4
  %slt = icmp slt i128 %i28, %k29
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %if.exit

loop.body30:                                      ; preds = %loop.latch45, %if.false
  %in31 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.in.declare_input, align 8
  %i32 = load i128, i128* %i, align 4
  %array_getter33 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in31, i128 0, i128 1, i128 %i32
  %in34 = load i128, i128* %array_getter33, align 4
  %neg135 = load %struct_template_circuit_fpnegate*, %struct_template_circuit_fpnegate** %neg1, align 8
  %struct_getter36 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %neg135, i32 0, i32 3
  %fpnegate.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter36, align 8
  %i37 = load i128, i128* %i, align 4
  %array_getter38 = getelementptr inbounds [256 x i128], [256 x i128]* %fpnegate.in.read_input_outter, i128 0, i128 %i37
  %neg139 = load i128, i128* %array_getter38, align 4
  call void @fn_intrinsic_add_constraint(i128 %neg139, i128 %in34, i1* @constraint.135)
  %ptr_getter40 = load %struct_template_circuit_fpnegate*, %struct_template_circuit_fpnegate** %neg1, align 8
  %struct_getter41 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %ptr_getter40, i32 0, i32 3
  %fpnegate.in.read_input_outter42 = load [256 x i128]*, [256 x i128]** %struct_getter41, align 8
  %i43 = load i128, i128* %i, align 4
  %neg144 = getelementptr inbounds [256 x i128], [256 x i128]* %fpnegate.in.read_input_outter42, i128 0, i128 %i43
  store i128 %in34, i128* %neg144, align 4
  br label %loop.latch45

loop.latch45:                                     ; preds = %loop.body30
  %i46 = load i128, i128* %i, align 4
  %add47 = add i128 %i46, 1
  store i128 %add47, i128* %i, align 4
  %i48 = load i128, i128* %i, align 4
  %k49 = load i128, i128* %fp2frobeniusmap.k.declare_arg, align 4
  %slt50 = icmp slt i128 %i48, %k49
  br i1 %slt50, label %loop.body30, label %loop.exit51

loop.exit51:                                      ; preds = %loop.latch45
  store i128 0, i128* %i, align 4
  br label %loop.body52

loop.body52:                                      ; preds = %loop.latch76, %loop.exit51
  %in53 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.in.declare_input, align 8
  %i54 = load i128, i128* %i, align 4
  %array_getter55 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in53, i128 0, i128 0, i128 %i54
  %in56 = load i128, i128* %array_getter55, align 4
  %out57 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.out.declare_output, align 8
  %i58 = load i128, i128* %i, align 4
  %array_getter59 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out57, i128 0, i128 0, i128 %i58
  %out60 = load i128, i128* %array_getter59, align 4
  call void @fn_intrinsic_add_constraint(i128 %out60, i128 %in56, i1* @constraint.136)
  %ptr_getter61 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.out.declare_output, align 8
  %i62 = load i128, i128* %i, align 4
  %out63 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter61, i128 0, i128 0, i128 %i62
  store i128 %in56, i128* %out63, align 4
  %neg164 = load %struct_template_circuit_fpnegate*, %struct_template_circuit_fpnegate** %neg1, align 8
  %struct_getter65 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %neg164, i32 0, i32 4
  %fpnegate.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter65, align 8
  %i66 = load i128, i128* %i, align 4
  %array_getter67 = getelementptr inbounds [256 x i128], [256 x i128]* %fpnegate.out.read_output_outter, i128 0, i128 %i66
  %neg168 = load i128, i128* %array_getter67, align 4
  %out69 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.out.declare_output, align 8
  %i70 = load i128, i128* %i, align 4
  %array_getter71 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out69, i128 0, i128 1, i128 %i70
  %out72 = load i128, i128* %array_getter71, align 4
  call void @fn_intrinsic_add_constraint(i128 %out72, i128 %neg168, i1* @constraint.137)
  %ptr_getter73 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.out.declare_output, align 8
  %i74 = load i128, i128* %i, align 4
  %out75 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter73, i128 0, i128 1, i128 %i74
  store i128 %neg168, i128* %out75, align 4
  br label %loop.latch76

loop.latch76:                                     ; preds = %loop.body52
  %i77 = load i128, i128* %i, align 4
  %add78 = add i128 %i77, 1
  store i128 %add78, i128* %i, align 4
  %i79 = load i128, i128* %i, align 4
  %k80 = load i128, i128* %fp2frobeniusmap.k.declare_arg, align 4
  %slt81 = icmp slt i128 %i79, %k80
  br i1 %slt81, label %loop.body52, label %loop.exit82

loop.exit82:                                      ; preds = %loop.latch76
  br label %if.exit

if.exit:                                          ; preds = %loop.exit82, %loop.exit
  br label %exit

exit:                                             ; preds = %if.exit
  %out83 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2frobeniusmap.out.declare_output, align 8
  %fp2frobeniusmap.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2frobeniusmap, %struct_template_circuit_fp2frobeniusmap* %0, i32 0, i32 5
  store [256 x [256 x i128]]* %out83, [256 x [256 x i128]]** %fp2frobeniusmap.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fp2frobeniusmap* @fn_template_build_fp2frobeniusmap(i128 %0, i128 %1, i128 %2, [256 x i128]* %3) {
entry:
  %struct_template_circuit_fp2frobeniusmap = alloca %struct_template_circuit_fp2frobeniusmap, align 8
  %fp2frobeniusmap.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2frobeniusmap, %struct_template_circuit_fp2frobeniusmap* %struct_template_circuit_fp2frobeniusmap, i32 0, i32 0
  store i128 %0, i128* %fp2frobeniusmap.n.write_arg_inner, align 4
  %fp2frobeniusmap.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2frobeniusmap, %struct_template_circuit_fp2frobeniusmap* %struct_template_circuit_fp2frobeniusmap, i32 0, i32 1
  store i128 %1, i128* %fp2frobeniusmap.k.write_arg_inner, align 4
  %fp2frobeniusmap.power.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2frobeniusmap, %struct_template_circuit_fp2frobeniusmap* %struct_template_circuit_fp2frobeniusmap, i32 0, i32 2
  store i128 %2, i128* %fp2frobeniusmap.power.write_arg_inner, align 4
  %fp2frobeniusmap.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2frobeniusmap, %struct_template_circuit_fp2frobeniusmap* %struct_template_circuit_fp2frobeniusmap, i32 0, i32 3
  store [256 x i128]* %3, [256 x i128]** %fp2frobeniusmap.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2frobeniusmap* %struct_template_circuit_fp2frobeniusmap
}

define void @fn_template_init_biglessthan(%struct_template_circuit_biglessthan* %0) {
entry:
  %BigLessThan = alloca %struct_template_circuit_biglessthan*, align 8
  store %struct_template_circuit_biglessthan* %0, %struct_template_circuit_biglessthan** %BigLessThan, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %0, i32 0, i32 0
  %biglessthan.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %biglessthan.n.declare_arg = alloca i128, align 8
  store i128 %biglessthan.n.read_arg_inner, i128* %biglessthan.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %0, i32 0, i32 1
  %biglessthan.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %biglessthan.k.declare_arg = alloca i128, align 8
  store i128 %biglessthan.k.read_arg_inner, i128* %biglessthan.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %0, i32 0, i32 2
  %biglessthan.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %biglessthan.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %biglessthan.a.read_input_inner, [256 x i128]** %biglessthan.a.declare_input, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %0, i32 0, i32 3
  %biglessthan.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %biglessthan.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %biglessthan.b.read_input_inner, [256 x i128]** %biglessthan.b.declare_input, align 8
  %biglessthan.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %biglessthan.out.declare_output, align 4
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %eq_ands = alloca [256 x %struct_template_circuit_and*]*, align 8
  %eq_ands5 = alloca [256 x %struct_template_circuit_and*], align 8
  store [256 x %struct_template_circuit_and*]* %eq_ands5, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %lt = alloca [256 x %struct_template_circuit_lessthan*]*, align 8
  %lt6 = alloca [256 x %struct_template_circuit_lessthan*], align 8
  store [256 x %struct_template_circuit_lessthan*]* %lt6, [256 x %struct_template_circuit_lessthan*]** %lt, align 8
  %eq = alloca [256 x %struct_template_circuit_isequal*]*, align 8
  %eq7 = alloca [256 x %struct_template_circuit_isequal*], align 8
  store [256 x %struct_template_circuit_isequal*]* %eq7, [256 x %struct_template_circuit_isequal*]** %eq, align 8
  %ors = alloca [256 x %struct_template_circuit_or*]*, align 8
  %ors8 = alloca [256 x %struct_template_circuit_or*], align 8
  store [256 x %struct_template_circuit_or*]* %ors8, [256 x %struct_template_circuit_or*]** %ors, align 8
  %ands = alloca [256 x %struct_template_circuit_and*]*, align 8
  %ands9 = alloca [256 x %struct_template_circuit_and*], align 8
  store [256 x %struct_template_circuit_and*]* %ands9, [256 x %struct_template_circuit_and*]** %ands, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %n = load i128, i128* %biglessthan.n.declare_arg, align 4
  %call = call %struct_template_circuit_lessthan* @fn_template_build_lessthan(i128 %n)
  %ptr_getter = load [256 x %struct_template_circuit_lessthan*]*, [256 x %struct_template_circuit_lessthan*]** %lt, align 8
  %i10 = load i128, i128* %i, align 4
  %lt11 = getelementptr inbounds [256 x %struct_template_circuit_lessthan*], [256 x %struct_template_circuit_lessthan*]* %ptr_getter, i128 0, i128 %i10
  store %struct_template_circuit_lessthan* %call, %struct_template_circuit_lessthan** %lt11, align 8
  %a = load [256 x i128]*, [256 x i128]** %biglessthan.a.declare_input, align 8
  %i12 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i12
  %a13 = load i128, i128* %array_getter, align 4
  %lt14 = load [256 x %struct_template_circuit_lessthan*]*, [256 x %struct_template_circuit_lessthan*]** %lt, align 8
  %i15 = load i128, i128* %i, align 4
  %array_getter16 = getelementptr inbounds [256 x %struct_template_circuit_lessthan*], [256 x %struct_template_circuit_lessthan*]* %lt14, i128 0, i128 %i15
  %lt17 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %array_getter16, align 8
  %struct_getter18 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt17, i32 0, i32 1
  %lessthan.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter18, align 8
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter, i128 0, i128 0
  %lt20 = load i128, i128* %array_getter19, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt20, i128 %a13, i1* @constraint.138)
  %ptr_getter21 = load [256 x %struct_template_circuit_lessthan*]*, [256 x %struct_template_circuit_lessthan*]** %lt, align 8
  %i22 = load i128, i128* %i, align 4
  %array_getter23 = getelementptr inbounds [256 x %struct_template_circuit_lessthan*], [256 x %struct_template_circuit_lessthan*]* %ptr_getter21, i128 0, i128 %i22
  %lt24 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %array_getter23, align 8
  %struct_getter25 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt24, i32 0, i32 1
  %lessthan.in.read_input_outter26 = load [256 x i128]*, [256 x i128]** %struct_getter25, align 8
  %lt27 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter26, i128 0, i128 0
  store i128 %a13, i128* %lt27, align 4
  %b = load [256 x i128]*, [256 x i128]** %biglessthan.b.declare_input, align 8
  %i28 = load i128, i128* %i, align 4
  %array_getter29 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i28
  %b30 = load i128, i128* %array_getter29, align 4
  %lt31 = load [256 x %struct_template_circuit_lessthan*]*, [256 x %struct_template_circuit_lessthan*]** %lt, align 8
  %i32 = load i128, i128* %i, align 4
  %array_getter33 = getelementptr inbounds [256 x %struct_template_circuit_lessthan*], [256 x %struct_template_circuit_lessthan*]* %lt31, i128 0, i128 %i32
  %lt34 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %array_getter33, align 8
  %struct_getter35 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt34, i32 0, i32 1
  %lessthan.in.read_input_outter36 = load [256 x i128]*, [256 x i128]** %struct_getter35, align 8
  %array_getter37 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter36, i128 0, i128 1
  %lt38 = load i128, i128* %array_getter37, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt38, i128 %b30, i1* @constraint.139)
  %ptr_getter39 = load [256 x %struct_template_circuit_lessthan*]*, [256 x %struct_template_circuit_lessthan*]** %lt, align 8
  %i40 = load i128, i128* %i, align 4
  %array_getter41 = getelementptr inbounds [256 x %struct_template_circuit_lessthan*], [256 x %struct_template_circuit_lessthan*]* %ptr_getter39, i128 0, i128 %i40
  %lt42 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %array_getter41, align 8
  %struct_getter43 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt42, i32 0, i32 1
  %lessthan.in.read_input_outter44 = load [256 x i128]*, [256 x i128]** %struct_getter43, align 8
  %lt45 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter44, i128 0, i128 1
  store i128 %b30, i128* %lt45, align 4
  %call46 = call %struct_template_circuit_isequal* @fn_template_build_isequal()
  %ptr_getter47 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %eq, align 8
  %i48 = load i128, i128* %i, align 4
  %eq49 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter47, i128 0, i128 %i48
  store %struct_template_circuit_isequal* %call46, %struct_template_circuit_isequal** %eq49, align 8
  %a50 = load [256 x i128]*, [256 x i128]** %biglessthan.a.declare_input, align 8
  %i51 = load i128, i128* %i, align 4
  %array_getter52 = getelementptr inbounds [256 x i128], [256 x i128]* %a50, i128 0, i128 %i51
  %a53 = load i128, i128* %array_getter52, align 4
  %eq54 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %eq, align 8
  %i55 = load i128, i128* %i, align 4
  %array_getter56 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %eq54, i128 0, i128 %i55
  %eq57 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter56, align 8
  %struct_getter58 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %eq57, i32 0, i32 0
  %isequal.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter58, align 8
  %array_getter59 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter, i128 0, i128 0
  %eq60 = load i128, i128* %array_getter59, align 4
  call void @fn_intrinsic_add_constraint(i128 %eq60, i128 %a53, i1* @constraint.140)
  %ptr_getter61 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %eq, align 8
  %i62 = load i128, i128* %i, align 4
  %array_getter63 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter61, i128 0, i128 %i62
  %eq64 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter63, align 8
  %struct_getter65 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %eq64, i32 0, i32 0
  %isequal.in.read_input_outter66 = load [256 x i128]*, [256 x i128]** %struct_getter65, align 8
  %eq67 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter66, i128 0, i128 0
  store i128 %a53, i128* %eq67, align 4
  %b68 = load [256 x i128]*, [256 x i128]** %biglessthan.b.declare_input, align 8
  %i69 = load i128, i128* %i, align 4
  %array_getter70 = getelementptr inbounds [256 x i128], [256 x i128]* %b68, i128 0, i128 %i69
  %b71 = load i128, i128* %array_getter70, align 4
  %eq72 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %eq, align 8
  %i73 = load i128, i128* %i, align 4
  %array_getter74 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %eq72, i128 0, i128 %i73
  %eq75 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter74, align 8
  %struct_getter76 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %eq75, i32 0, i32 0
  %isequal.in.read_input_outter77 = load [256 x i128]*, [256 x i128]** %struct_getter76, align 8
  %array_getter78 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter77, i128 0, i128 1
  %eq79 = load i128, i128* %array_getter78, align 4
  call void @fn_intrinsic_add_constraint(i128 %eq79, i128 %b71, i1* @constraint.141)
  %ptr_getter80 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %eq, align 8
  %i81 = load i128, i128* %i, align 4
  %array_getter82 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter80, i128 0, i128 %i81
  %eq83 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter82, align 8
  %struct_getter84 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %eq83, i32 0, i32 0
  %isequal.in.read_input_outter85 = load [256 x i128]*, [256 x i128]** %struct_getter84, align 8
  %eq86 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter85, i128 0, i128 1
  store i128 %b71, i128* %eq86, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i87 = load i128, i128* %i, align 4
  %add = add i128 %i87, 1
  store i128 %add, i128* %i, align 4
  %i88 = load i128, i128* %i, align 4
  %k = load i128, i128* %biglessthan.k.declare_arg, align 4
  %slt = icmp slt i128 %i88, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %k89 = load i128, i128* %biglessthan.k.declare_arg, align 4
  %sub = sub i128 %k89, 2
  store i128 %sub, i128* %i, align 4
  br label %loop.body90

loop.body90:                                      ; preds = %loop.latch307, %loop.exit
  %call91 = call %struct_template_circuit_and* @fn_template_build_and()
  %ptr_getter92 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i93 = load i128, i128* %i, align 4
  %ands94 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ptr_getter92, i128 0, i128 %i93
  store %struct_template_circuit_and* %call91, %struct_template_circuit_and** %ands94, align 8
  %call95 = call %struct_template_circuit_and* @fn_template_build_and()
  %ptr_getter96 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i97 = load i128, i128* %i, align 4
  %eq_ands98 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ptr_getter96, i128 0, i128 %i97
  store %struct_template_circuit_and* %call95, %struct_template_circuit_and** %eq_ands98, align 8
  %call99 = call %struct_template_circuit_or* @fn_template_build_or()
  %ptr_getter100 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %i101 = load i128, i128* %i, align 4
  %ors102 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ptr_getter100, i128 0, i128 %i101
  store %struct_template_circuit_or* %call99, %struct_template_circuit_or** %ors102, align 8
  %i103 = load i128, i128* %i, align 4
  %k104 = load i128, i128* %biglessthan.k.declare_arg, align 4
  %sub105 = sub i128 %k104, 2
  %eq106 = icmp eq i128 %i103, %sub105
  br i1 %eq106, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body90
  %eq107 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %eq, align 8
  %k108 = load i128, i128* %biglessthan.k.declare_arg, align 4
  %sub109 = sub i128 %k108, 1
  %array_getter110 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %eq107, i128 0, i128 %sub109
  %eq111 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter110, align 8
  %struct_getter112 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %eq111, i32 0, i32 1
  %isequal.out.read_output_outter = load i128, i128* %struct_getter112, align 4
  %ands113 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i114 = load i128, i128* %i, align 4
  %array_getter115 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ands113, i128 0, i128 %i114
  %ands116 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter115, align 8
  %struct_getter117 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ands116, i32 0, i32 0
  %and.a.read_input_outter = load i128, i128* %struct_getter117, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.a.read_input_outter, i128 %isequal.out.read_output_outter, i1* @constraint.142)
  %ptr_getter118 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i119 = load i128, i128* %i, align 4
  %array_getter120 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ptr_getter118, i128 0, i128 %i119
  %ands121 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter120, align 8
  %and.a.write_input_outter = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ands121, i32 0, i32 0
  store i128 %isequal.out.read_output_outter, i128* %and.a.write_input_outter, align 4
  %lt122 = load [256 x %struct_template_circuit_lessthan*]*, [256 x %struct_template_circuit_lessthan*]** %lt, align 8
  %k123 = load i128, i128* %biglessthan.k.declare_arg, align 4
  %sub124 = sub i128 %k123, 2
  %array_getter125 = getelementptr inbounds [256 x %struct_template_circuit_lessthan*], [256 x %struct_template_circuit_lessthan*]* %lt122, i128 0, i128 %sub124
  %lt126 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %array_getter125, align 8
  %struct_getter127 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt126, i32 0, i32 2
  %lessthan.out.read_output_outter = load i128, i128* %struct_getter127, align 4
  %ands128 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i129 = load i128, i128* %i, align 4
  %array_getter130 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ands128, i128 0, i128 %i129
  %ands131 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter130, align 8
  %struct_getter132 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ands131, i32 0, i32 1
  %and.b.read_input_outter = load i128, i128* %struct_getter132, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.b.read_input_outter, i128 %lessthan.out.read_output_outter, i1* @constraint.143)
  %ptr_getter133 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i134 = load i128, i128* %i, align 4
  %array_getter135 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ptr_getter133, i128 0, i128 %i134
  %ands136 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter135, align 8
  %and.b.write_input_outter = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ands136, i32 0, i32 1
  store i128 %lessthan.out.read_output_outter, i128* %and.b.write_input_outter, align 4
  %eq137 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %eq, align 8
  %k138 = load i128, i128* %biglessthan.k.declare_arg, align 4
  %sub139 = sub i128 %k138, 1
  %array_getter140 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %eq137, i128 0, i128 %sub139
  %eq141 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter140, align 8
  %struct_getter142 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %eq141, i32 0, i32 1
  %isequal.out.read_output_outter143 = load i128, i128* %struct_getter142, align 4
  %eq_ands144 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i145 = load i128, i128* %i, align 4
  %array_getter146 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %eq_ands144, i128 0, i128 %i145
  %eq_ands147 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter146, align 8
  %struct_getter148 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %eq_ands147, i32 0, i32 0
  %and.a.read_input_outter149 = load i128, i128* %struct_getter148, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.a.read_input_outter149, i128 %isequal.out.read_output_outter143, i1* @constraint.144)
  %ptr_getter150 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i151 = load i128, i128* %i, align 4
  %array_getter152 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ptr_getter150, i128 0, i128 %i151
  %eq_ands153 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter152, align 8
  %and.a.write_input_outter154 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %eq_ands153, i32 0, i32 0
  store i128 %isequal.out.read_output_outter143, i128* %and.a.write_input_outter154, align 4
  %eq155 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %eq, align 8
  %k156 = load i128, i128* %biglessthan.k.declare_arg, align 4
  %sub157 = sub i128 %k156, 2
  %array_getter158 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %eq155, i128 0, i128 %sub157
  %eq159 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter158, align 8
  %struct_getter160 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %eq159, i32 0, i32 1
  %isequal.out.read_output_outter161 = load i128, i128* %struct_getter160, align 4
  %eq_ands162 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i163 = load i128, i128* %i, align 4
  %array_getter164 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %eq_ands162, i128 0, i128 %i163
  %eq_ands165 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter164, align 8
  %struct_getter166 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %eq_ands165, i32 0, i32 1
  %and.b.read_input_outter167 = load i128, i128* %struct_getter166, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.b.read_input_outter167, i128 %isequal.out.read_output_outter161, i1* @constraint.145)
  %ptr_getter168 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i169 = load i128, i128* %i, align 4
  %array_getter170 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ptr_getter168, i128 0, i128 %i169
  %eq_ands171 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter170, align 8
  %and.b.write_input_outter172 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %eq_ands171, i32 0, i32 1
  store i128 %isequal.out.read_output_outter161, i128* %and.b.write_input_outter172, align 4
  %lt173 = load [256 x %struct_template_circuit_lessthan*]*, [256 x %struct_template_circuit_lessthan*]** %lt, align 8
  %k174 = load i128, i128* %biglessthan.k.declare_arg, align 4
  %sub175 = sub i128 %k174, 1
  %array_getter176 = getelementptr inbounds [256 x %struct_template_circuit_lessthan*], [256 x %struct_template_circuit_lessthan*]* %lt173, i128 0, i128 %sub175
  %lt177 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %array_getter176, align 8
  %struct_getter178 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt177, i32 0, i32 2
  %lessthan.out.read_output_outter179 = load i128, i128* %struct_getter178, align 4
  %ors180 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %i181 = load i128, i128* %i, align 4
  %array_getter182 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ors180, i128 0, i128 %i181
  %ors183 = load %struct_template_circuit_or*, %struct_template_circuit_or** %array_getter182, align 8
  %struct_getter184 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ors183, i32 0, i32 0
  %or.a.read_input_outter = load i128, i128* %struct_getter184, align 4
  call void @fn_intrinsic_add_constraint(i128 %or.a.read_input_outter, i128 %lessthan.out.read_output_outter179, i1* @constraint.146)
  %ptr_getter185 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %i186 = load i128, i128* %i, align 4
  %array_getter187 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ptr_getter185, i128 0, i128 %i186
  %ors188 = load %struct_template_circuit_or*, %struct_template_circuit_or** %array_getter187, align 8
  %or.a.write_input_outter = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ors188, i32 0, i32 0
  store i128 %lessthan.out.read_output_outter179, i128* %or.a.write_input_outter, align 4
  %ands189 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i190 = load i128, i128* %i, align 4
  %array_getter191 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ands189, i128 0, i128 %i190
  %ands192 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter191, align 8
  %struct_getter193 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ands192, i32 0, i32 2
  %and.out.read_output_outter = load i128, i128* %struct_getter193, align 4
  %ors194 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %i195 = load i128, i128* %i, align 4
  %array_getter196 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ors194, i128 0, i128 %i195
  %ors197 = load %struct_template_circuit_or*, %struct_template_circuit_or** %array_getter196, align 8
  %struct_getter198 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ors197, i32 0, i32 1
  %or.b.read_input_outter = load i128, i128* %struct_getter198, align 4
  call void @fn_intrinsic_add_constraint(i128 %or.b.read_input_outter, i128 %and.out.read_output_outter, i1* @constraint.147)
  %ptr_getter199 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %i200 = load i128, i128* %i, align 4
  %array_getter201 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ptr_getter199, i128 0, i128 %i200
  %ors202 = load %struct_template_circuit_or*, %struct_template_circuit_or** %array_getter201, align 8
  %or.b.write_input_outter = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ors202, i32 0, i32 1
  store i128 %and.out.read_output_outter, i128* %or.b.write_input_outter, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body90
  %eq_ands203 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i204 = load i128, i128* %i, align 4
  %add205 = add i128 %i204, 1
  %array_getter206 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %eq_ands203, i128 0, i128 %add205
  %eq_ands207 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter206, align 8
  %struct_getter208 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %eq_ands207, i32 0, i32 2
  %and.out.read_output_outter209 = load i128, i128* %struct_getter208, align 4
  %ands210 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i211 = load i128, i128* %i, align 4
  %array_getter212 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ands210, i128 0, i128 %i211
  %ands213 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter212, align 8
  %struct_getter214 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ands213, i32 0, i32 0
  %and.a.read_input_outter215 = load i128, i128* %struct_getter214, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.a.read_input_outter215, i128 %and.out.read_output_outter209, i1* @constraint.148)
  %ptr_getter216 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i217 = load i128, i128* %i, align 4
  %array_getter218 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ptr_getter216, i128 0, i128 %i217
  %ands219 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter218, align 8
  %and.a.write_input_outter220 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ands219, i32 0, i32 0
  store i128 %and.out.read_output_outter209, i128* %and.a.write_input_outter220, align 4
  %lt221 = load [256 x %struct_template_circuit_lessthan*]*, [256 x %struct_template_circuit_lessthan*]** %lt, align 8
  %i222 = load i128, i128* %i, align 4
  %array_getter223 = getelementptr inbounds [256 x %struct_template_circuit_lessthan*], [256 x %struct_template_circuit_lessthan*]* %lt221, i128 0, i128 %i222
  %lt224 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %array_getter223, align 8
  %struct_getter225 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt224, i32 0, i32 2
  %lessthan.out.read_output_outter226 = load i128, i128* %struct_getter225, align 4
  %ands227 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i228 = load i128, i128* %i, align 4
  %array_getter229 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ands227, i128 0, i128 %i228
  %ands230 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter229, align 8
  %struct_getter231 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ands230, i32 0, i32 1
  %and.b.read_input_outter232 = load i128, i128* %struct_getter231, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.b.read_input_outter232, i128 %lessthan.out.read_output_outter226, i1* @constraint.149)
  %ptr_getter233 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i234 = load i128, i128* %i, align 4
  %array_getter235 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ptr_getter233, i128 0, i128 %i234
  %ands236 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter235, align 8
  %and.b.write_input_outter237 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ands236, i32 0, i32 1
  store i128 %lessthan.out.read_output_outter226, i128* %and.b.write_input_outter237, align 4
  %eq_ands238 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i239 = load i128, i128* %i, align 4
  %add240 = add i128 %i239, 1
  %array_getter241 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %eq_ands238, i128 0, i128 %add240
  %eq_ands242 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter241, align 8
  %struct_getter243 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %eq_ands242, i32 0, i32 2
  %and.out.read_output_outter244 = load i128, i128* %struct_getter243, align 4
  %eq_ands245 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i246 = load i128, i128* %i, align 4
  %array_getter247 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %eq_ands245, i128 0, i128 %i246
  %eq_ands248 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter247, align 8
  %struct_getter249 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %eq_ands248, i32 0, i32 0
  %and.a.read_input_outter250 = load i128, i128* %struct_getter249, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.a.read_input_outter250, i128 %and.out.read_output_outter244, i1* @constraint.150)
  %ptr_getter251 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i252 = load i128, i128* %i, align 4
  %array_getter253 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ptr_getter251, i128 0, i128 %i252
  %eq_ands254 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter253, align 8
  %and.a.write_input_outter255 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %eq_ands254, i32 0, i32 0
  store i128 %and.out.read_output_outter244, i128* %and.a.write_input_outter255, align 4
  %eq256 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %eq, align 8
  %i257 = load i128, i128* %i, align 4
  %array_getter258 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %eq256, i128 0, i128 %i257
  %eq259 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter258, align 8
  %struct_getter260 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %eq259, i32 0, i32 1
  %isequal.out.read_output_outter261 = load i128, i128* %struct_getter260, align 4
  %eq_ands262 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i263 = load i128, i128* %i, align 4
  %array_getter264 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %eq_ands262, i128 0, i128 %i263
  %eq_ands265 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter264, align 8
  %struct_getter266 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %eq_ands265, i32 0, i32 1
  %and.b.read_input_outter267 = load i128, i128* %struct_getter266, align 4
  call void @fn_intrinsic_add_constraint(i128 %and.b.read_input_outter267, i128 %isequal.out.read_output_outter261, i1* @constraint.151)
  %ptr_getter268 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %eq_ands, align 8
  %i269 = load i128, i128* %i, align 4
  %array_getter270 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ptr_getter268, i128 0, i128 %i269
  %eq_ands271 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter270, align 8
  %and.b.write_input_outter272 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %eq_ands271, i32 0, i32 1
  store i128 %isequal.out.read_output_outter261, i128* %and.b.write_input_outter272, align 4
  %ors273 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %i274 = load i128, i128* %i, align 4
  %add275 = add i128 %i274, 1
  %array_getter276 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ors273, i128 0, i128 %add275
  %ors277 = load %struct_template_circuit_or*, %struct_template_circuit_or** %array_getter276, align 8
  %struct_getter278 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ors277, i32 0, i32 2
  %or.out.read_output_outter = load i128, i128* %struct_getter278, align 4
  %ors279 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %i280 = load i128, i128* %i, align 4
  %array_getter281 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ors279, i128 0, i128 %i280
  %ors282 = load %struct_template_circuit_or*, %struct_template_circuit_or** %array_getter281, align 8
  %struct_getter283 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ors282, i32 0, i32 0
  %or.a.read_input_outter284 = load i128, i128* %struct_getter283, align 4
  call void @fn_intrinsic_add_constraint(i128 %or.a.read_input_outter284, i128 %or.out.read_output_outter, i1* @constraint.152)
  %ptr_getter285 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %i286 = load i128, i128* %i, align 4
  %array_getter287 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ptr_getter285, i128 0, i128 %i286
  %ors288 = load %struct_template_circuit_or*, %struct_template_circuit_or** %array_getter287, align 8
  %or.a.write_input_outter289 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ors288, i32 0, i32 0
  store i128 %or.out.read_output_outter, i128* %or.a.write_input_outter289, align 4
  %ands290 = load [256 x %struct_template_circuit_and*]*, [256 x %struct_template_circuit_and*]** %ands, align 8
  %i291 = load i128, i128* %i, align 4
  %array_getter292 = getelementptr inbounds [256 x %struct_template_circuit_and*], [256 x %struct_template_circuit_and*]* %ands290, i128 0, i128 %i291
  %ands293 = load %struct_template_circuit_and*, %struct_template_circuit_and** %array_getter292, align 8
  %struct_getter294 = getelementptr inbounds %struct_template_circuit_and, %struct_template_circuit_and* %ands293, i32 0, i32 2
  %and.out.read_output_outter295 = load i128, i128* %struct_getter294, align 4
  %ors296 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %i297 = load i128, i128* %i, align 4
  %array_getter298 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ors296, i128 0, i128 %i297
  %ors299 = load %struct_template_circuit_or*, %struct_template_circuit_or** %array_getter298, align 8
  %struct_getter300 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ors299, i32 0, i32 1
  %or.b.read_input_outter301 = load i128, i128* %struct_getter300, align 4
  call void @fn_intrinsic_add_constraint(i128 %or.b.read_input_outter301, i128 %and.out.read_output_outter295, i1* @constraint.153)
  %ptr_getter302 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %i303 = load i128, i128* %i, align 4
  %array_getter304 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ptr_getter302, i128 0, i128 %i303
  %ors305 = load %struct_template_circuit_or*, %struct_template_circuit_or** %array_getter304, align 8
  %or.b.write_input_outter306 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ors305, i32 0, i32 1
  store i128 %and.out.read_output_outter295, i128* %or.b.write_input_outter306, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch307

loop.latch307:                                    ; preds = %if.exit
  %i308 = load i128, i128* %i, align 4
  %sub309 = sub i128 %i308, 1
  store i128 %sub309, i128* %i, align 4
  %i310 = load i128, i128* %i, align 4
  %sge = icmp sge i128 %i310, 0
  br i1 %sge, label %loop.body90, label %loop.exit311

loop.exit311:                                     ; preds = %loop.latch307
  %ors312 = load [256 x %struct_template_circuit_or*]*, [256 x %struct_template_circuit_or*]** %ors, align 8
  %array_getter313 = getelementptr inbounds [256 x %struct_template_circuit_or*], [256 x %struct_template_circuit_or*]* %ors312, i128 0, i128 0
  %ors314 = load %struct_template_circuit_or*, %struct_template_circuit_or** %array_getter313, align 8
  %struct_getter315 = getelementptr inbounds %struct_template_circuit_or, %struct_template_circuit_or* %ors314, i32 0, i32 2
  %or.out.read_output_outter316 = load i128, i128* %struct_getter315, align 4
  %out317 = load i128, i128* %biglessthan.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out317, i128 %or.out.read_output_outter316, i1* @constraint.154)
  %ptr_getter318 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %BigLessThan, align 8
  %biglessthan.out.write_output_inner = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter318, i32 0, i32 4
  store i128 %or.out.read_output_outter316, i128* %biglessthan.out.write_output_inner, align 4
  %BigLessThan319 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %BigLessThan, align 8
  %struct_getter320 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %BigLessThan319, i32 0, i32 4
  %biglessthan.out.read_output_inner = load i128, i128* %struct_getter320, align 4
  store i128 %biglessthan.out.read_output_inner, i128* %biglessthan.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit311
  %out321 = load i128, i128* %biglessthan.out.declare_output, align 4
  %biglessthan.out.write_output_inner322 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %0, i32 0, i32 4
  store i128 %out321, i128* %biglessthan.out.write_output_inner322, align 4
  ret void
}

define %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_biglessthan = alloca %struct_template_circuit_biglessthan, align 8
  %biglessthan.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %struct_template_circuit_biglessthan, i32 0, i32 0
  store i128 %0, i128* %biglessthan.n.write_arg_inner, align 4
  %biglessthan.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %struct_template_circuit_biglessthan, i32 0, i32 1
  store i128 %1, i128* %biglessthan.k.write_arg_inner, align 4
  ret %struct_template_circuit_biglessthan* %struct_template_circuit_biglessthan
}

define void @fn_template_init_greatereqthan(%struct_template_circuit_greatereqthan* %0) {
entry:
  %GreaterEqThan = alloca %struct_template_circuit_greatereqthan*, align 8
  store %struct_template_circuit_greatereqthan* %0, %struct_template_circuit_greatereqthan** %GreaterEqThan, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_greatereqthan, %struct_template_circuit_greatereqthan* %0, i32 0, i32 0
  %greatereqthan.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %greatereqthan.n.declare_arg = alloca i128, align 8
  store i128 %greatereqthan.n.read_arg_inner, i128* %greatereqthan.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_greatereqthan, %struct_template_circuit_greatereqthan* %0, i32 0, i32 1
  %greatereqthan.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter1, align 8
  %greatereqthan.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %greatereqthan.in.read_input_inner, [256 x i128]** %greatereqthan.in.declare_input, align 8
  %lt = alloca %struct_template_circuit_lessthan*, align 8
  %greatereqthan.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %greatereqthan.out.declare_output, align 4
  %n = load i128, i128* %greatereqthan.n.declare_arg, align 4
  %call = call %struct_template_circuit_lessthan* @fn_template_build_lessthan(i128 %n)
  store %struct_template_circuit_lessthan* %call, %struct_template_circuit_lessthan** %lt, align 8
  %in = load [256 x i128]*, [256 x i128]** %greatereqthan.in.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 1
  %in2 = load i128, i128* %array_getter, align 4
  %lt3 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt3, i32 0, i32 1
  %lessthan.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %array_getter5 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter, i128 0, i128 0
  %lt6 = load i128, i128* %array_getter5, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt6, i128 %in2, i1* @constraint.155)
  %ptr_getter = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter, i32 0, i32 1
  %lessthan.in.read_input_outter8 = load [256 x i128]*, [256 x i128]** %struct_getter7, align 8
  %lt9 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter8, i128 0, i128 0
  store i128 %in2, i128* %lt9, align 4
  %in10 = load [256 x i128]*, [256 x i128]** %greatereqthan.in.declare_input, align 8
  %array_getter11 = getelementptr inbounds [256 x i128], [256 x i128]* %in10, i128 0, i128 0
  %in12 = load i128, i128* %array_getter11, align 4
  %add = add i128 %in12, 1
  %lt13 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt13, i32 0, i32 1
  %lessthan.in.read_input_outter15 = load [256 x i128]*, [256 x i128]** %struct_getter14, align 8
  %array_getter16 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter15, i128 0, i128 1
  %lt17 = load i128, i128* %array_getter16, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt17, i128 %add, i1* @constraint.156)
  %ptr_getter18 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %ptr_getter18, i32 0, i32 1
  %lessthan.in.read_input_outter20 = load [256 x i128]*, [256 x i128]** %struct_getter19, align 8
  %lt21 = getelementptr inbounds [256 x i128], [256 x i128]* %lessthan.in.read_input_outter20, i128 0, i128 1
  store i128 %add, i128* %lt21, align 4
  %lt22 = load %struct_template_circuit_lessthan*, %struct_template_circuit_lessthan** %lt, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_lessthan, %struct_template_circuit_lessthan* %lt22, i32 0, i32 2
  %lessthan.out.read_output_outter = load i128, i128* %struct_getter23, align 4
  %out24 = load i128, i128* %greatereqthan.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out24, i128 %lessthan.out.read_output_outter, i1* @constraint.157)
  %ptr_getter25 = load %struct_template_circuit_greatereqthan*, %struct_template_circuit_greatereqthan** %GreaterEqThan, align 8
  %greatereqthan.out.write_output_inner = getelementptr inbounds %struct_template_circuit_greatereqthan, %struct_template_circuit_greatereqthan* %ptr_getter25, i32 0, i32 2
  store i128 %lessthan.out.read_output_outter, i128* %greatereqthan.out.write_output_inner, align 4
  %GreaterEqThan26 = load %struct_template_circuit_greatereqthan*, %struct_template_circuit_greatereqthan** %GreaterEqThan, align 8
  %struct_getter27 = getelementptr inbounds %struct_template_circuit_greatereqthan, %struct_template_circuit_greatereqthan* %GreaterEqThan26, i32 0, i32 2
  %greatereqthan.out.read_output_inner = load i128, i128* %struct_getter27, align 4
  store i128 %greatereqthan.out.read_output_inner, i128* %greatereqthan.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %entry
  %out28 = load i128, i128* %greatereqthan.out.declare_output, align 4
  %greatereqthan.out.write_output_inner29 = getelementptr inbounds %struct_template_circuit_greatereqthan, %struct_template_circuit_greatereqthan* %0, i32 0, i32 2
  store i128 %out28, i128* %greatereqthan.out.write_output_inner29, align 4
  ret void
}

define %struct_template_circuit_greatereqthan* @fn_template_build_greatereqthan(i128 %0) {
entry:
  %struct_template_circuit_greatereqthan = alloca %struct_template_circuit_greatereqthan, align 8
  %greatereqthan.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_greatereqthan, %struct_template_circuit_greatereqthan* %struct_template_circuit_greatereqthan, i32 0, i32 0
  store i128 %0, i128* %greatereqthan.n.write_arg_inner, align 4
  ret %struct_template_circuit_greatereqthan* %struct_template_circuit_greatereqthan
}

define void @fn_template_init_bigadd(%struct_template_circuit_bigadd* %0) {
entry:
  %BigAdd = alloca %struct_template_circuit_bigadd*, align 8
  store %struct_template_circuit_bigadd* %0, %struct_template_circuit_bigadd** %BigAdd, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %0, i32 0, i32 0
  %bigadd.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigadd.n.declare_arg = alloca i128, align 8
  store i128 %bigadd.n.read_arg_inner, i128* %bigadd.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %0, i32 0, i32 1
  %bigadd.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigadd.k.declare_arg = alloca i128, align 8
  store i128 %bigadd.k.read_arg_inner, i128* %bigadd.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %0, i32 0, i32 2
  %bigadd.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %bigadd.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigadd.a.read_input_inner, [256 x i128]** %bigadd.a.declare_input, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %0, i32 0, i32 3
  %bigadd.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %bigadd.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigadd.b.read_input_inner, [256 x i128]** %bigadd.b.declare_input, align 8
  %bigadd.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %bigadd.out.declare_output, align 8
  %unit0 = alloca %struct_template_circuit_modsum*, align 8
  %unit = alloca [256 x %struct_template_circuit_modsumthree*]*, align 8
  %unit4 = alloca [256 x %struct_template_circuit_modsumthree*], align 8
  store [256 x %struct_template_circuit_modsumthree*]* %unit4, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %n = load i128, i128* %bigadd.n.declare_arg, align 4
  %call = call %struct_template_circuit_modsum* @fn_template_build_modsum(i128 %n)
  store %struct_template_circuit_modsum* %call, %struct_template_circuit_modsum** %unit0, align 8
  %a = load [256 x i128]*, [256 x i128]** %bigadd.a.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 0
  %a6 = load i128, i128* %array_getter, align 4
  %unit07 = load %struct_template_circuit_modsum*, %struct_template_circuit_modsum** %unit0, align 8
  %struct_getter8 = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %unit07, i32 0, i32 1
  %modsum.a.read_input_outter = load i128, i128* %struct_getter8, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsum.a.read_input_outter, i128 %a6, i1* @constraint.158)
  %ptr_getter = load %struct_template_circuit_modsum*, %struct_template_circuit_modsum** %unit0, align 8
  %modsum.a.write_input_outter = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %ptr_getter, i32 0, i32 1
  store i128 %a6, i128* %modsum.a.write_input_outter, align 4
  %b = load [256 x i128]*, [256 x i128]** %bigadd.b.declare_input, align 8
  %array_getter9 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 0
  %b10 = load i128, i128* %array_getter9, align 4
  %unit011 = load %struct_template_circuit_modsum*, %struct_template_circuit_modsum** %unit0, align 8
  %struct_getter12 = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %unit011, i32 0, i32 2
  %modsum.b.read_input_outter = load i128, i128* %struct_getter12, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsum.b.read_input_outter, i128 %b10, i1* @constraint.159)
  %ptr_getter13 = load %struct_template_circuit_modsum*, %struct_template_circuit_modsum** %unit0, align 8
  %modsum.b.write_input_outter = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %ptr_getter13, i32 0, i32 2
  store i128 %b10, i128* %modsum.b.write_input_outter, align 4
  %unit014 = load %struct_template_circuit_modsum*, %struct_template_circuit_modsum** %unit0, align 8
  %struct_getter15 = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %unit014, i32 0, i32 3
  %modsum.sum.read_output_outter = load i128, i128* %struct_getter15, align 4
  %out16 = load [256 x i128]*, [256 x i128]** %bigadd.out.declare_output, align 8
  %array_getter17 = getelementptr inbounds [256 x i128], [256 x i128]* %out16, i128 0, i128 0
  %out18 = load i128, i128* %array_getter17, align 4
  call void @fn_intrinsic_add_constraint(i128 %out18, i128 %modsum.sum.read_output_outter, i1* @constraint.160)
  %ptr_getter19 = load [256 x i128]*, [256 x i128]** %bigadd.out.declare_output, align 8
  %out20 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter19, i128 0, i128 0
  store i128 %modsum.sum.read_output_outter, i128* %out20, align 4
  store i128 1, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %n21 = load i128, i128* %bigadd.n.declare_arg, align 4
  %call22 = call %struct_template_circuit_modsumthree* @fn_template_build_modsumthree(i128 %n21)
  %ptr_getter23 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i24 = load i128, i128* %i, align 4
  %sub = sub i128 %i24, 1
  %unit25 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %ptr_getter23, i128 0, i128 %sub
  store %struct_template_circuit_modsumthree* %call22, %struct_template_circuit_modsumthree** %unit25, align 8
  %a26 = load [256 x i128]*, [256 x i128]** %bigadd.a.declare_input, align 8
  %i27 = load i128, i128* %i, align 4
  %array_getter28 = getelementptr inbounds [256 x i128], [256 x i128]* %a26, i128 0, i128 %i27
  %a29 = load i128, i128* %array_getter28, align 4
  %unit30 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i31 = load i128, i128* %i, align 4
  %sub32 = sub i128 %i31, 1
  %array_getter33 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %unit30, i128 0, i128 %sub32
  %unit34 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter33, align 8
  %struct_getter35 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit34, i32 0, i32 1
  %modsumthree.a.read_input_outter = load i128, i128* %struct_getter35, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsumthree.a.read_input_outter, i128 %a29, i1* @constraint.161)
  %ptr_getter36 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i37 = load i128, i128* %i, align 4
  %sub38 = sub i128 %i37, 1
  %array_getter39 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %ptr_getter36, i128 0, i128 %sub38
  %unit40 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter39, align 8
  %modsumthree.a.write_input_outter = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit40, i32 0, i32 1
  store i128 %a29, i128* %modsumthree.a.write_input_outter, align 4
  %b41 = load [256 x i128]*, [256 x i128]** %bigadd.b.declare_input, align 8
  %i42 = load i128, i128* %i, align 4
  %array_getter43 = getelementptr inbounds [256 x i128], [256 x i128]* %b41, i128 0, i128 %i42
  %b44 = load i128, i128* %array_getter43, align 4
  %unit45 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i46 = load i128, i128* %i, align 4
  %sub47 = sub i128 %i46, 1
  %array_getter48 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %unit45, i128 0, i128 %sub47
  %unit49 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter48, align 8
  %struct_getter50 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit49, i32 0, i32 2
  %modsumthree.b.read_input_outter = load i128, i128* %struct_getter50, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsumthree.b.read_input_outter, i128 %b44, i1* @constraint.162)
  %ptr_getter51 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i52 = load i128, i128* %i, align 4
  %sub53 = sub i128 %i52, 1
  %array_getter54 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %ptr_getter51, i128 0, i128 %sub53
  %unit55 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter54, align 8
  %modsumthree.b.write_input_outter = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit55, i32 0, i32 2
  store i128 %b44, i128* %modsumthree.b.write_input_outter, align 4
  %i56 = load i128, i128* %i, align 4
  %eq = icmp eq i128 %i56, 1
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  %unit057 = load %struct_template_circuit_modsum*, %struct_template_circuit_modsum** %unit0, align 8
  %struct_getter58 = getelementptr inbounds %struct_template_circuit_modsum, %struct_template_circuit_modsum* %unit057, i32 0, i32 4
  %modsum.carry.read_output_outter = load i128, i128* %struct_getter58, align 4
  %unit59 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i60 = load i128, i128* %i, align 4
  %sub61 = sub i128 %i60, 1
  %array_getter62 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %unit59, i128 0, i128 %sub61
  %unit63 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter62, align 8
  %struct_getter64 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit63, i32 0, i32 3
  %modsumthree.c.read_input_outter = load i128, i128* %struct_getter64, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsumthree.c.read_input_outter, i128 %modsum.carry.read_output_outter, i1* @constraint.163)
  %ptr_getter65 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i66 = load i128, i128* %i, align 4
  %sub67 = sub i128 %i66, 1
  %array_getter68 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %ptr_getter65, i128 0, i128 %sub67
  %unit69 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter68, align 8
  %modsumthree.c.write_input_outter = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit69, i32 0, i32 3
  store i128 %modsum.carry.read_output_outter, i128* %modsumthree.c.write_input_outter, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body
  %unit70 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i71 = load i128, i128* %i, align 4
  %sub72 = sub i128 %i71, 2
  %array_getter73 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %unit70, i128 0, i128 %sub72
  %unit74 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter73, align 8
  %struct_getter75 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit74, i32 0, i32 5
  %modsumthree.carry.read_output_outter = load i128, i128* %struct_getter75, align 4
  %unit76 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i77 = load i128, i128* %i, align 4
  %sub78 = sub i128 %i77, 1
  %array_getter79 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %unit76, i128 0, i128 %sub78
  %unit80 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter79, align 8
  %struct_getter81 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit80, i32 0, i32 3
  %modsumthree.c.read_input_outter82 = load i128, i128* %struct_getter81, align 4
  call void @fn_intrinsic_add_constraint(i128 %modsumthree.c.read_input_outter82, i128 %modsumthree.carry.read_output_outter, i1* @constraint.164)
  %ptr_getter83 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i84 = load i128, i128* %i, align 4
  %sub85 = sub i128 %i84, 1
  %array_getter86 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %ptr_getter83, i128 0, i128 %sub85
  %unit87 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter86, align 8
  %modsumthree.c.write_input_outter88 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit87, i32 0, i32 3
  store i128 %modsumthree.carry.read_output_outter, i128* %modsumthree.c.write_input_outter88, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  %unit89 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %i90 = load i128, i128* %i, align 4
  %sub91 = sub i128 %i90, 1
  %array_getter92 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %unit89, i128 0, i128 %sub91
  %unit93 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter92, align 8
  %struct_getter94 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit93, i32 0, i32 4
  %modsumthree.sum.read_output_outter = load i128, i128* %struct_getter94, align 4
  %out95 = load [256 x i128]*, [256 x i128]** %bigadd.out.declare_output, align 8
  %i96 = load i128, i128* %i, align 4
  %array_getter97 = getelementptr inbounds [256 x i128], [256 x i128]* %out95, i128 0, i128 %i96
  %out98 = load i128, i128* %array_getter97, align 4
  call void @fn_intrinsic_add_constraint(i128 %out98, i128 %modsumthree.sum.read_output_outter, i1* @constraint.165)
  %ptr_getter99 = load [256 x i128]*, [256 x i128]** %bigadd.out.declare_output, align 8
  %i100 = load i128, i128* %i, align 4
  %out101 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter99, i128 0, i128 %i100
  store i128 %modsumthree.sum.read_output_outter, i128* %out101, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %i102 = load i128, i128* %i, align 4
  %add = add i128 %i102, 1
  store i128 %add, i128* %i, align 4
  %i103 = load i128, i128* %i, align 4
  %k = load i128, i128* %bigadd.k.declare_arg, align 4
  %slt = icmp slt i128 %i103, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %unit104 = load [256 x %struct_template_circuit_modsumthree*]*, [256 x %struct_template_circuit_modsumthree*]** %unit, align 8
  %k105 = load i128, i128* %bigadd.k.declare_arg, align 4
  %sub106 = sub i128 %k105, 2
  %array_getter107 = getelementptr inbounds [256 x %struct_template_circuit_modsumthree*], [256 x %struct_template_circuit_modsumthree*]* %unit104, i128 0, i128 %sub106
  %unit108 = load %struct_template_circuit_modsumthree*, %struct_template_circuit_modsumthree** %array_getter107, align 8
  %struct_getter109 = getelementptr inbounds %struct_template_circuit_modsumthree, %struct_template_circuit_modsumthree* %unit108, i32 0, i32 5
  %modsumthree.carry.read_output_outter110 = load i128, i128* %struct_getter109, align 4
  %out111 = load [256 x i128]*, [256 x i128]** %bigadd.out.declare_output, align 8
  %k112 = load i128, i128* %bigadd.k.declare_arg, align 4
  %array_getter113 = getelementptr inbounds [256 x i128], [256 x i128]* %out111, i128 0, i128 %k112
  %out114 = load i128, i128* %array_getter113, align 4
  call void @fn_intrinsic_add_constraint(i128 %out114, i128 %modsumthree.carry.read_output_outter110, i1* @constraint.166)
  %ptr_getter115 = load [256 x i128]*, [256 x i128]** %bigadd.out.declare_output, align 8
  %k116 = load i128, i128* %bigadd.k.declare_arg, align 4
  %out117 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter115, i128 0, i128 %k116
  store i128 %modsumthree.carry.read_output_outter110, i128* %out117, align 4
  br label %exit

exit:                                             ; preds = %loop.exit
  %out118 = load [256 x i128]*, [256 x i128]** %bigadd.out.declare_output, align 8
  %bigadd.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %0, i32 0, i32 4
  store [256 x i128]* %out118, [256 x i128]** %bigadd.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigadd* @fn_template_build_bigadd(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_bigadd = alloca %struct_template_circuit_bigadd, align 8
  %bigadd.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %struct_template_circuit_bigadd, i32 0, i32 0
  store i128 %0, i128* %bigadd.n.write_arg_inner, align 4
  %bigadd.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %struct_template_circuit_bigadd, i32 0, i32 1
  store i128 %1, i128* %bigadd.k.write_arg_inner, align 4
  ret %struct_template_circuit_bigadd* %struct_template_circuit_bigadd
}

define void @fn_template_init_bigaddmodp(%struct_template_circuit_bigaddmodp* %0) {
entry:
  %BigAddModP = alloca %struct_template_circuit_bigaddmodp*, align 8
  store %struct_template_circuit_bigaddmodp* %0, %struct_template_circuit_bigaddmodp** %BigAddModP, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigaddmodp, %struct_template_circuit_bigaddmodp* %0, i32 0, i32 0
  %bigaddmodp.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigaddmodp.n.declare_arg = alloca i128, align 8
  store i128 %bigaddmodp.n.read_arg_inner, i128* %bigaddmodp.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigaddmodp, %struct_template_circuit_bigaddmodp* %0, i32 0, i32 1
  %bigaddmodp.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigaddmodp.k.declare_arg = alloca i128, align 8
  store i128 %bigaddmodp.k.read_arg_inner, i128* %bigaddmodp.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigaddmodp, %struct_template_circuit_bigaddmodp* %0, i32 0, i32 2
  %bigaddmodp.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %bigaddmodp.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigaddmodp.a.read_input_inner, [256 x i128]** %bigaddmodp.a.declare_input, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigaddmodp, %struct_template_circuit_bigaddmodp* %0, i32 0, i32 3
  %bigaddmodp.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %bigaddmodp.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigaddmodp.b.read_input_inner, [256 x i128]** %bigaddmodp.b.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_bigaddmodp, %struct_template_circuit_bigaddmodp* %0, i32 0, i32 4
  %bigaddmodp.p.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %bigaddmodp.p.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigaddmodp.p.read_input_inner, [256 x i128]** %bigaddmodp.p.declare_input, align 8
  %sub = alloca %struct_template_circuit_bigsub*, align 8
  %lt = alloca %struct_template_circuit_biglessthan*, align 8
  %add = alloca %struct_template_circuit_bigadd*, align 8
  %bigaddmodp.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %bigaddmodp.out.declare_output, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %n = load i128, i128* %bigaddmodp.n.declare_arg, align 4
  %k = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %call = call %struct_template_circuit_bigadd* @fn_template_build_bigadd(i128 %n, i128 %k)
  store %struct_template_circuit_bigadd* %call, %struct_template_circuit_bigadd** %add, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %bigaddmodp.a.declare_input, align 8
  %i6 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i6
  %a7 = load i128, i128* %array_getter, align 4
  %add8 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add8, i32 0, i32 2
  %bigadd.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter9, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter11 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter, i128 0, i128 %i10
  %add12 = load i128, i128* %array_getter11, align 4
  call void @fn_intrinsic_add_constraint(i128 %add12, i128 %a7, i1* @constraint.167)
  %ptr_getter = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter13 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter, i32 0, i32 2
  %bigadd.a.read_input_outter14 = load [256 x i128]*, [256 x i128]** %struct_getter13, align 8
  %i15 = load i128, i128* %i, align 4
  %add16 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter14, i128 0, i128 %i15
  store i128 %a7, i128* %add16, align 4
  %b = load [256 x i128]*, [256 x i128]** %bigaddmodp.b.declare_input, align 8
  %i17 = load i128, i128* %i, align 4
  %array_getter18 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i17
  %b19 = load i128, i128* %array_getter18, align 4
  %add20 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter21 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add20, i32 0, i32 3
  %bigadd.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter21, align 8
  %i22 = load i128, i128* %i, align 4
  %array_getter23 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter, i128 0, i128 %i22
  %add24 = load i128, i128* %array_getter23, align 4
  call void @fn_intrinsic_add_constraint(i128 %add24, i128 %b19, i1* @constraint.168)
  %ptr_getter25 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter25, i32 0, i32 3
  %bigadd.b.read_input_outter27 = load [256 x i128]*, [256 x i128]** %struct_getter26, align 8
  %i28 = load i128, i128* %i, align 4
  %add29 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter27, i128 0, i128 %i28
  store i128 %b19, i128* %add29, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i30 = load i128, i128* %i, align 4
  %add31 = add i128 %i30, 1
  store i128 %add31, i128* %i, align 4
  %i32 = load i128, i128* %i, align 4
  %k33 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %slt = icmp slt i128 %i32, %k33
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n34 = load i128, i128* %bigaddmodp.n.declare_arg, align 4
  %k35 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %add36 = add i128 %k35, 1
  %call37 = call %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %n34, i128 %add36)
  store %struct_template_circuit_biglessthan* %call37, %struct_template_circuit_biglessthan** %lt, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body38

loop.body38:                                      ; preds = %loop.latch67, %loop.exit
  %add39 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter40 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add39, i32 0, i32 4
  %bigadd.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter40, align 8
  %i41 = load i128, i128* %i, align 4
  %array_getter42 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter, i128 0, i128 %i41
  %add43 = load i128, i128* %array_getter42, align 4
  %lt44 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter45 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt44, i32 0, i32 2
  %biglessthan.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter45, align 8
  %i46 = load i128, i128* %i, align 4
  %array_getter47 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter, i128 0, i128 %i46
  %lt48 = load i128, i128* %array_getter47, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt48, i128 %add43, i1* @constraint.169)
  %ptr_getter49 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter50 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter49, i32 0, i32 2
  %biglessthan.a.read_input_outter51 = load [256 x i128]*, [256 x i128]** %struct_getter50, align 8
  %i52 = load i128, i128* %i, align 4
  %lt53 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter51, i128 0, i128 %i52
  store i128 %add43, i128* %lt53, align 4
  %p = load [256 x i128]*, [256 x i128]** %bigaddmodp.p.declare_input, align 8
  %i54 = load i128, i128* %i, align 4
  %array_getter55 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i54
  %p56 = load i128, i128* %array_getter55, align 4
  %lt57 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter58 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt57, i32 0, i32 3
  %biglessthan.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter58, align 8
  %i59 = load i128, i128* %i, align 4
  %array_getter60 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter, i128 0, i128 %i59
  %lt61 = load i128, i128* %array_getter60, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt61, i128 %p56, i1* @constraint.170)
  %ptr_getter62 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter63 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter62, i32 0, i32 3
  %biglessthan.b.read_input_outter64 = load [256 x i128]*, [256 x i128]** %struct_getter63, align 8
  %i65 = load i128, i128* %i, align 4
  %lt66 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter64, i128 0, i128 %i65
  store i128 %p56, i128* %lt66, align 4
  br label %loop.latch67

loop.latch67:                                     ; preds = %loop.body38
  %i68 = load i128, i128* %i, align 4
  %add69 = add i128 %i68, 1
  store i128 %add69, i128* %i, align 4
  %i70 = load i128, i128* %i, align 4
  %k71 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %slt72 = icmp slt i128 %i70, %k71
  br i1 %slt72, label %loop.body38, label %loop.exit73

loop.exit73:                                      ; preds = %loop.latch67
  %add74 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter75 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add74, i32 0, i32 4
  %bigadd.out.read_output_outter76 = load [256 x i128]*, [256 x i128]** %struct_getter75, align 8
  %k77 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %array_getter78 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter76, i128 0, i128 %k77
  %add79 = load i128, i128* %array_getter78, align 4
  %lt80 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter81 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt80, i32 0, i32 2
  %biglessthan.a.read_input_outter82 = load [256 x i128]*, [256 x i128]** %struct_getter81, align 8
  %k83 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %array_getter84 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter82, i128 0, i128 %k83
  %lt85 = load i128, i128* %array_getter84, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt85, i128 %add79, i1* @constraint.171)
  %ptr_getter86 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter87 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter86, i32 0, i32 2
  %biglessthan.a.read_input_outter88 = load [256 x i128]*, [256 x i128]** %struct_getter87, align 8
  %k89 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %lt90 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter88, i128 0, i128 %k89
  store i128 %add79, i128* %lt90, align 4
  %lt91 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter92 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt91, i32 0, i32 3
  %biglessthan.b.read_input_outter93 = load [256 x i128]*, [256 x i128]** %struct_getter92, align 8
  %k94 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %array_getter95 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter93, i128 0, i128 %k94
  %lt96 = load i128, i128* %array_getter95, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt96, i128 0, i1* @constraint.172)
  %ptr_getter97 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter98 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter97, i32 0, i32 3
  %biglessthan.b.read_input_outter99 = load [256 x i128]*, [256 x i128]** %struct_getter98, align 8
  %k100 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %lt101 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter99, i128 0, i128 %k100
  store i128 0, i128* %lt101, align 4
  %n102 = load i128, i128* %bigaddmodp.n.declare_arg, align 4
  %k103 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %add104 = add i128 %k103, 1
  %call105 = call %struct_template_circuit_bigsub* @fn_template_build_bigsub(i128 %n102, i128 %add104)
  store %struct_template_circuit_bigsub* %call105, %struct_template_circuit_bigsub** %sub, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body106

loop.body106:                                     ; preds = %loop.latch140, %loop.exit73
  %add107 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter108 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add107, i32 0, i32 4
  %bigadd.out.read_output_outter109 = load [256 x i128]*, [256 x i128]** %struct_getter108, align 8
  %i110 = load i128, i128* %i, align 4
  %array_getter111 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter109, i128 0, i128 %i110
  %add112 = load i128, i128* %array_getter111, align 4
  %sub113 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter114 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub113, i32 0, i32 2
  %bigsub.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter114, align 8
  %i115 = load i128, i128* %i, align 4
  %array_getter116 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter, i128 0, i128 %i115
  %sub117 = load i128, i128* %array_getter116, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub117, i128 %add112, i1* @constraint.173)
  %ptr_getter118 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter119 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter118, i32 0, i32 2
  %bigsub.a.read_input_outter120 = load [256 x i128]*, [256 x i128]** %struct_getter119, align 8
  %i121 = load i128, i128* %i, align 4
  %sub122 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter120, i128 0, i128 %i121
  store i128 %add112, i128* %sub122, align 4
  %lt123 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter124 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt123, i32 0, i32 4
  %biglessthan.out.read_output_outter = load i128, i128* %struct_getter124, align 4
  %sub125 = sub i128 1, %biglessthan.out.read_output_outter
  %p126 = load [256 x i128]*, [256 x i128]** %bigaddmodp.p.declare_input, align 8
  %i127 = load i128, i128* %i, align 4
  %array_getter128 = getelementptr inbounds [256 x i128], [256 x i128]* %p126, i128 0, i128 %i127
  %p129 = load i128, i128* %array_getter128, align 4
  %mul = mul i128 %sub125, %p129
  %sub130 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter131 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub130, i32 0, i32 3
  %bigsub.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter131, align 8
  %i132 = load i128, i128* %i, align 4
  %array_getter133 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter, i128 0, i128 %i132
  %sub134 = load i128, i128* %array_getter133, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub134, i128 %mul, i1* @constraint.174)
  %ptr_getter135 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter136 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter135, i32 0, i32 3
  %bigsub.b.read_input_outter137 = load [256 x i128]*, [256 x i128]** %struct_getter136, align 8
  %i138 = load i128, i128* %i, align 4
  %sub139 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter137, i128 0, i128 %i138
  store i128 %mul, i128* %sub139, align 4
  br label %loop.latch140

loop.latch140:                                    ; preds = %loop.body106
  %i141 = load i128, i128* %i, align 4
  %add142 = add i128 %i141, 1
  store i128 %add142, i128* %i, align 4
  %i143 = load i128, i128* %i, align 4
  %k144 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %slt145 = icmp slt i128 %i143, %k144
  br i1 %slt145, label %loop.body106, label %loop.exit146

loop.exit146:                                     ; preds = %loop.latch140
  %add147 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter148 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add147, i32 0, i32 4
  %bigadd.out.read_output_outter149 = load [256 x i128]*, [256 x i128]** %struct_getter148, align 8
  %k150 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %array_getter151 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter149, i128 0, i128 %k150
  %add152 = load i128, i128* %array_getter151, align 4
  %sub153 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter154 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub153, i32 0, i32 2
  %bigsub.a.read_input_outter155 = load [256 x i128]*, [256 x i128]** %struct_getter154, align 8
  %k156 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %array_getter157 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter155, i128 0, i128 %k156
  %sub158 = load i128, i128* %array_getter157, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub158, i128 %add152, i1* @constraint.175)
  %ptr_getter159 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter160 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter159, i32 0, i32 2
  %bigsub.a.read_input_outter161 = load [256 x i128]*, [256 x i128]** %struct_getter160, align 8
  %k162 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %sub163 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter161, i128 0, i128 %k162
  store i128 %add152, i128* %sub163, align 4
  %sub164 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter165 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub164, i32 0, i32 3
  %bigsub.b.read_input_outter166 = load [256 x i128]*, [256 x i128]** %struct_getter165, align 8
  %k167 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %array_getter168 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter166, i128 0, i128 %k167
  %sub169 = load i128, i128* %array_getter168, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub169, i128 0, i1* @constraint.176)
  %ptr_getter170 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter171 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter170, i32 0, i32 3
  %bigsub.b.read_input_outter172 = load [256 x i128]*, [256 x i128]** %struct_getter171, align 8
  %k173 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %sub174 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter172, i128 0, i128 %k173
  store i128 0, i128* %sub174, align 4
  %sub175 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter176 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub175, i32 0, i32 4
  %bigsub.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter176, align 8
  %k177 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %array_getter178 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.out.read_output_outter, i128 0, i128 %k177
  %sub179 = load i128, i128* %array_getter178, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub179, i128 0, i1* @constraint.177)
  store i128 0, i128* %i, align 4
  br label %loop.body180

loop.body180:                                     ; preds = %loop.latch194, %loop.exit146
  %sub181 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter182 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub181, i32 0, i32 4
  %bigsub.out.read_output_outter183 = load [256 x i128]*, [256 x i128]** %struct_getter182, align 8
  %i184 = load i128, i128* %i, align 4
  %array_getter185 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.out.read_output_outter183, i128 0, i128 %i184
  %sub186 = load i128, i128* %array_getter185, align 4
  %out187 = load [256 x i128]*, [256 x i128]** %bigaddmodp.out.declare_output, align 8
  %i188 = load i128, i128* %i, align 4
  %array_getter189 = getelementptr inbounds [256 x i128], [256 x i128]* %out187, i128 0, i128 %i188
  %out190 = load i128, i128* %array_getter189, align 4
  call void @fn_intrinsic_add_constraint(i128 %out190, i128 %sub186, i1* @constraint.178)
  %ptr_getter191 = load [256 x i128]*, [256 x i128]** %bigaddmodp.out.declare_output, align 8
  %i192 = load i128, i128* %i, align 4
  %out193 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter191, i128 0, i128 %i192
  store i128 %sub186, i128* %out193, align 4
  br label %loop.latch194

loop.latch194:                                    ; preds = %loop.body180
  %i195 = load i128, i128* %i, align 4
  %add196 = add i128 %i195, 1
  store i128 %add196, i128* %i, align 4
  %i197 = load i128, i128* %i, align 4
  %k198 = load i128, i128* %bigaddmodp.k.declare_arg, align 4
  %slt199 = icmp slt i128 %i197, %k198
  br i1 %slt199, label %loop.body180, label %loop.exit200

loop.exit200:                                     ; preds = %loop.latch194
  br label %exit

exit:                                             ; preds = %loop.exit200
  %out201 = load [256 x i128]*, [256 x i128]** %bigaddmodp.out.declare_output, align 8
  %bigaddmodp.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigaddmodp, %struct_template_circuit_bigaddmodp* %0, i32 0, i32 5
  store [256 x i128]* %out201, [256 x i128]** %bigaddmodp.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigaddmodp* @fn_template_build_bigaddmodp(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_bigaddmodp = alloca %struct_template_circuit_bigaddmodp, align 8
  %bigaddmodp.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigaddmodp, %struct_template_circuit_bigaddmodp* %struct_template_circuit_bigaddmodp, i32 0, i32 0
  store i128 %0, i128* %bigaddmodp.n.write_arg_inner, align 4
  %bigaddmodp.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigaddmodp, %struct_template_circuit_bigaddmodp* %struct_template_circuit_bigaddmodp, i32 0, i32 1
  store i128 %1, i128* %bigaddmodp.k.write_arg_inner, align 4
  ret %struct_template_circuit_bigaddmodp* %struct_template_circuit_bigaddmodp
}

define void @fn_template_init_fpisequal(%struct_template_circuit_fpisequal* %0) {
entry:
  %FpIsEqual = alloca %struct_template_circuit_fpisequal*, align 8
  store %struct_template_circuit_fpisequal* %0, %struct_template_circuit_fpisequal** %FpIsEqual, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %0, i32 0, i32 0
  %fpisequal.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fpisequal.n.declare_arg = alloca i128, align 8
  store i128 %fpisequal.n.read_arg_inner, i128* %fpisequal.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %0, i32 0, i32 1
  %fpisequal.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fpisequal.k.declare_arg = alloca i128, align 8
  store i128 %fpisequal.k.read_arg_inner, i128* %fpisequal.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %0, i32 0, i32 2
  %fpisequal.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fpisequal.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpisequal.p.read_arg_inner, [256 x i128]** %fpisequal.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %0, i32 0, i32 3
  %fpisequal.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fpisequal.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fpisequal.in.read_input_inner, [256 x [256 x i128]]** %fpisequal.in.declare_input, align 8
  %fpisequal.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %fpisequal.out.declare_output, align 4
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %idx = alloca i128, align 8
  %idx5 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx5, i128* %idx, align 4
  %sum = alloca i128, align 8
  %sum6 = call i128 @fn_intrinsic_inline_init()
  store i128 %sum6, i128* %sum, align 4
  %isEqual = alloca [256 x %struct_template_circuit_isequal*]*, align 8
  %isEqual7 = alloca [256 x %struct_template_circuit_isequal*], align 8
  store [256 x %struct_template_circuit_isequal*]* %isEqual7, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %lt = alloca [256 x %struct_template_circuit_biglessthan*]*, align 8
  %lt8 = alloca [256 x %struct_template_circuit_biglessthan*], align 8
  store [256 x %struct_template_circuit_biglessthan*]* %lt8, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch58, %entry
  %n = load i128, i128* %fpisequal.n.declare_arg, align 4
  %k = load i128, i128* %fpisequal.k.declare_arg, align 4
  %call = call %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %n, i128 %k)
  %ptr_getter = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %i9 = load i128, i128* %i, align 4
  %lt10 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter, i128 0, i128 %i9
  store %struct_template_circuit_biglessthan* %call, %struct_template_circuit_biglessthan** %lt10, align 8
  store i128 0, i128* %idx, align 4
  br label %loop.body11

loop.body11:                                      ; preds = %loop.latch, %loop.body
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fpisequal.in.declare_input, align 8
  %i12 = load i128, i128* %i, align 4
  %idx13 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %i12, i128 %idx13
  %in14 = load i128, i128* %array_getter, align 4
  %lt15 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %i16 = load i128, i128* %i, align 4
  %array_getter17 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %lt15, i128 0, i128 %i16
  %lt18 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter17, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt18, i32 0, i32 2
  %biglessthan.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter19, align 8
  %idx20 = load i128, i128* %idx, align 4
  %array_getter21 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter, i128 0, i128 %idx20
  %lt22 = load i128, i128* %array_getter21, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt22, i128 %in14, i1* @constraint.179)
  %ptr_getter23 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %i24 = load i128, i128* %i, align 4
  %array_getter25 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter23, i128 0, i128 %i24
  %lt26 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter25, align 8
  %struct_getter27 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt26, i32 0, i32 2
  %biglessthan.a.read_input_outter28 = load [256 x i128]*, [256 x i128]** %struct_getter27, align 8
  %idx29 = load i128, i128* %idx, align 4
  %lt30 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter28, i128 0, i128 %idx29
  store i128 %in14, i128* %lt30, align 4
  %p = load [256 x i128]*, [256 x i128]** %fpisequal.p.declare_arg, align 8
  %idx31 = load i128, i128* %idx, align 4
  %array_getter32 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %idx31
  %p33 = load i128, i128* %array_getter32, align 4
  %lt34 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %i35 = load i128, i128* %i, align 4
  %array_getter36 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %lt34, i128 0, i128 %i35
  %lt37 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter36, align 8
  %struct_getter38 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt37, i32 0, i32 3
  %biglessthan.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter38, align 8
  %idx39 = load i128, i128* %idx, align 4
  %array_getter40 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter, i128 0, i128 %idx39
  %lt41 = load i128, i128* %array_getter40, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt41, i128 %p33, i1* @constraint.180)
  %ptr_getter42 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %i43 = load i128, i128* %i, align 4
  %array_getter44 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter42, i128 0, i128 %i43
  %lt45 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter44, align 8
  %struct_getter46 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt45, i32 0, i32 3
  %biglessthan.b.read_input_outter47 = load [256 x i128]*, [256 x i128]** %struct_getter46, align 8
  %idx48 = load i128, i128* %idx, align 4
  %lt49 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter47, i128 0, i128 %idx48
  store i128 %p33, i128* %lt49, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body11
  %idx50 = load i128, i128* %idx, align 4
  %add = add i128 %idx50, 1
  store i128 %add, i128* %idx, align 4
  %idx51 = load i128, i128* %idx, align 4
  %k52 = load i128, i128* %fpisequal.k.declare_arg, align 4
  %slt = icmp slt i128 %idx51, %k52
  br i1 %slt, label %loop.body11, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %lt53 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %i54 = load i128, i128* %i, align 4
  %array_getter55 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %lt53, i128 0, i128 %i54
  %lt56 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter55, align 8
  %struct_getter57 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt56, i32 0, i32 4
  %biglessthan.out.read_output_outter = load i128, i128* %struct_getter57, align 4
  call void @fn_intrinsic_add_constraint(i128 %biglessthan.out.read_output_outter, i128 1, i1* @constraint.181)
  br label %loop.latch58

loop.latch58:                                     ; preds = %loop.exit
  %i59 = load i128, i128* %i, align 4
  %add60 = add i128 %i59, 1
  store i128 %add60, i128* %i, align 4
  %i61 = load i128, i128* %i, align 4
  %slt62 = icmp slt i128 %i61, 2
  br i1 %slt62, label %loop.body, label %loop.exit63

loop.exit63:                                      ; preds = %loop.latch58
  store i128 0, i128* %sum, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body64

loop.body64:                                      ; preds = %loop.latch113, %loop.exit63
  %call65 = call %struct_template_circuit_isequal* @fn_template_build_isequal()
  %ptr_getter66 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %i67 = load i128, i128* %i, align 4
  %isEqual68 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter66, i128 0, i128 %i67
  store %struct_template_circuit_isequal* %call65, %struct_template_circuit_isequal** %isEqual68, align 8
  %in69 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fpisequal.in.declare_input, align 8
  %i70 = load i128, i128* %i, align 4
  %array_getter71 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in69, i128 0, i128 0, i128 %i70
  %in72 = load i128, i128* %array_getter71, align 4
  %isEqual73 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %i74 = load i128, i128* %i, align 4
  %array_getter75 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %isEqual73, i128 0, i128 %i74
  %isEqual76 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter75, align 8
  %struct_getter77 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEqual76, i32 0, i32 0
  %isequal.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter77, align 8
  %array_getter78 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter, i128 0, i128 0
  %isEqual79 = load i128, i128* %array_getter78, align 4
  call void @fn_intrinsic_add_constraint(i128 %isEqual79, i128 %in72, i1* @constraint.182)
  %ptr_getter80 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %i81 = load i128, i128* %i, align 4
  %array_getter82 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter80, i128 0, i128 %i81
  %isEqual83 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter82, align 8
  %struct_getter84 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEqual83, i32 0, i32 0
  %isequal.in.read_input_outter85 = load [256 x i128]*, [256 x i128]** %struct_getter84, align 8
  %isEqual86 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter85, i128 0, i128 0
  store i128 %in72, i128* %isEqual86, align 4
  %in87 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fpisequal.in.declare_input, align 8
  %i88 = load i128, i128* %i, align 4
  %array_getter89 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in87, i128 0, i128 1, i128 %i88
  %in90 = load i128, i128* %array_getter89, align 4
  %isEqual91 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %i92 = load i128, i128* %i, align 4
  %array_getter93 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %isEqual91, i128 0, i128 %i92
  %isEqual94 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter93, align 8
  %struct_getter95 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEqual94, i32 0, i32 0
  %isequal.in.read_input_outter96 = load [256 x i128]*, [256 x i128]** %struct_getter95, align 8
  %array_getter97 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter96, i128 0, i128 1
  %isEqual98 = load i128, i128* %array_getter97, align 4
  call void @fn_intrinsic_add_constraint(i128 %isEqual98, i128 %in90, i1* @constraint.183)
  %ptr_getter99 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %i100 = load i128, i128* %i, align 4
  %array_getter101 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter99, i128 0, i128 %i100
  %isEqual102 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter101, align 8
  %struct_getter103 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEqual102, i32 0, i32 0
  %isequal.in.read_input_outter104 = load [256 x i128]*, [256 x i128]** %struct_getter103, align 8
  %isEqual105 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter104, i128 0, i128 1
  store i128 %in90, i128* %isEqual105, align 4
  %sum106 = load i128, i128* %sum, align 4
  %isEqual107 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %i108 = load i128, i128* %i, align 4
  %array_getter109 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %isEqual107, i128 0, i128 %i108
  %isEqual110 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter109, align 8
  %struct_getter111 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEqual110, i32 0, i32 1
  %isequal.out.read_output_outter = load i128, i128* %struct_getter111, align 4
  %add112 = add i128 %sum106, %isequal.out.read_output_outter
  store i128 %add112, i128* %sum, align 4
  br label %loop.latch113

loop.latch113:                                    ; preds = %loop.body64
  %i114 = load i128, i128* %i, align 4
  %add115 = add i128 %i114, 1
  store i128 %add115, i128* %i, align 4
  %i116 = load i128, i128* %i, align 4
  %k117 = load i128, i128* %fpisequal.k.declare_arg, align 4
  %slt118 = icmp slt i128 %i116, %k117
  br i1 %slt118, label %loop.body64, label %loop.exit119

loop.exit119:                                     ; preds = %loop.latch113
  %call120 = call %struct_template_circuit_isequal* @fn_template_build_isequal()
  %ptr_getter121 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %k122 = load i128, i128* %fpisequal.k.declare_arg, align 4
  %isEqual123 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter121, i128 0, i128 %k122
  store %struct_template_circuit_isequal* %call120, %struct_template_circuit_isequal** %isEqual123, align 8
  %sum124 = load i128, i128* %sum, align 4
  %isEqual125 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %k126 = load i128, i128* %fpisequal.k.declare_arg, align 4
  %array_getter127 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %isEqual125, i128 0, i128 %k126
  %isEqual128 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter127, align 8
  %struct_getter129 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEqual128, i32 0, i32 0
  %isequal.in.read_input_outter130 = load [256 x i128]*, [256 x i128]** %struct_getter129, align 8
  %array_getter131 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter130, i128 0, i128 0
  %isEqual132 = load i128, i128* %array_getter131, align 4
  call void @fn_intrinsic_add_constraint(i128 %isEqual132, i128 %sum124, i1* @constraint.184)
  %ptr_getter133 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %k134 = load i128, i128* %fpisequal.k.declare_arg, align 4
  %array_getter135 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter133, i128 0, i128 %k134
  %isEqual136 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter135, align 8
  %struct_getter137 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEqual136, i32 0, i32 0
  %isequal.in.read_input_outter138 = load [256 x i128]*, [256 x i128]** %struct_getter137, align 8
  %isEqual139 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter138, i128 0, i128 0
  store i128 %sum124, i128* %isEqual139, align 4
  %k140 = load i128, i128* %fpisequal.k.declare_arg, align 4
  %isEqual141 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %k142 = load i128, i128* %fpisequal.k.declare_arg, align 4
  %array_getter143 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %isEqual141, i128 0, i128 %k142
  %isEqual144 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter143, align 8
  %struct_getter145 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEqual144, i32 0, i32 0
  %isequal.in.read_input_outter146 = load [256 x i128]*, [256 x i128]** %struct_getter145, align 8
  %array_getter147 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter146, i128 0, i128 1
  %isEqual148 = load i128, i128* %array_getter147, align 4
  call void @fn_intrinsic_add_constraint(i128 %isEqual148, i128 %k140, i1* @constraint.185)
  %ptr_getter149 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %k150 = load i128, i128* %fpisequal.k.declare_arg, align 4
  %array_getter151 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %ptr_getter149, i128 0, i128 %k150
  %isEqual152 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter151, align 8
  %struct_getter153 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEqual152, i32 0, i32 0
  %isequal.in.read_input_outter154 = load [256 x i128]*, [256 x i128]** %struct_getter153, align 8
  %isEqual155 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter154, i128 0, i128 1
  store i128 %k140, i128* %isEqual155, align 4
  %isEqual156 = load [256 x %struct_template_circuit_isequal*]*, [256 x %struct_template_circuit_isequal*]** %isEqual, align 8
  %k157 = load i128, i128* %fpisequal.k.declare_arg, align 4
  %array_getter158 = getelementptr inbounds [256 x %struct_template_circuit_isequal*], [256 x %struct_template_circuit_isequal*]* %isEqual156, i128 0, i128 %k157
  %isEqual159 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter158, align 8
  %struct_getter160 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEqual159, i32 0, i32 1
  %isequal.out.read_output_outter161 = load i128, i128* %struct_getter160, align 4
  %out162 = load i128, i128* %fpisequal.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out162, i128 %isequal.out.read_output_outter161, i1* @constraint.186)
  %ptr_getter163 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %FpIsEqual, align 8
  %fpisequal.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %ptr_getter163, i32 0, i32 4
  store i128 %isequal.out.read_output_outter161, i128* %fpisequal.out.write_output_inner, align 4
  %FpIsEqual164 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %FpIsEqual, align 8
  %struct_getter165 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %FpIsEqual164, i32 0, i32 4
  %fpisequal.out.read_output_inner = load i128, i128* %struct_getter165, align 4
  store i128 %fpisequal.out.read_output_inner, i128* %fpisequal.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit119
  %out166 = load i128, i128* %fpisequal.out.declare_output, align 4
  %fpisequal.out.write_output_inner167 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %0, i32 0, i32 4
  store i128 %out166, i128* %fpisequal.out.write_output_inner167, align 4
  ret void
}

define %struct_template_circuit_fpisequal* @fn_template_build_fpisequal(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fpisequal = alloca %struct_template_circuit_fpisequal, align 8
  %fpisequal.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %struct_template_circuit_fpisequal, i32 0, i32 0
  store i128 %0, i128* %fpisequal.n.write_arg_inner, align 4
  %fpisequal.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %struct_template_circuit_fpisequal, i32 0, i32 1
  store i128 %1, i128* %fpisequal.k.write_arg_inner, align 4
  %fpisequal.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %struct_template_circuit_fpisequal, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fpisequal.p.write_arg_inner, align 8
  ret %struct_template_circuit_fpisequal* %struct_template_circuit_fpisequal
}

define void @fn_template_init_fpsubtract(%struct_template_circuit_fpsubtract* %0) {
entry:
  %FpSubtract = alloca %struct_template_circuit_fpsubtract*, align 8
  store %struct_template_circuit_fpsubtract* %0, %struct_template_circuit_fpsubtract** %FpSubtract, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %0, i32 0, i32 0
  %fpsubtract.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fpsubtract.n.declare_arg = alloca i128, align 8
  store i128 %fpsubtract.n.read_arg_inner, i128* %fpsubtract.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %0, i32 0, i32 1
  %fpsubtract.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fpsubtract.k.declare_arg = alloca i128, align 8
  store i128 %fpsubtract.k.read_arg_inner, i128* %fpsubtract.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %0, i32 0, i32 2
  %fpsubtract.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fpsubtract.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpsubtract.p.read_arg_inner, [256 x i128]** %fpsubtract.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %0, i32 0, i32 3
  %fpsubtract.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %fpsubtract.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpsubtract.a.read_input_inner, [256 x i128]** %fpsubtract.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %0, i32 0, i32 4
  %fpsubtract.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %fpsubtract.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpsubtract.b.read_input_inner, [256 x i128]** %fpsubtract.b.declare_input, align 8
  %sub = alloca %struct_template_circuit_bigsub*, align 8
  %add = alloca %struct_template_circuit_bigadd*, align 8
  %fpsubtract.flag.declare_inter = alloca i128, align 8
  %flag = call i128 @fn_intrinsic_inline_init()
  store i128 %flag, i128* %fpsubtract.flag.declare_inter, align 4
  %fpsubtract.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %fpsubtract.out.declare_output, align 8
  %fpsubtract.tmp.declare_inter = alloca [256 x i128]*, align 8
  %malloccall5 = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %tmp = bitcast i8* %malloccall5 to [256 x i128]*
  store [256 x i128]* %tmp, [256 x i128]** %fpsubtract.tmp.declare_inter, align 8
  %i = alloca i128, align 8
  %i6 = call i128 @fn_intrinsic_inline_init()
  store i128 %i6, i128* %i, align 4
  %n = load i128, i128* %fpsubtract.n.declare_arg, align 4
  %k = load i128, i128* %fpsubtract.k.declare_arg, align 4
  %call = call %struct_template_circuit_bigsub* @fn_template_build_bigsub(i128 %n, i128 %k)
  store %struct_template_circuit_bigsub* %call, %struct_template_circuit_bigsub** %sub, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %fpsubtract.a.declare_input, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i7
  %a8 = load i128, i128* %array_getter, align 4
  %sub9 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter10 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub9, i32 0, i32 2
  %bigsub.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter10, align 8
  %i11 = load i128, i128* %i, align 4
  %array_getter12 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter, i128 0, i128 %i11
  %sub13 = load i128, i128* %array_getter12, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub13, i128 %a8, i1* @constraint.187)
  %ptr_getter = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter, i32 0, i32 2
  %bigsub.a.read_input_outter15 = load [256 x i128]*, [256 x i128]** %struct_getter14, align 8
  %i16 = load i128, i128* %i, align 4
  %sub17 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter15, i128 0, i128 %i16
  store i128 %a8, i128* %sub17, align 4
  %b = load [256 x i128]*, [256 x i128]** %fpsubtract.b.declare_input, align 8
  %i18 = load i128, i128* %i, align 4
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i18
  %b20 = load i128, i128* %array_getter19, align 4
  %sub21 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter22 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub21, i32 0, i32 3
  %bigsub.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter22, align 8
  %i23 = load i128, i128* %i, align 4
  %array_getter24 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter, i128 0, i128 %i23
  %sub25 = load i128, i128* %array_getter24, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub25, i128 %b20, i1* @constraint.188)
  %ptr_getter26 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter27 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter26, i32 0, i32 3
  %bigsub.b.read_input_outter28 = load [256 x i128]*, [256 x i128]** %struct_getter27, align 8
  %i29 = load i128, i128* %i, align 4
  %sub30 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter28, i128 0, i128 %i29
  store i128 %b20, i128* %sub30, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i31 = load i128, i128* %i, align 4
  %add32 = add i128 %i31, 1
  store i128 %add32, i128* %i, align 4
  %i33 = load i128, i128* %i, align 4
  %k34 = load i128, i128* %fpsubtract.k.declare_arg, align 4
  %slt = icmp slt i128 %i33, %k34
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %sub35 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter36 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub35, i32 0, i32 5
  %bigsub.underflow.read_output_outter = load i128, i128* %struct_getter36, align 4
  %flag37 = load i128, i128* %fpsubtract.flag.declare_inter, align 4
  call void @fn_intrinsic_add_constraint(i128 %flag37, i128 %bigsub.underflow.read_output_outter, i1* @constraint.189)
  %ptr_getter38 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %FpSubtract, align 8
  %fpsubtract.flag.write_inter_inner = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %ptr_getter38, i32 0, i32 5
  store i128 %bigsub.underflow.read_output_outter, i128* %fpsubtract.flag.write_inter_inner, align 4
  %FpSubtract39 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %FpSubtract, align 8
  %struct_getter40 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %FpSubtract39, i32 0, i32 5
  %fpsubtract.flag.read_inter_inner = load i128, i128* %struct_getter40, align 4
  store i128 %fpsubtract.flag.read_inter_inner, i128* %fpsubtract.flag.declare_inter, align 4
  %n41 = load i128, i128* %fpsubtract.n.declare_arg, align 4
  %k42 = load i128, i128* %fpsubtract.k.declare_arg, align 4
  %call43 = call %struct_template_circuit_bigadd* @fn_template_build_bigadd(i128 %n41, i128 %k42)
  store %struct_template_circuit_bigadd* %call43, %struct_template_circuit_bigadd** %add, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body44

loop.body44:                                      ; preds = %loop.latch73, %loop.exit
  %sub45 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter46 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub45, i32 0, i32 4
  %bigsub.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter46, align 8
  %i47 = load i128, i128* %i, align 4
  %array_getter48 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.out.read_output_outter, i128 0, i128 %i47
  %sub49 = load i128, i128* %array_getter48, align 4
  %add50 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter51 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add50, i32 0, i32 2
  %bigadd.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter51, align 8
  %i52 = load i128, i128* %i, align 4
  %array_getter53 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter, i128 0, i128 %i52
  %add54 = load i128, i128* %array_getter53, align 4
  call void @fn_intrinsic_add_constraint(i128 %add54, i128 %sub49, i1* @constraint.190)
  %ptr_getter55 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter56 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter55, i32 0, i32 2
  %bigadd.a.read_input_outter57 = load [256 x i128]*, [256 x i128]** %struct_getter56, align 8
  %i58 = load i128, i128* %i, align 4
  %add59 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter57, i128 0, i128 %i58
  store i128 %sub49, i128* %add59, align 4
  %p = load [256 x i128]*, [256 x i128]** %fpsubtract.p.declare_arg, align 8
  %i60 = load i128, i128* %i, align 4
  %array_getter61 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i60
  %p62 = load i128, i128* %array_getter61, align 4
  %add63 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter64 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add63, i32 0, i32 3
  %bigadd.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter64, align 8
  %i65 = load i128, i128* %i, align 4
  %array_getter66 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter, i128 0, i128 %i65
  %add67 = load i128, i128* %array_getter66, align 4
  call void @fn_intrinsic_add_constraint(i128 %add67, i128 %p62, i1* @constraint.191)
  %ptr_getter68 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter69 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter68, i32 0, i32 3
  %bigadd.b.read_input_outter70 = load [256 x i128]*, [256 x i128]** %struct_getter69, align 8
  %i71 = load i128, i128* %i, align 4
  %add72 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter70, i128 0, i128 %i71
  store i128 %p62, i128* %add72, align 4
  br label %loop.latch73

loop.latch73:                                     ; preds = %loop.body44
  %i74 = load i128, i128* %i, align 4
  %add75 = add i128 %i74, 1
  store i128 %add75, i128* %i, align 4
  %i76 = load i128, i128* %i, align 4
  %k77 = load i128, i128* %fpsubtract.k.declare_arg, align 4
  %slt78 = icmp slt i128 %i76, %k77
  br i1 %slt78, label %loop.body44, label %loop.exit79

loop.exit79:                                      ; preds = %loop.latch73
  store i128 0, i128* %i, align 4
  br label %loop.body80

loop.body80:                                      ; preds = %loop.latch115, %loop.exit79
  %flag81 = load i128, i128* %fpsubtract.flag.declare_inter, align 4
  %sub82 = sub i128 1, %flag81
  %sub83 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter84 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub83, i32 0, i32 4
  %bigsub.out.read_output_outter85 = load [256 x i128]*, [256 x i128]** %struct_getter84, align 8
  %i86 = load i128, i128* %i, align 4
  %array_getter87 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.out.read_output_outter85, i128 0, i128 %i86
  %sub88 = load i128, i128* %array_getter87, align 4
  %mul = mul i128 %sub82, %sub88
  %tmp89 = load [256 x i128]*, [256 x i128]** %fpsubtract.tmp.declare_inter, align 8
  %i90 = load i128, i128* %i, align 4
  %array_getter91 = getelementptr inbounds [256 x i128], [256 x i128]* %tmp89, i128 0, i128 %i90
  %tmp92 = load i128, i128* %array_getter91, align 4
  call void @fn_intrinsic_add_constraint(i128 %tmp92, i128 %mul, i1* @constraint.192)
  %ptr_getter93 = load [256 x i128]*, [256 x i128]** %fpsubtract.tmp.declare_inter, align 8
  %i94 = load i128, i128* %i, align 4
  %tmp95 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter93, i128 0, i128 %i94
  store i128 %mul, i128* %tmp95, align 4
  %tmp96 = load [256 x i128]*, [256 x i128]** %fpsubtract.tmp.declare_inter, align 8
  %i97 = load i128, i128* %i, align 4
  %array_getter98 = getelementptr inbounds [256 x i128], [256 x i128]* %tmp96, i128 0, i128 %i97
  %tmp99 = load i128, i128* %array_getter98, align 4
  %flag100 = load i128, i128* %fpsubtract.flag.declare_inter, align 4
  %add101 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter102 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add101, i32 0, i32 4
  %bigadd.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter102, align 8
  %i103 = load i128, i128* %i, align 4
  %array_getter104 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter, i128 0, i128 %i103
  %add105 = load i128, i128* %array_getter104, align 4
  %mul106 = mul i128 %flag100, %add105
  %add107 = add i128 %tmp99, %mul106
  %out108 = load [256 x i128]*, [256 x i128]** %fpsubtract.out.declare_output, align 8
  %i109 = load i128, i128* %i, align 4
  %array_getter110 = getelementptr inbounds [256 x i128], [256 x i128]* %out108, i128 0, i128 %i109
  %out111 = load i128, i128* %array_getter110, align 4
  call void @fn_intrinsic_add_constraint(i128 %out111, i128 %add107, i1* @constraint.193)
  %ptr_getter112 = load [256 x i128]*, [256 x i128]** %fpsubtract.out.declare_output, align 8
  %i113 = load i128, i128* %i, align 4
  %out114 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter112, i128 0, i128 %i113
  store i128 %add107, i128* %out114, align 4
  br label %loop.latch115

loop.latch115:                                    ; preds = %loop.body80
  %i116 = load i128, i128* %i, align 4
  %add117 = add i128 %i116, 1
  store i128 %add117, i128* %i, align 4
  %i118 = load i128, i128* %i, align 4
  %k119 = load i128, i128* %fpsubtract.k.declare_arg, align 4
  %slt120 = icmp slt i128 %i118, %k119
  br i1 %slt120, label %loop.body80, label %loop.exit121

loop.exit121:                                     ; preds = %loop.latch115
  br label %exit

exit:                                             ; preds = %loop.exit121
  %flag122 = load i128, i128* %fpsubtract.flag.declare_inter, align 4
  %fpsubtract.flag.write_inter_inner123 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %0, i32 0, i32 5
  store i128 %flag122, i128* %fpsubtract.flag.write_inter_inner123, align 4
  %tmp124 = load [256 x i128]*, [256 x i128]** %fpsubtract.tmp.declare_inter, align 8
  %fpsubtract.tmp.write_inter_inner = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %0, i32 0, i32 6
  store [256 x i128]* %tmp124, [256 x i128]** %fpsubtract.tmp.write_inter_inner, align 8
  %out125 = load [256 x i128]*, [256 x i128]** %fpsubtract.out.declare_output, align 8
  %fpsubtract.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %0, i32 0, i32 7
  store [256 x i128]* %out125, [256 x i128]** %fpsubtract.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fpsubtract* @fn_template_build_fpsubtract(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fpsubtract = alloca %struct_template_circuit_fpsubtract, align 8
  %fpsubtract.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %struct_template_circuit_fpsubtract, i32 0, i32 0
  store i128 %0, i128* %fpsubtract.n.write_arg_inner, align 4
  %fpsubtract.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %struct_template_circuit_fpsubtract, i32 0, i32 1
  store i128 %1, i128* %fpsubtract.k.write_arg_inner, align 4
  %fpsubtract.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %struct_template_circuit_fpsubtract, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fpsubtract.p.write_arg_inner, align 8
  ret %struct_template_circuit_fpsubtract* %struct_template_circuit_fpsubtract
}

define [256 x [256 x i128]]* @get_signed_Fp_carry_witness(i128 %0, i128 %1, i128 %2, [256 x i128]* %3, [256 x i128]* %4) {
entry:
  %get_signed_fp_carry_witness.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %get_signed_fp_carry_witness.n.declare_arg, align 4
  %get_signed_fp_carry_witness.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %get_signed_fp_carry_witness.k.declare_arg, align 4
  %get_signed_fp_carry_witness.m.declare_arg = alloca i128, align 8
  store i128 %2, i128* %get_signed_fp_carry_witness.m.declare_arg, align 4
  %get_signed_fp_carry_witness.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %get_signed_fp_carry_witness.a.declare_arg, align 8
  %get_signed_fp_carry_witness.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %get_signed_fp_carry_witness.p.declare_arg, align 8
  %i = alloca i128, align 8
  %i1 = call i128 @fn_intrinsic_inline_init()
  store i128 %i1, i128* %i, align 4
  %X = alloca [256 x [256 x i128]]*, align 8
  %X2 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %X2, [256 x [256 x i128]]** %X, align 8
  %Y_is_zero = alloca i128, align 8
  %Y_is_zero3 = call i128 @fn_intrinsic_inline_init()
  store i128 %Y_is_zero3, i128* %Y_is_zero, align 4
  %a_short = alloca [256 x i128]*, align 8
  %a_short4 = alloca [256 x i128], align 8
  store [256 x i128]* %a_short4, [256 x i128]** %a_short, align 8
  %out = alloca [256 x [256 x i128]]*, align 8
  %out5 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out5, [256 x [256 x i128]]** %out, align 8
  %a_pos = alloca [256 x i128]*, align 8
  %a_pos6 = alloca [256 x i128], align 8
  store [256 x i128]* %a_pos6, [256 x i128]** %a_pos, align 8
  %carry = alloca i128, align 8
  %carry7 = call i128 @fn_intrinsic_inline_init()
  store i128 %carry7, i128* %carry, align 4
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %out, align 8
  %n = load i128, i128* %get_signed_fp_carry_witness.n.declare_arg, align 4
  %k = load i128, i128* %get_signed_fp_carry_witness.k.declare_arg, align 4
  %a = load [256 x i128]*, [256 x i128]** %get_signed_fp_carry_witness.a.declare_arg, align 8
  %call = call [256 x i128]* @signed_long_to_short(i128 %n, i128 %k, [256 x i128]* %a)
  store [256 x i128]* %call, [256 x i128]** %a_short, align 8
  %a_short8 = load [256 x i128]*, [256 x i128]** %a_short, align 8
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a_short8, i128 0, i128 50
  %a_short9 = load i128, i128* %array_getter, align 4
  %eq = icmp eq i128 %a_short9, 0
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %entry
  %n10 = load i128, i128* %get_signed_fp_carry_witness.n.declare_arg, align 4
  %k11 = load i128, i128* %get_signed_fp_carry_witness.k.declare_arg, align 4
  %m = load i128, i128* %get_signed_fp_carry_witness.m.declare_arg, align 4
  %a_short12 = load [256 x i128]*, [256 x i128]** %a_short, align 8
  %p = load [256 x i128]*, [256 x i128]** %get_signed_fp_carry_witness.p.declare_arg, align 8
  %call13 = call [256 x [256 x i128]]* @long_div2(i128 %n10, i128 %k11, i128 %m, [256 x i128]* %a_short12, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call13, [256 x [256 x i128]]** %out, align 8
  br label %if.exit131

if.false:                                         ; preds = %entry
  %uniform_array14 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array14, [256 x i128]** %a_pos, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %if.false
  %a_short15 = load [256 x i128]*, [256 x i128]** %a_short, align 8
  %i16 = load i128, i128* %i, align 4
  %array_getter17 = getelementptr inbounds [256 x i128], [256 x i128]* %a_short15, i128 0, i128 %i16
  %a_short18 = load i128, i128* %array_getter17, align 4
  %neg = sub i128 0, %a_short18
  %ptr_getter = load [256 x i128]*, [256 x i128]** %a_pos, align 8
  %i19 = load i128, i128* %i, align 4
  %a_pos20 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i19
  store i128 %neg, i128* %a_pos20, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i21 = load i128, i128* %i, align 4
  %add = add i128 %i21, 1
  store i128 %add, i128* %i, align 4
  %i22 = load i128, i128* %i, align 4
  %k23 = load i128, i128* %get_signed_fp_carry_witness.k.declare_arg, align 4
  %m24 = load i128, i128* %get_signed_fp_carry_witness.m.declare_arg, align 4
  %add25 = add i128 %k23, %m24
  %slt = icmp slt i128 %i22, %add25
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n26 = load i128, i128* %get_signed_fp_carry_witness.n.declare_arg, align 4
  %k27 = load i128, i128* %get_signed_fp_carry_witness.k.declare_arg, align 4
  %m28 = load i128, i128* %get_signed_fp_carry_witness.m.declare_arg, align 4
  %a_pos29 = load [256 x i128]*, [256 x i128]** %a_pos, align 8
  %p30 = load [256 x i128]*, [256 x i128]** %get_signed_fp_carry_witness.p.declare_arg, align 8
  %call31 = call [256 x [256 x i128]]* @long_div2(i128 %n26, i128 %k27, i128 %m28, [256 x i128]* %a_pos29, [256 x i128]* %p30)
  store [256 x [256 x i128]]* %call31, [256 x [256 x i128]]** %X, align 8
  store i128 1, i128* %Y_is_zero, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body32

loop.body32:                                      ; preds = %loop.latch39, %loop.exit
  %X35 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %i36 = load i128, i128* %i, align 4
  %array_getter37 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X35, i128 0, i128 1, i128 %i36
  %X38 = load i128, i128* %array_getter37, align 4
  %ne = icmp ne i128 %X38, 0
  br i1 %ne, label %if.true33, label %if.false34

if.true33:                                        ; preds = %loop.body32
  store i128 0, i128* %Y_is_zero, align 4
  br label %if.exit

if.false34:                                       ; preds = %loop.body32
  br label %if.exit

if.exit:                                          ; preds = %if.false34, %if.true33
  br label %loop.latch39

loop.latch39:                                     ; preds = %if.exit
  %i40 = load i128, i128* %i, align 4
  %add41 = add i128 %i40, 1
  store i128 %add41, i128* %i, align 4
  %i42 = load i128, i128* %i, align 4
  %k43 = load i128, i128* %get_signed_fp_carry_witness.k.declare_arg, align 4
  %slt44 = icmp slt i128 %i42, %k43
  br i1 %slt44, label %loop.body32, label %loop.exit45

loop.exit45:                                      ; preds = %loop.latch39
  %Y_is_zero48 = load i128, i128* %Y_is_zero, align 4
  %eq49 = icmp eq i128 %Y_is_zero48, 1
  br i1 %eq49, label %if.true46, label %if.false47

if.true46:                                        ; preds = %loop.exit45
  %X50 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %array_getter51 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X50, i128 0, i128 1
  %X52 = load [256 x i128], [256 x i128]* %array_getter51, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %X52, [256 x i128]* %spice_inline_array, align 4
  %ptr_getter53 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out54 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter53, i128 0, i128 1
  %5 = bitcast [256 x i128]* %out54 to i8*
  %6 = bitcast [256 x i128]* %spice_inline_array to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  br label %if.exit114

if.false47:                                       ; preds = %loop.exit45
  %n55 = load i128, i128* %get_signed_fp_carry_witness.n.declare_arg, align 4
  %k56 = load i128, i128* %get_signed_fp_carry_witness.k.declare_arg, align 4
  %p57 = load [256 x i128]*, [256 x i128]** %get_signed_fp_carry_witness.p.declare_arg, align 8
  %X58 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %array_getter59 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X58, i128 0, i128 1
  %X60 = load [256 x i128], [256 x i128]* %array_getter59, align 4
  %spice_inline_array61 = alloca [256 x i128], align 8
  store [256 x i128] %X60, [256 x i128]* %spice_inline_array61, align 4
  %call62 = call [256 x i128]* @long_sub(i128 %n55, i128 %k56, [256 x i128]* %p57, [256 x i128]* %spice_inline_array61)
  %ptr_getter63 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out64 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter63, i128 0, i128 1
  %7 = bitcast [256 x i128]* %out64 to i8*
  %8 = bitcast [256 x i128]* %call62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  %X65 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %array_getter66 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X65, i128 0, i128 0, i128 0
  %X67 = load i128, i128* %array_getter66, align 4
  %add68 = add i128 %X67, 1
  %ptr_getter69 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %X70 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter69, i128 0, i128 0, i128 0
  store i128 %add68, i128* %X70, align 4
  %X73 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %array_getter74 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X73, i128 0, i128 0, i128 0
  %X75 = load i128, i128* %array_getter74, align 4
  %n76 = load i128, i128* %get_signed_fp_carry_witness.n.declare_arg, align 4
  %lshift = shl i128 1, %n76
  %sge = icmp sge i128 %X75, %lshift
  br i1 %sge, label %if.true71, label %if.false72

if.true71:                                        ; preds = %if.false47
  store i128 0, i128* %i, align 4
  br label %loop.body77

if.false72:                                       ; preds = %if.false47
  br label %if.exit113

loop.body77:                                      ; preds = %loop.latch105, %if.true71
  %X78 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %i79 = load i128, i128* %i, align 4
  %array_getter80 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X78, i128 0, i128 0, i128 %i79
  %X81 = load i128, i128* %array_getter80, align 4
  %n82 = load i128, i128* %get_signed_fp_carry_witness.n.declare_arg, align 4
  %lshift83 = shl i128 1, %n82
  %sdiv = sdiv i128 %X81, %lshift83
  store i128 %sdiv, i128* %carry, align 4
  %X84 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %i85 = load i128, i128* %i, align 4
  %add86 = add i128 %i85, 1
  %array_getter87 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X84, i128 0, i128 0, i128 %add86
  %X88 = load i128, i128* %array_getter87, align 4
  %carry89 = load i128, i128* %carry, align 4
  %add90 = add i128 %X88, %carry89
  %ptr_getter91 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %i92 = load i128, i128* %i, align 4
  %add93 = add i128 %i92, 1
  %X94 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter91, i128 0, i128 0, i128 %add93
  store i128 %add90, i128* %X94, align 4
  %X95 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %i96 = load i128, i128* %i, align 4
  %array_getter97 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X95, i128 0, i128 0, i128 %i96
  %X98 = load i128, i128* %array_getter97, align 4
  %carry99 = load i128, i128* %carry, align 4
  %n100 = load i128, i128* %get_signed_fp_carry_witness.n.declare_arg, align 4
  %lshift101 = shl i128 1, %n100
  %mul = mul i128 %carry99, %lshift101
  %sub = sub i128 %X98, %mul
  %ptr_getter102 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %i103 = load i128, i128* %i, align 4
  %X104 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter102, i128 0, i128 0, i128 %i103
  store i128 %sub, i128* %X104, align 4
  br label %loop.latch105

loop.latch105:                                    ; preds = %loop.body77
  %i106 = load i128, i128* %i, align 4
  %add107 = add i128 %i106, 1
  store i128 %add107, i128* %i, align 4
  %i108 = load i128, i128* %i, align 4
  %m109 = load i128, i128* %get_signed_fp_carry_witness.m.declare_arg, align 4
  %sub110 = sub i128 %m109, 1
  %slt111 = icmp slt i128 %i108, %sub110
  br i1 %slt111, label %loop.body77, label %loop.exit112

loop.exit112:                                     ; preds = %loop.latch105
  br label %if.exit113

if.exit113:                                       ; preds = %if.false72, %loop.exit112
  br label %if.exit114

if.exit114:                                       ; preds = %if.exit113, %if.true46
  store i128 0, i128* %i, align 4
  br label %loop.body115

loop.body115:                                     ; preds = %loop.latch124, %if.exit114
  %X116 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %X, align 8
  %i117 = load i128, i128* %i, align 4
  %array_getter118 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X116, i128 0, i128 0, i128 %i117
  %X119 = load i128, i128* %array_getter118, align 4
  %neg120 = sub i128 0, %X119
  %ptr_getter121 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %i122 = load i128, i128* %i, align 4
  %out123 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter121, i128 0, i128 0, i128 %i122
  store i128 %neg120, i128* %out123, align 4
  br label %loop.latch124

loop.latch124:                                    ; preds = %loop.body115
  %i125 = load i128, i128* %i, align 4
  %add126 = add i128 %i125, 1
  store i128 %add126, i128* %i, align 4
  %i127 = load i128, i128* %i, align 4
  %m128 = load i128, i128* %get_signed_fp_carry_witness.m.declare_arg, align 4
  %slt129 = icmp slt i128 %i127, %m128
  br i1 %slt129, label %loop.body115, label %loop.exit130

loop.exit130:                                     ; preds = %loop.latch124
  br label %if.exit131

if.exit131:                                       ; preds = %loop.exit130, %if.true
  %out132 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  ret [256 x [256 x i128]]* %out132
}

define [256 x [256 x i128]]* @long_div(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3) {
entry:
  %long_div.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_div.n.declare_arg, align 4
  %long_div.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %long_div.k.declare_arg, align 4
  %long_div.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %long_div.a.declare_arg, align 8
  %long_div.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %long_div.b.declare_arg, align 8
  %n = load i128, i128* %long_div.n.declare_arg, align 4
  %k = load i128, i128* %long_div.k.declare_arg, align 4
  %k1 = load i128, i128* %long_div.k.declare_arg, align 4
  %a = load [256 x i128]*, [256 x i128]** %long_div.a.declare_arg, align 8
  %b = load [256 x i128]*, [256 x i128]** %long_div.b.declare_arg, align 8
  %call = call [256 x [256 x i128]]* @long_div2(i128 %n, i128 %k, i128 %k1, [256 x i128]* %a, [256 x i128]* %b)
  ret [256 x [256 x i128]]* %call
}

define [256 x i128]* @long_add_mod(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3, [256 x i128]* %4) {
entry:
  %long_add_mod.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %long_add_mod.n.declare_arg, align 4
  %long_add_mod.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %long_add_mod.k.declare_arg, align 4
  %long_add_mod.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %long_add_mod.a.declare_arg, align 8
  %long_add_mod.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %long_add_mod.b.declare_arg, align 8
  %long_add_mod.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %long_add_mod.p.declare_arg, align 8
  %sum = alloca [256 x i128]*, align 8
  %sum1 = alloca [256 x i128], align 8
  store [256 x i128]* %sum1, [256 x i128]** %sum, align 8
  %temp = alloca [256 x [256 x i128]]*, align 8
  %temp2 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %temp2, [256 x [256 x i128]]** %temp, align 8
  %n = load i128, i128* %long_add_mod.n.declare_arg, align 4
  %k = load i128, i128* %long_add_mod.k.declare_arg, align 4
  %a = load [256 x i128]*, [256 x i128]** %long_add_mod.a.declare_arg, align 8
  %b = load [256 x i128]*, [256 x i128]** %long_add_mod.b.declare_arg, align 8
  %call = call [256 x i128]* @long_add(i128 %n, i128 %k, [256 x i128]* %a, [256 x i128]* %b)
  store [256 x i128]* %call, [256 x i128]** %sum, align 8
  %n3 = load i128, i128* %long_add_mod.n.declare_arg, align 4
  %k4 = load i128, i128* %long_add_mod.k.declare_arg, align 4
  %sum5 = load [256 x i128]*, [256 x i128]** %sum, align 8
  %p = load [256 x i128]*, [256 x i128]** %long_add_mod.p.declare_arg, align 8
  %call6 = call [256 x [256 x i128]]* @long_div2(i128 %n3, i128 %k4, i128 1, [256 x i128]* %sum5, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call6, [256 x [256 x i128]]** %temp, align 8
  %temp7 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %temp, align 8
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %temp7, i128 0, i128 1
  %temp8 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %temp8, [256 x i128]* %spice_inline_array, align 4
  ret [256 x i128]* %spice_inline_array
}

define void @fn_template_init_fpadd(%struct_template_circuit_fpadd* %0) {
entry:
  %FpAdd = alloca %struct_template_circuit_fpadd*, align 8
  store %struct_template_circuit_fpadd* %0, %struct_template_circuit_fpadd** %FpAdd, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %0, i32 0, i32 0
  %fpadd.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fpadd.n.declare_arg = alloca i128, align 8
  store i128 %fpadd.n.read_arg_inner, i128* %fpadd.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %0, i32 0, i32 1
  %fpadd.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fpadd.k.declare_arg = alloca i128, align 8
  store i128 %fpadd.k.read_arg_inner, i128* %fpadd.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %0, i32 0, i32 2
  %fpadd.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fpadd.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpadd.p.read_arg_inner, [256 x i128]** %fpadd.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %0, i32 0, i32 3
  %fpadd.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %fpadd.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpadd.a.read_input_inner, [256 x i128]** %fpadd.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %0, i32 0, i32 4
  %fpadd.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %fpadd.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpadd.b.read_input_inner, [256 x i128]** %fpadd.b.declare_input, align 8
  %fpadd.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %fpadd.out.declare_output, align 8
  %add = alloca %struct_template_circuit_bigadd*, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %sub = alloca %struct_template_circuit_bigsub*, align 8
  %lt = alloca %struct_template_circuit_biglessthan*, align 8
  %n = load i128, i128* %fpadd.n.declare_arg, align 4
  %k = load i128, i128* %fpadd.k.declare_arg, align 4
  %call = call %struct_template_circuit_bigadd* @fn_template_build_bigadd(i128 %n, i128 %k)
  store %struct_template_circuit_bigadd* %call, %struct_template_circuit_bigadd** %add, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %fpadd.a.declare_input, align 8
  %i6 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i6
  %a7 = load i128, i128* %array_getter, align 4
  %add8 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add8, i32 0, i32 2
  %bigadd.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter9, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter11 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter, i128 0, i128 %i10
  %add12 = load i128, i128* %array_getter11, align 4
  call void @fn_intrinsic_add_constraint(i128 %add12, i128 %a7, i1* @constraint.194)
  %ptr_getter = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter13 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter, i32 0, i32 2
  %bigadd.a.read_input_outter14 = load [256 x i128]*, [256 x i128]** %struct_getter13, align 8
  %i15 = load i128, i128* %i, align 4
  %add16 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter14, i128 0, i128 %i15
  store i128 %a7, i128* %add16, align 4
  %b = load [256 x i128]*, [256 x i128]** %fpadd.b.declare_input, align 8
  %i17 = load i128, i128* %i, align 4
  %array_getter18 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i17
  %b19 = load i128, i128* %array_getter18, align 4
  %add20 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter21 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add20, i32 0, i32 3
  %bigadd.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter21, align 8
  %i22 = load i128, i128* %i, align 4
  %array_getter23 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter, i128 0, i128 %i22
  %add24 = load i128, i128* %array_getter23, align 4
  call void @fn_intrinsic_add_constraint(i128 %add24, i128 %b19, i1* @constraint.195)
  %ptr_getter25 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter25, i32 0, i32 3
  %bigadd.b.read_input_outter27 = load [256 x i128]*, [256 x i128]** %struct_getter26, align 8
  %i28 = load i128, i128* %i, align 4
  %add29 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter27, i128 0, i128 %i28
  store i128 %b19, i128* %add29, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i30 = load i128, i128* %i, align 4
  %add31 = add i128 %i30, 1
  store i128 %add31, i128* %i, align 4
  %i32 = load i128, i128* %i, align 4
  %k33 = load i128, i128* %fpadd.k.declare_arg, align 4
  %slt = icmp slt i128 %i32, %k33
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n34 = load i128, i128* %fpadd.n.declare_arg, align 4
  %k35 = load i128, i128* %fpadd.k.declare_arg, align 4
  %add36 = add i128 %k35, 1
  %call37 = call %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %n34, i128 %add36)
  store %struct_template_circuit_biglessthan* %call37, %struct_template_circuit_biglessthan** %lt, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body38

loop.body38:                                      ; preds = %loop.latch67, %loop.exit
  %add39 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter40 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add39, i32 0, i32 4
  %bigadd.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter40, align 8
  %i41 = load i128, i128* %i, align 4
  %array_getter42 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter, i128 0, i128 %i41
  %add43 = load i128, i128* %array_getter42, align 4
  %lt44 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter45 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt44, i32 0, i32 2
  %biglessthan.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter45, align 8
  %i46 = load i128, i128* %i, align 4
  %array_getter47 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter, i128 0, i128 %i46
  %lt48 = load i128, i128* %array_getter47, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt48, i128 %add43, i1* @constraint.196)
  %ptr_getter49 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter50 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter49, i32 0, i32 2
  %biglessthan.a.read_input_outter51 = load [256 x i128]*, [256 x i128]** %struct_getter50, align 8
  %i52 = load i128, i128* %i, align 4
  %lt53 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter51, i128 0, i128 %i52
  store i128 %add43, i128* %lt53, align 4
  %p = load [256 x i128]*, [256 x i128]** %fpadd.p.declare_arg, align 8
  %i54 = load i128, i128* %i, align 4
  %array_getter55 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i54
  %p56 = load i128, i128* %array_getter55, align 4
  %lt57 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter58 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt57, i32 0, i32 3
  %biglessthan.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter58, align 8
  %i59 = load i128, i128* %i, align 4
  %array_getter60 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter, i128 0, i128 %i59
  %lt61 = load i128, i128* %array_getter60, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt61, i128 %p56, i1* @constraint.197)
  %ptr_getter62 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter63 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter62, i32 0, i32 3
  %biglessthan.b.read_input_outter64 = load [256 x i128]*, [256 x i128]** %struct_getter63, align 8
  %i65 = load i128, i128* %i, align 4
  %lt66 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter64, i128 0, i128 %i65
  store i128 %p56, i128* %lt66, align 4
  br label %loop.latch67

loop.latch67:                                     ; preds = %loop.body38
  %i68 = load i128, i128* %i, align 4
  %add69 = add i128 %i68, 1
  store i128 %add69, i128* %i, align 4
  %i70 = load i128, i128* %i, align 4
  %k71 = load i128, i128* %fpadd.k.declare_arg, align 4
  %slt72 = icmp slt i128 %i70, %k71
  br i1 %slt72, label %loop.body38, label %loop.exit73

loop.exit73:                                      ; preds = %loop.latch67
  %add74 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter75 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add74, i32 0, i32 4
  %bigadd.out.read_output_outter76 = load [256 x i128]*, [256 x i128]** %struct_getter75, align 8
  %k77 = load i128, i128* %fpadd.k.declare_arg, align 4
  %array_getter78 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter76, i128 0, i128 %k77
  %add79 = load i128, i128* %array_getter78, align 4
  %lt80 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter81 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt80, i32 0, i32 2
  %biglessthan.a.read_input_outter82 = load [256 x i128]*, [256 x i128]** %struct_getter81, align 8
  %k83 = load i128, i128* %fpadd.k.declare_arg, align 4
  %array_getter84 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter82, i128 0, i128 %k83
  %lt85 = load i128, i128* %array_getter84, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt85, i128 %add79, i1* @constraint.198)
  %ptr_getter86 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter87 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter86, i32 0, i32 2
  %biglessthan.a.read_input_outter88 = load [256 x i128]*, [256 x i128]** %struct_getter87, align 8
  %k89 = load i128, i128* %fpadd.k.declare_arg, align 4
  %lt90 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter88, i128 0, i128 %k89
  store i128 %add79, i128* %lt90, align 4
  %lt91 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter92 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt91, i32 0, i32 3
  %biglessthan.b.read_input_outter93 = load [256 x i128]*, [256 x i128]** %struct_getter92, align 8
  %k94 = load i128, i128* %fpadd.k.declare_arg, align 4
  %array_getter95 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter93, i128 0, i128 %k94
  %lt96 = load i128, i128* %array_getter95, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt96, i128 0, i1* @constraint.199)
  %ptr_getter97 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter98 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter97, i32 0, i32 3
  %biglessthan.b.read_input_outter99 = load [256 x i128]*, [256 x i128]** %struct_getter98, align 8
  %k100 = load i128, i128* %fpadd.k.declare_arg, align 4
  %lt101 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter99, i128 0, i128 %k100
  store i128 0, i128* %lt101, align 4
  %n102 = load i128, i128* %fpadd.n.declare_arg, align 4
  %k103 = load i128, i128* %fpadd.k.declare_arg, align 4
  %add104 = add i128 %k103, 1
  %call105 = call %struct_template_circuit_bigsub* @fn_template_build_bigsub(i128 %n102, i128 %add104)
  store %struct_template_circuit_bigsub* %call105, %struct_template_circuit_bigsub** %sub, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body106

loop.body106:                                     ; preds = %loop.latch144, %loop.exit73
  %add107 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter108 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add107, i32 0, i32 4
  %bigadd.out.read_output_outter109 = load [256 x i128]*, [256 x i128]** %struct_getter108, align 8
  %i110 = load i128, i128* %i, align 4
  %array_getter111 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter109, i128 0, i128 %i110
  %add112 = load i128, i128* %array_getter111, align 4
  %sub113 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter114 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub113, i32 0, i32 2
  %bigsub.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter114, align 8
  %i115 = load i128, i128* %i, align 4
  %array_getter116 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter, i128 0, i128 %i115
  %sub117 = load i128, i128* %array_getter116, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub117, i128 %add112, i1* @constraint.200)
  %ptr_getter118 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter119 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter118, i32 0, i32 2
  %bigsub.a.read_input_outter120 = load [256 x i128]*, [256 x i128]** %struct_getter119, align 8
  %i121 = load i128, i128* %i, align 4
  %sub122 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter120, i128 0, i128 %i121
  store i128 %add112, i128* %sub122, align 4
  %p123 = load [256 x i128]*, [256 x i128]** %fpadd.p.declare_arg, align 8
  %i124 = load i128, i128* %i, align 4
  %array_getter125 = getelementptr inbounds [256 x i128], [256 x i128]* %p123, i128 0, i128 %i124
  %p126 = load i128, i128* %array_getter125, align 4
  %lt127 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter128 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt127, i32 0, i32 4
  %biglessthan.out.read_output_outter = load i128, i128* %struct_getter128, align 4
  %p129 = load [256 x i128]*, [256 x i128]** %fpadd.p.declare_arg, align 8
  %i130 = load i128, i128* %i, align 4
  %array_getter131 = getelementptr inbounds [256 x i128], [256 x i128]* %p129, i128 0, i128 %i130
  %p132 = load i128, i128* %array_getter131, align 4
  %mul = mul i128 %biglessthan.out.read_output_outter, %p132
  %sub133 = sub i128 %p126, %mul
  %sub134 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter135 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub134, i32 0, i32 3
  %bigsub.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter135, align 8
  %i136 = load i128, i128* %i, align 4
  %array_getter137 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter, i128 0, i128 %i136
  %sub138 = load i128, i128* %array_getter137, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub138, i128 %sub133, i1* @constraint.201)
  %ptr_getter139 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter140 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter139, i32 0, i32 3
  %bigsub.b.read_input_outter141 = load [256 x i128]*, [256 x i128]** %struct_getter140, align 8
  %i142 = load i128, i128* %i, align 4
  %sub143 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter141, i128 0, i128 %i142
  store i128 %sub133, i128* %sub143, align 4
  br label %loop.latch144

loop.latch144:                                    ; preds = %loop.body106
  %i145 = load i128, i128* %i, align 4
  %add146 = add i128 %i145, 1
  store i128 %add146, i128* %i, align 4
  %i147 = load i128, i128* %i, align 4
  %k148 = load i128, i128* %fpadd.k.declare_arg, align 4
  %slt149 = icmp slt i128 %i147, %k148
  br i1 %slt149, label %loop.body106, label %loop.exit150

loop.exit150:                                     ; preds = %loop.latch144
  %add151 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter152 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add151, i32 0, i32 4
  %bigadd.out.read_output_outter153 = load [256 x i128]*, [256 x i128]** %struct_getter152, align 8
  %k154 = load i128, i128* %fpadd.k.declare_arg, align 4
  %array_getter155 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter153, i128 0, i128 %k154
  %add156 = load i128, i128* %array_getter155, align 4
  %sub157 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter158 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub157, i32 0, i32 2
  %bigsub.a.read_input_outter159 = load [256 x i128]*, [256 x i128]** %struct_getter158, align 8
  %k160 = load i128, i128* %fpadd.k.declare_arg, align 4
  %array_getter161 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter159, i128 0, i128 %k160
  %sub162 = load i128, i128* %array_getter161, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub162, i128 %add156, i1* @constraint.202)
  %ptr_getter163 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter164 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter163, i32 0, i32 2
  %bigsub.a.read_input_outter165 = load [256 x i128]*, [256 x i128]** %struct_getter164, align 8
  %k166 = load i128, i128* %fpadd.k.declare_arg, align 4
  %sub167 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter165, i128 0, i128 %k166
  store i128 %add156, i128* %sub167, align 4
  %sub168 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter169 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub168, i32 0, i32 3
  %bigsub.b.read_input_outter170 = load [256 x i128]*, [256 x i128]** %struct_getter169, align 8
  %k171 = load i128, i128* %fpadd.k.declare_arg, align 4
  %array_getter172 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter170, i128 0, i128 %k171
  %sub173 = load i128, i128* %array_getter172, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub173, i128 0, i1* @constraint.203)
  %ptr_getter174 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter175 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter174, i32 0, i32 3
  %bigsub.b.read_input_outter176 = load [256 x i128]*, [256 x i128]** %struct_getter175, align 8
  %k177 = load i128, i128* %fpadd.k.declare_arg, align 4
  %sub178 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter176, i128 0, i128 %k177
  store i128 0, i128* %sub178, align 4
  %sub179 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter180 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub179, i32 0, i32 4
  %bigsub.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter180, align 8
  %k181 = load i128, i128* %fpadd.k.declare_arg, align 4
  %array_getter182 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.out.read_output_outter, i128 0, i128 %k181
  %sub183 = load i128, i128* %array_getter182, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub183, i128 0, i1* @constraint.204)
  store i128 0, i128* %i, align 4
  br label %loop.body184

loop.body184:                                     ; preds = %loop.latch198, %loop.exit150
  %sub185 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter186 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub185, i32 0, i32 4
  %bigsub.out.read_output_outter187 = load [256 x i128]*, [256 x i128]** %struct_getter186, align 8
  %i188 = load i128, i128* %i, align 4
  %array_getter189 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.out.read_output_outter187, i128 0, i128 %i188
  %sub190 = load i128, i128* %array_getter189, align 4
  %out191 = load [256 x i128]*, [256 x i128]** %fpadd.out.declare_output, align 8
  %i192 = load i128, i128* %i, align 4
  %array_getter193 = getelementptr inbounds [256 x i128], [256 x i128]* %out191, i128 0, i128 %i192
  %out194 = load i128, i128* %array_getter193, align 4
  call void @fn_intrinsic_add_constraint(i128 %out194, i128 %sub190, i1* @constraint.205)
  %ptr_getter195 = load [256 x i128]*, [256 x i128]** %fpadd.out.declare_output, align 8
  %i196 = load i128, i128* %i, align 4
  %out197 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter195, i128 0, i128 %i196
  store i128 %sub190, i128* %out197, align 4
  br label %loop.latch198

loop.latch198:                                    ; preds = %loop.body184
  %i199 = load i128, i128* %i, align 4
  %add200 = add i128 %i199, 1
  store i128 %add200, i128* %i, align 4
  %i201 = load i128, i128* %i, align 4
  %k202 = load i128, i128* %fpadd.k.declare_arg, align 4
  %slt203 = icmp slt i128 %i201, %k202
  br i1 %slt203, label %loop.body184, label %loop.exit204

loop.exit204:                                     ; preds = %loop.latch198
  br label %exit

exit:                                             ; preds = %loop.exit204
  %out205 = load [256 x i128]*, [256 x i128]** %fpadd.out.declare_output, align 8
  %fpadd.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %0, i32 0, i32 5
  store [256 x i128]* %out205, [256 x i128]** %fpadd.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fpadd* @fn_template_build_fpadd(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fpadd = alloca %struct_template_circuit_fpadd, align 8
  %fpadd.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %struct_template_circuit_fpadd, i32 0, i32 0
  store i128 %0, i128* %fpadd.n.write_arg_inner, align 4
  %fpadd.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %struct_template_circuit_fpadd, i32 0, i32 1
  store i128 %1, i128* %fpadd.k.write_arg_inner, align 4
  %fpadd.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %struct_template_circuit_fpadd, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fpadd.p.write_arg_inner, align 8
  ret %struct_template_circuit_fpadd* %struct_template_circuit_fpadd
}

define void @fn_template_init_fpsgn0(%struct_template_circuit_fpsgn0* %0) {
entry:
  %FpSgn0 = alloca %struct_template_circuit_fpsgn0*, align 8
  store %struct_template_circuit_fpsgn0* %0, %struct_template_circuit_fpsgn0** %FpSgn0, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %0, i32 0, i32 0
  %fpsgn0.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fpsgn0.n.declare_arg = alloca i128, align 8
  store i128 %fpsgn0.n.read_arg_inner, i128* %fpsgn0.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %0, i32 0, i32 1
  %fpsgn0.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fpsgn0.k.declare_arg = alloca i128, align 8
  store i128 %fpsgn0.k.read_arg_inner, i128* %fpsgn0.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %0, i32 0, i32 2
  %fpsgn0.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fpsgn0.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpsgn0.p.read_arg_inner, [256 x i128]** %fpsgn0.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %0, i32 0, i32 3
  %fpsgn0.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %fpsgn0.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpsgn0.in.read_input_inner, [256 x i128]** %fpsgn0.in.declare_input, align 8
  %lt = alloca %struct_template_circuit_biglessthan*, align 8
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %fpsgn0.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %fpsgn0.out.declare_output, align 4
  %r = alloca i128, align 8
  %r5 = call i128 @fn_intrinsic_inline_init()
  store i128 %r5, i128* %r, align 4
  %q = alloca i128, align 8
  %q6 = call i128 @fn_intrinsic_inline_init()
  store i128 %q6, i128* %q, align 4
  %fpsgn0.div.declare_inter = alloca i128, align 8
  %div = call i128 @fn_intrinsic_inline_init()
  store i128 %div, i128* %fpsgn0.div.declare_inter, align 4
  %n = load i128, i128* %fpsgn0.n.declare_arg, align 4
  %k = load i128, i128* %fpsgn0.k.declare_arg, align 4
  %call = call %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %n, i128 %k)
  store %struct_template_circuit_biglessthan* %call, %struct_template_circuit_biglessthan** %lt, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %in = load [256 x i128]*, [256 x i128]** %fpsgn0.in.declare_input, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %i7
  %in8 = load i128, i128* %array_getter, align 4
  %lt9 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter10 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt9, i32 0, i32 2
  %biglessthan.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter10, align 8
  %i11 = load i128, i128* %i, align 4
  %array_getter12 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter, i128 0, i128 %i11
  %lt13 = load i128, i128* %array_getter12, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt13, i128 %in8, i1* @constraint.206)
  %ptr_getter = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter, i32 0, i32 2
  %biglessthan.a.read_input_outter15 = load [256 x i128]*, [256 x i128]** %struct_getter14, align 8
  %i16 = load i128, i128* %i, align 4
  %lt17 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter15, i128 0, i128 %i16
  store i128 %in8, i128* %lt17, align 4
  %p = load [256 x i128]*, [256 x i128]** %fpsgn0.p.declare_arg, align 8
  %i18 = load i128, i128* %i, align 4
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i18
  %p20 = load i128, i128* %array_getter19, align 4
  %lt21 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter22 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt21, i32 0, i32 3
  %biglessthan.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter22, align 8
  %i23 = load i128, i128* %i, align 4
  %array_getter24 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter, i128 0, i128 %i23
  %lt25 = load i128, i128* %array_getter24, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt25, i128 %p20, i1* @constraint.207)
  %ptr_getter26 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter27 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter26, i32 0, i32 3
  %biglessthan.b.read_input_outter28 = load [256 x i128]*, [256 x i128]** %struct_getter27, align 8
  %i29 = load i128, i128* %i, align 4
  %lt30 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter28, i128 0, i128 %i29
  store i128 %p20, i128* %lt30, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i31 = load i128, i128* %i, align 4
  %add = add i128 %i31, 1
  store i128 %add, i128* %i, align 4
  %i32 = load i128, i128* %i, align 4
  %k33 = load i128, i128* %fpsgn0.k.declare_arg, align 4
  %slt = icmp slt i128 %i32, %k33
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %lt34 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter35 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt34, i32 0, i32 4
  %biglessthan.out.read_output_outter = load i128, i128* %struct_getter35, align 4
  call void @fn_intrinsic_add_constraint(i128 %biglessthan.out.read_output_outter, i128 1, i1* @constraint.208)
  %in36 = load [256 x i128]*, [256 x i128]** %fpsgn0.in.declare_input, align 8
  %array_getter37 = getelementptr inbounds [256 x i128], [256 x i128]* %in36, i128 0, i128 0
  %in38 = load i128, i128* %array_getter37, align 4
  %mod = srem i128 %in38, 2
  store i128 %mod, i128* %r, align 4
  %in39 = load [256 x i128]*, [256 x i128]** %fpsgn0.in.declare_input, align 8
  %array_getter40 = getelementptr inbounds [256 x i128], [256 x i128]* %in39, i128 0, i128 0
  %in41 = load i128, i128* %array_getter40, align 4
  %r42 = load i128, i128* %r, align 4
  %sub = sub i128 %in41, %r42
  %sdiv = sdiv i128 %sub, 2
  store i128 %sdiv, i128* %q, align 4
  %r43 = load i128, i128* %r, align 4
  %ptr_getter44 = load %struct_template_circuit_fpsgn0*, %struct_template_circuit_fpsgn0** %FpSgn0, align 8
  %fpsgn0.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %ptr_getter44, i32 0, i32 5
  store i128 %r43, i128* %fpsgn0.out.write_output_inner, align 4
  %FpSgn045 = load %struct_template_circuit_fpsgn0*, %struct_template_circuit_fpsgn0** %FpSgn0, align 8
  %struct_getter46 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %FpSgn045, i32 0, i32 5
  %fpsgn0.out.read_output_inner = load i128, i128* %struct_getter46, align 4
  store i128 %fpsgn0.out.read_output_inner, i128* %fpsgn0.out.declare_output, align 4
  %q47 = load i128, i128* %q, align 4
  %ptr_getter48 = load %struct_template_circuit_fpsgn0*, %struct_template_circuit_fpsgn0** %FpSgn0, align 8
  %fpsgn0.div.write_inter_inner = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %ptr_getter48, i32 0, i32 4
  store i128 %q47, i128* %fpsgn0.div.write_inter_inner, align 4
  %FpSgn049 = load %struct_template_circuit_fpsgn0*, %struct_template_circuit_fpsgn0** %FpSgn0, align 8
  %struct_getter50 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %FpSgn049, i32 0, i32 4
  %fpsgn0.div.read_inter_inner = load i128, i128* %struct_getter50, align 4
  store i128 %fpsgn0.div.read_inter_inner, i128* %fpsgn0.div.declare_inter, align 4
  %out51 = load i128, i128* %fpsgn0.out.declare_output, align 4
  %out52 = load i128, i128* %fpsgn0.out.declare_output, align 4
  %sub53 = sub i128 1, %out52
  %mul = mul i128 %out51, %sub53
  call void @fn_intrinsic_add_constraint(i128 %mul, i128 0, i1* @constraint.209)
  %in54 = load [256 x i128]*, [256 x i128]** %fpsgn0.in.declare_input, align 8
  %array_getter55 = getelementptr inbounds [256 x i128], [256 x i128]* %in54, i128 0, i128 0
  %in56 = load i128, i128* %array_getter55, align 4
  %div57 = load i128, i128* %fpsgn0.div.declare_inter, align 4
  %mul58 = mul i128 2, %div57
  %out59 = load i128, i128* %fpsgn0.out.declare_output, align 4
  %add60 = add i128 %mul58, %out59
  call void @fn_intrinsic_add_constraint(i128 %in56, i128 %add60, i1* @constraint.210)
  br label %exit

exit:                                             ; preds = %loop.exit
  %div61 = load i128, i128* %fpsgn0.div.declare_inter, align 4
  %fpsgn0.div.write_inter_inner62 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %0, i32 0, i32 4
  store i128 %div61, i128* %fpsgn0.div.write_inter_inner62, align 4
  %out63 = load i128, i128* %fpsgn0.out.declare_output, align 4
  %fpsgn0.out.write_output_inner64 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %0, i32 0, i32 5
  store i128 %out63, i128* %fpsgn0.out.write_output_inner64, align 4
  ret void
}

define %struct_template_circuit_fpsgn0* @fn_template_build_fpsgn0(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fpsgn0 = alloca %struct_template_circuit_fpsgn0, align 8
  %fpsgn0.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %struct_template_circuit_fpsgn0, i32 0, i32 0
  store i128 %0, i128* %fpsgn0.n.write_arg_inner, align 4
  %fpsgn0.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %struct_template_circuit_fpsgn0, i32 0, i32 1
  store i128 %1, i128* %fpsgn0.k.write_arg_inner, align 4
  %fpsgn0.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %struct_template_circuit_fpsgn0, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fpsgn0.p.write_arg_inner, align 8
  ret %struct_template_circuit_fpsgn0* %struct_template_circuit_fpsgn0
}

define void @fn_template_init_fp2conjugate(%struct_template_circuit_fp2conjugate* %0) {
entry:
  %Fp2Conjugate = alloca %struct_template_circuit_fp2conjugate*, align 8
  store %struct_template_circuit_fp2conjugate* %0, %struct_template_circuit_fp2conjugate** %Fp2Conjugate, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2conjugate, %struct_template_circuit_fp2conjugate* %0, i32 0, i32 0
  %fp2conjugate.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2conjugate.n.declare_arg = alloca i128, align 8
  store i128 %fp2conjugate.n.read_arg_inner, i128* %fp2conjugate.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2conjugate, %struct_template_circuit_fp2conjugate* %0, i32 0, i32 1
  %fp2conjugate.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2conjugate.k.declare_arg = alloca i128, align 8
  store i128 %fp2conjugate.k.read_arg_inner, i128* %fp2conjugate.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2conjugate, %struct_template_circuit_fp2conjugate* %0, i32 0, i32 2
  %fp2conjugate.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fp2conjugate.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2conjugate.p.read_arg_inner, [256 x i128]** %fp2conjugate.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2conjugate, %struct_template_circuit_fp2conjugate* %0, i32 0, i32 3
  %fp2conjugate.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fp2conjugate.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2conjugate.in.read_input_inner, [256 x [256 x i128]]** %fp2conjugate.in.declare_input, align 8
  %fp2conjugate.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %fp2conjugate.out.declare_output, align 8
  %neg1 = alloca %struct_template_circuit_fpnegate*, align 8
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %n = load i128, i128* %fp2conjugate.n.declare_arg, align 4
  %k = load i128, i128* %fp2conjugate.k.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2conjugate.p.declare_arg, align 8
  %call = call %struct_template_circuit_fpnegate* @fn_template_build_fpnegate(i128 %n, i128 %k, [256 x i128]* %p)
  store %struct_template_circuit_fpnegate* %call, %struct_template_circuit_fpnegate** %neg1, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2conjugate.in.declare_input, align 8
  %i5 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 1, i128 %i5
  %in6 = load i128, i128* %array_getter, align 4
  %neg17 = load %struct_template_circuit_fpnegate*, %struct_template_circuit_fpnegate** %neg1, align 8
  %struct_getter8 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %neg17, i32 0, i32 3
  %fpnegate.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter8, align 8
  %i9 = load i128, i128* %i, align 4
  %array_getter10 = getelementptr inbounds [256 x i128], [256 x i128]* %fpnegate.in.read_input_outter, i128 0, i128 %i9
  %neg111 = load i128, i128* %array_getter10, align 4
  call void @fn_intrinsic_add_constraint(i128 %neg111, i128 %in6, i1* @constraint.211)
  %ptr_getter = load %struct_template_circuit_fpnegate*, %struct_template_circuit_fpnegate** %neg1, align 8
  %struct_getter12 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %ptr_getter, i32 0, i32 3
  %fpnegate.in.read_input_outter13 = load [256 x i128]*, [256 x i128]** %struct_getter12, align 8
  %i14 = load i128, i128* %i, align 4
  %neg115 = getelementptr inbounds [256 x i128], [256 x i128]* %fpnegate.in.read_input_outter13, i128 0, i128 %i14
  store i128 %in6, i128* %neg115, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i16 = load i128, i128* %i, align 4
  %add = add i128 %i16, 1
  store i128 %add, i128* %i, align 4
  %i17 = load i128, i128* %i, align 4
  %k18 = load i128, i128* %fp2conjugate.k.declare_arg, align 4
  %slt = icmp slt i128 %i17, %k18
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %i, align 4
  br label %loop.body19

loop.body19:                                      ; preds = %loop.latch43, %loop.exit
  %in20 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2conjugate.in.declare_input, align 8
  %i21 = load i128, i128* %i, align 4
  %array_getter22 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in20, i128 0, i128 0, i128 %i21
  %in23 = load i128, i128* %array_getter22, align 4
  %out24 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2conjugate.out.declare_output, align 8
  %i25 = load i128, i128* %i, align 4
  %array_getter26 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out24, i128 0, i128 0, i128 %i25
  %out27 = load i128, i128* %array_getter26, align 4
  call void @fn_intrinsic_add_constraint(i128 %out27, i128 %in23, i1* @constraint.212)
  %ptr_getter28 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2conjugate.out.declare_output, align 8
  %i29 = load i128, i128* %i, align 4
  %out30 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter28, i128 0, i128 0, i128 %i29
  store i128 %in23, i128* %out30, align 4
  %neg131 = load %struct_template_circuit_fpnegate*, %struct_template_circuit_fpnegate** %neg1, align 8
  %struct_getter32 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %neg131, i32 0, i32 4
  %fpnegate.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter32, align 8
  %i33 = load i128, i128* %i, align 4
  %array_getter34 = getelementptr inbounds [256 x i128], [256 x i128]* %fpnegate.out.read_output_outter, i128 0, i128 %i33
  %neg135 = load i128, i128* %array_getter34, align 4
  %out36 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2conjugate.out.declare_output, align 8
  %i37 = load i128, i128* %i, align 4
  %array_getter38 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out36, i128 0, i128 1, i128 %i37
  %out39 = load i128, i128* %array_getter38, align 4
  call void @fn_intrinsic_add_constraint(i128 %out39, i128 %neg135, i1* @constraint.213)
  %ptr_getter40 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2conjugate.out.declare_output, align 8
  %i41 = load i128, i128* %i, align 4
  %out42 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter40, i128 0, i128 1, i128 %i41
  store i128 %neg135, i128* %out42, align 4
  br label %loop.latch43

loop.latch43:                                     ; preds = %loop.body19
  %i44 = load i128, i128* %i, align 4
  %add45 = add i128 %i44, 1
  store i128 %add45, i128* %i, align 4
  %i46 = load i128, i128* %i, align 4
  %k47 = load i128, i128* %fp2conjugate.k.declare_arg, align 4
  %slt48 = icmp slt i128 %i46, %k47
  br i1 %slt48, label %loop.body19, label %loop.exit49

loop.exit49:                                      ; preds = %loop.latch43
  br label %exit

exit:                                             ; preds = %loop.exit49
  %out50 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2conjugate.out.declare_output, align 8
  %fp2conjugate.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2conjugate, %struct_template_circuit_fp2conjugate* %0, i32 0, i32 4
  store [256 x [256 x i128]]* %out50, [256 x [256 x i128]]** %fp2conjugate.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fp2conjugate* @fn_template_build_fp2conjugate(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fp2conjugate = alloca %struct_template_circuit_fp2conjugate, align 8
  %fp2conjugate.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2conjugate, %struct_template_circuit_fp2conjugate* %struct_template_circuit_fp2conjugate, i32 0, i32 0
  store i128 %0, i128* %fp2conjugate.n.write_arg_inner, align 4
  %fp2conjugate.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2conjugate, %struct_template_circuit_fp2conjugate* %struct_template_circuit_fp2conjugate, i32 0, i32 1
  store i128 %1, i128* %fp2conjugate.k.write_arg_inner, align 4
  %fp2conjugate.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2conjugate, %struct_template_circuit_fp2conjugate* %struct_template_circuit_fp2conjugate, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fp2conjugate.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2conjugate* %struct_template_circuit_fp2conjugate
}

define void @fn_template_init_fpiszero(%struct_template_circuit_fpiszero* %0) {
entry:
  %FpIsZero = alloca %struct_template_circuit_fpiszero*, align 8
  store %struct_template_circuit_fpiszero* %0, %struct_template_circuit_fpiszero** %FpIsZero, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fpiszero, %struct_template_circuit_fpiszero* %0, i32 0, i32 0
  %fpiszero.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fpiszero.n.declare_arg = alloca i128, align 8
  store i128 %fpiszero.n.read_arg_inner, i128* %fpiszero.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fpiszero, %struct_template_circuit_fpiszero* %0, i32 0, i32 1
  %fpiszero.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fpiszero.k.declare_arg = alloca i128, align 8
  store i128 %fpiszero.k.read_arg_inner, i128* %fpiszero.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fpiszero, %struct_template_circuit_fpiszero* %0, i32 0, i32 2
  %fpiszero.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fpiszero.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpiszero.p.read_arg_inner, [256 x i128]** %fpiszero.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fpiszero, %struct_template_circuit_fpiszero* %0, i32 0, i32 3
  %fpiszero.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %fpiszero.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpiszero.in.read_input_inner, [256 x i128]** %fpiszero.in.declare_input, align 8
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %fpiszero.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %fpiszero.out.declare_output, align 4
  %lt = alloca %struct_template_circuit_biglessthan*, align 8
  %isZero = alloca %struct_template_circuit_bigiszero*, align 8
  %n = load i128, i128* %fpiszero.n.declare_arg, align 4
  %k = load i128, i128* %fpiszero.k.declare_arg, align 4
  %call = call %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %n, i128 %k)
  store %struct_template_circuit_biglessthan* %call, %struct_template_circuit_biglessthan** %lt, align 8
  %k5 = load i128, i128* %fpiszero.k.declare_arg, align 4
  %call6 = call %struct_template_circuit_bigiszero* @fn_template_build_bigiszero(i128 %k5)
  store %struct_template_circuit_bigiszero* %call6, %struct_template_circuit_bigiszero** %isZero, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %in = load [256 x i128]*, [256 x i128]** %fpiszero.in.declare_input, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %i7
  %in8 = load i128, i128* %array_getter, align 4
  %lt9 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter10 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt9, i32 0, i32 2
  %biglessthan.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter10, align 8
  %i11 = load i128, i128* %i, align 4
  %array_getter12 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter, i128 0, i128 %i11
  %lt13 = load i128, i128* %array_getter12, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt13, i128 %in8, i1* @constraint.214)
  %ptr_getter = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter, i32 0, i32 2
  %biglessthan.a.read_input_outter15 = load [256 x i128]*, [256 x i128]** %struct_getter14, align 8
  %i16 = load i128, i128* %i, align 4
  %lt17 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter15, i128 0, i128 %i16
  store i128 %in8, i128* %lt17, align 4
  %p = load [256 x i128]*, [256 x i128]** %fpiszero.p.declare_arg, align 8
  %i18 = load i128, i128* %i, align 4
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i18
  %p20 = load i128, i128* %array_getter19, align 4
  %lt21 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter22 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt21, i32 0, i32 3
  %biglessthan.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter22, align 8
  %i23 = load i128, i128* %i, align 4
  %array_getter24 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter, i128 0, i128 %i23
  %lt25 = load i128, i128* %array_getter24, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt25, i128 %p20, i1* @constraint.215)
  %ptr_getter26 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter27 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter26, i32 0, i32 3
  %biglessthan.b.read_input_outter28 = load [256 x i128]*, [256 x i128]** %struct_getter27, align 8
  %i29 = load i128, i128* %i, align 4
  %lt30 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter28, i128 0, i128 %i29
  store i128 %p20, i128* %lt30, align 4
  %in31 = load [256 x i128]*, [256 x i128]** %fpiszero.in.declare_input, align 8
  %i32 = load i128, i128* %i, align 4
  %array_getter33 = getelementptr inbounds [256 x i128], [256 x i128]* %in31, i128 0, i128 %i32
  %in34 = load i128, i128* %array_getter33, align 4
  %isZero35 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %isZero, align 8
  %struct_getter36 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %isZero35, i32 0, i32 1
  %bigiszero.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter36, align 8
  %i37 = load i128, i128* %i, align 4
  %array_getter38 = getelementptr inbounds [256 x i128], [256 x i128]* %bigiszero.in.read_input_outter, i128 0, i128 %i37
  %isZero39 = load i128, i128* %array_getter38, align 4
  call void @fn_intrinsic_add_constraint(i128 %isZero39, i128 %in34, i1* @constraint.216)
  %ptr_getter40 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %isZero, align 8
  %struct_getter41 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %ptr_getter40, i32 0, i32 1
  %bigiszero.in.read_input_outter42 = load [256 x i128]*, [256 x i128]** %struct_getter41, align 8
  %i43 = load i128, i128* %i, align 4
  %isZero44 = getelementptr inbounds [256 x i128], [256 x i128]* %bigiszero.in.read_input_outter42, i128 0, i128 %i43
  store i128 %in34, i128* %isZero44, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i45 = load i128, i128* %i, align 4
  %add = add i128 %i45, 1
  store i128 %add, i128* %i, align 4
  %i46 = load i128, i128* %i, align 4
  %k47 = load i128, i128* %fpiszero.k.declare_arg, align 4
  %slt = icmp slt i128 %i46, %k47
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %lt48 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter49 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt48, i32 0, i32 4
  %biglessthan.out.read_output_outter = load i128, i128* %struct_getter49, align 4
  call void @fn_intrinsic_add_constraint(i128 %biglessthan.out.read_output_outter, i128 1, i1* @constraint.217)
  %isZero50 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %isZero, align 8
  %struct_getter51 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %isZero50, i32 0, i32 2
  %bigiszero.out.read_output_outter = load i128, i128* %struct_getter51, align 4
  %out52 = load i128, i128* %fpiszero.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out52, i128 %bigiszero.out.read_output_outter, i1* @constraint.218)
  %ptr_getter53 = load %struct_template_circuit_fpiszero*, %struct_template_circuit_fpiszero** %FpIsZero, align 8
  %fpiszero.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fpiszero, %struct_template_circuit_fpiszero* %ptr_getter53, i32 0, i32 4
  store i128 %bigiszero.out.read_output_outter, i128* %fpiszero.out.write_output_inner, align 4
  %FpIsZero54 = load %struct_template_circuit_fpiszero*, %struct_template_circuit_fpiszero** %FpIsZero, align 8
  %struct_getter55 = getelementptr inbounds %struct_template_circuit_fpiszero, %struct_template_circuit_fpiszero* %FpIsZero54, i32 0, i32 4
  %fpiszero.out.read_output_inner = load i128, i128* %struct_getter55, align 4
  store i128 %fpiszero.out.read_output_inner, i128* %fpiszero.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit
  %out56 = load i128, i128* %fpiszero.out.declare_output, align 4
  %fpiszero.out.write_output_inner57 = getelementptr inbounds %struct_template_circuit_fpiszero, %struct_template_circuit_fpiszero* %0, i32 0, i32 4
  store i128 %out56, i128* %fpiszero.out.write_output_inner57, align 4
  ret void
}

define %struct_template_circuit_fpiszero* @fn_template_build_fpiszero(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fpiszero = alloca %struct_template_circuit_fpiszero, align 8
  %fpiszero.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpiszero, %struct_template_circuit_fpiszero* %struct_template_circuit_fpiszero, i32 0, i32 0
  store i128 %0, i128* %fpiszero.n.write_arg_inner, align 4
  %fpiszero.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpiszero, %struct_template_circuit_fpiszero* %struct_template_circuit_fpiszero, i32 0, i32 1
  store i128 %1, i128* %fpiszero.k.write_arg_inner, align 4
  %fpiszero.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpiszero, %struct_template_circuit_fpiszero* %struct_template_circuit_fpiszero, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fpiszero.p.write_arg_inner, align 8
  ret %struct_template_circuit_fpiszero* %struct_template_circuit_fpiszero
}

define void @fn_template_init_fp2negate(%struct_template_circuit_fp2negate* %0) {
entry:
  %Fp2Negate = alloca %struct_template_circuit_fp2negate*, align 8
  store %struct_template_circuit_fp2negate* %0, %struct_template_circuit_fp2negate** %Fp2Negate, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2negate, %struct_template_circuit_fp2negate* %0, i32 0, i32 0
  %fp2negate.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2negate.n.declare_arg = alloca i128, align 8
  store i128 %fp2negate.n.read_arg_inner, i128* %fp2negate.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2negate, %struct_template_circuit_fp2negate* %0, i32 0, i32 1
  %fp2negate.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2negate.k.declare_arg = alloca i128, align 8
  store i128 %fp2negate.k.read_arg_inner, i128* %fp2negate.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2negate, %struct_template_circuit_fp2negate* %0, i32 0, i32 2
  %fp2negate.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fp2negate.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2negate.p.read_arg_inner, [256 x i128]** %fp2negate.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2negate, %struct_template_circuit_fp2negate* %0, i32 0, i32 3
  %fp2negate.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fp2negate.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2negate.in.read_input_inner, [256 x [256 x i128]]** %fp2negate.in.declare_input, align 8
  %fp2negate.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %fp2negate.out.declare_output, align 8
  %j = alloca i128, align 8
  %j4 = call i128 @fn_intrinsic_inline_init()
  store i128 %j4, i128* %j, align 4
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %neg = alloca [256 x %struct_template_circuit_fpnegate*]*, align 8
  %neg6 = alloca [256 x %struct_template_circuit_fpnegate*], align 8
  store [256 x %struct_template_circuit_fpnegate*]* %neg6, [256 x %struct_template_circuit_fpnegate*]** %neg, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch57, %entry
  %n = load i128, i128* %fp2negate.n.declare_arg, align 4
  %k = load i128, i128* %fp2negate.k.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2negate.p.declare_arg, align 8
  %call = call %struct_template_circuit_fpnegate* @fn_template_build_fpnegate(i128 %n, i128 %k, [256 x i128]* %p)
  %ptr_getter = load [256 x %struct_template_circuit_fpnegate*]*, [256 x %struct_template_circuit_fpnegate*]** %neg, align 8
  %j7 = load i128, i128* %j, align 4
  %neg8 = getelementptr inbounds [256 x %struct_template_circuit_fpnegate*], [256 x %struct_template_circuit_fpnegate*]* %ptr_getter, i128 0, i128 %j7
  store %struct_template_circuit_fpnegate* %call, %struct_template_circuit_fpnegate** %neg8, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body9

loop.body9:                                       ; preds = %loop.latch, %loop.body
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2negate.in.declare_input, align 8
  %j10 = load i128, i128* %j, align 4
  %i11 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %j10, i128 %i11
  %in12 = load i128, i128* %array_getter, align 4
  %neg13 = load [256 x %struct_template_circuit_fpnegate*]*, [256 x %struct_template_circuit_fpnegate*]** %neg, align 8
  %j14 = load i128, i128* %j, align 4
  %array_getter15 = getelementptr inbounds [256 x %struct_template_circuit_fpnegate*], [256 x %struct_template_circuit_fpnegate*]* %neg13, i128 0, i128 %j14
  %neg16 = load %struct_template_circuit_fpnegate*, %struct_template_circuit_fpnegate** %array_getter15, align 8
  %struct_getter17 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %neg16, i32 0, i32 3
  %fpnegate.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter17, align 8
  %i18 = load i128, i128* %i, align 4
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %fpnegate.in.read_input_outter, i128 0, i128 %i18
  %neg20 = load i128, i128* %array_getter19, align 4
  call void @fn_intrinsic_add_constraint(i128 %neg20, i128 %in12, i1* @constraint.219)
  %ptr_getter21 = load [256 x %struct_template_circuit_fpnegate*]*, [256 x %struct_template_circuit_fpnegate*]** %neg, align 8
  %j22 = load i128, i128* %j, align 4
  %array_getter23 = getelementptr inbounds [256 x %struct_template_circuit_fpnegate*], [256 x %struct_template_circuit_fpnegate*]* %ptr_getter21, i128 0, i128 %j22
  %neg24 = load %struct_template_circuit_fpnegate*, %struct_template_circuit_fpnegate** %array_getter23, align 8
  %struct_getter25 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %neg24, i32 0, i32 3
  %fpnegate.in.read_input_outter26 = load [256 x i128]*, [256 x i128]** %struct_getter25, align 8
  %i27 = load i128, i128* %i, align 4
  %neg28 = getelementptr inbounds [256 x i128], [256 x i128]* %fpnegate.in.read_input_outter26, i128 0, i128 %i27
  store i128 %in12, i128* %neg28, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body9
  %i29 = load i128, i128* %i, align 4
  %add = add i128 %i29, 1
  store i128 %add, i128* %i, align 4
  %i30 = load i128, i128* %i, align 4
  %k31 = load i128, i128* %fp2negate.k.declare_arg, align 4
  %slt = icmp slt i128 %i30, %k31
  br i1 %slt, label %loop.body9, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %i, align 4
  br label %loop.body32

loop.body32:                                      ; preds = %loop.latch50, %loop.exit
  %neg33 = load [256 x %struct_template_circuit_fpnegate*]*, [256 x %struct_template_circuit_fpnegate*]** %neg, align 8
  %j34 = load i128, i128* %j, align 4
  %array_getter35 = getelementptr inbounds [256 x %struct_template_circuit_fpnegate*], [256 x %struct_template_circuit_fpnegate*]* %neg33, i128 0, i128 %j34
  %neg36 = load %struct_template_circuit_fpnegate*, %struct_template_circuit_fpnegate** %array_getter35, align 8
  %struct_getter37 = getelementptr inbounds %struct_template_circuit_fpnegate, %struct_template_circuit_fpnegate* %neg36, i32 0, i32 4
  %fpnegate.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter37, align 8
  %i38 = load i128, i128* %i, align 4
  %array_getter39 = getelementptr inbounds [256 x i128], [256 x i128]* %fpnegate.out.read_output_outter, i128 0, i128 %i38
  %neg40 = load i128, i128* %array_getter39, align 4
  %out41 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2negate.out.declare_output, align 8
  %j42 = load i128, i128* %j, align 4
  %i43 = load i128, i128* %i, align 4
  %array_getter44 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out41, i128 0, i128 %j42, i128 %i43
  %out45 = load i128, i128* %array_getter44, align 4
  call void @fn_intrinsic_add_constraint(i128 %out45, i128 %neg40, i1* @constraint.220)
  %ptr_getter46 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2negate.out.declare_output, align 8
  %j47 = load i128, i128* %j, align 4
  %i48 = load i128, i128* %i, align 4
  %out49 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter46, i128 0, i128 %j47, i128 %i48
  store i128 %neg40, i128* %out49, align 4
  br label %loop.latch50

loop.latch50:                                     ; preds = %loop.body32
  %i51 = load i128, i128* %i, align 4
  %add52 = add i128 %i51, 1
  store i128 %add52, i128* %i, align 4
  %i53 = load i128, i128* %i, align 4
  %k54 = load i128, i128* %fp2negate.k.declare_arg, align 4
  %slt55 = icmp slt i128 %i53, %k54
  br i1 %slt55, label %loop.body32, label %loop.exit56

loop.exit56:                                      ; preds = %loop.latch50
  br label %loop.latch57

loop.latch57:                                     ; preds = %loop.exit56
  %j58 = load i128, i128* %j, align 4
  %add59 = add i128 %j58, 1
  store i128 %add59, i128* %j, align 4
  %j60 = load i128, i128* %j, align 4
  %slt61 = icmp slt i128 %j60, 2
  br i1 %slt61, label %loop.body, label %loop.exit62

loop.exit62:                                      ; preds = %loop.latch57
  br label %exit

exit:                                             ; preds = %loop.exit62
  %out63 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2negate.out.declare_output, align 8
  %fp2negate.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2negate, %struct_template_circuit_fp2negate* %0, i32 0, i32 4
  store [256 x [256 x i128]]* %out63, [256 x [256 x i128]]** %fp2negate.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fp2negate* @fn_template_build_fp2negate(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fp2negate = alloca %struct_template_circuit_fp2negate, align 8
  %fp2negate.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2negate, %struct_template_circuit_fp2negate* %struct_template_circuit_fp2negate, i32 0, i32 0
  store i128 %0, i128* %fp2negate.n.write_arg_inner, align 4
  %fp2negate.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2negate, %struct_template_circuit_fp2negate* %struct_template_circuit_fp2negate, i32 0, i32 1
  store i128 %1, i128* %fp2negate.k.write_arg_inner, align 4
  %fp2negate.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2negate, %struct_template_circuit_fp2negate* %struct_template_circuit_fp2negate, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fp2negate.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2negate* %struct_template_circuit_fp2negate
}

define void @fn_template_init_fp2add(%struct_template_circuit_fp2add* %0) {
entry:
  %Fp2Add = alloca %struct_template_circuit_fp2add*, align 8
  store %struct_template_circuit_fp2add* %0, %struct_template_circuit_fp2add** %Fp2Add, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2add, %struct_template_circuit_fp2add* %0, i32 0, i32 0
  %fp2add.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2add.n.declare_arg = alloca i128, align 8
  store i128 %fp2add.n.read_arg_inner, i128* %fp2add.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2add, %struct_template_circuit_fp2add* %0, i32 0, i32 1
  %fp2add.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2add.k.declare_arg = alloca i128, align 8
  store i128 %fp2add.k.read_arg_inner, i128* %fp2add.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2add, %struct_template_circuit_fp2add* %0, i32 0, i32 2
  %fp2add.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fp2add.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2add.p.read_arg_inner, [256 x i128]** %fp2add.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2add, %struct_template_circuit_fp2add* %0, i32 0, i32 3
  %fp2add.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fp2add.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2add.a.read_input_inner, [256 x [256 x i128]]** %fp2add.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_fp2add, %struct_template_circuit_fp2add* %0, i32 0, i32 4
  %fp2add.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %fp2add.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2add.b.read_input_inner, [256 x [256 x i128]]** %fp2add.b.declare_input, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %adders = alloca [256 x %struct_template_circuit_fpadd*]*, align 8
  %adders6 = alloca [256 x %struct_template_circuit_fpadd*], align 8
  store [256 x %struct_template_circuit_fpadd*]* %adders6, [256 x %struct_template_circuit_fpadd*]** %adders, align 8
  %j = alloca i128, align 8
  %j7 = call i128 @fn_intrinsic_inline_init()
  store i128 %j7, i128* %j, align 4
  %fp2add.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %fp2add.out.declare_output, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch78, %entry
  %n = load i128, i128* %fp2add.n.declare_arg, align 4
  %k = load i128, i128* %fp2add.k.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2add.p.declare_arg, align 8
  %call = call %struct_template_circuit_fpadd* @fn_template_build_fpadd(i128 %n, i128 %k, [256 x i128]* %p)
  %ptr_getter = load [256 x %struct_template_circuit_fpadd*]*, [256 x %struct_template_circuit_fpadd*]** %adders, align 8
  %i8 = load i128, i128* %i, align 4
  %adders9 = getelementptr inbounds [256 x %struct_template_circuit_fpadd*], [256 x %struct_template_circuit_fpadd*]* %ptr_getter, i128 0, i128 %i8
  store %struct_template_circuit_fpadd* %call, %struct_template_circuit_fpadd** %adders9, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body10

loop.body10:                                      ; preds = %loop.latch, %loop.body
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2add.a.declare_input, align 8
  %i11 = load i128, i128* %i, align 4
  %j12 = load i128, i128* %j, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i11, i128 %j12
  %a13 = load i128, i128* %array_getter, align 4
  %adders14 = load [256 x %struct_template_circuit_fpadd*]*, [256 x %struct_template_circuit_fpadd*]** %adders, align 8
  %i15 = load i128, i128* %i, align 4
  %array_getter16 = getelementptr inbounds [256 x %struct_template_circuit_fpadd*], [256 x %struct_template_circuit_fpadd*]* %adders14, i128 0, i128 %i15
  %adders17 = load %struct_template_circuit_fpadd*, %struct_template_circuit_fpadd** %array_getter16, align 8
  %struct_getter18 = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %adders17, i32 0, i32 3
  %fpadd.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter18, align 8
  %j19 = load i128, i128* %j, align 4
  %array_getter20 = getelementptr inbounds [256 x i128], [256 x i128]* %fpadd.a.read_input_outter, i128 0, i128 %j19
  %adders21 = load i128, i128* %array_getter20, align 4
  call void @fn_intrinsic_add_constraint(i128 %adders21, i128 %a13, i1* @constraint.221)
  %ptr_getter22 = load [256 x %struct_template_circuit_fpadd*]*, [256 x %struct_template_circuit_fpadd*]** %adders, align 8
  %i23 = load i128, i128* %i, align 4
  %array_getter24 = getelementptr inbounds [256 x %struct_template_circuit_fpadd*], [256 x %struct_template_circuit_fpadd*]* %ptr_getter22, i128 0, i128 %i23
  %adders25 = load %struct_template_circuit_fpadd*, %struct_template_circuit_fpadd** %array_getter24, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %adders25, i32 0, i32 3
  %fpadd.a.read_input_outter27 = load [256 x i128]*, [256 x i128]** %struct_getter26, align 8
  %j28 = load i128, i128* %j, align 4
  %adders29 = getelementptr inbounds [256 x i128], [256 x i128]* %fpadd.a.read_input_outter27, i128 0, i128 %j28
  store i128 %a13, i128* %adders29, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2add.b.declare_input, align 8
  %i30 = load i128, i128* %i, align 4
  %j31 = load i128, i128* %j, align 4
  %array_getter32 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %i30, i128 %j31
  %b33 = load i128, i128* %array_getter32, align 4
  %adders34 = load [256 x %struct_template_circuit_fpadd*]*, [256 x %struct_template_circuit_fpadd*]** %adders, align 8
  %i35 = load i128, i128* %i, align 4
  %array_getter36 = getelementptr inbounds [256 x %struct_template_circuit_fpadd*], [256 x %struct_template_circuit_fpadd*]* %adders34, i128 0, i128 %i35
  %adders37 = load %struct_template_circuit_fpadd*, %struct_template_circuit_fpadd** %array_getter36, align 8
  %struct_getter38 = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %adders37, i32 0, i32 4
  %fpadd.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter38, align 8
  %j39 = load i128, i128* %j, align 4
  %array_getter40 = getelementptr inbounds [256 x i128], [256 x i128]* %fpadd.b.read_input_outter, i128 0, i128 %j39
  %adders41 = load i128, i128* %array_getter40, align 4
  call void @fn_intrinsic_add_constraint(i128 %adders41, i128 %b33, i1* @constraint.222)
  %ptr_getter42 = load [256 x %struct_template_circuit_fpadd*]*, [256 x %struct_template_circuit_fpadd*]** %adders, align 8
  %i43 = load i128, i128* %i, align 4
  %array_getter44 = getelementptr inbounds [256 x %struct_template_circuit_fpadd*], [256 x %struct_template_circuit_fpadd*]* %ptr_getter42, i128 0, i128 %i43
  %adders45 = load %struct_template_circuit_fpadd*, %struct_template_circuit_fpadd** %array_getter44, align 8
  %struct_getter46 = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %adders45, i32 0, i32 4
  %fpadd.b.read_input_outter47 = load [256 x i128]*, [256 x i128]** %struct_getter46, align 8
  %j48 = load i128, i128* %j, align 4
  %adders49 = getelementptr inbounds [256 x i128], [256 x i128]* %fpadd.b.read_input_outter47, i128 0, i128 %j48
  store i128 %b33, i128* %adders49, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body10
  %j50 = load i128, i128* %j, align 4
  %add = add i128 %j50, 1
  store i128 %add, i128* %j, align 4
  %j51 = load i128, i128* %j, align 4
  %k52 = load i128, i128* %fp2add.k.declare_arg, align 4
  %slt = icmp slt i128 %j51, %k52
  br i1 %slt, label %loop.body10, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %j, align 4
  br label %loop.body53

loop.body53:                                      ; preds = %loop.latch71, %loop.exit
  %adders54 = load [256 x %struct_template_circuit_fpadd*]*, [256 x %struct_template_circuit_fpadd*]** %adders, align 8
  %i55 = load i128, i128* %i, align 4
  %array_getter56 = getelementptr inbounds [256 x %struct_template_circuit_fpadd*], [256 x %struct_template_circuit_fpadd*]* %adders54, i128 0, i128 %i55
  %adders57 = load %struct_template_circuit_fpadd*, %struct_template_circuit_fpadd** %array_getter56, align 8
  %struct_getter58 = getelementptr inbounds %struct_template_circuit_fpadd, %struct_template_circuit_fpadd* %adders57, i32 0, i32 5
  %fpadd.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter58, align 8
  %j59 = load i128, i128* %j, align 4
  %array_getter60 = getelementptr inbounds [256 x i128], [256 x i128]* %fpadd.out.read_output_outter, i128 0, i128 %j59
  %adders61 = load i128, i128* %array_getter60, align 4
  %out62 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2add.out.declare_output, align 8
  %i63 = load i128, i128* %i, align 4
  %j64 = load i128, i128* %j, align 4
  %array_getter65 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out62, i128 0, i128 %i63, i128 %j64
  %out66 = load i128, i128* %array_getter65, align 4
  call void @fn_intrinsic_add_constraint(i128 %out66, i128 %adders61, i1* @constraint.223)
  %ptr_getter67 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2add.out.declare_output, align 8
  %i68 = load i128, i128* %i, align 4
  %j69 = load i128, i128* %j, align 4
  %out70 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter67, i128 0, i128 %i68, i128 %j69
  store i128 %adders61, i128* %out70, align 4
  br label %loop.latch71

loop.latch71:                                     ; preds = %loop.body53
  %j72 = load i128, i128* %j, align 4
  %add73 = add i128 %j72, 1
  store i128 %add73, i128* %j, align 4
  %j74 = load i128, i128* %j, align 4
  %k75 = load i128, i128* %fp2add.k.declare_arg, align 4
  %slt76 = icmp slt i128 %j74, %k75
  br i1 %slt76, label %loop.body53, label %loop.exit77

loop.exit77:                                      ; preds = %loop.latch71
  br label %loop.latch78

loop.latch78:                                     ; preds = %loop.exit77
  %i79 = load i128, i128* %i, align 4
  %add80 = add i128 %i79, 1
  store i128 %add80, i128* %i, align 4
  %i81 = load i128, i128* %i, align 4
  %slt82 = icmp slt i128 %i81, 2
  br i1 %slt82, label %loop.body, label %loop.exit83

loop.exit83:                                      ; preds = %loop.latch78
  br label %exit

exit:                                             ; preds = %loop.exit83
  %out84 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2add.out.declare_output, align 8
  %fp2add.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2add, %struct_template_circuit_fp2add* %0, i32 0, i32 5
  store [256 x [256 x i128]]* %out84, [256 x [256 x i128]]** %fp2add.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fp2add* @fn_template_build_fp2add(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fp2add = alloca %struct_template_circuit_fp2add, align 8
  %fp2add.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2add, %struct_template_circuit_fp2add* %struct_template_circuit_fp2add, i32 0, i32 0
  store i128 %0, i128* %fp2add.n.write_arg_inner, align 4
  %fp2add.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2add, %struct_template_circuit_fp2add* %struct_template_circuit_fp2add, i32 0, i32 1
  store i128 %1, i128* %fp2add.k.write_arg_inner, align 4
  %fp2add.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2add, %struct_template_circuit_fp2add* %struct_template_circuit_fp2add, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fp2add.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2add* %struct_template_circuit_fp2add
}

define void @fn_template_init_fp2iszero(%struct_template_circuit_fp2iszero* %0) {
entry:
  %Fp2IsZero = alloca %struct_template_circuit_fp2iszero*, align 8
  store %struct_template_circuit_fp2iszero* %0, %struct_template_circuit_fp2iszero** %Fp2IsZero, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2iszero, %struct_template_circuit_fp2iszero* %0, i32 0, i32 0
  %fp2iszero.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2iszero.n.declare_arg = alloca i128, align 8
  store i128 %fp2iszero.n.read_arg_inner, i128* %fp2iszero.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2iszero, %struct_template_circuit_fp2iszero* %0, i32 0, i32 1
  %fp2iszero.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2iszero.k.declare_arg = alloca i128, align 8
  store i128 %fp2iszero.k.read_arg_inner, i128* %fp2iszero.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2iszero, %struct_template_circuit_fp2iszero* %0, i32 0, i32 2
  %fp2iszero.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fp2iszero.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2iszero.p.read_arg_inner, [256 x i128]** %fp2iszero.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2iszero, %struct_template_circuit_fp2iszero* %0, i32 0, i32 3
  %fp2iszero.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fp2iszero.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2iszero.in.read_input_inner, [256 x [256 x i128]]** %fp2iszero.in.declare_input, align 8
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %lt = alloca [256 x %struct_template_circuit_biglessthan*]*, align 8
  %lt5 = alloca [256 x %struct_template_circuit_biglessthan*], align 8
  store [256 x %struct_template_circuit_biglessthan*]* %lt5, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %isZeros = alloca [256 x [256 x %struct_template_circuit_iszero*]]*, align 8
  %isZeros6 = alloca [256 x [256 x %struct_template_circuit_iszero*]], align 8
  store [256 x [256 x %struct_template_circuit_iszero*]]* %isZeros6, [256 x [256 x %struct_template_circuit_iszero*]]** %isZeros, align 8
  %j = alloca i128, align 8
  %j7 = call i128 @fn_intrinsic_inline_init()
  store i128 %j7, i128* %j, align 4
  %fp2iszero.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %fp2iszero.out.declare_output, align 4
  %checkZero = alloca %struct_template_circuit_iszero*, align 8
  %total = alloca i128, align 8
  %total8 = call i128 @fn_intrinsic_inline_init()
  store i128 %total8, i128* %total, align 4
  %k = load i128, i128* %fp2iszero.k.declare_arg, align 4
  %mul = mul i128 2, %k
  store i128 %mul, i128* %total, align 4
  store i128 0, i128* %j, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch87, %entry
  %n = load i128, i128* %fp2iszero.n.declare_arg, align 4
  %k9 = load i128, i128* %fp2iszero.k.declare_arg, align 4
  %call = call %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %n, i128 %k9)
  %ptr_getter = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %j10 = load i128, i128* %j, align 4
  %lt11 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter, i128 0, i128 %j10
  store %struct_template_circuit_biglessthan* %call, %struct_template_circuit_biglessthan** %lt11, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body12

loop.body12:                                      ; preds = %loop.latch, %loop.body
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2iszero.in.declare_input, align 8
  %j13 = load i128, i128* %j, align 4
  %i14 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %j13, i128 %i14
  %in15 = load i128, i128* %array_getter, align 4
  %lt16 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %j17 = load i128, i128* %j, align 4
  %array_getter18 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %lt16, i128 0, i128 %j17
  %lt19 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter18, align 8
  %struct_getter20 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt19, i32 0, i32 2
  %biglessthan.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter20, align 8
  %i21 = load i128, i128* %i, align 4
  %array_getter22 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter, i128 0, i128 %i21
  %lt23 = load i128, i128* %array_getter22, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt23, i128 %in15, i1* @constraint.224)
  %ptr_getter24 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %j25 = load i128, i128* %j, align 4
  %array_getter26 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter24, i128 0, i128 %j25
  %lt27 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter26, align 8
  %struct_getter28 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt27, i32 0, i32 2
  %biglessthan.a.read_input_outter29 = load [256 x i128]*, [256 x i128]** %struct_getter28, align 8
  %i30 = load i128, i128* %i, align 4
  %lt31 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter29, i128 0, i128 %i30
  store i128 %in15, i128* %lt31, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2iszero.p.declare_arg, align 8
  %i32 = load i128, i128* %i, align 4
  %array_getter33 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i32
  %p34 = load i128, i128* %array_getter33, align 4
  %lt35 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %j36 = load i128, i128* %j, align 4
  %array_getter37 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %lt35, i128 0, i128 %j36
  %lt38 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter37, align 8
  %struct_getter39 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt38, i32 0, i32 3
  %biglessthan.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter39, align 8
  %i40 = load i128, i128* %i, align 4
  %array_getter41 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter, i128 0, i128 %i40
  %lt42 = load i128, i128* %array_getter41, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt42, i128 %p34, i1* @constraint.225)
  %ptr_getter43 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %j44 = load i128, i128* %j, align 4
  %array_getter45 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter43, i128 0, i128 %j44
  %lt46 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter45, align 8
  %struct_getter47 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt46, i32 0, i32 3
  %biglessthan.b.read_input_outter48 = load [256 x i128]*, [256 x i128]** %struct_getter47, align 8
  %i49 = load i128, i128* %i, align 4
  %lt50 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter48, i128 0, i128 %i49
  store i128 %p34, i128* %lt50, align 4
  %call51 = call %struct_template_circuit_iszero* @fn_template_build_iszero()
  %ptr_getter52 = load [256 x [256 x %struct_template_circuit_iszero*]]*, [256 x [256 x %struct_template_circuit_iszero*]]** %isZeros, align 8
  %j53 = load i128, i128* %j, align 4
  %i54 = load i128, i128* %i, align 4
  %isZeros55 = getelementptr inbounds [256 x [256 x %struct_template_circuit_iszero*]], [256 x [256 x %struct_template_circuit_iszero*]]* %ptr_getter52, i128 0, i128 %j53, i128 %i54
  store %struct_template_circuit_iszero* %call51, %struct_template_circuit_iszero** %isZeros55, align 8
  %in56 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2iszero.in.declare_input, align 8
  %j57 = load i128, i128* %j, align 4
  %i58 = load i128, i128* %i, align 4
  %array_getter59 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in56, i128 0, i128 %j57, i128 %i58
  %in60 = load i128, i128* %array_getter59, align 4
  %isZeros61 = load [256 x [256 x %struct_template_circuit_iszero*]]*, [256 x [256 x %struct_template_circuit_iszero*]]** %isZeros, align 8
  %j62 = load i128, i128* %j, align 4
  %i63 = load i128, i128* %i, align 4
  %array_getter64 = getelementptr inbounds [256 x [256 x %struct_template_circuit_iszero*]], [256 x [256 x %struct_template_circuit_iszero*]]* %isZeros61, i128 0, i128 %j62, i128 %i63
  %isZeros65 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %array_getter64, align 8
  %struct_getter66 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isZeros65, i32 0, i32 0
  %iszero.in.read_input_outter = load i128, i128* %struct_getter66, align 4
  call void @fn_intrinsic_add_constraint(i128 %iszero.in.read_input_outter, i128 %in60, i1* @constraint.226)
  %ptr_getter67 = load [256 x [256 x %struct_template_circuit_iszero*]]*, [256 x [256 x %struct_template_circuit_iszero*]]** %isZeros, align 8
  %j68 = load i128, i128* %j, align 4
  %i69 = load i128, i128* %i, align 4
  %array_getter70 = getelementptr inbounds [256 x [256 x %struct_template_circuit_iszero*]], [256 x [256 x %struct_template_circuit_iszero*]]* %ptr_getter67, i128 0, i128 %j68, i128 %i69
  %isZeros71 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %array_getter70, align 8
  %iszero.in.write_input_outter = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isZeros71, i32 0, i32 0
  store i128 %in60, i128* %iszero.in.write_input_outter, align 4
  %total72 = load i128, i128* %total, align 4
  %isZeros73 = load [256 x [256 x %struct_template_circuit_iszero*]]*, [256 x [256 x %struct_template_circuit_iszero*]]** %isZeros, align 8
  %j74 = load i128, i128* %j, align 4
  %i75 = load i128, i128* %i, align 4
  %array_getter76 = getelementptr inbounds [256 x [256 x %struct_template_circuit_iszero*]], [256 x [256 x %struct_template_circuit_iszero*]]* %isZeros73, i128 0, i128 %j74, i128 %i75
  %isZeros77 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %array_getter76, align 8
  %struct_getter78 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %isZeros77, i32 0, i32 2
  %iszero.out.read_output_outter = load i128, i128* %struct_getter78, align 4
  %sub = sub i128 %total72, %iszero.out.read_output_outter
  store i128 %sub, i128* %total, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body12
  %i79 = load i128, i128* %i, align 4
  %add = add i128 %i79, 1
  store i128 %add, i128* %i, align 4
  %i80 = load i128, i128* %i, align 4
  %k81 = load i128, i128* %fp2iszero.k.declare_arg, align 4
  %slt = icmp slt i128 %i80, %k81
  br i1 %slt, label %loop.body12, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %lt82 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lt, align 8
  %j83 = load i128, i128* %j, align 4
  %array_getter84 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %lt82, i128 0, i128 %j83
  %lt85 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter84, align 8
  %struct_getter86 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt85, i32 0, i32 4
  %biglessthan.out.read_output_outter = load i128, i128* %struct_getter86, align 4
  call void @fn_intrinsic_add_constraint(i128 %biglessthan.out.read_output_outter, i128 1, i1* @constraint.227)
  br label %loop.latch87

loop.latch87:                                     ; preds = %loop.exit
  %j88 = load i128, i128* %j, align 4
  %add89 = add i128 %j88, 1
  store i128 %add89, i128* %j, align 4
  %j90 = load i128, i128* %j, align 4
  %slt91 = icmp slt i128 %j90, 2
  br i1 %slt91, label %loop.body, label %loop.exit92

loop.exit92:                                      ; preds = %loop.latch87
  %call93 = call %struct_template_circuit_iszero* @fn_template_build_iszero()
  store %struct_template_circuit_iszero* %call93, %struct_template_circuit_iszero** %checkZero, align 8
  %total94 = load i128, i128* %total, align 4
  %checkZero95 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %struct_getter96 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %checkZero95, i32 0, i32 0
  %iszero.in.read_input_outter97 = load i128, i128* %struct_getter96, align 4
  call void @fn_intrinsic_add_constraint(i128 %iszero.in.read_input_outter97, i128 %total94, i1* @constraint.228)
  %ptr_getter98 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %iszero.in.write_input_outter99 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %ptr_getter98, i32 0, i32 0
  store i128 %total94, i128* %iszero.in.write_input_outter99, align 4
  %checkZero100 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %struct_getter101 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %checkZero100, i32 0, i32 2
  %iszero.out.read_output_outter102 = load i128, i128* %struct_getter101, align 4
  %out103 = load i128, i128* %fp2iszero.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out103, i128 %iszero.out.read_output_outter102, i1* @constraint.229)
  %ptr_getter104 = load %struct_template_circuit_fp2iszero*, %struct_template_circuit_fp2iszero** %Fp2IsZero, align 8
  %fp2iszero.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2iszero, %struct_template_circuit_fp2iszero* %ptr_getter104, i32 0, i32 4
  store i128 %iszero.out.read_output_outter102, i128* %fp2iszero.out.write_output_inner, align 4
  %Fp2IsZero105 = load %struct_template_circuit_fp2iszero*, %struct_template_circuit_fp2iszero** %Fp2IsZero, align 8
  %struct_getter106 = getelementptr inbounds %struct_template_circuit_fp2iszero, %struct_template_circuit_fp2iszero* %Fp2IsZero105, i32 0, i32 4
  %fp2iszero.out.read_output_inner = load i128, i128* %struct_getter106, align 4
  store i128 %fp2iszero.out.read_output_inner, i128* %fp2iszero.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit92
  %out107 = load i128, i128* %fp2iszero.out.declare_output, align 4
  %fp2iszero.out.write_output_inner108 = getelementptr inbounds %struct_template_circuit_fp2iszero, %struct_template_circuit_fp2iszero* %0, i32 0, i32 4
  store i128 %out107, i128* %fp2iszero.out.write_output_inner108, align 4
  ret void
}

define %struct_template_circuit_fp2iszero* @fn_template_build_fp2iszero(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fp2iszero = alloca %struct_template_circuit_fp2iszero, align 8
  %fp2iszero.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2iszero, %struct_template_circuit_fp2iszero* %struct_template_circuit_fp2iszero, i32 0, i32 0
  store i128 %0, i128* %fp2iszero.n.write_arg_inner, align 4
  %fp2iszero.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2iszero, %struct_template_circuit_fp2iszero* %struct_template_circuit_fp2iszero, i32 0, i32 1
  store i128 %1, i128* %fp2iszero.k.write_arg_inner, align 4
  %fp2iszero.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2iszero, %struct_template_circuit_fp2iszero* %struct_template_circuit_fp2iszero, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fp2iszero.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2iszero* %struct_template_circuit_fp2iszero
}

define void @fn_template_init_signedcheckcarrymodtozero(%struct_template_circuit_signedcheckcarrymodtozero* %0) {
entry:
  %SignedCheckCarryModToZero = alloca %struct_template_circuit_signedcheckcarrymodtozero*, align 8
  store %struct_template_circuit_signedcheckcarrymodtozero* %0, %struct_template_circuit_signedcheckcarrymodtozero** %SignedCheckCarryModToZero, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %0, i32 0, i32 0
  %signedcheckcarrymodtozero.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %signedcheckcarrymodtozero.n.declare_arg = alloca i128, align 8
  store i128 %signedcheckcarrymodtozero.n.read_arg_inner, i128* %signedcheckcarrymodtozero.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %0, i32 0, i32 1
  %signedcheckcarrymodtozero.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %signedcheckcarrymodtozero.k.declare_arg = alloca i128, align 8
  store i128 %signedcheckcarrymodtozero.k.read_arg_inner, i128* %signedcheckcarrymodtozero.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %0, i32 0, i32 2
  %signedcheckcarrymodtozero.overflow.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %signedcheckcarrymodtozero.overflow.declare_arg = alloca i128, align 8
  store i128 %signedcheckcarrymodtozero.overflow.read_arg_inner, i128* %signedcheckcarrymodtozero.overflow.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %0, i32 0, i32 3
  %signedcheckcarrymodtozero.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %signedcheckcarrymodtozero.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %signedcheckcarrymodtozero.p.read_arg_inner, [256 x i128]** %signedcheckcarrymodtozero.p.declare_arg, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %0, i32 0, i32 4
  %signedcheckcarrymodtozero.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %signedcheckcarrymodtozero.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %signedcheckcarrymodtozero.in.read_input_inner, [256 x i128]** %signedcheckcarrymodtozero.in.declare_input, align 8
  %Xvar = alloca [256 x [256 x i128]]*, align 8
  %Xvar5 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %Xvar5, [256 x [256 x i128]]** %Xvar, align 8
  %mod_check = alloca %struct_template_circuit_checkcarrymodp*, align 8
  %X_range_checks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %X_range_checks6 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %X_range_checks6, [256 x %struct_template_circuit_num2bits*]** %X_range_checks, align 8
  %m = alloca i128, align 8
  %m7 = call i128 @fn_intrinsic_inline_init()
  store i128 %m7, i128* %m, align 4
  %signedcheckcarrymodtozero.x.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %X = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %X, [256 x i128]** %signedcheckcarrymodtozero.x.declare_output, align 8
  %i = alloca i128, align 8
  %i8 = call i128 @fn_intrinsic_inline_init()
  store i128 %i8, i128* %i, align 4
  %overflow = load i128, i128* %signedcheckcarrymodtozero.overflow.declare_arg, align 4
  %n = load i128, i128* %signedcheckcarrymodtozero.n.declare_arg, align 4
  %add = add i128 %overflow, %n
  %sub = sub i128 %add, 1
  %n9 = load i128, i128* %signedcheckcarrymodtozero.n.declare_arg, align 4
  %sdiv = sdiv i128 %sub, %n9
  store i128 %sdiv, i128* %m, align 4
  %n10 = load i128, i128* %signedcheckcarrymodtozero.n.declare_arg, align 4
  %k = load i128, i128* %signedcheckcarrymodtozero.k.declare_arg, align 4
  %m11 = load i128, i128* %m, align 4
  %in = load [256 x i128]*, [256 x i128]** %signedcheckcarrymodtozero.in.declare_input, align 8
  %p = load [256 x i128]*, [256 x i128]** %signedcheckcarrymodtozero.p.declare_arg, align 8
  %call = call [256 x [256 x i128]]* @get_signed_Fp_carry_witness(i128 %n10, i128 %k, i128 %m11, [256 x i128]* %in, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call, [256 x [256 x i128]]** %Xvar, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %Xvar12 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %Xvar, align 8
  %i13 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %Xvar12, i128 0, i128 0, i128 %i13
  %Xvar14 = load i128, i128* %array_getter, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %signedcheckcarrymodtozero.x.declare_output, align 8
  %i15 = load i128, i128* %i, align 4
  %X16 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i15
  store i128 %Xvar14, i128* %X16, align 4
  %n17 = load i128, i128* %signedcheckcarrymodtozero.n.declare_arg, align 4
  %add18 = add i128 %n17, 1
  %call19 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %add18)
  %ptr_getter20 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %X_range_checks, align 8
  %i21 = load i128, i128* %i, align 4
  %X_range_checks22 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter20, i128 0, i128 %i21
  store %struct_template_circuit_num2bits* %call19, %struct_template_circuit_num2bits** %X_range_checks22, align 8
  %X23 = load [256 x i128]*, [256 x i128]** %signedcheckcarrymodtozero.x.declare_output, align 8
  %i24 = load i128, i128* %i, align 4
  %array_getter25 = getelementptr inbounds [256 x i128], [256 x i128]* %X23, i128 0, i128 %i24
  %X26 = load i128, i128* %array_getter25, align 4
  %n27 = load i128, i128* %signedcheckcarrymodtozero.n.declare_arg, align 4
  %lshift = shl i128 1, %n27
  %add28 = add i128 %X26, %lshift
  %X_range_checks29 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %X_range_checks, align 8
  %i30 = load i128, i128* %i, align 4
  %array_getter31 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %X_range_checks29, i128 0, i128 %i30
  %X_range_checks32 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter31, align 8
  %struct_getter33 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %X_range_checks32, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter33, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %add28, i1* @constraint.230)
  %ptr_getter34 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %X_range_checks, align 8
  %i35 = load i128, i128* %i, align 4
  %array_getter36 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter34, i128 0, i128 %i35
  %X_range_checks37 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter36, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %X_range_checks37, i32 0, i32 1
  store i128 %add28, i128* %num2bits.in.write_input_outter, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i38 = load i128, i128* %i, align 4
  %add39 = add i128 %i38, 1
  store i128 %add39, i128* %i, align 4
  %i40 = load i128, i128* %i, align 4
  %m41 = load i128, i128* %m, align 4
  %slt = icmp slt i128 %i40, %m41
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n42 = load i128, i128* %signedcheckcarrymodtozero.n.declare_arg, align 4
  %k43 = load i128, i128* %signedcheckcarrymodtozero.k.declare_arg, align 4
  %m44 = load i128, i128* %m, align 4
  %overflow45 = load i128, i128* %signedcheckcarrymodtozero.overflow.declare_arg, align 4
  %p46 = load [256 x i128]*, [256 x i128]** %signedcheckcarrymodtozero.p.declare_arg, align 8
  %call47 = call %struct_template_circuit_checkcarrymodp* @fn_template_build_checkcarrymodp(i128 %n42, i128 %k43, i128 %m44, i128 %overflow45, [256 x i128]* %p46)
  store %struct_template_circuit_checkcarrymodp* %call47, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body48

loop.body48:                                      ; preds = %loop.latch73, %loop.exit
  %in49 = load [256 x i128]*, [256 x i128]** %signedcheckcarrymodtozero.in.declare_input, align 8
  %i50 = load i128, i128* %i, align 4
  %array_getter51 = getelementptr inbounds [256 x i128], [256 x i128]* %in49, i128 0, i128 %i50
  %in52 = load i128, i128* %array_getter51, align 4
  %mod_check53 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter54 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check53, i32 0, i32 5
  %checkcarrymodp.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter54, align 8
  %i55 = load i128, i128* %i, align 4
  %array_getter56 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.in.read_input_outter, i128 0, i128 %i55
  %mod_check57 = load i128, i128* %array_getter56, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod_check57, i128 %in52, i1* @constraint.231)
  %ptr_getter58 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter59 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %ptr_getter58, i32 0, i32 5
  %checkcarrymodp.in.read_input_outter60 = load [256 x i128]*, [256 x i128]** %struct_getter59, align 8
  %i61 = load i128, i128* %i, align 4
  %mod_check62 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.in.read_input_outter60, i128 0, i128 %i61
  store i128 %in52, i128* %mod_check62, align 4
  %mod_check63 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter64 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check63, i32 0, i32 7
  %checkcarrymodp.y.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter64, align 8
  %i65 = load i128, i128* %i, align 4
  %array_getter66 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.y.read_input_outter, i128 0, i128 %i65
  %mod_check67 = load i128, i128* %array_getter66, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod_check67, i128 0, i1* @constraint.232)
  %ptr_getter68 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter69 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %ptr_getter68, i32 0, i32 7
  %checkcarrymodp.y.read_input_outter70 = load [256 x i128]*, [256 x i128]** %struct_getter69, align 8
  %i71 = load i128, i128* %i, align 4
  %mod_check72 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.y.read_input_outter70, i128 0, i128 %i71
  store i128 0, i128* %mod_check72, align 4
  br label %loop.latch73

loop.latch73:                                     ; preds = %loop.body48
  %i74 = load i128, i128* %i, align 4
  %add75 = add i128 %i74, 1
  store i128 %add75, i128* %i, align 4
  %i76 = load i128, i128* %i, align 4
  %k77 = load i128, i128* %signedcheckcarrymodtozero.k.declare_arg, align 4
  %slt78 = icmp slt i128 %i76, %k77
  br i1 %slt78, label %loop.body48, label %loop.exit79

loop.exit79:                                      ; preds = %loop.latch73
  store i128 0, i128* %i, align 4
  br label %loop.body80

loop.body80:                                      ; preds = %loop.latch95, %loop.exit79
  %X81 = load [256 x i128]*, [256 x i128]** %signedcheckcarrymodtozero.x.declare_output, align 8
  %i82 = load i128, i128* %i, align 4
  %array_getter83 = getelementptr inbounds [256 x i128], [256 x i128]* %X81, i128 0, i128 %i82
  %X84 = load i128, i128* %array_getter83, align 4
  %mod_check85 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter86 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check85, i32 0, i32 6
  %checkcarrymodp.x.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter86, align 8
  %i87 = load i128, i128* %i, align 4
  %array_getter88 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.x.read_input_outter, i128 0, i128 %i87
  %mod_check89 = load i128, i128* %array_getter88, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod_check89, i128 %X84, i1* @constraint.233)
  %ptr_getter90 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter91 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %ptr_getter90, i32 0, i32 6
  %checkcarrymodp.x.read_input_outter92 = load [256 x i128]*, [256 x i128]** %struct_getter91, align 8
  %i93 = load i128, i128* %i, align 4
  %mod_check94 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.x.read_input_outter92, i128 0, i128 %i93
  store i128 %X84, i128* %mod_check94, align 4
  br label %loop.latch95

loop.latch95:                                     ; preds = %loop.body80
  %i96 = load i128, i128* %i, align 4
  %add97 = add i128 %i96, 1
  store i128 %add97, i128* %i, align 4
  %i98 = load i128, i128* %i, align 4
  %m99 = load i128, i128* %m, align 4
  %slt100 = icmp slt i128 %i98, %m99
  br i1 %slt100, label %loop.body80, label %loop.exit101

loop.exit101:                                     ; preds = %loop.latch95
  br label %exit

exit:                                             ; preds = %loop.exit101
  %X102 = load [256 x i128]*, [256 x i128]** %signedcheckcarrymodtozero.x.declare_output, align 8
  %signedcheckcarrymodtozero.x.write_output_inner = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %0, i32 0, i32 5
  store [256 x i128]* %X102, [256 x i128]** %signedcheckcarrymodtozero.x.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_signedcheckcarrymodtozero* @fn_template_build_signedcheckcarrymodtozero(i128 %0, i128 %1, i128 %2, [256 x i128]* %3) {
entry:
  %struct_template_circuit_signedcheckcarrymodtozero = alloca %struct_template_circuit_signedcheckcarrymodtozero, align 8
  %signedcheckcarrymodtozero.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %struct_template_circuit_signedcheckcarrymodtozero, i32 0, i32 0
  store i128 %0, i128* %signedcheckcarrymodtozero.n.write_arg_inner, align 4
  %signedcheckcarrymodtozero.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %struct_template_circuit_signedcheckcarrymodtozero, i32 0, i32 1
  store i128 %1, i128* %signedcheckcarrymodtozero.k.write_arg_inner, align 4
  %signedcheckcarrymodtozero.overflow.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %struct_template_circuit_signedcheckcarrymodtozero, i32 0, i32 2
  store i128 %2, i128* %signedcheckcarrymodtozero.overflow.write_arg_inner, align 4
  %signedcheckcarrymodtozero.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %struct_template_circuit_signedcheckcarrymodtozero, i32 0, i32 3
  store [256 x i128]* %3, [256 x i128]** %signedcheckcarrymodtozero.p.write_arg_inner, align 8
  ret %struct_template_circuit_signedcheckcarrymodtozero* %struct_template_circuit_signedcheckcarrymodtozero
}

define void @fn_template_init_fp2isequal(%struct_template_circuit_fp2isequal* %0) {
entry:
  %Fp2IsEqual = alloca %struct_template_circuit_fp2isequal*, align 8
  store %struct_template_circuit_fp2isequal* %0, %struct_template_circuit_fp2isequal** %Fp2IsEqual, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %0, i32 0, i32 0
  %fp2isequal.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2isequal.n.declare_arg = alloca i128, align 8
  store i128 %fp2isequal.n.read_arg_inner, i128* %fp2isequal.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %0, i32 0, i32 1
  %fp2isequal.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2isequal.k.declare_arg = alloca i128, align 8
  store i128 %fp2isequal.k.read_arg_inner, i128* %fp2isequal.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %0, i32 0, i32 2
  %fp2isequal.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fp2isequal.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2isequal.p.read_arg_inner, [256 x i128]** %fp2isequal.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %0, i32 0, i32 3
  %fp2isequal.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fp2isequal.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2isequal.a.read_input_inner, [256 x [256 x i128]]** %fp2isequal.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %0, i32 0, i32 4
  %fp2isequal.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %fp2isequal.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2isequal.b.read_input_inner, [256 x [256 x i128]]** %fp2isequal.b.declare_input, align 8
  %fp2isequal.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %fp2isequal.out.declare_output, align 4
  %j = alloca i128, align 8
  %j5 = call i128 @fn_intrinsic_inline_init()
  store i128 %j5, i128* %j, align 4
  %total = alloca i128, align 8
  %total6 = call i128 @fn_intrinsic_inline_init()
  store i128 %total6, i128* %total, align 4
  %lta = alloca [256 x %struct_template_circuit_biglessthan*]*, align 8
  %lta7 = alloca [256 x %struct_template_circuit_biglessthan*], align 8
  store [256 x %struct_template_circuit_biglessthan*]* %lta7, [256 x %struct_template_circuit_biglessthan*]** %lta, align 8
  %ltb = alloca [256 x %struct_template_circuit_biglessthan*]*, align 8
  %ltb8 = alloca [256 x %struct_template_circuit_biglessthan*], align 8
  store [256 x %struct_template_circuit_biglessthan*]* %ltb8, [256 x %struct_template_circuit_biglessthan*]** %ltb, align 8
  %i = alloca i128, align 8
  %i9 = call i128 @fn_intrinsic_inline_init()
  store i128 %i9, i128* %i, align 4
  %checkZero = alloca %struct_template_circuit_iszero*, align 8
  %isEquals = alloca [256 x [256 x %struct_template_circuit_isequal*]]*, align 8
  %isEquals10 = alloca [256 x [256 x %struct_template_circuit_isequal*]], align 8
  store [256 x [256 x %struct_template_circuit_isequal*]]* %isEquals10, [256 x [256 x %struct_template_circuit_isequal*]]** %isEquals, align 8
  %k = load i128, i128* %fp2isequal.k.declare_arg, align 4
  %mul = mul i128 2, %k
  store i128 %mul, i128* %total, align 4
  store i128 0, i128* %j, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch170, %entry
  %n = load i128, i128* %fp2isequal.n.declare_arg, align 4
  %k11 = load i128, i128* %fp2isequal.k.declare_arg, align 4
  %call = call %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %n, i128 %k11)
  %ptr_getter = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lta, align 8
  %j12 = load i128, i128* %j, align 4
  %lta13 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter, i128 0, i128 %j12
  store %struct_template_circuit_biglessthan* %call, %struct_template_circuit_biglessthan** %lta13, align 8
  %n14 = load i128, i128* %fp2isequal.n.declare_arg, align 4
  %k15 = load i128, i128* %fp2isequal.k.declare_arg, align 4
  %call16 = call %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %n14, i128 %k15)
  %ptr_getter17 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %ltb, align 8
  %j18 = load i128, i128* %j, align 4
  %ltb19 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter17, i128 0, i128 %j18
  store %struct_template_circuit_biglessthan* %call16, %struct_template_circuit_biglessthan** %ltb19, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body20

loop.body20:                                      ; preds = %loop.latch, %loop.body
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2isequal.a.declare_input, align 8
  %j21 = load i128, i128* %j, align 4
  %i22 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %j21, i128 %i22
  %a23 = load i128, i128* %array_getter, align 4
  %lta24 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lta, align 8
  %j25 = load i128, i128* %j, align 4
  %array_getter26 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %lta24, i128 0, i128 %j25
  %lta27 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter26, align 8
  %struct_getter28 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lta27, i32 0, i32 2
  %biglessthan.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter28, align 8
  %i29 = load i128, i128* %i, align 4
  %array_getter30 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter, i128 0, i128 %i29
  %lta31 = load i128, i128* %array_getter30, align 4
  call void @fn_intrinsic_add_constraint(i128 %lta31, i128 %a23, i1* @constraint.234)
  %ptr_getter32 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lta, align 8
  %j33 = load i128, i128* %j, align 4
  %array_getter34 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter32, i128 0, i128 %j33
  %lta35 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter34, align 8
  %struct_getter36 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lta35, i32 0, i32 2
  %biglessthan.a.read_input_outter37 = load [256 x i128]*, [256 x i128]** %struct_getter36, align 8
  %i38 = load i128, i128* %i, align 4
  %lta39 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter37, i128 0, i128 %i38
  store i128 %a23, i128* %lta39, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2isequal.p.declare_arg, align 8
  %i40 = load i128, i128* %i, align 4
  %array_getter41 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i40
  %p42 = load i128, i128* %array_getter41, align 4
  %lta43 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lta, align 8
  %j44 = load i128, i128* %j, align 4
  %array_getter45 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %lta43, i128 0, i128 %j44
  %lta46 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter45, align 8
  %struct_getter47 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lta46, i32 0, i32 3
  %biglessthan.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter47, align 8
  %i48 = load i128, i128* %i, align 4
  %array_getter49 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter, i128 0, i128 %i48
  %lta50 = load i128, i128* %array_getter49, align 4
  call void @fn_intrinsic_add_constraint(i128 %lta50, i128 %p42, i1* @constraint.235)
  %ptr_getter51 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lta, align 8
  %j52 = load i128, i128* %j, align 4
  %array_getter53 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter51, i128 0, i128 %j52
  %lta54 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter53, align 8
  %struct_getter55 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lta54, i32 0, i32 3
  %biglessthan.b.read_input_outter56 = load [256 x i128]*, [256 x i128]** %struct_getter55, align 8
  %i57 = load i128, i128* %i, align 4
  %lta58 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter56, i128 0, i128 %i57
  store i128 %p42, i128* %lta58, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2isequal.b.declare_input, align 8
  %j59 = load i128, i128* %j, align 4
  %i60 = load i128, i128* %i, align 4
  %array_getter61 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %j59, i128 %i60
  %b62 = load i128, i128* %array_getter61, align 4
  %ltb63 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %ltb, align 8
  %j64 = load i128, i128* %j, align 4
  %array_getter65 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ltb63, i128 0, i128 %j64
  %ltb66 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter65, align 8
  %struct_getter67 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ltb66, i32 0, i32 2
  %biglessthan.a.read_input_outter68 = load [256 x i128]*, [256 x i128]** %struct_getter67, align 8
  %i69 = load i128, i128* %i, align 4
  %array_getter70 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter68, i128 0, i128 %i69
  %ltb71 = load i128, i128* %array_getter70, align 4
  call void @fn_intrinsic_add_constraint(i128 %ltb71, i128 %b62, i1* @constraint.236)
  %ptr_getter72 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %ltb, align 8
  %j73 = load i128, i128* %j, align 4
  %array_getter74 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter72, i128 0, i128 %j73
  %ltb75 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter74, align 8
  %struct_getter76 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ltb75, i32 0, i32 2
  %biglessthan.a.read_input_outter77 = load [256 x i128]*, [256 x i128]** %struct_getter76, align 8
  %i78 = load i128, i128* %i, align 4
  %ltb79 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter77, i128 0, i128 %i78
  store i128 %b62, i128* %ltb79, align 4
  %p80 = load [256 x i128]*, [256 x i128]** %fp2isequal.p.declare_arg, align 8
  %i81 = load i128, i128* %i, align 4
  %array_getter82 = getelementptr inbounds [256 x i128], [256 x i128]* %p80, i128 0, i128 %i81
  %p83 = load i128, i128* %array_getter82, align 4
  %ltb84 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %ltb, align 8
  %j85 = load i128, i128* %j, align 4
  %array_getter86 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ltb84, i128 0, i128 %j85
  %ltb87 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter86, align 8
  %struct_getter88 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ltb87, i32 0, i32 3
  %biglessthan.b.read_input_outter89 = load [256 x i128]*, [256 x i128]** %struct_getter88, align 8
  %i90 = load i128, i128* %i, align 4
  %array_getter91 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter89, i128 0, i128 %i90
  %ltb92 = load i128, i128* %array_getter91, align 4
  call void @fn_intrinsic_add_constraint(i128 %ltb92, i128 %p83, i1* @constraint.237)
  %ptr_getter93 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %ltb, align 8
  %j94 = load i128, i128* %j, align 4
  %array_getter95 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ptr_getter93, i128 0, i128 %j94
  %ltb96 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter95, align 8
  %struct_getter97 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ltb96, i32 0, i32 3
  %biglessthan.b.read_input_outter98 = load [256 x i128]*, [256 x i128]** %struct_getter97, align 8
  %i99 = load i128, i128* %i, align 4
  %ltb100 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter98, i128 0, i128 %i99
  store i128 %p83, i128* %ltb100, align 4
  %call101 = call %struct_template_circuit_isequal* @fn_template_build_isequal()
  %ptr_getter102 = load [256 x [256 x %struct_template_circuit_isequal*]]*, [256 x [256 x %struct_template_circuit_isequal*]]** %isEquals, align 8
  %j103 = load i128, i128* %j, align 4
  %i104 = load i128, i128* %i, align 4
  %isEquals105 = getelementptr inbounds [256 x [256 x %struct_template_circuit_isequal*]], [256 x [256 x %struct_template_circuit_isequal*]]* %ptr_getter102, i128 0, i128 %j103, i128 %i104
  store %struct_template_circuit_isequal* %call101, %struct_template_circuit_isequal** %isEquals105, align 8
  %a106 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2isequal.a.declare_input, align 8
  %j107 = load i128, i128* %j, align 4
  %i108 = load i128, i128* %i, align 4
  %array_getter109 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a106, i128 0, i128 %j107, i128 %i108
  %a110 = load i128, i128* %array_getter109, align 4
  %isEquals111 = load [256 x [256 x %struct_template_circuit_isequal*]]*, [256 x [256 x %struct_template_circuit_isequal*]]** %isEquals, align 8
  %j112 = load i128, i128* %j, align 4
  %i113 = load i128, i128* %i, align 4
  %array_getter114 = getelementptr inbounds [256 x [256 x %struct_template_circuit_isequal*]], [256 x [256 x %struct_template_circuit_isequal*]]* %isEquals111, i128 0, i128 %j112, i128 %i113
  %isEquals115 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter114, align 8
  %struct_getter116 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEquals115, i32 0, i32 0
  %isequal.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter116, align 8
  %array_getter117 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter, i128 0, i128 0
  %isEquals118 = load i128, i128* %array_getter117, align 4
  call void @fn_intrinsic_add_constraint(i128 %isEquals118, i128 %a110, i1* @constraint.238)
  %ptr_getter119 = load [256 x [256 x %struct_template_circuit_isequal*]]*, [256 x [256 x %struct_template_circuit_isequal*]]** %isEquals, align 8
  %j120 = load i128, i128* %j, align 4
  %i121 = load i128, i128* %i, align 4
  %array_getter122 = getelementptr inbounds [256 x [256 x %struct_template_circuit_isequal*]], [256 x [256 x %struct_template_circuit_isequal*]]* %ptr_getter119, i128 0, i128 %j120, i128 %i121
  %isEquals123 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter122, align 8
  %struct_getter124 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEquals123, i32 0, i32 0
  %isequal.in.read_input_outter125 = load [256 x i128]*, [256 x i128]** %struct_getter124, align 8
  %isEquals126 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter125, i128 0, i128 0
  store i128 %a110, i128* %isEquals126, align 4
  %b127 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2isequal.b.declare_input, align 8
  %j128 = load i128, i128* %j, align 4
  %i129 = load i128, i128* %i, align 4
  %array_getter130 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b127, i128 0, i128 %j128, i128 %i129
  %b131 = load i128, i128* %array_getter130, align 4
  %isEquals132 = load [256 x [256 x %struct_template_circuit_isequal*]]*, [256 x [256 x %struct_template_circuit_isequal*]]** %isEquals, align 8
  %j133 = load i128, i128* %j, align 4
  %i134 = load i128, i128* %i, align 4
  %array_getter135 = getelementptr inbounds [256 x [256 x %struct_template_circuit_isequal*]], [256 x [256 x %struct_template_circuit_isequal*]]* %isEquals132, i128 0, i128 %j133, i128 %i134
  %isEquals136 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter135, align 8
  %struct_getter137 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEquals136, i32 0, i32 0
  %isequal.in.read_input_outter138 = load [256 x i128]*, [256 x i128]** %struct_getter137, align 8
  %array_getter139 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter138, i128 0, i128 1
  %isEquals140 = load i128, i128* %array_getter139, align 4
  call void @fn_intrinsic_add_constraint(i128 %isEquals140, i128 %b131, i1* @constraint.239)
  %ptr_getter141 = load [256 x [256 x %struct_template_circuit_isequal*]]*, [256 x [256 x %struct_template_circuit_isequal*]]** %isEquals, align 8
  %j142 = load i128, i128* %j, align 4
  %i143 = load i128, i128* %i, align 4
  %array_getter144 = getelementptr inbounds [256 x [256 x %struct_template_circuit_isequal*]], [256 x [256 x %struct_template_circuit_isequal*]]* %ptr_getter141, i128 0, i128 %j142, i128 %i143
  %isEquals145 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter144, align 8
  %struct_getter146 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEquals145, i32 0, i32 0
  %isequal.in.read_input_outter147 = load [256 x i128]*, [256 x i128]** %struct_getter146, align 8
  %isEquals148 = getelementptr inbounds [256 x i128], [256 x i128]* %isequal.in.read_input_outter147, i128 0, i128 1
  store i128 %b131, i128* %isEquals148, align 4
  %total149 = load i128, i128* %total, align 4
  %isEquals150 = load [256 x [256 x %struct_template_circuit_isequal*]]*, [256 x [256 x %struct_template_circuit_isequal*]]** %isEquals, align 8
  %j151 = load i128, i128* %j, align 4
  %i152 = load i128, i128* %i, align 4
  %array_getter153 = getelementptr inbounds [256 x [256 x %struct_template_circuit_isequal*]], [256 x [256 x %struct_template_circuit_isequal*]]* %isEquals150, i128 0, i128 %j151, i128 %i152
  %isEquals154 = load %struct_template_circuit_isequal*, %struct_template_circuit_isequal** %array_getter153, align 8
  %struct_getter155 = getelementptr inbounds %struct_template_circuit_isequal, %struct_template_circuit_isequal* %isEquals154, i32 0, i32 1
  %isequal.out.read_output_outter = load i128, i128* %struct_getter155, align 4
  %sub = sub i128 %total149, %isequal.out.read_output_outter
  store i128 %sub, i128* %total, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body20
  %i156 = load i128, i128* %i, align 4
  %add = add i128 %i156, 1
  store i128 %add, i128* %i, align 4
  %i157 = load i128, i128* %i, align 4
  %k158 = load i128, i128* %fp2isequal.k.declare_arg, align 4
  %slt = icmp slt i128 %i157, %k158
  br i1 %slt, label %loop.body20, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %lta159 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %lta, align 8
  %j160 = load i128, i128* %j, align 4
  %array_getter161 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %lta159, i128 0, i128 %j160
  %lta162 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter161, align 8
  %struct_getter163 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lta162, i32 0, i32 4
  %biglessthan.out.read_output_outter = load i128, i128* %struct_getter163, align 4
  call void @fn_intrinsic_add_constraint(i128 %biglessthan.out.read_output_outter, i128 1, i1* @constraint.240)
  %ltb164 = load [256 x %struct_template_circuit_biglessthan*]*, [256 x %struct_template_circuit_biglessthan*]** %ltb, align 8
  %j165 = load i128, i128* %j, align 4
  %array_getter166 = getelementptr inbounds [256 x %struct_template_circuit_biglessthan*], [256 x %struct_template_circuit_biglessthan*]* %ltb164, i128 0, i128 %j165
  %ltb167 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %array_getter166, align 8
  %struct_getter168 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ltb167, i32 0, i32 4
  %biglessthan.out.read_output_outter169 = load i128, i128* %struct_getter168, align 4
  call void @fn_intrinsic_add_constraint(i128 %biglessthan.out.read_output_outter169, i128 1, i1* @constraint.241)
  br label %loop.latch170

loop.latch170:                                    ; preds = %loop.exit
  %j171 = load i128, i128* %j, align 4
  %add172 = add i128 %j171, 1
  store i128 %add172, i128* %j, align 4
  %j173 = load i128, i128* %j, align 4
  %slt174 = icmp slt i128 %j173, 2
  br i1 %slt174, label %loop.body, label %loop.exit175

loop.exit175:                                     ; preds = %loop.latch170
  %call176 = call %struct_template_circuit_iszero* @fn_template_build_iszero()
  store %struct_template_circuit_iszero* %call176, %struct_template_circuit_iszero** %checkZero, align 8
  %total177 = load i128, i128* %total, align 4
  %checkZero178 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %struct_getter179 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %checkZero178, i32 0, i32 0
  %iszero.in.read_input_outter = load i128, i128* %struct_getter179, align 4
  call void @fn_intrinsic_add_constraint(i128 %iszero.in.read_input_outter, i128 %total177, i1* @constraint.242)
  %ptr_getter180 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %iszero.in.write_input_outter = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %ptr_getter180, i32 0, i32 0
  store i128 %total177, i128* %iszero.in.write_input_outter, align 4
  %checkZero181 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %checkZero, align 8
  %struct_getter182 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %checkZero181, i32 0, i32 2
  %iszero.out.read_output_outter = load i128, i128* %struct_getter182, align 4
  %out183 = load i128, i128* %fp2isequal.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out183, i128 %iszero.out.read_output_outter, i1* @constraint.243)
  %ptr_getter184 = load %struct_template_circuit_fp2isequal*, %struct_template_circuit_fp2isequal** %Fp2IsEqual, align 8
  %fp2isequal.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %ptr_getter184, i32 0, i32 5
  store i128 %iszero.out.read_output_outter, i128* %fp2isequal.out.write_output_inner, align 4
  %Fp2IsEqual185 = load %struct_template_circuit_fp2isequal*, %struct_template_circuit_fp2isequal** %Fp2IsEqual, align 8
  %struct_getter186 = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %Fp2IsEqual185, i32 0, i32 5
  %fp2isequal.out.read_output_inner = load i128, i128* %struct_getter186, align 4
  store i128 %fp2isequal.out.read_output_inner, i128* %fp2isequal.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit175
  %out187 = load i128, i128* %fp2isequal.out.declare_output, align 4
  %fp2isequal.out.write_output_inner188 = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %0, i32 0, i32 5
  store i128 %out187, i128* %fp2isequal.out.write_output_inner188, align 4
  ret void
}

define %struct_template_circuit_fp2isequal* @fn_template_build_fp2isequal(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fp2isequal = alloca %struct_template_circuit_fp2isequal, align 8
  %fp2isequal.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %struct_template_circuit_fp2isequal, i32 0, i32 0
  store i128 %0, i128* %fp2isequal.n.write_arg_inner, align 4
  %fp2isequal.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %struct_template_circuit_fp2isequal, i32 0, i32 1
  store i128 %1, i128* %fp2isequal.k.write_arg_inner, align 4
  %fp2isequal.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2isequal, %struct_template_circuit_fp2isequal* %struct_template_circuit_fp2isequal, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fp2isequal.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2isequal* %struct_template_circuit_fp2isequal
}

define void @fn_template_init_bigmod2(%struct_template_circuit_bigmod2* %0) {
entry:
  %BigMod2 = alloca %struct_template_circuit_bigmod2*, align 8
  store %struct_template_circuit_bigmod2* %0, %struct_template_circuit_bigmod2** %BigMod2, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigmod2, %struct_template_circuit_bigmod2* %0, i32 0, i32 0
  %bigmod2.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigmod2.n.declare_arg = alloca i128, align 8
  store i128 %bigmod2.n.read_arg_inner, i128* %bigmod2.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigmod2, %struct_template_circuit_bigmod2* %0, i32 0, i32 1
  %bigmod2.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigmod2.k.declare_arg = alloca i128, align 8
  store i128 %bigmod2.k.read_arg_inner, i128* %bigmod2.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigmod2, %struct_template_circuit_bigmod2* %0, i32 0, i32 2
  %bigmod2.m.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %bigmod2.m.declare_arg = alloca i128, align 8
  store i128 %bigmod2.m.read_arg_inner, i128* %bigmod2.m.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigmod2, %struct_template_circuit_bigmod2* %0, i32 0, i32 3
  %bigmod2.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %bigmod2.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmod2.a.read_input_inner, [256 x i128]** %bigmod2.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_bigmod2, %struct_template_circuit_bigmod2* %0, i32 0, i32 4
  %bigmod2.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %bigmod2.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmod2.b.read_input_inner, [256 x i128]** %bigmod2.b.declare_input, align 8
  %bigmod2.mod.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %mod = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %mod, [256 x i128]** %bigmod2.mod.declare_output, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %mod_range_checks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %mod_range_checks6 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %mod_range_checks6, [256 x %struct_template_circuit_num2bits*]** %mod_range_checks, align 8
  %add = alloca %struct_template_circuit_bigadd*, align 8
  %lt = alloca %struct_template_circuit_biglessthan*, align 8
  %mul = alloca %struct_template_circuit_bigmult*, align 8
  %div_range_checks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %div_range_checks7 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %div_range_checks7, [256 x %struct_template_circuit_num2bits*]** %div_range_checks, align 8
  %longdiv = alloca [256 x [256 x i128]]*, align 8
  %longdiv8 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %longdiv8, [256 x [256 x i128]]** %longdiv, align 8
  %bigmod2.div.declare_output = alloca [256 x i128]*, align 8
  %malloccall9 = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %div = bitcast i8* %malloccall9 to [256 x i128]*
  store [256 x i128]* %div, [256 x i128]** %bigmod2.div.declare_output, align 8
  %n = load i128, i128* %bigmod2.n.declare_arg, align 4
  %k = load i128, i128* %bigmod2.k.declare_arg, align 4
  %m = load i128, i128* %bigmod2.m.declare_arg, align 4
  %k10 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %sub = sub i128 %m, %k10
  %a = load [256 x i128]*, [256 x i128]** %bigmod2.a.declare_input, align 8
  %b = load [256 x i128]*, [256 x i128]** %bigmod2.b.declare_input, align 8
  %call = call [256 x [256 x i128]]* @long_div2(i128 %n, i128 %k, i128 %sub, [256 x i128]* %a, [256 x i128]* %b)
  store [256 x [256 x i128]]* %call, [256 x [256 x i128]]** %longdiv, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %longdiv11 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %longdiv, align 8
  %i12 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %longdiv11, i128 0, i128 1, i128 %i12
  %longdiv13 = load i128, i128* %array_getter, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %bigmod2.mod.declare_output, align 8
  %i14 = load i128, i128* %i, align 4
  %mod15 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i14
  store i128 %longdiv13, i128* %mod15, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i16 = load i128, i128* %i, align 4
  %add17 = add i128 %i16, 1
  store i128 %add17, i128* %i, align 4
  %i18 = load i128, i128* %i, align 4
  %k19 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %slt = icmp slt i128 %i18, %k19
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %i, align 4
  br label %loop.body20

loop.body20:                                      ; preds = %loop.latch28, %loop.exit
  %longdiv21 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %longdiv, align 8
  %i22 = load i128, i128* %i, align 4
  %array_getter23 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %longdiv21, i128 0, i128 0, i128 %i22
  %longdiv24 = load i128, i128* %array_getter23, align 4
  %ptr_getter25 = load [256 x i128]*, [256 x i128]** %bigmod2.div.declare_output, align 8
  %i26 = load i128, i128* %i, align 4
  %div27 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter25, i128 0, i128 %i26
  store i128 %longdiv24, i128* %div27, align 4
  br label %loop.latch28

loop.latch28:                                     ; preds = %loop.body20
  %i29 = load i128, i128* %i, align 4
  %add30 = add i128 %i29, 1
  store i128 %add30, i128* %i, align 4
  %i31 = load i128, i128* %i, align 4
  %m32 = load i128, i128* %bigmod2.m.declare_arg, align 4
  %k33 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %sub34 = sub i128 %m32, %k33
  %sle = icmp sle i128 %i31, %sub34
  br i1 %sle, label %loop.body20, label %loop.exit35

loop.exit35:                                      ; preds = %loop.latch28
  store i128 0, i128* %i, align 4
  br label %loop.body36

loop.body36:                                      ; preds = %loop.latch55, %loop.exit35
  %n37 = load i128, i128* %bigmod2.n.declare_arg, align 4
  %call38 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n37)
  %ptr_getter39 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %div_range_checks, align 8
  %i40 = load i128, i128* %i, align 4
  %div_range_checks41 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter39, i128 0, i128 %i40
  store %struct_template_circuit_num2bits* %call38, %struct_template_circuit_num2bits** %div_range_checks41, align 8
  %div42 = load [256 x i128]*, [256 x i128]** %bigmod2.div.declare_output, align 8
  %i43 = load i128, i128* %i, align 4
  %array_getter44 = getelementptr inbounds [256 x i128], [256 x i128]* %div42, i128 0, i128 %i43
  %div45 = load i128, i128* %array_getter44, align 4
  %div_range_checks46 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %div_range_checks, align 8
  %i47 = load i128, i128* %i, align 4
  %array_getter48 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %div_range_checks46, i128 0, i128 %i47
  %div_range_checks49 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter48, align 8
  %struct_getter50 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %div_range_checks49, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter50, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %div45, i1* @constraint.244)
  %ptr_getter51 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %div_range_checks, align 8
  %i52 = load i128, i128* %i, align 4
  %array_getter53 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter51, i128 0, i128 %i52
  %div_range_checks54 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter53, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %div_range_checks54, i32 0, i32 1
  store i128 %div45, i128* %num2bits.in.write_input_outter, align 4
  br label %loop.latch55

loop.latch55:                                     ; preds = %loop.body36
  %i56 = load i128, i128* %i, align 4
  %add57 = add i128 %i56, 1
  store i128 %add57, i128* %i, align 4
  %i58 = load i128, i128* %i, align 4
  %m59 = load i128, i128* %bigmod2.m.declare_arg, align 4
  %k60 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %sub61 = sub i128 %m59, %k60
  %sle62 = icmp sle i128 %i58, %sub61
  br i1 %sle62, label %loop.body36, label %loop.exit63

loop.exit63:                                      ; preds = %loop.latch55
  store i128 0, i128* %i, align 4
  br label %loop.body64

loop.body64:                                      ; preds = %loop.latch85, %loop.exit63
  %n65 = load i128, i128* %bigmod2.n.declare_arg, align 4
  %call66 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n65)
  %ptr_getter67 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %mod_range_checks, align 8
  %i68 = load i128, i128* %i, align 4
  %mod_range_checks69 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter67, i128 0, i128 %i68
  store %struct_template_circuit_num2bits* %call66, %struct_template_circuit_num2bits** %mod_range_checks69, align 8
  %mod70 = load [256 x i128]*, [256 x i128]** %bigmod2.mod.declare_output, align 8
  %i71 = load i128, i128* %i, align 4
  %array_getter72 = getelementptr inbounds [256 x i128], [256 x i128]* %mod70, i128 0, i128 %i71
  %mod73 = load i128, i128* %array_getter72, align 4
  %mod_range_checks74 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %mod_range_checks, align 8
  %i75 = load i128, i128* %i, align 4
  %array_getter76 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %mod_range_checks74, i128 0, i128 %i75
  %mod_range_checks77 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter76, align 8
  %struct_getter78 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %mod_range_checks77, i32 0, i32 1
  %num2bits.in.read_input_outter79 = load i128, i128* %struct_getter78, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter79, i128 %mod73, i1* @constraint.245)
  %ptr_getter80 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %mod_range_checks, align 8
  %i81 = load i128, i128* %i, align 4
  %array_getter82 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter80, i128 0, i128 %i81
  %mod_range_checks83 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter82, align 8
  %num2bits.in.write_input_outter84 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %mod_range_checks83, i32 0, i32 1
  store i128 %mod73, i128* %num2bits.in.write_input_outter84, align 4
  br label %loop.latch85

loop.latch85:                                     ; preds = %loop.body64
  %i86 = load i128, i128* %i, align 4
  %add87 = add i128 %i86, 1
  store i128 %add87, i128* %i, align 4
  %i88 = load i128, i128* %i, align 4
  %k89 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %slt90 = icmp slt i128 %i88, %k89
  br i1 %slt90, label %loop.body64, label %loop.exit91

loop.exit91:                                      ; preds = %loop.latch85
  %n92 = load i128, i128* %bigmod2.n.declare_arg, align 4
  %m93 = load i128, i128* %bigmod2.m.declare_arg, align 4
  %k94 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %sub95 = sub i128 %m93, %k94
  %add96 = add i128 %sub95, 1
  %call97 = call %struct_template_circuit_bigmult* @fn_template_build_bigmult(i128 %n92, i128 %add96)
  store %struct_template_circuit_bigmult* %call97, %struct_template_circuit_bigmult** %mul, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body98

loop.body98:                                      ; preds = %loop.latch127, %loop.exit91
  %div99 = load [256 x i128]*, [256 x i128]** %bigmod2.div.declare_output, align 8
  %i100 = load i128, i128* %i, align 4
  %array_getter101 = getelementptr inbounds [256 x i128], [256 x i128]* %div99, i128 0, i128 %i100
  %div102 = load i128, i128* %array_getter101, align 4
  %mul103 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter104 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul103, i32 0, i32 2
  %bigmult.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter104, align 8
  %i105 = load i128, i128* %i, align 4
  %array_getter106 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter, i128 0, i128 %i105
  %mul107 = load i128, i128* %array_getter106, align 4
  call void @fn_intrinsic_add_constraint(i128 %mul107, i128 %div102, i1* @constraint.246)
  %ptr_getter108 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter109 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter108, i32 0, i32 2
  %bigmult.a.read_input_outter110 = load [256 x i128]*, [256 x i128]** %struct_getter109, align 8
  %i111 = load i128, i128* %i, align 4
  %mul112 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter110, i128 0, i128 %i111
  store i128 %div102, i128* %mul112, align 4
  %b113 = load [256 x i128]*, [256 x i128]** %bigmod2.b.declare_input, align 8
  %i114 = load i128, i128* %i, align 4
  %array_getter115 = getelementptr inbounds [256 x i128], [256 x i128]* %b113, i128 0, i128 %i114
  %b116 = load i128, i128* %array_getter115, align 4
  %mul117 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter118 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul117, i32 0, i32 3
  %bigmult.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter118, align 8
  %i119 = load i128, i128* %i, align 4
  %array_getter120 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter, i128 0, i128 %i119
  %mul121 = load i128, i128* %array_getter120, align 4
  call void @fn_intrinsic_add_constraint(i128 %mul121, i128 %b116, i1* @constraint.247)
  %ptr_getter122 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter123 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter122, i32 0, i32 3
  %bigmult.b.read_input_outter124 = load [256 x i128]*, [256 x i128]** %struct_getter123, align 8
  %i125 = load i128, i128* %i, align 4
  %mul126 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter124, i128 0, i128 %i125
  store i128 %b116, i128* %mul126, align 4
  br label %loop.latch127

loop.latch127:                                    ; preds = %loop.body98
  %i128 = load i128, i128* %i, align 4
  %add129 = add i128 %i128, 1
  store i128 %add129, i128* %i, align 4
  %i130 = load i128, i128* %i, align 4
  %k131 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %slt132 = icmp slt i128 %i130, %k131
  br i1 %slt132, label %loop.body98, label %loop.exit133

loop.exit133:                                     ; preds = %loop.latch127
  %k134 = load i128, i128* %bigmod2.k.declare_arg, align 4
  store i128 %k134, i128* %i, align 4
  br label %loop.body135

loop.body135:                                     ; preds = %loop.latch162, %loop.exit133
  %div136 = load [256 x i128]*, [256 x i128]** %bigmod2.div.declare_output, align 8
  %i137 = load i128, i128* %i, align 4
  %array_getter138 = getelementptr inbounds [256 x i128], [256 x i128]* %div136, i128 0, i128 %i137
  %div139 = load i128, i128* %array_getter138, align 4
  %mul140 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter141 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul140, i32 0, i32 2
  %bigmult.a.read_input_outter142 = load [256 x i128]*, [256 x i128]** %struct_getter141, align 8
  %i143 = load i128, i128* %i, align 4
  %array_getter144 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter142, i128 0, i128 %i143
  %mul145 = load i128, i128* %array_getter144, align 4
  call void @fn_intrinsic_add_constraint(i128 %mul145, i128 %div139, i1* @constraint.248)
  %ptr_getter146 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter147 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter146, i32 0, i32 2
  %bigmult.a.read_input_outter148 = load [256 x i128]*, [256 x i128]** %struct_getter147, align 8
  %i149 = load i128, i128* %i, align 4
  %mul150 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter148, i128 0, i128 %i149
  store i128 %div139, i128* %mul150, align 4
  %mul151 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter152 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul151, i32 0, i32 3
  %bigmult.b.read_input_outter153 = load [256 x i128]*, [256 x i128]** %struct_getter152, align 8
  %i154 = load i128, i128* %i, align 4
  %array_getter155 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter153, i128 0, i128 %i154
  %mul156 = load i128, i128* %array_getter155, align 4
  call void @fn_intrinsic_add_constraint(i128 %mul156, i128 0, i1* @constraint.249)
  %ptr_getter157 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter158 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter157, i32 0, i32 3
  %bigmult.b.read_input_outter159 = load [256 x i128]*, [256 x i128]** %struct_getter158, align 8
  %i160 = load i128, i128* %i, align 4
  %mul161 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter159, i128 0, i128 %i160
  store i128 0, i128* %mul161, align 4
  br label %loop.latch162

loop.latch162:                                    ; preds = %loop.body135
  %i163 = load i128, i128* %i, align 4
  %add164 = add i128 %i163, 1
  store i128 %add164, i128* %i, align 4
  %i165 = load i128, i128* %i, align 4
  %m166 = load i128, i128* %bigmod2.m.declare_arg, align 4
  %k167 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %sub168 = sub i128 %m166, %k167
  %sle169 = icmp sle i128 %i165, %sub168
  br i1 %sle169, label %loop.body135, label %loop.exit170

loop.exit170:                                     ; preds = %loop.latch162
  %m171 = load i128, i128* %bigmod2.m.declare_arg, align 4
  store i128 %m171, i128* %i, align 4
  br label %loop.body172

loop.body172:                                     ; preds = %loop.latch178, %loop.exit170
  %mul173 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter174 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul173, i32 0, i32 4
  %bigmult.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter174, align 8
  %i175 = load i128, i128* %i, align 4
  %array_getter176 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.out.read_output_outter, i128 0, i128 %i175
  %mul177 = load i128, i128* %array_getter176, align 4
  call void @fn_intrinsic_add_constraint(i128 %mul177, i128 0, i1* @constraint.250)
  br label %loop.latch178

loop.latch178:                                    ; preds = %loop.body172
  %i179 = load i128, i128* %i, align 4
  %add180 = add i128 %i179, 1
  store i128 %add180, i128* %i, align 4
  %i181 = load i128, i128* %i, align 4
  %m182 = load i128, i128* %bigmod2.m.declare_arg, align 4
  %k183 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %sub184 = sub i128 %m182, %k183
  %mul185 = mul i128 2, %sub184
  %add186 = add i128 %mul185, 2
  %slt187 = icmp slt i128 %i181, %add186
  br i1 %slt187, label %loop.body172, label %loop.exit188

loop.exit188:                                     ; preds = %loop.latch178
  %n189 = load i128, i128* %bigmod2.n.declare_arg, align 4
  %m190 = load i128, i128* %bigmod2.m.declare_arg, align 4
  %call191 = call %struct_template_circuit_bigadd* @fn_template_build_bigadd(i128 %n189, i128 %m190)
  store %struct_template_circuit_bigadd* %call191, %struct_template_circuit_bigadd** %add, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body192

loop.body192:                                     ; preds = %loop.latch237, %loop.exit188
  %mul193 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter194 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul193, i32 0, i32 4
  %bigmult.out.read_output_outter195 = load [256 x i128]*, [256 x i128]** %struct_getter194, align 8
  %i196 = load i128, i128* %i, align 4
  %array_getter197 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.out.read_output_outter195, i128 0, i128 %i196
  %mul198 = load i128, i128* %array_getter197, align 4
  %add199 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter200 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add199, i32 0, i32 2
  %bigadd.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter200, align 8
  %i201 = load i128, i128* %i, align 4
  %array_getter202 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter, i128 0, i128 %i201
  %add203 = load i128, i128* %array_getter202, align 4
  call void @fn_intrinsic_add_constraint(i128 %add203, i128 %mul198, i1* @constraint.251)
  %ptr_getter204 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter205 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter204, i32 0, i32 2
  %bigadd.a.read_input_outter206 = load [256 x i128]*, [256 x i128]** %struct_getter205, align 8
  %i207 = load i128, i128* %i, align 4
  %add208 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter206, i128 0, i128 %i207
  store i128 %mul198, i128* %add208, align 4
  %i209 = load i128, i128* %i, align 4
  %k210 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %slt211 = icmp slt i128 %i209, %k210
  br i1 %slt211, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body192
  %mod212 = load [256 x i128]*, [256 x i128]** %bigmod2.mod.declare_output, align 8
  %i213 = load i128, i128* %i, align 4
  %array_getter214 = getelementptr inbounds [256 x i128], [256 x i128]* %mod212, i128 0, i128 %i213
  %mod215 = load i128, i128* %array_getter214, align 4
  %add216 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter217 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add216, i32 0, i32 3
  %bigadd.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter217, align 8
  %i218 = load i128, i128* %i, align 4
  %array_getter219 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter, i128 0, i128 %i218
  %add220 = load i128, i128* %array_getter219, align 4
  call void @fn_intrinsic_add_constraint(i128 %add220, i128 %mod215, i1* @constraint.252)
  %ptr_getter221 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter222 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter221, i32 0, i32 3
  %bigadd.b.read_input_outter223 = load [256 x i128]*, [256 x i128]** %struct_getter222, align 8
  %i224 = load i128, i128* %i, align 4
  %add225 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter223, i128 0, i128 %i224
  store i128 %mod215, i128* %add225, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body192
  %add226 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter227 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add226, i32 0, i32 3
  %bigadd.b.read_input_outter228 = load [256 x i128]*, [256 x i128]** %struct_getter227, align 8
  %i229 = load i128, i128* %i, align 4
  %array_getter230 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter228, i128 0, i128 %i229
  %add231 = load i128, i128* %array_getter230, align 4
  call void @fn_intrinsic_add_constraint(i128 %add231, i128 0, i1* @constraint.253)
  %ptr_getter232 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter233 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter232, i32 0, i32 3
  %bigadd.b.read_input_outter234 = load [256 x i128]*, [256 x i128]** %struct_getter233, align 8
  %i235 = load i128, i128* %i, align 4
  %add236 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter234, i128 0, i128 %i235
  store i128 0, i128* %add236, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch237

loop.latch237:                                    ; preds = %if.exit
  %i238 = load i128, i128* %i, align 4
  %add239 = add i128 %i238, 1
  store i128 %add239, i128* %i, align 4
  %i240 = load i128, i128* %i, align 4
  %m241 = load i128, i128* %bigmod2.m.declare_arg, align 4
  %slt242 = icmp slt i128 %i240, %m241
  br i1 %slt242, label %loop.body192, label %loop.exit243

loop.exit243:                                     ; preds = %loop.latch237
  store i128 0, i128* %i, align 4
  br label %loop.body244

loop.body244:                                     ; preds = %loop.latch254, %loop.exit243
  %add245 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter246 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add245, i32 0, i32 4
  %bigadd.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter246, align 8
  %i247 = load i128, i128* %i, align 4
  %array_getter248 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter, i128 0, i128 %i247
  %add249 = load i128, i128* %array_getter248, align 4
  %a250 = load [256 x i128]*, [256 x i128]** %bigmod2.a.declare_input, align 8
  %i251 = load i128, i128* %i, align 4
  %array_getter252 = getelementptr inbounds [256 x i128], [256 x i128]* %a250, i128 0, i128 %i251
  %a253 = load i128, i128* %array_getter252, align 4
  call void @fn_intrinsic_add_constraint(i128 %add249, i128 %a253, i1* @constraint.254)
  br label %loop.latch254

loop.latch254:                                    ; preds = %loop.body244
  %i255 = load i128, i128* %i, align 4
  %add256 = add i128 %i255, 1
  store i128 %add256, i128* %i, align 4
  %i257 = load i128, i128* %i, align 4
  %m258 = load i128, i128* %bigmod2.m.declare_arg, align 4
  %slt259 = icmp slt i128 %i257, %m258
  br i1 %slt259, label %loop.body244, label %loop.exit260

loop.exit260:                                     ; preds = %loop.latch254
  %add261 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter262 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add261, i32 0, i32 4
  %bigadd.out.read_output_outter263 = load [256 x i128]*, [256 x i128]** %struct_getter262, align 8
  %m264 = load i128, i128* %bigmod2.m.declare_arg, align 4
  %array_getter265 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter263, i128 0, i128 %m264
  %add266 = load i128, i128* %array_getter265, align 4
  call void @fn_intrinsic_add_constraint(i128 %add266, i128 0, i1* @constraint.255)
  %n267 = load i128, i128* %bigmod2.n.declare_arg, align 4
  %k268 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %call269 = call %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %n267, i128 %k268)
  store %struct_template_circuit_biglessthan* %call269, %struct_template_circuit_biglessthan** %lt, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body270

loop.body270:                                     ; preds = %loop.latch299, %loop.exit260
  %mod271 = load [256 x i128]*, [256 x i128]** %bigmod2.mod.declare_output, align 8
  %i272 = load i128, i128* %i, align 4
  %array_getter273 = getelementptr inbounds [256 x i128], [256 x i128]* %mod271, i128 0, i128 %i272
  %mod274 = load i128, i128* %array_getter273, align 4
  %lt275 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter276 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt275, i32 0, i32 2
  %biglessthan.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter276, align 8
  %i277 = load i128, i128* %i, align 4
  %array_getter278 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter, i128 0, i128 %i277
  %lt279 = load i128, i128* %array_getter278, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt279, i128 %mod274, i1* @constraint.256)
  %ptr_getter280 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter281 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter280, i32 0, i32 2
  %biglessthan.a.read_input_outter282 = load [256 x i128]*, [256 x i128]** %struct_getter281, align 8
  %i283 = load i128, i128* %i, align 4
  %lt284 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter282, i128 0, i128 %i283
  store i128 %mod274, i128* %lt284, align 4
  %b285 = load [256 x i128]*, [256 x i128]** %bigmod2.b.declare_input, align 8
  %i286 = load i128, i128* %i, align 4
  %array_getter287 = getelementptr inbounds [256 x i128], [256 x i128]* %b285, i128 0, i128 %i286
  %b288 = load i128, i128* %array_getter287, align 4
  %lt289 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter290 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt289, i32 0, i32 3
  %biglessthan.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter290, align 8
  %i291 = load i128, i128* %i, align 4
  %array_getter292 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter, i128 0, i128 %i291
  %lt293 = load i128, i128* %array_getter292, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt293, i128 %b288, i1* @constraint.257)
  %ptr_getter294 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter295 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter294, i32 0, i32 3
  %biglessthan.b.read_input_outter296 = load [256 x i128]*, [256 x i128]** %struct_getter295, align 8
  %i297 = load i128, i128* %i, align 4
  %lt298 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter296, i128 0, i128 %i297
  store i128 %b288, i128* %lt298, align 4
  br label %loop.latch299

loop.latch299:                                    ; preds = %loop.body270
  %i300 = load i128, i128* %i, align 4
  %add301 = add i128 %i300, 1
  store i128 %add301, i128* %i, align 4
  %i302 = load i128, i128* %i, align 4
  %k303 = load i128, i128* %bigmod2.k.declare_arg, align 4
  %slt304 = icmp slt i128 %i302, %k303
  br i1 %slt304, label %loop.body270, label %loop.exit305

loop.exit305:                                     ; preds = %loop.latch299
  %lt306 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter307 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt306, i32 0, i32 4
  %biglessthan.out.read_output_outter = load i128, i128* %struct_getter307, align 4
  call void @fn_intrinsic_add_constraint(i128 %biglessthan.out.read_output_outter, i128 1, i1* @constraint.258)
  br label %exit

exit:                                             ; preds = %loop.exit305
  %div308 = load [256 x i128]*, [256 x i128]** %bigmod2.div.declare_output, align 8
  %bigmod2.div.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmod2, %struct_template_circuit_bigmod2* %0, i32 0, i32 5
  store [256 x i128]* %div308, [256 x i128]** %bigmod2.div.write_output_inner, align 8
  %mod309 = load [256 x i128]*, [256 x i128]** %bigmod2.mod.declare_output, align 8
  %bigmod2.mod.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmod2, %struct_template_circuit_bigmod2* %0, i32 0, i32 6
  store [256 x i128]* %mod309, [256 x i128]** %bigmod2.mod.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigmod2* @fn_template_build_bigmod2(i128 %0, i128 %1, i128 %2) {
entry:
  %struct_template_circuit_bigmod2 = alloca %struct_template_circuit_bigmod2, align 8
  %bigmod2.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmod2, %struct_template_circuit_bigmod2* %struct_template_circuit_bigmod2, i32 0, i32 0
  store i128 %0, i128* %bigmod2.n.write_arg_inner, align 4
  %bigmod2.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmod2, %struct_template_circuit_bigmod2* %struct_template_circuit_bigmod2, i32 0, i32 1
  store i128 %1, i128* %bigmod2.k.write_arg_inner, align 4
  %bigmod2.m.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmod2, %struct_template_circuit_bigmod2* %struct_template_circuit_bigmod2, i32 0, i32 2
  store i128 %2, i128* %bigmod2.m.write_arg_inner, align 4
  ret %struct_template_circuit_bigmod2* %struct_template_circuit_bigmod2
}

define void @fn_template_init_bigsubmodp(%struct_template_circuit_bigsubmodp* %0) {
entry:
  %BigSubModP = alloca %struct_template_circuit_bigsubmodp*, align 8
  store %struct_template_circuit_bigsubmodp* %0, %struct_template_circuit_bigsubmodp** %BigSubModP, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %0, i32 0, i32 0
  %bigsubmodp.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigsubmodp.n.declare_arg = alloca i128, align 8
  store i128 %bigsubmodp.n.read_arg_inner, i128* %bigsubmodp.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %0, i32 0, i32 1
  %bigsubmodp.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigsubmodp.k.declare_arg = alloca i128, align 8
  store i128 %bigsubmodp.k.read_arg_inner, i128* %bigsubmodp.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %0, i32 0, i32 2
  %bigsubmodp.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %bigsubmodp.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigsubmodp.a.read_input_inner, [256 x i128]** %bigsubmodp.a.declare_input, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %0, i32 0, i32 3
  %bigsubmodp.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %bigsubmodp.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigsubmodp.b.read_input_inner, [256 x i128]** %bigsubmodp.b.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %0, i32 0, i32 4
  %bigsubmodp.p.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %bigsubmodp.p.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigsubmodp.p.read_input_inner, [256 x i128]** %bigsubmodp.p.declare_input, align 8
  %sub = alloca %struct_template_circuit_bigsub*, align 8
  %bigsubmodp.tmp.declare_inter = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %tmp = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %tmp, [256 x i128]** %bigsubmodp.tmp.declare_inter, align 8
  %bigsubmodp.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall5 = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall5 to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %bigsubmodp.out.declare_output, align 8
  %bigsubmodp.flag.declare_inter = alloca i128, align 8
  %flag = call i128 @fn_intrinsic_inline_init()
  store i128 %flag, i128* %bigsubmodp.flag.declare_inter, align 4
  %i = alloca i128, align 8
  %i6 = call i128 @fn_intrinsic_inline_init()
  store i128 %i6, i128* %i, align 4
  %add = alloca %struct_template_circuit_bigadd*, align 8
  %n = load i128, i128* %bigsubmodp.n.declare_arg, align 4
  %k = load i128, i128* %bigsubmodp.k.declare_arg, align 4
  %call = call %struct_template_circuit_bigsub* @fn_template_build_bigsub(i128 %n, i128 %k)
  store %struct_template_circuit_bigsub* %call, %struct_template_circuit_bigsub** %sub, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %bigsubmodp.a.declare_input, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i7
  %a8 = load i128, i128* %array_getter, align 4
  %sub9 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter10 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub9, i32 0, i32 2
  %bigsub.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter10, align 8
  %i11 = load i128, i128* %i, align 4
  %array_getter12 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter, i128 0, i128 %i11
  %sub13 = load i128, i128* %array_getter12, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub13, i128 %a8, i1* @constraint.259)
  %ptr_getter = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter, i32 0, i32 2
  %bigsub.a.read_input_outter15 = load [256 x i128]*, [256 x i128]** %struct_getter14, align 8
  %i16 = load i128, i128* %i, align 4
  %sub17 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.a.read_input_outter15, i128 0, i128 %i16
  store i128 %a8, i128* %sub17, align 4
  %b = load [256 x i128]*, [256 x i128]** %bigsubmodp.b.declare_input, align 8
  %i18 = load i128, i128* %i, align 4
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i18
  %b20 = load i128, i128* %array_getter19, align 4
  %sub21 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter22 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub21, i32 0, i32 3
  %bigsub.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter22, align 8
  %i23 = load i128, i128* %i, align 4
  %array_getter24 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter, i128 0, i128 %i23
  %sub25 = load i128, i128* %array_getter24, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub25, i128 %b20, i1* @constraint.260)
  %ptr_getter26 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter27 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %ptr_getter26, i32 0, i32 3
  %bigsub.b.read_input_outter28 = load [256 x i128]*, [256 x i128]** %struct_getter27, align 8
  %i29 = load i128, i128* %i, align 4
  %sub30 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.b.read_input_outter28, i128 0, i128 %i29
  store i128 %b20, i128* %sub30, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i31 = load i128, i128* %i, align 4
  %add32 = add i128 %i31, 1
  store i128 %add32, i128* %i, align 4
  %i33 = load i128, i128* %i, align 4
  %k34 = load i128, i128* %bigsubmodp.k.declare_arg, align 4
  %slt = icmp slt i128 %i33, %k34
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %sub35 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter36 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub35, i32 0, i32 5
  %bigsub.underflow.read_output_outter = load i128, i128* %struct_getter36, align 4
  %flag37 = load i128, i128* %bigsubmodp.flag.declare_inter, align 4
  call void @fn_intrinsic_add_constraint(i128 %flag37, i128 %bigsub.underflow.read_output_outter, i1* @constraint.261)
  %ptr_getter38 = load %struct_template_circuit_bigsubmodp*, %struct_template_circuit_bigsubmodp** %BigSubModP, align 8
  %bigsubmodp.flag.write_inter_inner = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %ptr_getter38, i32 0, i32 5
  store i128 %bigsub.underflow.read_output_outter, i128* %bigsubmodp.flag.write_inter_inner, align 4
  %BigSubModP39 = load %struct_template_circuit_bigsubmodp*, %struct_template_circuit_bigsubmodp** %BigSubModP, align 8
  %struct_getter40 = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %BigSubModP39, i32 0, i32 5
  %bigsubmodp.flag.read_inter_inner = load i128, i128* %struct_getter40, align 4
  store i128 %bigsubmodp.flag.read_inter_inner, i128* %bigsubmodp.flag.declare_inter, align 4
  %n41 = load i128, i128* %bigsubmodp.n.declare_arg, align 4
  %k42 = load i128, i128* %bigsubmodp.k.declare_arg, align 4
  %call43 = call %struct_template_circuit_bigadd* @fn_template_build_bigadd(i128 %n41, i128 %k42)
  store %struct_template_circuit_bigadd* %call43, %struct_template_circuit_bigadd** %add, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body44

loop.body44:                                      ; preds = %loop.latch73, %loop.exit
  %sub45 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter46 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub45, i32 0, i32 4
  %bigsub.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter46, align 8
  %i47 = load i128, i128* %i, align 4
  %array_getter48 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.out.read_output_outter, i128 0, i128 %i47
  %sub49 = load i128, i128* %array_getter48, align 4
  %add50 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter51 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add50, i32 0, i32 2
  %bigadd.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter51, align 8
  %i52 = load i128, i128* %i, align 4
  %array_getter53 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter, i128 0, i128 %i52
  %add54 = load i128, i128* %array_getter53, align 4
  call void @fn_intrinsic_add_constraint(i128 %add54, i128 %sub49, i1* @constraint.262)
  %ptr_getter55 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter56 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter55, i32 0, i32 2
  %bigadd.a.read_input_outter57 = load [256 x i128]*, [256 x i128]** %struct_getter56, align 8
  %i58 = load i128, i128* %i, align 4
  %add59 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter57, i128 0, i128 %i58
  store i128 %sub49, i128* %add59, align 4
  %p = load [256 x i128]*, [256 x i128]** %bigsubmodp.p.declare_input, align 8
  %i60 = load i128, i128* %i, align 4
  %array_getter61 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i60
  %p62 = load i128, i128* %array_getter61, align 4
  %add63 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter64 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add63, i32 0, i32 3
  %bigadd.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter64, align 8
  %i65 = load i128, i128* %i, align 4
  %array_getter66 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter, i128 0, i128 %i65
  %add67 = load i128, i128* %array_getter66, align 4
  call void @fn_intrinsic_add_constraint(i128 %add67, i128 %p62, i1* @constraint.263)
  %ptr_getter68 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter69 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter68, i32 0, i32 3
  %bigadd.b.read_input_outter70 = load [256 x i128]*, [256 x i128]** %struct_getter69, align 8
  %i71 = load i128, i128* %i, align 4
  %add72 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter70, i128 0, i128 %i71
  store i128 %p62, i128* %add72, align 4
  br label %loop.latch73

loop.latch73:                                     ; preds = %loop.body44
  %i74 = load i128, i128* %i, align 4
  %add75 = add i128 %i74, 1
  store i128 %add75, i128* %i, align 4
  %i76 = load i128, i128* %i, align 4
  %k77 = load i128, i128* %bigsubmodp.k.declare_arg, align 4
  %slt78 = icmp slt i128 %i76, %k77
  br i1 %slt78, label %loop.body44, label %loop.exit79

loop.exit79:                                      ; preds = %loop.latch73
  store i128 0, i128* %i, align 4
  br label %loop.body80

loop.body80:                                      ; preds = %loop.latch115, %loop.exit79
  %flag81 = load i128, i128* %bigsubmodp.flag.declare_inter, align 4
  %sub82 = sub i128 1, %flag81
  %sub83 = load %struct_template_circuit_bigsub*, %struct_template_circuit_bigsub** %sub, align 8
  %struct_getter84 = getelementptr inbounds %struct_template_circuit_bigsub, %struct_template_circuit_bigsub* %sub83, i32 0, i32 4
  %bigsub.out.read_output_outter85 = load [256 x i128]*, [256 x i128]** %struct_getter84, align 8
  %i86 = load i128, i128* %i, align 4
  %array_getter87 = getelementptr inbounds [256 x i128], [256 x i128]* %bigsub.out.read_output_outter85, i128 0, i128 %i86
  %sub88 = load i128, i128* %array_getter87, align 4
  %mul = mul i128 %sub82, %sub88
  %tmp89 = load [256 x i128]*, [256 x i128]** %bigsubmodp.tmp.declare_inter, align 8
  %i90 = load i128, i128* %i, align 4
  %array_getter91 = getelementptr inbounds [256 x i128], [256 x i128]* %tmp89, i128 0, i128 %i90
  %tmp92 = load i128, i128* %array_getter91, align 4
  call void @fn_intrinsic_add_constraint(i128 %tmp92, i128 %mul, i1* @constraint.264)
  %ptr_getter93 = load [256 x i128]*, [256 x i128]** %bigsubmodp.tmp.declare_inter, align 8
  %i94 = load i128, i128* %i, align 4
  %tmp95 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter93, i128 0, i128 %i94
  store i128 %mul, i128* %tmp95, align 4
  %tmp96 = load [256 x i128]*, [256 x i128]** %bigsubmodp.tmp.declare_inter, align 8
  %i97 = load i128, i128* %i, align 4
  %array_getter98 = getelementptr inbounds [256 x i128], [256 x i128]* %tmp96, i128 0, i128 %i97
  %tmp99 = load i128, i128* %array_getter98, align 4
  %flag100 = load i128, i128* %bigsubmodp.flag.declare_inter, align 4
  %add101 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter102 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add101, i32 0, i32 4
  %bigadd.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter102, align 8
  %i103 = load i128, i128* %i, align 4
  %array_getter104 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter, i128 0, i128 %i103
  %add105 = load i128, i128* %array_getter104, align 4
  %mul106 = mul i128 %flag100, %add105
  %add107 = add i128 %tmp99, %mul106
  %out108 = load [256 x i128]*, [256 x i128]** %bigsubmodp.out.declare_output, align 8
  %i109 = load i128, i128* %i, align 4
  %array_getter110 = getelementptr inbounds [256 x i128], [256 x i128]* %out108, i128 0, i128 %i109
  %out111 = load i128, i128* %array_getter110, align 4
  call void @fn_intrinsic_add_constraint(i128 %out111, i128 %add107, i1* @constraint.265)
  %ptr_getter112 = load [256 x i128]*, [256 x i128]** %bigsubmodp.out.declare_output, align 8
  %i113 = load i128, i128* %i, align 4
  %out114 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter112, i128 0, i128 %i113
  store i128 %add107, i128* %out114, align 4
  br label %loop.latch115

loop.latch115:                                    ; preds = %loop.body80
  %i116 = load i128, i128* %i, align 4
  %add117 = add i128 %i116, 1
  store i128 %add117, i128* %i, align 4
  %i118 = load i128, i128* %i, align 4
  %k119 = load i128, i128* %bigsubmodp.k.declare_arg, align 4
  %slt120 = icmp slt i128 %i118, %k119
  br i1 %slt120, label %loop.body80, label %loop.exit121

loop.exit121:                                     ; preds = %loop.latch115
  br label %exit

exit:                                             ; preds = %loop.exit121
  %flag122 = load i128, i128* %bigsubmodp.flag.declare_inter, align 4
  %bigsubmodp.flag.write_inter_inner123 = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %0, i32 0, i32 5
  store i128 %flag122, i128* %bigsubmodp.flag.write_inter_inner123, align 4
  %tmp124 = load [256 x i128]*, [256 x i128]** %bigsubmodp.tmp.declare_inter, align 8
  %bigsubmodp.tmp.write_inter_inner = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %0, i32 0, i32 6
  store [256 x i128]* %tmp124, [256 x i128]** %bigsubmodp.tmp.write_inter_inner, align 8
  %out125 = load [256 x i128]*, [256 x i128]** %bigsubmodp.out.declare_output, align 8
  %bigsubmodp.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %0, i32 0, i32 7
  store [256 x i128]* %out125, [256 x i128]** %bigsubmodp.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigsubmodp* @fn_template_build_bigsubmodp(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_bigsubmodp = alloca %struct_template_circuit_bigsubmodp, align 8
  %bigsubmodp.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %struct_template_circuit_bigsubmodp, i32 0, i32 0
  store i128 %0, i128* %bigsubmodp.n.write_arg_inner, align 4
  %bigsubmodp.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigsubmodp, %struct_template_circuit_bigsubmodp* %struct_template_circuit_bigsubmodp, i32 0, i32 1
  store i128 %1, i128* %bigsubmodp.k.write_arg_inner, align 4
  ret %struct_template_circuit_bigsubmodp* %struct_template_circuit_bigsubmodp
}

define void @fn_template_init_fp2subtract(%struct_template_circuit_fp2subtract* %0) {
entry:
  %Fp2Subtract = alloca %struct_template_circuit_fp2subtract*, align 8
  store %struct_template_circuit_fp2subtract* %0, %struct_template_circuit_fp2subtract** %Fp2Subtract, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2subtract, %struct_template_circuit_fp2subtract* %0, i32 0, i32 0
  %fp2subtract.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2subtract.n.declare_arg = alloca i128, align 8
  store i128 %fp2subtract.n.read_arg_inner, i128* %fp2subtract.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2subtract, %struct_template_circuit_fp2subtract* %0, i32 0, i32 1
  %fp2subtract.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2subtract.k.declare_arg = alloca i128, align 8
  store i128 %fp2subtract.k.read_arg_inner, i128* %fp2subtract.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2subtract, %struct_template_circuit_fp2subtract* %0, i32 0, i32 2
  %fp2subtract.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fp2subtract.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2subtract.p.read_arg_inner, [256 x i128]** %fp2subtract.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2subtract, %struct_template_circuit_fp2subtract* %0, i32 0, i32 3
  %fp2subtract.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fp2subtract.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2subtract.a.read_input_inner, [256 x [256 x i128]]** %fp2subtract.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_fp2subtract, %struct_template_circuit_fp2subtract* %0, i32 0, i32 4
  %fp2subtract.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %fp2subtract.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2subtract.b.read_input_inner, [256 x [256 x i128]]** %fp2subtract.b.declare_input, align 8
  %fp2subtract.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %fp2subtract.out.declare_output, align 8
  %sub1 = alloca %struct_template_circuit_fpsubtract*, align 8
  %sub0 = alloca %struct_template_circuit_fpsubtract*, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %n = load i128, i128* %fp2subtract.n.declare_arg, align 4
  %k = load i128, i128* %fp2subtract.k.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2subtract.p.declare_arg, align 8
  %call = call %struct_template_circuit_fpsubtract* @fn_template_build_fpsubtract(i128 %n, i128 %k, [256 x i128]* %p)
  store %struct_template_circuit_fpsubtract* %call, %struct_template_circuit_fpsubtract** %sub0, align 8
  %n6 = load i128, i128* %fp2subtract.n.declare_arg, align 4
  %k7 = load i128, i128* %fp2subtract.k.declare_arg, align 4
  %p8 = load [256 x i128]*, [256 x i128]** %fp2subtract.p.declare_arg, align 8
  %call9 = call %struct_template_circuit_fpsubtract* @fn_template_build_fpsubtract(i128 %n6, i128 %k7, [256 x i128]* %p8)
  store %struct_template_circuit_fpsubtract* %call9, %struct_template_circuit_fpsubtract** %sub1, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2subtract.a.declare_input, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 0, i128 %i10
  %a11 = load i128, i128* %array_getter, align 4
  %sub012 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %sub0, align 8
  %struct_getter13 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %sub012, i32 0, i32 3
  %fpsubtract.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter13, align 8
  %i14 = load i128, i128* %i, align 4
  %array_getter15 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsubtract.a.read_input_outter, i128 0, i128 %i14
  %sub016 = load i128, i128* %array_getter15, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub016, i128 %a11, i1* @constraint.266)
  %ptr_getter = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %sub0, align 8
  %struct_getter17 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %ptr_getter, i32 0, i32 3
  %fpsubtract.a.read_input_outter18 = load [256 x i128]*, [256 x i128]** %struct_getter17, align 8
  %i19 = load i128, i128* %i, align 4
  %sub020 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsubtract.a.read_input_outter18, i128 0, i128 %i19
  store i128 %a11, i128* %sub020, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2subtract.b.declare_input, align 8
  %i21 = load i128, i128* %i, align 4
  %array_getter22 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 0, i128 %i21
  %b23 = load i128, i128* %array_getter22, align 4
  %sub024 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %sub0, align 8
  %struct_getter25 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %sub024, i32 0, i32 4
  %fpsubtract.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter25, align 8
  %i26 = load i128, i128* %i, align 4
  %array_getter27 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsubtract.b.read_input_outter, i128 0, i128 %i26
  %sub028 = load i128, i128* %array_getter27, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub028, i128 %b23, i1* @constraint.267)
  %ptr_getter29 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %sub0, align 8
  %struct_getter30 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %ptr_getter29, i32 0, i32 4
  %fpsubtract.b.read_input_outter31 = load [256 x i128]*, [256 x i128]** %struct_getter30, align 8
  %i32 = load i128, i128* %i, align 4
  %sub033 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsubtract.b.read_input_outter31, i128 0, i128 %i32
  store i128 %b23, i128* %sub033, align 4
  %a34 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2subtract.a.declare_input, align 8
  %i35 = load i128, i128* %i, align 4
  %array_getter36 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a34, i128 0, i128 1, i128 %i35
  %a37 = load i128, i128* %array_getter36, align 4
  %sub138 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %sub1, align 8
  %struct_getter39 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %sub138, i32 0, i32 3
  %fpsubtract.a.read_input_outter40 = load [256 x i128]*, [256 x i128]** %struct_getter39, align 8
  %i41 = load i128, i128* %i, align 4
  %array_getter42 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsubtract.a.read_input_outter40, i128 0, i128 %i41
  %sub143 = load i128, i128* %array_getter42, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub143, i128 %a37, i1* @constraint.268)
  %ptr_getter44 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %sub1, align 8
  %struct_getter45 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %ptr_getter44, i32 0, i32 3
  %fpsubtract.a.read_input_outter46 = load [256 x i128]*, [256 x i128]** %struct_getter45, align 8
  %i47 = load i128, i128* %i, align 4
  %sub148 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsubtract.a.read_input_outter46, i128 0, i128 %i47
  store i128 %a37, i128* %sub148, align 4
  %b49 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2subtract.b.declare_input, align 8
  %i50 = load i128, i128* %i, align 4
  %array_getter51 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b49, i128 0, i128 1, i128 %i50
  %b52 = load i128, i128* %array_getter51, align 4
  %sub153 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %sub1, align 8
  %struct_getter54 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %sub153, i32 0, i32 4
  %fpsubtract.b.read_input_outter55 = load [256 x i128]*, [256 x i128]** %struct_getter54, align 8
  %i56 = load i128, i128* %i, align 4
  %array_getter57 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsubtract.b.read_input_outter55, i128 0, i128 %i56
  %sub158 = load i128, i128* %array_getter57, align 4
  call void @fn_intrinsic_add_constraint(i128 %sub158, i128 %b52, i1* @constraint.269)
  %ptr_getter59 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %sub1, align 8
  %struct_getter60 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %ptr_getter59, i32 0, i32 4
  %fpsubtract.b.read_input_outter61 = load [256 x i128]*, [256 x i128]** %struct_getter60, align 8
  %i62 = load i128, i128* %i, align 4
  %sub163 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsubtract.b.read_input_outter61, i128 0, i128 %i62
  store i128 %b52, i128* %sub163, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i64 = load i128, i128* %i, align 4
  %add = add i128 %i64, 1
  store i128 %add, i128* %i, align 4
  %i65 = load i128, i128* %i, align 4
  %k66 = load i128, i128* %fp2subtract.k.declare_arg, align 4
  %slt = icmp slt i128 %i65, %k66
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %i, align 4
  br label %loop.body67

loop.body67:                                      ; preds = %loop.latch93, %loop.exit
  %sub068 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %sub0, align 8
  %struct_getter69 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %sub068, i32 0, i32 7
  %fpsubtract.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter69, align 8
  %i70 = load i128, i128* %i, align 4
  %array_getter71 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsubtract.out.read_output_outter, i128 0, i128 %i70
  %sub072 = load i128, i128* %array_getter71, align 4
  %out73 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2subtract.out.declare_output, align 8
  %i74 = load i128, i128* %i, align 4
  %array_getter75 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out73, i128 0, i128 0, i128 %i74
  %out76 = load i128, i128* %array_getter75, align 4
  call void @fn_intrinsic_add_constraint(i128 %out76, i128 %sub072, i1* @constraint.270)
  %ptr_getter77 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2subtract.out.declare_output, align 8
  %i78 = load i128, i128* %i, align 4
  %out79 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter77, i128 0, i128 0, i128 %i78
  store i128 %sub072, i128* %out79, align 4
  %sub180 = load %struct_template_circuit_fpsubtract*, %struct_template_circuit_fpsubtract** %sub1, align 8
  %struct_getter81 = getelementptr inbounds %struct_template_circuit_fpsubtract, %struct_template_circuit_fpsubtract* %sub180, i32 0, i32 7
  %fpsubtract.out.read_output_outter82 = load [256 x i128]*, [256 x i128]** %struct_getter81, align 8
  %i83 = load i128, i128* %i, align 4
  %array_getter84 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsubtract.out.read_output_outter82, i128 0, i128 %i83
  %sub185 = load i128, i128* %array_getter84, align 4
  %out86 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2subtract.out.declare_output, align 8
  %i87 = load i128, i128* %i, align 4
  %array_getter88 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out86, i128 0, i128 1, i128 %i87
  %out89 = load i128, i128* %array_getter88, align 4
  call void @fn_intrinsic_add_constraint(i128 %out89, i128 %sub185, i1* @constraint.271)
  %ptr_getter90 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2subtract.out.declare_output, align 8
  %i91 = load i128, i128* %i, align 4
  %out92 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter90, i128 0, i128 1, i128 %i91
  store i128 %sub185, i128* %out92, align 4
  br label %loop.latch93

loop.latch93:                                     ; preds = %loop.body67
  %i94 = load i128, i128* %i, align 4
  %add95 = add i128 %i94, 1
  store i128 %add95, i128* %i, align 4
  %i96 = load i128, i128* %i, align 4
  %k97 = load i128, i128* %fp2subtract.k.declare_arg, align 4
  %slt98 = icmp slt i128 %i96, %k97
  br i1 %slt98, label %loop.body67, label %loop.exit99

loop.exit99:                                      ; preds = %loop.latch93
  br label %exit

exit:                                             ; preds = %loop.exit99
  %out100 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2subtract.out.declare_output, align 8
  %fp2subtract.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2subtract, %struct_template_circuit_fp2subtract* %0, i32 0, i32 5
  store [256 x [256 x i128]]* %out100, [256 x [256 x i128]]** %fp2subtract.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fp2subtract* @fn_template_build_fp2subtract(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fp2subtract = alloca %struct_template_circuit_fp2subtract, align 8
  %fp2subtract.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2subtract, %struct_template_circuit_fp2subtract* %struct_template_circuit_fp2subtract, i32 0, i32 0
  store i128 %0, i128* %fp2subtract.n.write_arg_inner, align 4
  %fp2subtract.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2subtract, %struct_template_circuit_fp2subtract* %struct_template_circuit_fp2subtract, i32 0, i32 1
  store i128 %1, i128* %fp2subtract.k.write_arg_inner, align 4
  %fp2subtract.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2subtract, %struct_template_circuit_fp2subtract* %struct_template_circuit_fp2subtract, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fp2subtract.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2subtract* %struct_template_circuit_fp2subtract
}

define [256 x [256 x [256 x i128]]]* @get_signed_Fp2_carry_witness(i128 %0, i128 %1, i128 %2, [256 x [256 x i128]]* %3, [256 x i128]* %4) {
entry:
  %get_signed_fp2_carry_witness.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %get_signed_fp2_carry_witness.n.declare_arg, align 4
  %get_signed_fp2_carry_witness.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %get_signed_fp2_carry_witness.k.declare_arg, align 4
  %get_signed_fp2_carry_witness.m.declare_arg = alloca i128, align 8
  store i128 %2, i128* %get_signed_fp2_carry_witness.m.declare_arg, align 4
  %get_signed_fp2_carry_witness.a.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %3, [256 x [256 x i128]]** %get_signed_fp2_carry_witness.a.declare_arg, align 8
  %get_signed_fp2_carry_witness.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %get_signed_fp2_carry_witness.p.declare_arg, align 8
  %out = alloca [256 x [256 x [256 x i128]]]*, align 8
  %out1 = alloca [256 x [256 x [256 x i128]]], align 8
  store [256 x [256 x [256 x i128]]]* %out1, [256 x [256 x [256 x i128]]]** %out, align 8
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %uniform_array = alloca [256 x [256 x [256 x i128]]], align 8
  store [256 x [256 x [256 x i128]]]* %uniform_array, [256 x [256 x [256 x i128]]]** %out, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %n = load i128, i128* %get_signed_fp2_carry_witness.n.declare_arg, align 4
  %k = load i128, i128* %get_signed_fp2_carry_witness.k.declare_arg, align 4
  %m = load i128, i128* %get_signed_fp2_carry_witness.m.declare_arg, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %get_signed_fp2_carry_witness.a.declare_arg, align 8
  %i3 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i3
  %a4 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %a4, [256 x i128]* %spice_inline_array, align 4
  %p = load [256 x i128]*, [256 x i128]** %get_signed_fp2_carry_witness.p.declare_arg, align 8
  %call = call [256 x [256 x i128]]* @get_signed_Fp_carry_witness(i128 %n, i128 %k, i128 %m, [256 x i128]* %spice_inline_array, [256 x i128]* %p)
  %ptr_getter = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %out, align 8
  %i5 = load i128, i128* %i, align 4
  %out6 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter, i128 0, i128 %i5
  %5 = bitcast [256 x [256 x i128]]* %out6 to i8*
  %6 = bitcast [256 x [256 x i128]]* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i64), i1 false)
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i7 = load i128, i128* %i, align 4
  %add = add i128 %i7, 1
  store i128 %add, i128* %i, align 4
  %i8 = load i128, i128* %i, align 4
  %slt = icmp slt i128 %i8, 2
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %out9 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %out, align 8
  ret [256 x [256 x [256 x i128]]]* %out9
}

define void @fn_template_init_bigmod(%struct_template_circuit_bigmod* %0) {
entry:
  %BigMod = alloca %struct_template_circuit_bigmod*, align 8
  store %struct_template_circuit_bigmod* %0, %struct_template_circuit_bigmod** %BigMod, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %0, i32 0, i32 0
  %bigmod.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigmod.n.declare_arg = alloca i128, align 8
  store i128 %bigmod.n.read_arg_inner, i128* %bigmod.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %0, i32 0, i32 1
  %bigmod.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigmod.k.declare_arg = alloca i128, align 8
  store i128 %bigmod.k.read_arg_inner, i128* %bigmod.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %0, i32 0, i32 2
  %bigmod.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %bigmod.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmod.a.read_input_inner, [256 x i128]** %bigmod.a.declare_input, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %0, i32 0, i32 3
  %bigmod.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %bigmod.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmod.b.read_input_inner, [256 x i128]** %bigmod.b.declare_input, align 8
  %div_range_checks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %div_range_checks4 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %div_range_checks4, [256 x %struct_template_circuit_num2bits*]** %div_range_checks, align 8
  %mul = alloca %struct_template_circuit_bigmult*, align 8
  %mod_range_checks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %mod_range_checks5 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %mod_range_checks5, [256 x %struct_template_circuit_num2bits*]** %mod_range_checks, align 8
  %bigmod.div.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %div = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %div, [256 x i128]** %bigmod.div.declare_output, align 8
  %longdiv = alloca [256 x [256 x i128]]*, align 8
  %longdiv6 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %longdiv6, [256 x [256 x i128]]** %longdiv, align 8
  %i = alloca i128, align 8
  %i7 = call i128 @fn_intrinsic_inline_init()
  store i128 %i7, i128* %i, align 4
  %add = alloca %struct_template_circuit_bigadd*, align 8
  %lt = alloca %struct_template_circuit_biglessthan*, align 8
  %bigmod.mod.declare_output = alloca [256 x i128]*, align 8
  %malloccall8 = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %mod = bitcast i8* %malloccall8 to [256 x i128]*
  store [256 x i128]* %mod, [256 x i128]** %bigmod.mod.declare_output, align 8
  %n = load i128, i128* %bigmod.n.declare_arg, align 4
  %k = load i128, i128* %bigmod.k.declare_arg, align 4
  %a = load [256 x i128]*, [256 x i128]** %bigmod.a.declare_input, align 8
  %b = load [256 x i128]*, [256 x i128]** %bigmod.b.declare_input, align 8
  %call = call [256 x [256 x i128]]* @long_div(i128 %n, i128 %k, [256 x i128]* %a, [256 x i128]* %b)
  store [256 x [256 x i128]]* %call, [256 x [256 x i128]]** %longdiv, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %longdiv9 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %longdiv, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %longdiv9, i128 0, i128 0, i128 %i10
  %longdiv11 = load i128, i128* %array_getter, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %bigmod.div.declare_output, align 8
  %i12 = load i128, i128* %i, align 4
  %div13 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i12
  store i128 %longdiv11, i128* %div13, align 4
  %longdiv14 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %longdiv, align 8
  %i15 = load i128, i128* %i, align 4
  %array_getter16 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %longdiv14, i128 0, i128 1, i128 %i15
  %longdiv17 = load i128, i128* %array_getter16, align 4
  %ptr_getter18 = load [256 x i128]*, [256 x i128]** %bigmod.mod.declare_output, align 8
  %i19 = load i128, i128* %i, align 4
  %mod20 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter18, i128 0, i128 %i19
  store i128 %longdiv17, i128* %mod20, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i21 = load i128, i128* %i, align 4
  %add22 = add i128 %i21, 1
  store i128 %add22, i128* %i, align 4
  %i23 = load i128, i128* %i, align 4
  %k24 = load i128, i128* %bigmod.k.declare_arg, align 4
  %slt = icmp slt i128 %i23, %k24
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %longdiv25 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %longdiv, align 8
  %k26 = load i128, i128* %bigmod.k.declare_arg, align 4
  %array_getter27 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %longdiv25, i128 0, i128 0, i128 %k26
  %longdiv28 = load i128, i128* %array_getter27, align 4
  %ptr_getter29 = load [256 x i128]*, [256 x i128]** %bigmod.div.declare_output, align 8
  %k30 = load i128, i128* %bigmod.k.declare_arg, align 4
  %div31 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter29, i128 0, i128 %k30
  store i128 %longdiv28, i128* %div31, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body32

loop.body32:                                      ; preds = %loop.latch51, %loop.exit
  %n33 = load i128, i128* %bigmod.n.declare_arg, align 4
  %call34 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n33)
  %ptr_getter35 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %div_range_checks, align 8
  %i36 = load i128, i128* %i, align 4
  %div_range_checks37 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter35, i128 0, i128 %i36
  store %struct_template_circuit_num2bits* %call34, %struct_template_circuit_num2bits** %div_range_checks37, align 8
  %div38 = load [256 x i128]*, [256 x i128]** %bigmod.div.declare_output, align 8
  %i39 = load i128, i128* %i, align 4
  %array_getter40 = getelementptr inbounds [256 x i128], [256 x i128]* %div38, i128 0, i128 %i39
  %div41 = load i128, i128* %array_getter40, align 4
  %div_range_checks42 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %div_range_checks, align 8
  %i43 = load i128, i128* %i, align 4
  %array_getter44 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %div_range_checks42, i128 0, i128 %i43
  %div_range_checks45 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter44, align 8
  %struct_getter46 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %div_range_checks45, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter46, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %div41, i1* @constraint.272)
  %ptr_getter47 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %div_range_checks, align 8
  %i48 = load i128, i128* %i, align 4
  %array_getter49 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter47, i128 0, i128 %i48
  %div_range_checks50 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter49, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %div_range_checks50, i32 0, i32 1
  store i128 %div41, i128* %num2bits.in.write_input_outter, align 4
  br label %loop.latch51

loop.latch51:                                     ; preds = %loop.body32
  %i52 = load i128, i128* %i, align 4
  %add53 = add i128 %i52, 1
  store i128 %add53, i128* %i, align 4
  %i54 = load i128, i128* %i, align 4
  %k55 = load i128, i128* %bigmod.k.declare_arg, align 4
  %sle = icmp sle i128 %i54, %k55
  br i1 %sle, label %loop.body32, label %loop.exit56

loop.exit56:                                      ; preds = %loop.latch51
  store i128 0, i128* %i, align 4
  br label %loop.body57

loop.body57:                                      ; preds = %loop.latch78, %loop.exit56
  %n58 = load i128, i128* %bigmod.n.declare_arg, align 4
  %call59 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n58)
  %ptr_getter60 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %mod_range_checks, align 8
  %i61 = load i128, i128* %i, align 4
  %mod_range_checks62 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter60, i128 0, i128 %i61
  store %struct_template_circuit_num2bits* %call59, %struct_template_circuit_num2bits** %mod_range_checks62, align 8
  %mod63 = load [256 x i128]*, [256 x i128]** %bigmod.mod.declare_output, align 8
  %i64 = load i128, i128* %i, align 4
  %array_getter65 = getelementptr inbounds [256 x i128], [256 x i128]* %mod63, i128 0, i128 %i64
  %mod66 = load i128, i128* %array_getter65, align 4
  %mod_range_checks67 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %mod_range_checks, align 8
  %i68 = load i128, i128* %i, align 4
  %array_getter69 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %mod_range_checks67, i128 0, i128 %i68
  %mod_range_checks70 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter69, align 8
  %struct_getter71 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %mod_range_checks70, i32 0, i32 1
  %num2bits.in.read_input_outter72 = load i128, i128* %struct_getter71, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter72, i128 %mod66, i1* @constraint.273)
  %ptr_getter73 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %mod_range_checks, align 8
  %i74 = load i128, i128* %i, align 4
  %array_getter75 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter73, i128 0, i128 %i74
  %mod_range_checks76 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter75, align 8
  %num2bits.in.write_input_outter77 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %mod_range_checks76, i32 0, i32 1
  store i128 %mod66, i128* %num2bits.in.write_input_outter77, align 4
  br label %loop.latch78

loop.latch78:                                     ; preds = %loop.body57
  %i79 = load i128, i128* %i, align 4
  %add80 = add i128 %i79, 1
  store i128 %add80, i128* %i, align 4
  %i81 = load i128, i128* %i, align 4
  %k82 = load i128, i128* %bigmod.k.declare_arg, align 4
  %slt83 = icmp slt i128 %i81, %k82
  br i1 %slt83, label %loop.body57, label %loop.exit84

loop.exit84:                                      ; preds = %loop.latch78
  %n85 = load i128, i128* %bigmod.n.declare_arg, align 4
  %k86 = load i128, i128* %bigmod.k.declare_arg, align 4
  %add87 = add i128 %k86, 1
  %call88 = call %struct_template_circuit_bigmult* @fn_template_build_bigmult(i128 %n85, i128 %add87)
  store %struct_template_circuit_bigmult* %call88, %struct_template_circuit_bigmult** %mul, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body89

loop.body89:                                      ; preds = %loop.latch118, %loop.exit84
  %div90 = load [256 x i128]*, [256 x i128]** %bigmod.div.declare_output, align 8
  %i91 = load i128, i128* %i, align 4
  %array_getter92 = getelementptr inbounds [256 x i128], [256 x i128]* %div90, i128 0, i128 %i91
  %div93 = load i128, i128* %array_getter92, align 4
  %mul94 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter95 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul94, i32 0, i32 2
  %bigmult.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter95, align 8
  %i96 = load i128, i128* %i, align 4
  %array_getter97 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter, i128 0, i128 %i96
  %mul98 = load i128, i128* %array_getter97, align 4
  call void @fn_intrinsic_add_constraint(i128 %mul98, i128 %div93, i1* @constraint.274)
  %ptr_getter99 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter100 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter99, i32 0, i32 2
  %bigmult.a.read_input_outter101 = load [256 x i128]*, [256 x i128]** %struct_getter100, align 8
  %i102 = load i128, i128* %i, align 4
  %mul103 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter101, i128 0, i128 %i102
  store i128 %div93, i128* %mul103, align 4
  %b104 = load [256 x i128]*, [256 x i128]** %bigmod.b.declare_input, align 8
  %i105 = load i128, i128* %i, align 4
  %array_getter106 = getelementptr inbounds [256 x i128], [256 x i128]* %b104, i128 0, i128 %i105
  %b107 = load i128, i128* %array_getter106, align 4
  %mul108 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter109 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul108, i32 0, i32 3
  %bigmult.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter109, align 8
  %i110 = load i128, i128* %i, align 4
  %array_getter111 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter, i128 0, i128 %i110
  %mul112 = load i128, i128* %array_getter111, align 4
  call void @fn_intrinsic_add_constraint(i128 %mul112, i128 %b107, i1* @constraint.275)
  %ptr_getter113 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter114 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter113, i32 0, i32 3
  %bigmult.b.read_input_outter115 = load [256 x i128]*, [256 x i128]** %struct_getter114, align 8
  %i116 = load i128, i128* %i, align 4
  %mul117 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter115, i128 0, i128 %i116
  store i128 %b107, i128* %mul117, align 4
  br label %loop.latch118

loop.latch118:                                    ; preds = %loop.body89
  %i119 = load i128, i128* %i, align 4
  %add120 = add i128 %i119, 1
  store i128 %add120, i128* %i, align 4
  %i121 = load i128, i128* %i, align 4
  %k122 = load i128, i128* %bigmod.k.declare_arg, align 4
  %slt123 = icmp slt i128 %i121, %k122
  br i1 %slt123, label %loop.body89, label %loop.exit124

loop.exit124:                                     ; preds = %loop.latch118
  %div125 = load [256 x i128]*, [256 x i128]** %bigmod.div.declare_output, align 8
  %k126 = load i128, i128* %bigmod.k.declare_arg, align 4
  %array_getter127 = getelementptr inbounds [256 x i128], [256 x i128]* %div125, i128 0, i128 %k126
  %div128 = load i128, i128* %array_getter127, align 4
  %mul129 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter130 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul129, i32 0, i32 2
  %bigmult.a.read_input_outter131 = load [256 x i128]*, [256 x i128]** %struct_getter130, align 8
  %k132 = load i128, i128* %bigmod.k.declare_arg, align 4
  %array_getter133 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter131, i128 0, i128 %k132
  %mul134 = load i128, i128* %array_getter133, align 4
  call void @fn_intrinsic_add_constraint(i128 %mul134, i128 %div128, i1* @constraint.276)
  %ptr_getter135 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter136 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter135, i32 0, i32 2
  %bigmult.a.read_input_outter137 = load [256 x i128]*, [256 x i128]** %struct_getter136, align 8
  %k138 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul139 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter137, i128 0, i128 %k138
  store i128 %div128, i128* %mul139, align 4
  %mul140 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter141 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul140, i32 0, i32 3
  %bigmult.b.read_input_outter142 = load [256 x i128]*, [256 x i128]** %struct_getter141, align 8
  %k143 = load i128, i128* %bigmod.k.declare_arg, align 4
  %array_getter144 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter142, i128 0, i128 %k143
  %mul145 = load i128, i128* %array_getter144, align 4
  call void @fn_intrinsic_add_constraint(i128 %mul145, i128 0, i1* @constraint.277)
  %ptr_getter146 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter147 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter146, i32 0, i32 3
  %bigmult.b.read_input_outter148 = load [256 x i128]*, [256 x i128]** %struct_getter147, align 8
  %k149 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul150 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter148, i128 0, i128 %k149
  store i128 0, i128* %mul150, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body151

loop.body151:                                     ; preds = %loop.latch152, %loop.exit124
  br label %loop.latch152

loop.latch152:                                    ; preds = %loop.body151
  %i153 = load i128, i128* %i, align 4
  %add154 = add i128 %i153, 1
  store i128 %add154, i128* %i, align 4
  %i155 = load i128, i128* %i, align 4
  %k156 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul157 = mul i128 2, %k156
  %add158 = add i128 %mul157, 2
  %slt159 = icmp slt i128 %i155, %add158
  br i1 %slt159, label %loop.body151, label %loop.exit160

loop.exit160:                                     ; preds = %loop.latch152
  %n161 = load i128, i128* %bigmod.n.declare_arg, align 4
  %k162 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul163 = mul i128 2, %k162
  %add164 = add i128 %mul163, 2
  %call165 = call %struct_template_circuit_bigadd* @fn_template_build_bigadd(i128 %n161, i128 %add164)
  store %struct_template_circuit_bigadd* %call165, %struct_template_circuit_bigadd** %add, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body166

loop.body166:                                     ; preds = %loop.latch210, %loop.exit160
  %mul167 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter168 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul167, i32 0, i32 4
  %bigmult.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter168, align 8
  %i169 = load i128, i128* %i, align 4
  %array_getter170 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.out.read_output_outter, i128 0, i128 %i169
  %mul171 = load i128, i128* %array_getter170, align 4
  %add172 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter173 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add172, i32 0, i32 2
  %bigadd.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter173, align 8
  %i174 = load i128, i128* %i, align 4
  %array_getter175 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter, i128 0, i128 %i174
  %add176 = load i128, i128* %array_getter175, align 4
  call void @fn_intrinsic_add_constraint(i128 %add176, i128 %mul171, i1* @constraint.278)
  %ptr_getter177 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter178 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter177, i32 0, i32 2
  %bigadd.a.read_input_outter179 = load [256 x i128]*, [256 x i128]** %struct_getter178, align 8
  %i180 = load i128, i128* %i, align 4
  %add181 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter179, i128 0, i128 %i180
  store i128 %mul171, i128* %add181, align 4
  %i182 = load i128, i128* %i, align 4
  %k183 = load i128, i128* %bigmod.k.declare_arg, align 4
  %slt184 = icmp slt i128 %i182, %k183
  br i1 %slt184, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body166
  %mod185 = load [256 x i128]*, [256 x i128]** %bigmod.mod.declare_output, align 8
  %i186 = load i128, i128* %i, align 4
  %array_getter187 = getelementptr inbounds [256 x i128], [256 x i128]* %mod185, i128 0, i128 %i186
  %mod188 = load i128, i128* %array_getter187, align 4
  %add189 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter190 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add189, i32 0, i32 3
  %bigadd.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter190, align 8
  %i191 = load i128, i128* %i, align 4
  %array_getter192 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter, i128 0, i128 %i191
  %add193 = load i128, i128* %array_getter192, align 4
  call void @fn_intrinsic_add_constraint(i128 %add193, i128 %mod188, i1* @constraint.279)
  %ptr_getter194 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter195 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter194, i32 0, i32 3
  %bigadd.b.read_input_outter196 = load [256 x i128]*, [256 x i128]** %struct_getter195, align 8
  %i197 = load i128, i128* %i, align 4
  %add198 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter196, i128 0, i128 %i197
  store i128 %mod188, i128* %add198, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body166
  %add199 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter200 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add199, i32 0, i32 3
  %bigadd.b.read_input_outter201 = load [256 x i128]*, [256 x i128]** %struct_getter200, align 8
  %i202 = load i128, i128* %i, align 4
  %array_getter203 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter201, i128 0, i128 %i202
  %add204 = load i128, i128* %array_getter203, align 4
  call void @fn_intrinsic_add_constraint(i128 %add204, i128 0, i1* @constraint.280)
  %ptr_getter205 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter206 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter205, i32 0, i32 3
  %bigadd.b.read_input_outter207 = load [256 x i128]*, [256 x i128]** %struct_getter206, align 8
  %i208 = load i128, i128* %i, align 4
  %add209 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter207, i128 0, i128 %i208
  store i128 0, i128* %add209, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch210

loop.latch210:                                    ; preds = %if.exit
  %i211 = load i128, i128* %i, align 4
  %add212 = add i128 %i211, 1
  store i128 %add212, i128* %i, align 4
  %i213 = load i128, i128* %i, align 4
  %k214 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul215 = mul i128 2, %k214
  %slt216 = icmp slt i128 %i213, %mul215
  br i1 %slt216, label %loop.body166, label %loop.exit217

loop.exit217:                                     ; preds = %loop.latch210
  %mul218 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter219 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul218, i32 0, i32 4
  %bigmult.out.read_output_outter220 = load [256 x i128]*, [256 x i128]** %struct_getter219, align 8
  %k221 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul222 = mul i128 2, %k221
  %array_getter223 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.out.read_output_outter220, i128 0, i128 %mul222
  %mul224 = load i128, i128* %array_getter223, align 4
  %add225 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter226 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add225, i32 0, i32 2
  %bigadd.a.read_input_outter227 = load [256 x i128]*, [256 x i128]** %struct_getter226, align 8
  %k228 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul229 = mul i128 2, %k228
  %array_getter230 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter227, i128 0, i128 %mul229
  %add231 = load i128, i128* %array_getter230, align 4
  call void @fn_intrinsic_add_constraint(i128 %add231, i128 %mul224, i1* @constraint.281)
  %ptr_getter232 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter233 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter232, i32 0, i32 2
  %bigadd.a.read_input_outter234 = load [256 x i128]*, [256 x i128]** %struct_getter233, align 8
  %k235 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul236 = mul i128 2, %k235
  %add237 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter234, i128 0, i128 %mul236
  store i128 %mul224, i128* %add237, align 4
  %mul238 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mul, align 8
  %struct_getter239 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mul238, i32 0, i32 4
  %bigmult.out.read_output_outter240 = load [256 x i128]*, [256 x i128]** %struct_getter239, align 8
  %k241 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul242 = mul i128 2, %k241
  %add243 = add i128 %mul242, 1
  %array_getter244 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.out.read_output_outter240, i128 0, i128 %add243
  %mul245 = load i128, i128* %array_getter244, align 4
  %add246 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter247 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add246, i32 0, i32 2
  %bigadd.a.read_input_outter248 = load [256 x i128]*, [256 x i128]** %struct_getter247, align 8
  %k249 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul250 = mul i128 2, %k249
  %add251 = add i128 %mul250, 1
  %array_getter252 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter248, i128 0, i128 %add251
  %add253 = load i128, i128* %array_getter252, align 4
  call void @fn_intrinsic_add_constraint(i128 %add253, i128 %mul245, i1* @constraint.282)
  %ptr_getter254 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter255 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter254, i32 0, i32 2
  %bigadd.a.read_input_outter256 = load [256 x i128]*, [256 x i128]** %struct_getter255, align 8
  %k257 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul258 = mul i128 2, %k257
  %add259 = add i128 %mul258, 1
  %add260 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.a.read_input_outter256, i128 0, i128 %add259
  store i128 %mul245, i128* %add260, align 4
  %add261 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter262 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add261, i32 0, i32 3
  %bigadd.b.read_input_outter263 = load [256 x i128]*, [256 x i128]** %struct_getter262, align 8
  %k264 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul265 = mul i128 2, %k264
  %array_getter266 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter263, i128 0, i128 %mul265
  %add267 = load i128, i128* %array_getter266, align 4
  call void @fn_intrinsic_add_constraint(i128 %add267, i128 0, i1* @constraint.283)
  %ptr_getter268 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter269 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter268, i32 0, i32 3
  %bigadd.b.read_input_outter270 = load [256 x i128]*, [256 x i128]** %struct_getter269, align 8
  %k271 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul272 = mul i128 2, %k271
  %add273 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter270, i128 0, i128 %mul272
  store i128 0, i128* %add273, align 4
  %add274 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter275 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add274, i32 0, i32 3
  %bigadd.b.read_input_outter276 = load [256 x i128]*, [256 x i128]** %struct_getter275, align 8
  %k277 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul278 = mul i128 2, %k277
  %add279 = add i128 %mul278, 1
  %array_getter280 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter276, i128 0, i128 %add279
  %add281 = load i128, i128* %array_getter280, align 4
  call void @fn_intrinsic_add_constraint(i128 %add281, i128 0, i1* @constraint.284)
  %ptr_getter282 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter283 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %ptr_getter282, i32 0, i32 3
  %bigadd.b.read_input_outter284 = load [256 x i128]*, [256 x i128]** %struct_getter283, align 8
  %k285 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul286 = mul i128 2, %k285
  %add287 = add i128 %mul286, 1
  %add288 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.b.read_input_outter284, i128 0, i128 %add287
  store i128 0, i128* %add288, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body289

loop.body289:                                     ; preds = %loop.latch290, %loop.exit217
  br label %loop.latch290

loop.latch290:                                    ; preds = %loop.body289
  %i291 = load i128, i128* %i, align 4
  %add292 = add i128 %i291, 1
  store i128 %add292, i128* %i, align 4
  %i293 = load i128, i128* %i, align 4
  %k294 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul295 = mul i128 2, %k294
  %add296 = add i128 %mul295, 2
  %slt297 = icmp slt i128 %i293, %add296
  br i1 %slt297, label %loop.body289, label %loop.exit298

loop.exit298:                                     ; preds = %loop.latch290
  store i128 0, i128* %i, align 4
  br label %loop.body299

loop.body299:                                     ; preds = %loop.latch309, %loop.exit298
  %add300 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter301 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add300, i32 0, i32 4
  %bigadd.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter301, align 8
  %i302 = load i128, i128* %i, align 4
  %array_getter303 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter, i128 0, i128 %i302
  %add304 = load i128, i128* %array_getter303, align 4
  %a305 = load [256 x i128]*, [256 x i128]** %bigmod.a.declare_input, align 8
  %i306 = load i128, i128* %i, align 4
  %array_getter307 = getelementptr inbounds [256 x i128], [256 x i128]* %a305, i128 0, i128 %i306
  %a308 = load i128, i128* %array_getter307, align 4
  call void @fn_intrinsic_add_constraint(i128 %add304, i128 %a308, i1* @constraint.285)
  br label %loop.latch309

loop.latch309:                                    ; preds = %loop.body299
  %i310 = load i128, i128* %i, align 4
  %add311 = add i128 %i310, 1
  store i128 %add311, i128* %i, align 4
  %i312 = load i128, i128* %i, align 4
  %k313 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul314 = mul i128 2, %k313
  %slt315 = icmp slt i128 %i312, %mul314
  br i1 %slt315, label %loop.body299, label %loop.exit316

loop.exit316:                                     ; preds = %loop.latch309
  %add317 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter318 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add317, i32 0, i32 4
  %bigadd.out.read_output_outter319 = load [256 x i128]*, [256 x i128]** %struct_getter318, align 8
  %k320 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul321 = mul i128 2, %k320
  %array_getter322 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter319, i128 0, i128 %mul321
  %add323 = load i128, i128* %array_getter322, align 4
  call void @fn_intrinsic_add_constraint(i128 %add323, i128 0, i1* @constraint.286)
  %add324 = load %struct_template_circuit_bigadd*, %struct_template_circuit_bigadd** %add, align 8
  %struct_getter325 = getelementptr inbounds %struct_template_circuit_bigadd, %struct_template_circuit_bigadd* %add324, i32 0, i32 4
  %bigadd.out.read_output_outter326 = load [256 x i128]*, [256 x i128]** %struct_getter325, align 8
  %k327 = load i128, i128* %bigmod.k.declare_arg, align 4
  %mul328 = mul i128 2, %k327
  %add329 = add i128 %mul328, 1
  %array_getter330 = getelementptr inbounds [256 x i128], [256 x i128]* %bigadd.out.read_output_outter326, i128 0, i128 %add329
  %add331 = load i128, i128* %array_getter330, align 4
  call void @fn_intrinsic_add_constraint(i128 %add331, i128 0, i1* @constraint.287)
  %n332 = load i128, i128* %bigmod.n.declare_arg, align 4
  %k333 = load i128, i128* %bigmod.k.declare_arg, align 4
  %call334 = call %struct_template_circuit_biglessthan* @fn_template_build_biglessthan(i128 %n332, i128 %k333)
  store %struct_template_circuit_biglessthan* %call334, %struct_template_circuit_biglessthan** %lt, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body335

loop.body335:                                     ; preds = %loop.latch364, %loop.exit316
  %mod336 = load [256 x i128]*, [256 x i128]** %bigmod.mod.declare_output, align 8
  %i337 = load i128, i128* %i, align 4
  %array_getter338 = getelementptr inbounds [256 x i128], [256 x i128]* %mod336, i128 0, i128 %i337
  %mod339 = load i128, i128* %array_getter338, align 4
  %lt340 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter341 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt340, i32 0, i32 2
  %biglessthan.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter341, align 8
  %i342 = load i128, i128* %i, align 4
  %array_getter343 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter, i128 0, i128 %i342
  %lt344 = load i128, i128* %array_getter343, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt344, i128 %mod339, i1* @constraint.288)
  %ptr_getter345 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter346 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter345, i32 0, i32 2
  %biglessthan.a.read_input_outter347 = load [256 x i128]*, [256 x i128]** %struct_getter346, align 8
  %i348 = load i128, i128* %i, align 4
  %lt349 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.a.read_input_outter347, i128 0, i128 %i348
  store i128 %mod339, i128* %lt349, align 4
  %b350 = load [256 x i128]*, [256 x i128]** %bigmod.b.declare_input, align 8
  %i351 = load i128, i128* %i, align 4
  %array_getter352 = getelementptr inbounds [256 x i128], [256 x i128]* %b350, i128 0, i128 %i351
  %b353 = load i128, i128* %array_getter352, align 4
  %lt354 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter355 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt354, i32 0, i32 3
  %biglessthan.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter355, align 8
  %i356 = load i128, i128* %i, align 4
  %array_getter357 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter, i128 0, i128 %i356
  %lt358 = load i128, i128* %array_getter357, align 4
  call void @fn_intrinsic_add_constraint(i128 %lt358, i128 %b353, i1* @constraint.289)
  %ptr_getter359 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter360 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %ptr_getter359, i32 0, i32 3
  %biglessthan.b.read_input_outter361 = load [256 x i128]*, [256 x i128]** %struct_getter360, align 8
  %i362 = load i128, i128* %i, align 4
  %lt363 = getelementptr inbounds [256 x i128], [256 x i128]* %biglessthan.b.read_input_outter361, i128 0, i128 %i362
  store i128 %b353, i128* %lt363, align 4
  br label %loop.latch364

loop.latch364:                                    ; preds = %loop.body335
  %i365 = load i128, i128* %i, align 4
  %add366 = add i128 %i365, 1
  store i128 %add366, i128* %i, align 4
  %i367 = load i128, i128* %i, align 4
  %k368 = load i128, i128* %bigmod.k.declare_arg, align 4
  %slt369 = icmp slt i128 %i367, %k368
  br i1 %slt369, label %loop.body335, label %loop.exit370

loop.exit370:                                     ; preds = %loop.latch364
  %lt371 = load %struct_template_circuit_biglessthan*, %struct_template_circuit_biglessthan** %lt, align 8
  %struct_getter372 = getelementptr inbounds %struct_template_circuit_biglessthan, %struct_template_circuit_biglessthan* %lt371, i32 0, i32 4
  %biglessthan.out.read_output_outter = load i128, i128* %struct_getter372, align 4
  call void @fn_intrinsic_add_constraint(i128 %biglessthan.out.read_output_outter, i128 1, i1* @constraint.290)
  br label %exit

exit:                                             ; preds = %loop.exit370
  %div373 = load [256 x i128]*, [256 x i128]** %bigmod.div.declare_output, align 8
  %bigmod.div.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %0, i32 0, i32 4
  store [256 x i128]* %div373, [256 x i128]** %bigmod.div.write_output_inner, align 8
  %mod374 = load [256 x i128]*, [256 x i128]** %bigmod.mod.declare_output, align 8
  %bigmod.mod.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %0, i32 0, i32 5
  store [256 x i128]* %mod374, [256 x i128]** %bigmod.mod.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigmod* @fn_template_build_bigmod(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_bigmod = alloca %struct_template_circuit_bigmod, align 8
  %bigmod.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %struct_template_circuit_bigmod, i32 0, i32 0
  store i128 %0, i128* %bigmod.n.write_arg_inner, align 4
  %bigmod.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %struct_template_circuit_bigmod, i32 0, i32 1
  store i128 %1, i128* %bigmod.k.write_arg_inner, align 4
  ret %struct_template_circuit_bigmod* %struct_template_circuit_bigmod
}

define void @fn_template_init_bigmultmodp(%struct_template_circuit_bigmultmodp* %0) {
entry:
  %BigMultModP = alloca %struct_template_circuit_bigmultmodp*, align 8
  store %struct_template_circuit_bigmultmodp* %0, %struct_template_circuit_bigmultmodp** %BigMultModP, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigmultmodp, %struct_template_circuit_bigmultmodp* %0, i32 0, i32 0
  %bigmultmodp.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigmultmodp.n.declare_arg = alloca i128, align 8
  store i128 %bigmultmodp.n.read_arg_inner, i128* %bigmultmodp.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigmultmodp, %struct_template_circuit_bigmultmodp* %0, i32 0, i32 1
  %bigmultmodp.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigmultmodp.k.declare_arg = alloca i128, align 8
  store i128 %bigmultmodp.k.read_arg_inner, i128* %bigmultmodp.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigmultmodp, %struct_template_circuit_bigmultmodp* %0, i32 0, i32 2
  %bigmultmodp.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %bigmultmodp.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmultmodp.a.read_input_inner, [256 x i128]** %bigmultmodp.a.declare_input, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigmultmodp, %struct_template_circuit_bigmultmodp* %0, i32 0, i32 3
  %bigmultmodp.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %bigmultmodp.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmultmodp.b.read_input_inner, [256 x i128]** %bigmultmodp.b.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_bigmultmodp, %struct_template_circuit_bigmultmodp* %0, i32 0, i32 4
  %bigmultmodp.p.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %bigmultmodp.p.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmultmodp.p.read_input_inner, [256 x i128]** %bigmultmodp.p.declare_input, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %big_mod = alloca %struct_template_circuit_bigmod*, align 8
  %bigmultmodp.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %bigmultmodp.out.declare_output, align 8
  %big_mult = alloca %struct_template_circuit_bigmult*, align 8
  %n = load i128, i128* %bigmultmodp.n.declare_arg, align 4
  %k = load i128, i128* %bigmultmodp.k.declare_arg, align 4
  %call = call %struct_template_circuit_bigmult* @fn_template_build_bigmult(i128 %n, i128 %k)
  store %struct_template_circuit_bigmult* %call, %struct_template_circuit_bigmult** %big_mult, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %bigmultmodp.a.declare_input, align 8
  %i6 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i6
  %a7 = load i128, i128* %array_getter, align 4
  %big_mult8 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %big_mult, align 8
  %struct_getter9 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %big_mult8, i32 0, i32 2
  %bigmult.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter9, align 8
  %i10 = load i128, i128* %i, align 4
  %array_getter11 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter, i128 0, i128 %i10
  %big_mult12 = load i128, i128* %array_getter11, align 4
  call void @fn_intrinsic_add_constraint(i128 %big_mult12, i128 %a7, i1* @constraint.291)
  %ptr_getter = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %big_mult, align 8
  %struct_getter13 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter, i32 0, i32 2
  %bigmult.a.read_input_outter14 = load [256 x i128]*, [256 x i128]** %struct_getter13, align 8
  %i15 = load i128, i128* %i, align 4
  %big_mult16 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter14, i128 0, i128 %i15
  store i128 %a7, i128* %big_mult16, align 4
  %b = load [256 x i128]*, [256 x i128]** %bigmultmodp.b.declare_input, align 8
  %i17 = load i128, i128* %i, align 4
  %array_getter18 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i17
  %b19 = load i128, i128* %array_getter18, align 4
  %big_mult20 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %big_mult, align 8
  %struct_getter21 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %big_mult20, i32 0, i32 3
  %bigmult.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter21, align 8
  %i22 = load i128, i128* %i, align 4
  %array_getter23 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter, i128 0, i128 %i22
  %big_mult24 = load i128, i128* %array_getter23, align 4
  call void @fn_intrinsic_add_constraint(i128 %big_mult24, i128 %b19, i1* @constraint.292)
  %ptr_getter25 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %big_mult, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter25, i32 0, i32 3
  %bigmult.b.read_input_outter27 = load [256 x i128]*, [256 x i128]** %struct_getter26, align 8
  %i28 = load i128, i128* %i, align 4
  %big_mult29 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter27, i128 0, i128 %i28
  store i128 %b19, i128* %big_mult29, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i30 = load i128, i128* %i, align 4
  %add = add i128 %i30, 1
  store i128 %add, i128* %i, align 4
  %i31 = load i128, i128* %i, align 4
  %k32 = load i128, i128* %bigmultmodp.k.declare_arg, align 4
  %slt = icmp slt i128 %i31, %k32
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n33 = load i128, i128* %bigmultmodp.n.declare_arg, align 4
  %k34 = load i128, i128* %bigmultmodp.k.declare_arg, align 4
  %call35 = call %struct_template_circuit_bigmod* @fn_template_build_bigmod(i128 %n33, i128 %k34)
  store %struct_template_circuit_bigmod* %call35, %struct_template_circuit_bigmod** %big_mod, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body36

loop.body36:                                      ; preds = %loop.latch52, %loop.exit
  %big_mult37 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %big_mult, align 8
  %struct_getter38 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %big_mult37, i32 0, i32 4
  %bigmult.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter38, align 8
  %i39 = load i128, i128* %i, align 4
  %array_getter40 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.out.read_output_outter, i128 0, i128 %i39
  %big_mult41 = load i128, i128* %array_getter40, align 4
  %big_mod42 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %big_mod, align 8
  %struct_getter43 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %big_mod42, i32 0, i32 2
  %bigmod.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter43, align 8
  %i44 = load i128, i128* %i, align 4
  %array_getter45 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.a.read_input_outter, i128 0, i128 %i44
  %big_mod46 = load i128, i128* %array_getter45, align 4
  call void @fn_intrinsic_add_constraint(i128 %big_mod46, i128 %big_mult41, i1* @constraint.293)
  %ptr_getter47 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %big_mod, align 8
  %struct_getter48 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %ptr_getter47, i32 0, i32 2
  %bigmod.a.read_input_outter49 = load [256 x i128]*, [256 x i128]** %struct_getter48, align 8
  %i50 = load i128, i128* %i, align 4
  %big_mod51 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.a.read_input_outter49, i128 0, i128 %i50
  store i128 %big_mult41, i128* %big_mod51, align 4
  br label %loop.latch52

loop.latch52:                                     ; preds = %loop.body36
  %i53 = load i128, i128* %i, align 4
  %add54 = add i128 %i53, 1
  store i128 %add54, i128* %i, align 4
  %i55 = load i128, i128* %i, align 4
  %k56 = load i128, i128* %bigmultmodp.k.declare_arg, align 4
  %mul = mul i128 2, %k56
  %slt57 = icmp slt i128 %i55, %mul
  br i1 %slt57, label %loop.body36, label %loop.exit58

loop.exit58:                                      ; preds = %loop.latch52
  store i128 0, i128* %i, align 4
  br label %loop.body59

loop.body59:                                      ; preds = %loop.latch73, %loop.exit58
  %p = load [256 x i128]*, [256 x i128]** %bigmultmodp.p.declare_input, align 8
  %i60 = load i128, i128* %i, align 4
  %array_getter61 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i60
  %p62 = load i128, i128* %array_getter61, align 4
  %big_mod63 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %big_mod, align 8
  %struct_getter64 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %big_mod63, i32 0, i32 3
  %bigmod.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter64, align 8
  %i65 = load i128, i128* %i, align 4
  %array_getter66 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.b.read_input_outter, i128 0, i128 %i65
  %big_mod67 = load i128, i128* %array_getter66, align 4
  call void @fn_intrinsic_add_constraint(i128 %big_mod67, i128 %p62, i1* @constraint.294)
  %ptr_getter68 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %big_mod, align 8
  %struct_getter69 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %ptr_getter68, i32 0, i32 3
  %bigmod.b.read_input_outter70 = load [256 x i128]*, [256 x i128]** %struct_getter69, align 8
  %i71 = load i128, i128* %i, align 4
  %big_mod72 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.b.read_input_outter70, i128 0, i128 %i71
  store i128 %p62, i128* %big_mod72, align 4
  br label %loop.latch73

loop.latch73:                                     ; preds = %loop.body59
  %i74 = load i128, i128* %i, align 4
  %add75 = add i128 %i74, 1
  store i128 %add75, i128* %i, align 4
  %i76 = load i128, i128* %i, align 4
  %k77 = load i128, i128* %bigmultmodp.k.declare_arg, align 4
  %slt78 = icmp slt i128 %i76, %k77
  br i1 %slt78, label %loop.body59, label %loop.exit79

loop.exit79:                                      ; preds = %loop.latch73
  store i128 0, i128* %i, align 4
  br label %loop.body80

loop.body80:                                      ; preds = %loop.latch93, %loop.exit79
  %big_mod81 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %big_mod, align 8
  %struct_getter82 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %big_mod81, i32 0, i32 5
  %bigmod.mod.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter82, align 8
  %i83 = load i128, i128* %i, align 4
  %array_getter84 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.mod.read_output_outter, i128 0, i128 %i83
  %big_mod85 = load i128, i128* %array_getter84, align 4
  %out86 = load [256 x i128]*, [256 x i128]** %bigmultmodp.out.declare_output, align 8
  %i87 = load i128, i128* %i, align 4
  %array_getter88 = getelementptr inbounds [256 x i128], [256 x i128]* %out86, i128 0, i128 %i87
  %out89 = load i128, i128* %array_getter88, align 4
  call void @fn_intrinsic_add_constraint(i128 %out89, i128 %big_mod85, i1* @constraint.295)
  %ptr_getter90 = load [256 x i128]*, [256 x i128]** %bigmultmodp.out.declare_output, align 8
  %i91 = load i128, i128* %i, align 4
  %out92 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter90, i128 0, i128 %i91
  store i128 %big_mod85, i128* %out92, align 4
  br label %loop.latch93

loop.latch93:                                     ; preds = %loop.body80
  %i94 = load i128, i128* %i, align 4
  %add95 = add i128 %i94, 1
  store i128 %add95, i128* %i, align 4
  %i96 = load i128, i128* %i, align 4
  %k97 = load i128, i128* %bigmultmodp.k.declare_arg, align 4
  %slt98 = icmp slt i128 %i96, %k97
  br i1 %slt98, label %loop.body80, label %loop.exit99

loop.exit99:                                      ; preds = %loop.latch93
  br label %exit

exit:                                             ; preds = %loop.exit99
  %out100 = load [256 x i128]*, [256 x i128]** %bigmultmodp.out.declare_output, align 8
  %bigmultmodp.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmultmodp, %struct_template_circuit_bigmultmodp* %0, i32 0, i32 5
  store [256 x i128]* %out100, [256 x i128]** %bigmultmodp.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigmultmodp* @fn_template_build_bigmultmodp(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_bigmultmodp = alloca %struct_template_circuit_bigmultmodp, align 8
  %bigmultmodp.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultmodp, %struct_template_circuit_bigmultmodp* %struct_template_circuit_bigmultmodp, i32 0, i32 0
  store i128 %0, i128* %bigmultmodp.n.write_arg_inner, align 4
  %bigmultmodp.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmultmodp, %struct_template_circuit_bigmultmodp* %struct_template_circuit_bigmultmodp, i32 0, i32 1
  store i128 %1, i128* %bigmultmodp.k.write_arg_inner, align 4
  ret %struct_template_circuit_bigmultmodp* %struct_template_circuit_bigmultmodp
}

define [256 x [256 x i128]]* @find_Fp2_sum(i128 %0, i128 %1, [256 x [256 x i128]]* %2, [256 x [256 x i128]]* %3, [256 x i128]* %4) {
entry:
  %find_fp2_sum.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %find_fp2_sum.n.declare_arg, align 4
  %find_fp2_sum.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %find_fp2_sum.k.declare_arg, align 4
  %find_fp2_sum.a.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %2, [256 x [256 x i128]]** %find_fp2_sum.a.declare_arg, align 8
  %find_fp2_sum.b.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %3, [256 x [256 x i128]]** %find_fp2_sum.b.declare_arg, align 8
  %find_fp2_sum.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %find_fp2_sum.p.declare_arg, align 8
  %out = alloca [256 x [256 x i128]]*, align 8
  %out1 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out1, [256 x [256 x i128]]** %out, align 8
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %out, align 8
  %n = load i128, i128* %find_fp2_sum.n.declare_arg, align 4
  %k = load i128, i128* %find_fp2_sum.k.declare_arg, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_sum.a.declare_arg, align 8
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 0
  %a2 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %a2, [256 x i128]* %spice_inline_array, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_sum.b.declare_arg, align 8
  %array_getter3 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 0
  %b4 = load [256 x i128], [256 x i128]* %array_getter3, align 4
  %spice_inline_array5 = alloca [256 x i128], align 8
  store [256 x i128] %b4, [256 x i128]* %spice_inline_array5, align 4
  %p = load [256 x i128]*, [256 x i128]** %find_fp2_sum.p.declare_arg, align 8
  %call = call [256 x i128]* @long_add_mod(i128 %n, i128 %k, [256 x i128]* %spice_inline_array, [256 x i128]* %spice_inline_array5, [256 x i128]* %p)
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out6 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 0
  %5 = bitcast [256 x i128]* %out6 to i8*
  %6 = bitcast [256 x i128]* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  %n7 = load i128, i128* %find_fp2_sum.n.declare_arg, align 4
  %k8 = load i128, i128* %find_fp2_sum.k.declare_arg, align 4
  %a9 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_sum.a.declare_arg, align 8
  %array_getter10 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a9, i128 0, i128 1
  %a11 = load [256 x i128], [256 x i128]* %array_getter10, align 4
  %spice_inline_array12 = alloca [256 x i128], align 8
  store [256 x i128] %a11, [256 x i128]* %spice_inline_array12, align 4
  %b13 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_sum.b.declare_arg, align 8
  %array_getter14 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b13, i128 0, i128 1
  %b15 = load [256 x i128], [256 x i128]* %array_getter14, align 4
  %spice_inline_array16 = alloca [256 x i128], align 8
  store [256 x i128] %b15, [256 x i128]* %spice_inline_array16, align 4
  %p17 = load [256 x i128]*, [256 x i128]** %find_fp2_sum.p.declare_arg, align 8
  %call18 = call [256 x i128]* @long_add_mod(i128 %n7, i128 %k8, [256 x i128]* %spice_inline_array12, [256 x i128]* %spice_inline_array16, [256 x i128]* %p17)
  %ptr_getter19 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out20 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter19, i128 0, i128 1
  %7 = bitcast [256 x i128]* %out20 to i8*
  %8 = bitcast [256 x i128]* %call18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  %out21 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  ret [256 x [256 x i128]]* %out21
}

define void @fn_template_init_signedfpcarrymodp(%struct_template_circuit_signedfpcarrymodp* %0) {
entry:
  %SignedFpCarryModP = alloca %struct_template_circuit_signedfpcarrymodp*, align 8
  store %struct_template_circuit_signedfpcarrymodp* %0, %struct_template_circuit_signedfpcarrymodp** %SignedFpCarryModP, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %0, i32 0, i32 0
  %signedfpcarrymodp.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %signedfpcarrymodp.n.declare_arg = alloca i128, align 8
  store i128 %signedfpcarrymodp.n.read_arg_inner, i128* %signedfpcarrymodp.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %0, i32 0, i32 1
  %signedfpcarrymodp.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %signedfpcarrymodp.k.declare_arg = alloca i128, align 8
  store i128 %signedfpcarrymodp.k.read_arg_inner, i128* %signedfpcarrymodp.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %0, i32 0, i32 2
  %signedfpcarrymodp.overflow.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %signedfpcarrymodp.overflow.declare_arg = alloca i128, align 8
  store i128 %signedfpcarrymodp.overflow.read_arg_inner, i128* %signedfpcarrymodp.overflow.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %0, i32 0, i32 3
  %signedfpcarrymodp.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %signedfpcarrymodp.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %signedfpcarrymodp.p.read_arg_inner, [256 x i128]** %signedfpcarrymodp.p.declare_arg, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %0, i32 0, i32 4
  %signedfpcarrymodp.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %signedfpcarrymodp.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %signedfpcarrymodp.in.read_input_inner, [256 x i128]** %signedfpcarrymodp.in.declare_input, align 8
  %range_checks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %range_checks5 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %range_checks5, [256 x %struct_template_circuit_num2bits*]** %range_checks, align 8
  %m = alloca i128, align 8
  %m6 = call i128 @fn_intrinsic_inline_init()
  store i128 %m6, i128* %m, align 4
  %i = alloca i128, align 8
  %i7 = call i128 @fn_intrinsic_inline_init()
  store i128 %i7, i128* %i, align 4
  %X_range_checks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %X_range_checks8 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %X_range_checks8, [256 x %struct_template_circuit_num2bits*]** %X_range_checks, align 8
  %Xvar = alloca [256 x [256 x i128]]*, align 8
  %Xvar9 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %Xvar9, [256 x [256 x i128]]** %Xvar, align 8
  %mod_check = alloca %struct_template_circuit_checkcarrymodp*, align 8
  %signedfpcarrymodp.x.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %X = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %X, [256 x i128]** %signedfpcarrymodp.x.declare_output, align 8
  %signedfpcarrymodp.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall10 = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall10 to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %signedfpcarrymodp.out.declare_output, align 8
  %overflow = load i128, i128* %signedfpcarrymodp.overflow.declare_arg, align 4
  %n = load i128, i128* %signedfpcarrymodp.n.declare_arg, align 4
  %add = add i128 %overflow, %n
  %sub = sub i128 %add, 1
  %n11 = load i128, i128* %signedfpcarrymodp.n.declare_arg, align 4
  %sdiv = sdiv i128 %sub, %n11
  store i128 %sdiv, i128* %m, align 4
  %n12 = load i128, i128* %signedfpcarrymodp.n.declare_arg, align 4
  %k = load i128, i128* %signedfpcarrymodp.k.declare_arg, align 4
  %m13 = load i128, i128* %m, align 4
  %in = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.in.declare_input, align 8
  %p = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.p.declare_arg, align 8
  %call = call [256 x [256 x i128]]* @get_signed_Fp_carry_witness(i128 %n12, i128 %k, i128 %m13, [256 x i128]* %in, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call, [256 x [256 x i128]]** %Xvar, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %Xvar14 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %Xvar, align 8
  %i15 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %Xvar14, i128 0, i128 1, i128 %i15
  %Xvar16 = load i128, i128* %array_getter, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.out.declare_output, align 8
  %i17 = load i128, i128* %i, align 4
  %out18 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i17
  store i128 %Xvar16, i128* %out18, align 4
  %n19 = load i128, i128* %signedfpcarrymodp.n.declare_arg, align 4
  %call20 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n19)
  %ptr_getter21 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %range_checks, align 8
  %i22 = load i128, i128* %i, align 4
  %range_checks23 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter21, i128 0, i128 %i22
  store %struct_template_circuit_num2bits* %call20, %struct_template_circuit_num2bits** %range_checks23, align 8
  %out24 = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.out.declare_output, align 8
  %i25 = load i128, i128* %i, align 4
  %array_getter26 = getelementptr inbounds [256 x i128], [256 x i128]* %out24, i128 0, i128 %i25
  %out27 = load i128, i128* %array_getter26, align 4
  %range_checks28 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %range_checks, align 8
  %i29 = load i128, i128* %i, align 4
  %array_getter30 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %range_checks28, i128 0, i128 %i29
  %range_checks31 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter30, align 8
  %struct_getter32 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %range_checks31, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter32, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %out27, i1* @constraint.296)
  %ptr_getter33 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %range_checks, align 8
  %i34 = load i128, i128* %i, align 4
  %array_getter35 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter33, i128 0, i128 %i34
  %range_checks36 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter35, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %range_checks36, i32 0, i32 1
  store i128 %out27, i128* %num2bits.in.write_input_outter, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i37 = load i128, i128* %i, align 4
  %add38 = add i128 %i37, 1
  store i128 %add38, i128* %i, align 4
  %i39 = load i128, i128* %i, align 4
  %k40 = load i128, i128* %signedfpcarrymodp.k.declare_arg, align 4
  %slt = icmp slt i128 %i39, %k40
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %i, align 4
  br label %loop.body41

loop.body41:                                      ; preds = %loop.latch72, %loop.exit
  %Xvar42 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %Xvar, align 8
  %i43 = load i128, i128* %i, align 4
  %array_getter44 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %Xvar42, i128 0, i128 0, i128 %i43
  %Xvar45 = load i128, i128* %array_getter44, align 4
  %ptr_getter46 = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.x.declare_output, align 8
  %i47 = load i128, i128* %i, align 4
  %X48 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter46, i128 0, i128 %i47
  store i128 %Xvar45, i128* %X48, align 4
  %n49 = load i128, i128* %signedfpcarrymodp.n.declare_arg, align 4
  %add50 = add i128 %n49, 1
  %call51 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %add50)
  %ptr_getter52 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %X_range_checks, align 8
  %i53 = load i128, i128* %i, align 4
  %X_range_checks54 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter52, i128 0, i128 %i53
  store %struct_template_circuit_num2bits* %call51, %struct_template_circuit_num2bits** %X_range_checks54, align 8
  %X55 = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.x.declare_output, align 8
  %i56 = load i128, i128* %i, align 4
  %array_getter57 = getelementptr inbounds [256 x i128], [256 x i128]* %X55, i128 0, i128 %i56
  %X58 = load i128, i128* %array_getter57, align 4
  %n59 = load i128, i128* %signedfpcarrymodp.n.declare_arg, align 4
  %lshift = shl i128 1, %n59
  %add60 = add i128 %X58, %lshift
  %X_range_checks61 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %X_range_checks, align 8
  %i62 = load i128, i128* %i, align 4
  %array_getter63 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %X_range_checks61, i128 0, i128 %i62
  %X_range_checks64 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter63, align 8
  %struct_getter65 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %X_range_checks64, i32 0, i32 1
  %num2bits.in.read_input_outter66 = load i128, i128* %struct_getter65, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter66, i128 %add60, i1* @constraint.297)
  %ptr_getter67 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %X_range_checks, align 8
  %i68 = load i128, i128* %i, align 4
  %array_getter69 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter67, i128 0, i128 %i68
  %X_range_checks70 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter69, align 8
  %num2bits.in.write_input_outter71 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %X_range_checks70, i32 0, i32 1
  store i128 %add60, i128* %num2bits.in.write_input_outter71, align 4
  br label %loop.latch72

loop.latch72:                                     ; preds = %loop.body41
  %i73 = load i128, i128* %i, align 4
  %add74 = add i128 %i73, 1
  store i128 %add74, i128* %i, align 4
  %i75 = load i128, i128* %i, align 4
  %m76 = load i128, i128* %m, align 4
  %slt77 = icmp slt i128 %i75, %m76
  br i1 %slt77, label %loop.body41, label %loop.exit78

loop.exit78:                                      ; preds = %loop.latch72
  %n79 = load i128, i128* %signedfpcarrymodp.n.declare_arg, align 4
  %k80 = load i128, i128* %signedfpcarrymodp.k.declare_arg, align 4
  %m81 = load i128, i128* %m, align 4
  %overflow82 = load i128, i128* %signedfpcarrymodp.overflow.declare_arg, align 4
  %p83 = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.p.declare_arg, align 8
  %call84 = call %struct_template_circuit_checkcarrymodp* @fn_template_build_checkcarrymodp(i128 %n79, i128 %k80, i128 %m81, i128 %overflow82, [256 x i128]* %p83)
  store %struct_template_circuit_checkcarrymodp* %call84, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body85

loop.body85:                                      ; preds = %loop.latch114, %loop.exit78
  %in86 = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.in.declare_input, align 8
  %i87 = load i128, i128* %i, align 4
  %array_getter88 = getelementptr inbounds [256 x i128], [256 x i128]* %in86, i128 0, i128 %i87
  %in89 = load i128, i128* %array_getter88, align 4
  %mod_check90 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter91 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check90, i32 0, i32 5
  %checkcarrymodp.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter91, align 8
  %i92 = load i128, i128* %i, align 4
  %array_getter93 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.in.read_input_outter, i128 0, i128 %i92
  %mod_check94 = load i128, i128* %array_getter93, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod_check94, i128 %in89, i1* @constraint.298)
  %ptr_getter95 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter96 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %ptr_getter95, i32 0, i32 5
  %checkcarrymodp.in.read_input_outter97 = load [256 x i128]*, [256 x i128]** %struct_getter96, align 8
  %i98 = load i128, i128* %i, align 4
  %mod_check99 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.in.read_input_outter97, i128 0, i128 %i98
  store i128 %in89, i128* %mod_check99, align 4
  %out100 = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.out.declare_output, align 8
  %i101 = load i128, i128* %i, align 4
  %array_getter102 = getelementptr inbounds [256 x i128], [256 x i128]* %out100, i128 0, i128 %i101
  %out103 = load i128, i128* %array_getter102, align 4
  %mod_check104 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter105 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check104, i32 0, i32 7
  %checkcarrymodp.y.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter105, align 8
  %i106 = load i128, i128* %i, align 4
  %array_getter107 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.y.read_input_outter, i128 0, i128 %i106
  %mod_check108 = load i128, i128* %array_getter107, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod_check108, i128 %out103, i1* @constraint.299)
  %ptr_getter109 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter110 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %ptr_getter109, i32 0, i32 7
  %checkcarrymodp.y.read_input_outter111 = load [256 x i128]*, [256 x i128]** %struct_getter110, align 8
  %i112 = load i128, i128* %i, align 4
  %mod_check113 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.y.read_input_outter111, i128 0, i128 %i112
  store i128 %out103, i128* %mod_check113, align 4
  br label %loop.latch114

loop.latch114:                                    ; preds = %loop.body85
  %i115 = load i128, i128* %i, align 4
  %add116 = add i128 %i115, 1
  store i128 %add116, i128* %i, align 4
  %i117 = load i128, i128* %i, align 4
  %k118 = load i128, i128* %signedfpcarrymodp.k.declare_arg, align 4
  %slt119 = icmp slt i128 %i117, %k118
  br i1 %slt119, label %loop.body85, label %loop.exit120

loop.exit120:                                     ; preds = %loop.latch114
  store i128 0, i128* %i, align 4
  br label %loop.body121

loop.body121:                                     ; preds = %loop.latch136, %loop.exit120
  %X122 = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.x.declare_output, align 8
  %i123 = load i128, i128* %i, align 4
  %array_getter124 = getelementptr inbounds [256 x i128], [256 x i128]* %X122, i128 0, i128 %i123
  %X125 = load i128, i128* %array_getter124, align 4
  %mod_check126 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter127 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check126, i32 0, i32 6
  %checkcarrymodp.x.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter127, align 8
  %i128 = load i128, i128* %i, align 4
  %array_getter129 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.x.read_input_outter, i128 0, i128 %i128
  %mod_check130 = load i128, i128* %array_getter129, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod_check130, i128 %X125, i1* @constraint.300)
  %ptr_getter131 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %mod_check, align 8
  %struct_getter132 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %ptr_getter131, i32 0, i32 6
  %checkcarrymodp.x.read_input_outter133 = load [256 x i128]*, [256 x i128]** %struct_getter132, align 8
  %i134 = load i128, i128* %i, align 4
  %mod_check135 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.x.read_input_outter133, i128 0, i128 %i134
  store i128 %X125, i128* %mod_check135, align 4
  br label %loop.latch136

loop.latch136:                                    ; preds = %loop.body121
  %i137 = load i128, i128* %i, align 4
  %add138 = add i128 %i137, 1
  store i128 %add138, i128* %i, align 4
  %i139 = load i128, i128* %i, align 4
  %m140 = load i128, i128* %m, align 4
  %slt141 = icmp slt i128 %i139, %m140
  br i1 %slt141, label %loop.body121, label %loop.exit142

loop.exit142:                                     ; preds = %loop.latch136
  br label %exit

exit:                                             ; preds = %loop.exit142
  %X143 = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.x.declare_output, align 8
  %signedfpcarrymodp.x.write_output_inner = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %0, i32 0, i32 5
  store [256 x i128]* %X143, [256 x i128]** %signedfpcarrymodp.x.write_output_inner, align 8
  %out144 = load [256 x i128]*, [256 x i128]** %signedfpcarrymodp.out.declare_output, align 8
  %signedfpcarrymodp.out.write_output_inner = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %0, i32 0, i32 6
  store [256 x i128]* %out144, [256 x i128]** %signedfpcarrymodp.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_signedfpcarrymodp* @fn_template_build_signedfpcarrymodp(i128 %0, i128 %1, i128 %2, [256 x i128]* %3) {
entry:
  %struct_template_circuit_signedfpcarrymodp = alloca %struct_template_circuit_signedfpcarrymodp, align 8
  %signedfpcarrymodp.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %struct_template_circuit_signedfpcarrymodp, i32 0, i32 0
  store i128 %0, i128* %signedfpcarrymodp.n.write_arg_inner, align 4
  %signedfpcarrymodp.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %struct_template_circuit_signedfpcarrymodp, i32 0, i32 1
  store i128 %1, i128* %signedfpcarrymodp.k.write_arg_inner, align 4
  %signedfpcarrymodp.overflow.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %struct_template_circuit_signedfpcarrymodp, i32 0, i32 2
  store i128 %2, i128* %signedfpcarrymodp.overflow.write_arg_inner, align 4
  %signedfpcarrymodp.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %struct_template_circuit_signedfpcarrymodp, i32 0, i32 3
  store [256 x i128]* %3, [256 x i128]** %signedfpcarrymodp.p.write_arg_inner, align 8
  ret %struct_template_circuit_signedfpcarrymodp* %struct_template_circuit_signedfpcarrymodp
}

define [256 x i128]* @mod_exp(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3, [256 x i128]* %4) {
entry:
  %mod_exp.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %mod_exp.n.declare_arg, align 4
  %mod_exp.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %mod_exp.k.declare_arg, align 4
  %mod_exp.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %mod_exp.a.declare_arg, align 8
  %mod_exp.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %mod_exp.p.declare_arg, align 8
  %mod_exp.e.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %mod_exp.e.declare_arg, align 8
  %bitlength = alloca i128, align 8
  %bitlength1 = call i128 @fn_intrinsic_inline_init()
  store i128 %bitlength1, i128* %bitlength, align 4
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %out = alloca [256 x i128]*, align 8
  %out3 = alloca [256 x i128], align 8
  store [256 x i128]* %out3, [256 x i128]** %out, align 8
  %temp = alloca [256 x i128]*, align 8
  %temp4 = alloca [256 x i128], align 8
  store [256 x i128]* %temp4, [256 x i128]** %temp, align 8
  %eBits = alloca [256 x i128]*, align 8
  %eBits5 = alloca [256 x i128], align 8
  store [256 x i128]* %eBits5, [256 x i128]** %eBits, align 8
  %j = alloca i128, align 8
  %j6 = call i128 @fn_intrinsic_inline_init()
  store i128 %j6, i128* %j, align 4
  %temp2 = alloca [256 x [256 x i128]]*, align 8
  %temp27 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %temp27, [256 x [256 x i128]]** %temp2, align 8
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %eBits, align 8
  store i128 0, i128* %bitlength, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch33, %entry
  store i128 0, i128* %j, align 4
  br label %loop.body8

loop.body8:                                       ; preds = %loop.latch, %loop.body
  %e = load [256 x i128]*, [256 x i128]** %mod_exp.e.declare_arg, align 8
  %i9 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %e, i128 0, i128 %i9
  %e10 = load i128, i128* %array_getter, align 4
  %j11 = load i128, i128* %j, align 4
  %rshift = lshr i128 %e10, %j11
  %and = and i128 %rshift, 1
  %ptr_getter = load [256 x i128]*, [256 x i128]** %eBits, align 8
  %j12 = load i128, i128* %j, align 4
  %n = load i128, i128* %mod_exp.n.declare_arg, align 4
  %i13 = load i128, i128* %i, align 4
  %mul = mul i128 %n, %i13
  %add = add i128 %j12, %mul
  %eBits14 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %add
  store i128 %and, i128* %eBits14, align 4
  %eBits15 = load [256 x i128]*, [256 x i128]** %eBits, align 8
  %j16 = load i128, i128* %j, align 4
  %n17 = load i128, i128* %mod_exp.n.declare_arg, align 4
  %i18 = load i128, i128* %i, align 4
  %mul19 = mul i128 %n17, %i18
  %add20 = add i128 %j16, %mul19
  %array_getter21 = getelementptr inbounds [256 x i128], [256 x i128]* %eBits15, i128 0, i128 %add20
  %eBits22 = load i128, i128* %array_getter21, align 4
  %eq = icmp eq i128 %eBits22, 1
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body8
  %j23 = load i128, i128* %j, align 4
  %n24 = load i128, i128* %mod_exp.n.declare_arg, align 4
  %i25 = load i128, i128* %i, align 4
  %mul26 = mul i128 %n24, %i25
  %add27 = add i128 %j23, %mul26
  %add28 = add i128 %add27, 1
  store i128 %add28, i128* %bitlength, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body8
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %j29 = load i128, i128* %j, align 4
  %add30 = add i128 %j29, 1
  store i128 %add30, i128* %j, align 4
  %j31 = load i128, i128* %j, align 4
  %n32 = load i128, i128* %mod_exp.n.declare_arg, align 4
  %slt = icmp slt i128 %j31, %n32
  br i1 %slt, label %loop.body8, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch33

loop.latch33:                                     ; preds = %loop.exit
  %i34 = load i128, i128* %i, align 4
  %add35 = add i128 %i34, 1
  store i128 %add35, i128* %i, align 4
  %i36 = load i128, i128* %i, align 4
  %k = load i128, i128* %mod_exp.k.declare_arg, align 4
  %slt37 = icmp slt i128 %i36, %k
  br i1 %slt37, label %loop.body, label %loop.exit38

loop.exit38:                                      ; preds = %loop.latch33
  %uniform_array39 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array39, [256 x i128]** %out, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body40

loop.body40:                                      ; preds = %loop.latch44, %loop.exit38
  %ptr_getter41 = load [256 x i128]*, [256 x i128]** %out, align 8
  %i42 = load i128, i128* %i, align 4
  %out43 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter41, i128 0, i128 %i42
  store i128 0, i128* %out43, align 4
  br label %loop.latch44

loop.latch44:                                     ; preds = %loop.body40
  %i45 = load i128, i128* %i, align 4
  %add46 = add i128 %i45, 1
  store i128 %add46, i128* %i, align 4
  %i47 = load i128, i128* %i, align 4
  %slt48 = icmp slt i128 %i47, 50
  br i1 %slt48, label %loop.body40, label %loop.exit49

loop.exit49:                                      ; preds = %loop.latch44
  %ptr_getter50 = load [256 x i128]*, [256 x i128]** %out, align 8
  %out51 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter50, i128 0, i128 0
  store i128 1, i128* %out51, align 4
  %bitlength52 = load i128, i128* %bitlength, align 4
  %sub = sub i128 %bitlength52, 1
  store i128 %sub, i128* %i, align 4
  br label %loop.body53

loop.body53:                                      ; preds = %loop.latch94, %loop.exit49
  %eBits56 = load [256 x i128]*, [256 x i128]** %eBits, align 8
  %i57 = load i128, i128* %i, align 4
  %array_getter58 = getelementptr inbounds [256 x i128], [256 x i128]* %eBits56, i128 0, i128 %i57
  %eBits59 = load i128, i128* %array_getter58, align 4
  %eq60 = icmp eq i128 %eBits59, 1
  br i1 %eq60, label %if.true54, label %if.false55

if.true54:                                        ; preds = %loop.body53
  %uniform_array61 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array61, [256 x i128]** %temp, align 8
  %n62 = load i128, i128* %mod_exp.n.declare_arg, align 4
  %k63 = load i128, i128* %mod_exp.k.declare_arg, align 4
  %out64 = load [256 x i128]*, [256 x i128]** %out, align 8
  %a = load [256 x i128]*, [256 x i128]** %mod_exp.a.declare_arg, align 8
  %call = call [256 x i128]* @prod(i128 %n62, i128 %k63, [256 x i128]* %out64, [256 x i128]* %a)
  store [256 x i128]* %call, [256 x i128]** %temp, align 8
  %uniform_array65 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array65, [256 x [256 x i128]]** %temp2, align 8
  %n66 = load i128, i128* %mod_exp.n.declare_arg, align 4
  %k67 = load i128, i128* %mod_exp.k.declare_arg, align 4
  %temp68 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %p = load [256 x i128]*, [256 x i128]** %mod_exp.p.declare_arg, align 8
  %call69 = call [256 x [256 x i128]]* @long_div(i128 %n66, i128 %k67, [256 x i128]* %temp68, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call69, [256 x [256 x i128]]** %temp2, align 8
  %temp270 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %temp2, align 8
  %array_getter71 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %temp270, i128 0, i128 1
  %temp272 = load [256 x i128], [256 x i128]* %array_getter71, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %temp272, [256 x i128]* %spice_inline_array, align 4
  store [256 x i128]* %spice_inline_array, [256 x i128]** %out, align 8
  br label %if.exit73

if.false55:                                       ; preds = %loop.body53
  br label %if.exit73

if.exit73:                                        ; preds = %if.false55, %if.true54
  %i76 = load i128, i128* %i, align 4
  %sgt = icmp sgt i128 %i76, 0
  br i1 %sgt, label %if.true74, label %if.false75

if.true74:                                        ; preds = %if.exit73
  %uniform_array77 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array77, [256 x i128]** %temp, align 8
  %n78 = load i128, i128* %mod_exp.n.declare_arg, align 4
  %k79 = load i128, i128* %mod_exp.k.declare_arg, align 4
  %out80 = load [256 x i128]*, [256 x i128]** %out, align 8
  %out81 = load [256 x i128]*, [256 x i128]** %out, align 8
  %call82 = call [256 x i128]* @prod(i128 %n78, i128 %k79, [256 x i128]* %out80, [256 x i128]* %out81)
  store [256 x i128]* %call82, [256 x i128]** %temp, align 8
  %uniform_array83 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array83, [256 x [256 x i128]]** %temp2, align 8
  %n84 = load i128, i128* %mod_exp.n.declare_arg, align 4
  %k85 = load i128, i128* %mod_exp.k.declare_arg, align 4
  %temp86 = load [256 x i128]*, [256 x i128]** %temp, align 8
  %p87 = load [256 x i128]*, [256 x i128]** %mod_exp.p.declare_arg, align 8
  %call88 = call [256 x [256 x i128]]* @long_div(i128 %n84, i128 %k85, [256 x i128]* %temp86, [256 x i128]* %p87)
  store [256 x [256 x i128]]* %call88, [256 x [256 x i128]]** %temp2, align 8
  %temp289 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %temp2, align 8
  %array_getter90 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %temp289, i128 0, i128 1
  %temp291 = load [256 x i128], [256 x i128]* %array_getter90, align 4
  %spice_inline_array92 = alloca [256 x i128], align 8
  store [256 x i128] %temp291, [256 x i128]* %spice_inline_array92, align 4
  store [256 x i128]* %spice_inline_array92, [256 x i128]** %out, align 8
  br label %if.exit93

if.false75:                                       ; preds = %if.exit73
  br label %if.exit93

if.exit93:                                        ; preds = %if.false75, %if.true74
  br label %loop.latch94

loop.latch94:                                     ; preds = %if.exit93
  %i95 = load i128, i128* %i, align 4
  %sub96 = sub i128 %i95, 1
  store i128 %sub96, i128* %i, align 4
  %i97 = load i128, i128* %i, align 4
  %sge = icmp sge i128 %i97, 0
  br i1 %sge, label %loop.body53, label %loop.exit98

loop.exit98:                                      ; preds = %loop.latch94
  %out99 = load [256 x i128]*, [256 x i128]** %out, align 8
  ret [256 x i128]* %out99
}

define [256 x i128]* @prod_mod(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3, [256 x i128]* %4) {
entry:
  %prod_mod.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %prod_mod.n.declare_arg, align 4
  %prod_mod.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %prod_mod.k.declare_arg, align 4
  %prod_mod.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %prod_mod.a.declare_arg, align 8
  %prod_mod.b.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %prod_mod.b.declare_arg, align 8
  %prod_mod.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %prod_mod.p.declare_arg, align 8
  %temp = alloca [256 x [256 x i128]]*, align 8
  %temp1 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %temp1, [256 x [256 x i128]]** %temp, align 8
  %prod = alloca [256 x i128]*, align 8
  %prod2 = alloca [256 x i128], align 8
  store [256 x i128]* %prod2, [256 x i128]** %prod, align 8
  %n = load i128, i128* %prod_mod.n.declare_arg, align 4
  %k = load i128, i128* %prod_mod.k.declare_arg, align 4
  %a = load [256 x i128]*, [256 x i128]** %prod_mod.a.declare_arg, align 8
  %b = load [256 x i128]*, [256 x i128]** %prod_mod.b.declare_arg, align 8
  %call = call [256 x i128]* @prod(i128 %n, i128 %k, [256 x i128]* %a, [256 x i128]* %b)
  store [256 x i128]* %call, [256 x i128]** %prod, align 8
  %n3 = load i128, i128* %prod_mod.n.declare_arg, align 4
  %k4 = load i128, i128* %prod_mod.k.declare_arg, align 4
  %prod5 = load [256 x i128]*, [256 x i128]** %prod, align 8
  %p = load [256 x i128]*, [256 x i128]** %prod_mod.p.declare_arg, align 8
  %call6 = call [256 x [256 x i128]]* @long_div(i128 %n3, i128 %k4, [256 x i128]* %prod5, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call6, [256 x [256 x i128]]** %temp, align 8
  %temp7 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %temp, align 8
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %temp7, i128 0, i128 1
  %temp8 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %temp8, [256 x i128]* %spice_inline_array, align 4
  ret [256 x i128]* %spice_inline_array
}

define void @fn_template_init_primereduce(%struct_template_circuit_primereduce* %0) {
entry:
  %PrimeReduce = alloca %struct_template_circuit_primereduce*, align 8
  store %struct_template_circuit_primereduce* %0, %struct_template_circuit_primereduce** %PrimeReduce, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %0, i32 0, i32 0
  %primereduce.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %primereduce.n.declare_arg = alloca i128, align 8
  store i128 %primereduce.n.read_arg_inner, i128* %primereduce.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %0, i32 0, i32 1
  %primereduce.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %primereduce.k.declare_arg = alloca i128, align 8
  store i128 %primereduce.k.read_arg_inner, i128* %primereduce.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %0, i32 0, i32 2
  %primereduce.m.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %primereduce.m.declare_arg = alloca i128, align 8
  store i128 %primereduce.m.read_arg_inner, i128* %primereduce.m.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %0, i32 0, i32 3
  %primereduce.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %primereduce.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %primereduce.p.read_arg_inner, [256 x i128]** %primereduce.p.declare_arg, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %0, i32 0, i32 4
  %primereduce.m_out.read_arg_inner = load i128, i128* %struct_getter4, align 4
  %primereduce.m_out.declare_arg = alloca i128, align 8
  store i128 %primereduce.m_out.read_arg_inner, i128* %primereduce.m_out.declare_arg, align 4
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %0, i32 0, i32 5
  %primereduce.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter5, align 8
  %primereduce.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %primereduce.in.read_input_inner, [256 x i128]** %primereduce.in.declare_input, align 8
  %r = alloca [256 x [256 x i128]]*, align 8
  %r6 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %r6, [256 x [256 x i128]]** %r, align 8
  %primereduce.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %primereduce.out.declare_output, align 8
  %j = alloca i128, align 8
  %j7 = call i128 @fn_intrinsic_inline_init()
  store i128 %j7, i128* %j, align 4
  %two = alloca [256 x i128]*, align 8
  %two8 = alloca [256 x i128], align 8
  store [256 x i128]* %two8, [256 x i128]** %two, align 8
  %pow2nk = alloca [256 x i128]*, align 8
  %pow2nk9 = alloca [256 x i128], align 8
  store [256 x i128]* %pow2nk9, [256 x i128]** %pow2nk, align 8
  %e = alloca [256 x i128]*, align 8
  %e10 = alloca [256 x i128], align 8
  store [256 x i128]* %e10, [256 x i128]** %e, align 8
  %i = alloca i128, align 8
  %i11 = call i128 @fn_intrinsic_inline_init()
  store i128 %i11, i128* %i, align 4
  %pow2n = alloca [256 x i128]*, align 8
  %pow2n12 = alloca [256 x i128], align 8
  store [256 x i128]* %pow2n12, [256 x i128]** %pow2n, align 8
  %out_sum = alloca [256 x i128]*, align 8
  %out_sum13 = alloca [256 x i128], align 8
  store [256 x i128]* %out_sum13, [256 x i128]** %out_sum, align 8
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %two, align 8
  %uniform_array14 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array14, [256 x i128]** %e, align 8
  store i128 1, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %ptr_getter = load [256 x i128]*, [256 x i128]** %two, align 8
  %i15 = load i128, i128* %i, align 4
  %two16 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i15
  store i128 0, i128* %two16, align 4
  %ptr_getter17 = load [256 x i128]*, [256 x i128]** %e, align 8
  %i18 = load i128, i128* %i, align 4
  %e19 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter17, i128 0, i128 %i18
  store i128 0, i128* %e19, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i20 = load i128, i128* %i, align 4
  %add = add i128 %i20, 1
  store i128 %add, i128* %i, align 4
  %i21 = load i128, i128* %i, align 4
  %k = load i128, i128* %primereduce.k.declare_arg, align 4
  %slt = icmp slt i128 %i21, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %ptr_getter22 = load [256 x i128]*, [256 x i128]** %two, align 8
  %two23 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter22, i128 0, i128 0
  store i128 2, i128* %two23, align 4
  %n = load i128, i128* %primereduce.n.declare_arg, align 4
  %ptr_getter24 = load [256 x i128]*, [256 x i128]** %e, align 8
  %e25 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter24, i128 0, i128 0
  store i128 %n, i128* %e25, align 4
  %n26 = load i128, i128* %primereduce.n.declare_arg, align 4
  %k27 = load i128, i128* %primereduce.k.declare_arg, align 4
  %two28 = load [256 x i128]*, [256 x i128]** %two, align 8
  %p = load [256 x i128]*, [256 x i128]** %primereduce.p.declare_arg, align 8
  %e29 = load [256 x i128]*, [256 x i128]** %e, align 8
  %call = call [256 x i128]* @mod_exp(i128 %n26, i128 %k27, [256 x i128]* %two28, [256 x i128]* %p, [256 x i128]* %e29)
  store [256 x i128]* %call, [256 x i128]** %pow2n, align 8
  %k30 = load i128, i128* %primereduce.k.declare_arg, align 4
  %ptr_getter31 = load [256 x i128]*, [256 x i128]** %e, align 8
  %e32 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter31, i128 0, i128 0
  store i128 %k30, i128* %e32, align 4
  %n33 = load i128, i128* %primereduce.n.declare_arg, align 4
  %k34 = load i128, i128* %primereduce.k.declare_arg, align 4
  %pow2n35 = load [256 x i128]*, [256 x i128]** %pow2n, align 8
  %p36 = load [256 x i128]*, [256 x i128]** %primereduce.p.declare_arg, align 8
  %e37 = load [256 x i128]*, [256 x i128]** %e, align 8
  %call38 = call [256 x i128]* @mod_exp(i128 %n33, i128 %k34, [256 x i128]* %pow2n35, [256 x i128]* %p36, [256 x i128]* %e37)
  store [256 x i128]* %call38, [256 x i128]** %pow2nk, align 8
  %uniform_array39 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array39, [256 x [256 x i128]]** %r, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body40

loop.body40:                                      ; preds = %loop.latch57, %loop.exit
  %i41 = load i128, i128* %i, align 4
  %eq = icmp eq i128 %i41, 0
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body40
  %pow2nk42 = load [256 x i128]*, [256 x i128]** %pow2nk, align 8
  %ptr_getter43 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %r, align 8
  %i44 = load i128, i128* %i, align 4
  %r45 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter43, i128 0, i128 %i44
  %1 = bitcast [256 x i128]* %r45 to i8*
  %2 = bitcast [256 x i128]* %pow2nk42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %2, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  br label %if.exit

if.false:                                         ; preds = %loop.body40
  %n46 = load i128, i128* %primereduce.n.declare_arg, align 4
  %k47 = load i128, i128* %primereduce.k.declare_arg, align 4
  %r48 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %r, align 8
  %i49 = load i128, i128* %i, align 4
  %sub = sub i128 %i49, 1
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %r48, i128 0, i128 %sub
  %r50 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %r50, [256 x i128]* %spice_inline_array, align 4
  %pow2n51 = load [256 x i128]*, [256 x i128]** %pow2n, align 8
  %p52 = load [256 x i128]*, [256 x i128]** %primereduce.p.declare_arg, align 8
  %call53 = call [256 x i128]* @prod_mod(i128 %n46, i128 %k47, [256 x i128]* %spice_inline_array, [256 x i128]* %pow2n51, [256 x i128]* %p52)
  %ptr_getter54 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %r, align 8
  %i55 = load i128, i128* %i, align 4
  %r56 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter54, i128 0, i128 %i55
  %3 = bitcast [256 x i128]* %r56 to i8*
  %4 = bitcast [256 x i128]* %call53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch57

loop.latch57:                                     ; preds = %if.exit
  %i58 = load i128, i128* %i, align 4
  %add59 = add i128 %i58, 1
  store i128 %add59, i128* %i, align 4
  %i60 = load i128, i128* %i, align 4
  %m = load i128, i128* %primereduce.m.declare_arg, align 4
  %slt61 = icmp slt i128 %i60, %m
  br i1 %slt61, label %loop.body40, label %loop.exit62

loop.exit62:                                      ; preds = %loop.latch57
  %uniform_array63 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array63, [256 x i128]** %out_sum, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body64

loop.body64:                                      ; preds = %loop.latch71, %loop.exit62
  %in = load [256 x i128]*, [256 x i128]** %primereduce.in.declare_input, align 8
  %i65 = load i128, i128* %i, align 4
  %array_getter66 = getelementptr inbounds [256 x i128], [256 x i128]* %in, i128 0, i128 %i65
  %in67 = load i128, i128* %array_getter66, align 4
  %ptr_getter68 = load [256 x i128]*, [256 x i128]** %out_sum, align 8
  %i69 = load i128, i128* %i, align 4
  %out_sum70 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter68, i128 0, i128 %i69
  store i128 %in67, i128* %out_sum70, align 4
  br label %loop.latch71

loop.latch71:                                     ; preds = %loop.body64
  %i72 = load i128, i128* %i, align 4
  %add73 = add i128 %i72, 1
  store i128 %add73, i128* %i, align 4
  %i74 = load i128, i128* %i, align 4
  %k75 = load i128, i128* %primereduce.k.declare_arg, align 4
  %slt76 = icmp slt i128 %i74, %k75
  br i1 %slt76, label %loop.body64, label %loop.exit77

loop.exit77:                                      ; preds = %loop.latch71
  store i128 0, i128* %i, align 4
  br label %loop.body78

loop.body78:                                      ; preds = %loop.latch106, %loop.exit77
  store i128 0, i128* %j, align 4
  br label %loop.body79

loop.body79:                                      ; preds = %loop.latch99, %loop.body78
  %out_sum80 = load [256 x i128]*, [256 x i128]** %out_sum, align 8
  %j81 = load i128, i128* %j, align 4
  %array_getter82 = getelementptr inbounds [256 x i128], [256 x i128]* %out_sum80, i128 0, i128 %j81
  %out_sum83 = load i128, i128* %array_getter82, align 4
  %in84 = load [256 x i128]*, [256 x i128]** %primereduce.in.declare_input, align 8
  %i85 = load i128, i128* %i, align 4
  %k86 = load i128, i128* %primereduce.k.declare_arg, align 4
  %add87 = add i128 %i85, %k86
  %array_getter88 = getelementptr inbounds [256 x i128], [256 x i128]* %in84, i128 0, i128 %add87
  %in89 = load i128, i128* %array_getter88, align 4
  %r90 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %r, align 8
  %i91 = load i128, i128* %i, align 4
  %j92 = load i128, i128* %j, align 4
  %array_getter93 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %r90, i128 0, i128 %i91, i128 %j92
  %r94 = load i128, i128* %array_getter93, align 4
  %mul = mul i128 %in89, %r94
  %add95 = add i128 %out_sum83, %mul
  %ptr_getter96 = load [256 x i128]*, [256 x i128]** %out_sum, align 8
  %j97 = load i128, i128* %j, align 4
  %out_sum98 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter96, i128 0, i128 %j97
  store i128 %add95, i128* %out_sum98, align 4
  br label %loop.latch99

loop.latch99:                                     ; preds = %loop.body79
  %j100 = load i128, i128* %j, align 4
  %add101 = add i128 %j100, 1
  store i128 %add101, i128* %j, align 4
  %j102 = load i128, i128* %j, align 4
  %k103 = load i128, i128* %primereduce.k.declare_arg, align 4
  %slt104 = icmp slt i128 %j102, %k103
  br i1 %slt104, label %loop.body79, label %loop.exit105

loop.exit105:                                     ; preds = %loop.latch99
  br label %loop.latch106

loop.latch106:                                    ; preds = %loop.exit105
  %i107 = load i128, i128* %i, align 4
  %add108 = add i128 %i107, 1
  store i128 %add108, i128* %i, align 4
  %i109 = load i128, i128* %i, align 4
  %m110 = load i128, i128* %primereduce.m.declare_arg, align 4
  %slt111 = icmp slt i128 %i109, %m110
  br i1 %slt111, label %loop.body78, label %loop.exit112

loop.exit112:                                     ; preds = %loop.latch106
  store i128 0, i128* %i, align 4
  br label %loop.body113

loop.body113:                                     ; preds = %loop.latch125, %loop.exit112
  %out_sum114 = load [256 x i128]*, [256 x i128]** %out_sum, align 8
  %i115 = load i128, i128* %i, align 4
  %array_getter116 = getelementptr inbounds [256 x i128], [256 x i128]* %out_sum114, i128 0, i128 %i115
  %out_sum117 = load i128, i128* %array_getter116, align 4
  %out118 = load [256 x i128]*, [256 x i128]** %primereduce.out.declare_output, align 8
  %i119 = load i128, i128* %i, align 4
  %array_getter120 = getelementptr inbounds [256 x i128], [256 x i128]* %out118, i128 0, i128 %i119
  %out121 = load i128, i128* %array_getter120, align 4
  call void @fn_intrinsic_add_constraint(i128 %out121, i128 %out_sum117, i1* @constraint.301)
  %ptr_getter122 = load [256 x i128]*, [256 x i128]** %primereduce.out.declare_output, align 8
  %i123 = load i128, i128* %i, align 4
  %out124 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter122, i128 0, i128 %i123
  store i128 %out_sum117, i128* %out124, align 4
  br label %loop.latch125

loop.latch125:                                    ; preds = %loop.body113
  %i126 = load i128, i128* %i, align 4
  %add127 = add i128 %i126, 1
  store i128 %add127, i128* %i, align 4
  %i128 = load i128, i128* %i, align 4
  %k129 = load i128, i128* %primereduce.k.declare_arg, align 4
  %slt130 = icmp slt i128 %i128, %k129
  br i1 %slt130, label %loop.body113, label %loop.exit131

loop.exit131:                                     ; preds = %loop.latch125
  br label %exit

exit:                                             ; preds = %loop.exit131
  %out132 = load [256 x i128]*, [256 x i128]** %primereduce.out.declare_output, align 8
  %primereduce.out.write_output_inner = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %0, i32 0, i32 6
  store [256 x i128]* %out132, [256 x i128]** %primereduce.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_primereduce* @fn_template_build_primereduce(i128 %0, i128 %1, i128 %2, [256 x i128]* %3, i128 %4) {
entry:
  %struct_template_circuit_primereduce = alloca %struct_template_circuit_primereduce, align 8
  %primereduce.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %struct_template_circuit_primereduce, i32 0, i32 0
  store i128 %0, i128* %primereduce.n.write_arg_inner, align 4
  %primereduce.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %struct_template_circuit_primereduce, i32 0, i32 1
  store i128 %1, i128* %primereduce.k.write_arg_inner, align 4
  %primereduce.m.write_arg_inner = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %struct_template_circuit_primereduce, i32 0, i32 2
  store i128 %2, i128* %primereduce.m.write_arg_inner, align 4
  %primereduce.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %struct_template_circuit_primereduce, i32 0, i32 3
  store [256 x i128]* %3, [256 x i128]** %primereduce.p.write_arg_inner, align 8
  %primereduce.m_out.write_arg_inner = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %struct_template_circuit_primereduce, i32 0, i32 4
  store i128 %4, i128* %primereduce.m_out.write_arg_inner, align 4
  ret %struct_template_circuit_primereduce* %struct_template_circuit_primereduce
}

define void @fn_template_init_pointonline(%struct_template_circuit_pointonline* %0) {
entry:
  %PointOnLine = alloca %struct_template_circuit_pointonline*, align 8
  store %struct_template_circuit_pointonline* %0, %struct_template_circuit_pointonline** %PointOnLine, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %0, i32 0, i32 0
  %pointonline.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %pointonline.n.declare_arg = alloca i128, align 8
  store i128 %pointonline.n.read_arg_inner, i128* %pointonline.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %0, i32 0, i32 1
  %pointonline.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %pointonline.k.declare_arg = alloca i128, align 8
  store i128 %pointonline.k.read_arg_inner, i128* %pointonline.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %0, i32 0, i32 2
  %pointonline.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %pointonline.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %pointonline.p.read_arg_inner, [256 x i128]** %pointonline.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %0, i32 0, i32 3
  %pointonline.in.read_input_inner = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter3, align 8
  %pointonline.in.declare_input = alloca [256 x [256 x [256 x i128]]]*, align 8
  store [256 x [256 x [256 x i128]]]* %pointonline.in.read_input_inner, [256 x [256 x [256 x i128]]]** %pointonline.in.declare_input, align 8
  %left = alloca %struct_template_circuit_bigmultshortlong*, align 8
  %LOGK = alloca i128, align 8
  %LOGK4 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK4, i128* %LOGK, align 4
  %right = alloca %struct_template_circuit_bigmultshortlong*, align 8
  %LOGK2 = alloca i128, align 8
  %LOGK25 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK25, i128* %LOGK2, align 4
  %diff_red = alloca %struct_template_circuit_primereduce*, align 8
  %i = alloca i128, align 8
  %i6 = call i128 @fn_intrinsic_inline_init()
  store i128 %i6, i128* %i, align 4
  %diff_mod = alloca %struct_template_circuit_signedcheckcarrymodtozero*, align 8
  %k = load i128, i128* %pointonline.k.declare_arg, align 4
  %call = call i128 @log_ceil(i128 %k)
  store i128 %call, i128* %LOGK, align 4
  %k7 = load i128, i128* %pointonline.k.declare_arg, align 4
  %mul = mul i128 3, %k7
  %k8 = load i128, i128* %pointonline.k.declare_arg, align 4
  %mul9 = mul i128 %mul, %k8
  %call10 = call i128 @log_ceil(i128 %mul9)
  store i128 %call10, i128* %LOGK2, align 4
  %n = load i128, i128* %pointonline.n.declare_arg, align 4
  %k11 = load i128, i128* %pointonline.k.declare_arg, align 4
  %n12 = load i128, i128* %pointonline.n.declare_arg, align 4
  %mul13 = mul i128 2, %n12
  %LOGK14 = load i128, i128* %LOGK, align 4
  %add = add i128 %mul13, %LOGK14
  %add15 = add i128 %add, 1
  %call16 = call %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %n, i128 %k11, i128 %add15)
  store %struct_template_circuit_bigmultshortlong* %call16, %struct_template_circuit_bigmultshortlong** %left, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %in = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointonline.in.declare_input, align 8
  %i17 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in, i128 0, i128 0, i128 1, i128 %i17
  %in18 = load i128, i128* %array_getter, align 4
  %in19 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointonline.in.declare_input, align 8
  %i20 = load i128, i128* %i, align 4
  %array_getter21 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in19, i128 0, i128 2, i128 1, i128 %i20
  %in22 = load i128, i128* %array_getter21, align 4
  %add23 = add i128 %in18, %in22
  %left24 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %left, align 8
  %struct_getter25 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %left24, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter25, align 8
  %i26 = load i128, i128* %i, align 4
  %array_getter27 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter, i128 0, i128 %i26
  %left28 = load i128, i128* %array_getter27, align 4
  call void @fn_intrinsic_add_constraint(i128 %left28, i128 %add23, i1* @constraint.302)
  %ptr_getter = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %left, align 8
  %struct_getter29 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter30 = load [256 x i128]*, [256 x i128]** %struct_getter29, align 8
  %i31 = load i128, i128* %i, align 4
  %left32 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter30, i128 0, i128 %i31
  store i128 %add23, i128* %left32, align 4
  %in33 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointonline.in.declare_input, align 8
  %i34 = load i128, i128* %i, align 4
  %array_getter35 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in33, i128 0, i128 1, i128 0, i128 %i34
  %in36 = load i128, i128* %array_getter35, align 4
  %in37 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointonline.in.declare_input, align 8
  %i38 = load i128, i128* %i, align 4
  %array_getter39 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in37, i128 0, i128 0, i128 0, i128 %i38
  %in40 = load i128, i128* %array_getter39, align 4
  %sub = sub i128 %in36, %in40
  %left41 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %left, align 8
  %struct_getter42 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %left41, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter42, align 8
  %i43 = load i128, i128* %i, align 4
  %array_getter44 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter, i128 0, i128 %i43
  %left45 = load i128, i128* %array_getter44, align 4
  call void @fn_intrinsic_add_constraint(i128 %left45, i128 %sub, i1* @constraint.303)
  %ptr_getter46 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %left, align 8
  %struct_getter47 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter46, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter48 = load [256 x i128]*, [256 x i128]** %struct_getter47, align 8
  %i49 = load i128, i128* %i, align 4
  %left50 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter48, i128 0, i128 %i49
  store i128 %sub, i128* %left50, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i51 = load i128, i128* %i, align 4
  %add52 = add i128 %i51, 1
  store i128 %add52, i128* %i, align 4
  %i53 = load i128, i128* %i, align 4
  %k54 = load i128, i128* %pointonline.k.declare_arg, align 4
  %slt = icmp slt i128 %i53, %k54
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n55 = load i128, i128* %pointonline.n.declare_arg, align 4
  %k56 = load i128, i128* %pointonline.k.declare_arg, align 4
  %n57 = load i128, i128* %pointonline.n.declare_arg, align 4
  %mul58 = mul i128 2, %n57
  %LOGK59 = load i128, i128* %LOGK, align 4
  %add60 = add i128 %mul58, %LOGK59
  %call61 = call %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %n55, i128 %k56, i128 %add60)
  store %struct_template_circuit_bigmultshortlong* %call61, %struct_template_circuit_bigmultshortlong** %right, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body62

loop.body62:                                      ; preds = %loop.latch103, %loop.exit
  %in63 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointonline.in.declare_input, align 8
  %i64 = load i128, i128* %i, align 4
  %array_getter65 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in63, i128 0, i128 1, i128 1, i128 %i64
  %in66 = load i128, i128* %array_getter65, align 4
  %in67 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointonline.in.declare_input, align 8
  %i68 = load i128, i128* %i, align 4
  %array_getter69 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in67, i128 0, i128 0, i128 1, i128 %i68
  %in70 = load i128, i128* %array_getter69, align 4
  %sub71 = sub i128 %in66, %in70
  %right72 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %right, align 8
  %struct_getter73 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %right72, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter74 = load [256 x i128]*, [256 x i128]** %struct_getter73, align 8
  %i75 = load i128, i128* %i, align 4
  %array_getter76 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter74, i128 0, i128 %i75
  %right77 = load i128, i128* %array_getter76, align 4
  call void @fn_intrinsic_add_constraint(i128 %right77, i128 %sub71, i1* @constraint.304)
  %ptr_getter78 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %right, align 8
  %struct_getter79 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter78, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter80 = load [256 x i128]*, [256 x i128]** %struct_getter79, align 8
  %i81 = load i128, i128* %i, align 4
  %right82 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter80, i128 0, i128 %i81
  store i128 %sub71, i128* %right82, align 4
  %in83 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointonline.in.declare_input, align 8
  %i84 = load i128, i128* %i, align 4
  %array_getter85 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in83, i128 0, i128 0, i128 0, i128 %i84
  %in86 = load i128, i128* %array_getter85, align 4
  %in87 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointonline.in.declare_input, align 8
  %i88 = load i128, i128* %i, align 4
  %array_getter89 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in87, i128 0, i128 2, i128 0, i128 %i88
  %in90 = load i128, i128* %array_getter89, align 4
  %sub91 = sub i128 %in86, %in90
  %right92 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %right, align 8
  %struct_getter93 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %right92, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter94 = load [256 x i128]*, [256 x i128]** %struct_getter93, align 8
  %i95 = load i128, i128* %i, align 4
  %array_getter96 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter94, i128 0, i128 %i95
  %right97 = load i128, i128* %array_getter96, align 4
  call void @fn_intrinsic_add_constraint(i128 %right97, i128 %sub91, i1* @constraint.305)
  %ptr_getter98 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %right, align 8
  %struct_getter99 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter98, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter100 = load [256 x i128]*, [256 x i128]** %struct_getter99, align 8
  %i101 = load i128, i128* %i, align 4
  %right102 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter100, i128 0, i128 %i101
  store i128 %sub91, i128* %right102, align 4
  br label %loop.latch103

loop.latch103:                                    ; preds = %loop.body62
  %i104 = load i128, i128* %i, align 4
  %add105 = add i128 %i104, 1
  store i128 %add105, i128* %i, align 4
  %i106 = load i128, i128* %i, align 4
  %k107 = load i128, i128* %pointonline.k.declare_arg, align 4
  %slt108 = icmp slt i128 %i106, %k107
  br i1 %slt108, label %loop.body62, label %loop.exit109

loop.exit109:                                     ; preds = %loop.latch103
  %n110 = load i128, i128* %pointonline.n.declare_arg, align 4
  %k111 = load i128, i128* %pointonline.k.declare_arg, align 4
  %k112 = load i128, i128* %pointonline.k.declare_arg, align 4
  %sub113 = sub i128 %k112, 1
  %p = load [256 x i128]*, [256 x i128]** %pointonline.p.declare_arg, align 8
  %n114 = load i128, i128* %pointonline.n.declare_arg, align 4
  %mul115 = mul i128 3, %n114
  %LOGK2116 = load i128, i128* %LOGK2, align 4
  %add117 = add i128 %mul115, %LOGK2116
  %call118 = call %struct_template_circuit_primereduce* @fn_template_build_primereduce(i128 %n110, i128 %k111, i128 %sub113, [256 x i128]* %p, i128 %add117)
  store %struct_template_circuit_primereduce* %call118, %struct_template_circuit_primereduce** %diff_red, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body119

loop.body119:                                     ; preds = %loop.latch142, %loop.exit109
  %left120 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %left, align 8
  %struct_getter121 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %left120, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter121, align 8
  %i122 = load i128, i128* %i, align 4
  %array_getter123 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter, i128 0, i128 %i122
  %left124 = load i128, i128* %array_getter123, align 4
  %right125 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %right, align 8
  %struct_getter126 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %right125, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter127 = load [256 x i128]*, [256 x i128]** %struct_getter126, align 8
  %i128 = load i128, i128* %i, align 4
  %array_getter129 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter127, i128 0, i128 %i128
  %right130 = load i128, i128* %array_getter129, align 4
  %sub131 = sub i128 %left124, %right130
  %diff_red132 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %diff_red, align 8
  %struct_getter133 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %diff_red132, i32 0, i32 5
  %primereduce.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter133, align 8
  %i134 = load i128, i128* %i, align 4
  %array_getter135 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter, i128 0, i128 %i134
  %diff_red136 = load i128, i128* %array_getter135, align 4
  call void @fn_intrinsic_add_constraint(i128 %diff_red136, i128 %sub131, i1* @constraint.306)
  %ptr_getter137 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %diff_red, align 8
  %struct_getter138 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %ptr_getter137, i32 0, i32 5
  %primereduce.in.read_input_outter139 = load [256 x i128]*, [256 x i128]** %struct_getter138, align 8
  %i140 = load i128, i128* %i, align 4
  %diff_red141 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter139, i128 0, i128 %i140
  store i128 %sub131, i128* %diff_red141, align 4
  br label %loop.latch142

loop.latch142:                                    ; preds = %loop.body119
  %i143 = load i128, i128* %i, align 4
  %add144 = add i128 %i143, 1
  store i128 %add144, i128* %i, align 4
  %i145 = load i128, i128* %i, align 4
  %k146 = load i128, i128* %pointonline.k.declare_arg, align 4
  %mul147 = mul i128 2, %k146
  %sub148 = sub i128 %mul147, 1
  %slt149 = icmp slt i128 %i145, %sub148
  br i1 %slt149, label %loop.body119, label %loop.exit150

loop.exit150:                                     ; preds = %loop.latch142
  %n151 = load i128, i128* %pointonline.n.declare_arg, align 4
  %k152 = load i128, i128* %pointonline.k.declare_arg, align 4
  %n153 = load i128, i128* %pointonline.n.declare_arg, align 4
  %mul154 = mul i128 3, %n153
  %LOGK2155 = load i128, i128* %LOGK2, align 4
  %add156 = add i128 %mul154, %LOGK2155
  %p157 = load [256 x i128]*, [256 x i128]** %pointonline.p.declare_arg, align 8
  %call158 = call %struct_template_circuit_signedcheckcarrymodtozero* @fn_template_build_signedcheckcarrymodtozero(i128 %n151, i128 %k152, i128 %add156, [256 x i128]* %p157)
  store %struct_template_circuit_signedcheckcarrymodtozero* %call158, %struct_template_circuit_signedcheckcarrymodtozero** %diff_mod, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body159

loop.body159:                                     ; preds = %loop.latch175, %loop.exit150
  %diff_red160 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %diff_red, align 8
  %struct_getter161 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %diff_red160, i32 0, i32 6
  %primereduce.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter161, align 8
  %i162 = load i128, i128* %i, align 4
  %array_getter163 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.out.read_output_outter, i128 0, i128 %i162
  %diff_red164 = load i128, i128* %array_getter163, align 4
  %diff_mod165 = load %struct_template_circuit_signedcheckcarrymodtozero*, %struct_template_circuit_signedcheckcarrymodtozero** %diff_mod, align 8
  %struct_getter166 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %diff_mod165, i32 0, i32 4
  %signedcheckcarrymodtozero.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter166, align 8
  %i167 = load i128, i128* %i, align 4
  %array_getter168 = getelementptr inbounds [256 x i128], [256 x i128]* %signedcheckcarrymodtozero.in.read_input_outter, i128 0, i128 %i167
  %diff_mod169 = load i128, i128* %array_getter168, align 4
  call void @fn_intrinsic_add_constraint(i128 %diff_mod169, i128 %diff_red164, i1* @constraint.307)
  %ptr_getter170 = load %struct_template_circuit_signedcheckcarrymodtozero*, %struct_template_circuit_signedcheckcarrymodtozero** %diff_mod, align 8
  %struct_getter171 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %ptr_getter170, i32 0, i32 4
  %signedcheckcarrymodtozero.in.read_input_outter172 = load [256 x i128]*, [256 x i128]** %struct_getter171, align 8
  %i173 = load i128, i128* %i, align 4
  %diff_mod174 = getelementptr inbounds [256 x i128], [256 x i128]* %signedcheckcarrymodtozero.in.read_input_outter172, i128 0, i128 %i173
  store i128 %diff_red164, i128* %diff_mod174, align 4
  br label %loop.latch175

loop.latch175:                                    ; preds = %loop.body159
  %i176 = load i128, i128* %i, align 4
  %add177 = add i128 %i176, 1
  store i128 %add177, i128* %i, align 4
  %i178 = load i128, i128* %i, align 4
  %k179 = load i128, i128* %pointonline.k.declare_arg, align 4
  %slt180 = icmp slt i128 %i178, %k179
  br i1 %slt180, label %loop.body159, label %loop.exit181

loop.exit181:                                     ; preds = %loop.latch175
  br label %exit

exit:                                             ; preds = %loop.exit181
  ret void
}

define %struct_template_circuit_pointonline* @fn_template_build_pointonline(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_pointonline = alloca %struct_template_circuit_pointonline, align 8
  %pointonline.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %struct_template_circuit_pointonline, i32 0, i32 0
  store i128 %0, i128* %pointonline.n.write_arg_inner, align 4
  %pointonline.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %struct_template_circuit_pointonline, i32 0, i32 1
  store i128 %1, i128* %pointonline.k.write_arg_inner, align 4
  %pointonline.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %struct_template_circuit_pointonline, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %pointonline.p.write_arg_inner, align 8
  ret %struct_template_circuit_pointonline* %struct_template_circuit_pointonline
}

define [256 x i128]* @find_Fp_inverse(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3) {
entry:
  %find_fp_inverse.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %find_fp_inverse.n.declare_arg, align 4
  %find_fp_inverse.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %find_fp_inverse.k.declare_arg, align 4
  %find_fp_inverse.num.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %find_fp_inverse.num.declare_arg, align 8
  %find_fp_inverse.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %find_fp_inverse.p.declare_arg, align 8
  %q = alloca [256 x i128]*, align 8
  %q1 = alloca [256 x i128], align 8
  store [256 x i128]* %q1, [256 x i128]** %q, align 8
  %r = alloca [256 x [256 x i128]]*, align 8
  %r2 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %r2, [256 x [256 x i128]]** %r, align 8
  %v = alloca [256 x i128]*, align 8
  %v3 = alloca [256 x i128], align 8
  store [256 x i128]* %v3, [256 x i128]** %v, align 8
  %u = alloca [256 x i128]*, align 8
  %u4 = alloca [256 x i128], align 8
  store [256 x i128]* %u4, [256 x i128]** %u, align 8
  %ret = alloca [256 x i128]*, align 8
  %ret5 = alloca [256 x i128], align 8
  store [256 x i128]* %ret5, [256 x i128]** %ret, align 8
  %amodp = alloca [256 x [256 x i128]]*, align 8
  %amodp6 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %amodp6, [256 x [256 x i128]]** %amodp, align 8
  %b = alloca [256 x i128]*, align 8
  %b7 = alloca [256 x i128], align 8
  store [256 x i128]* %b7, [256 x i128]** %b, align 8
  %i = alloca i128, align 8
  %i8 = call i128 @fn_intrinsic_inline_init()
  store i128 %i8, i128* %i, align 4
  %ka = alloca i128, align 8
  %ka9 = call i128 @fn_intrinsic_inline_init()
  store i128 %ka9, i128* %ka, align 4
  %newv = alloca [256 x i128]*, align 8
  %newv10 = alloca [256 x i128], align 8
  store [256 x i128]* %newv10, [256 x i128]** %newv, align 8
  %newu = alloca [256 x i128]*, align 8
  %newu11 = alloca [256 x i128], align 8
  store [256 x i128]* %newu11, [256 x i128]** %newu, align 8
  %l = alloca i128, align 8
  %l12 = call i128 @fn_intrinsic_inline_init()
  store i128 %l12, i128* %l, align 4
  %a = alloca [256 x i128]*, align 8
  %a13 = alloca [256 x i128], align 8
  store [256 x i128]* %a13, [256 x i128]** %a, align 8
  %x = alloca [256 x i128]*, align 8
  %x14 = alloca [256 x i128], align 8
  store [256 x i128]* %x14, [256 x i128]** %x, align 8
  %y = alloca [256 x i128]*, align 8
  %y15 = alloca [256 x i128], align 8
  store [256 x i128]* %y15, [256 x i128]** %y, align 8
  %n = load i128, i128* %find_fp_inverse.n.declare_arg, align 4
  %k = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %num = load [256 x i128]*, [256 x i128]** %find_fp_inverse.num.declare_arg, align 8
  %p = load [256 x i128]*, [256 x i128]** %find_fp_inverse.p.declare_arg, align 8
  %call = call [256 x [256 x i128]]* @long_div2(i128 %n, i128 %k, i128 0, [256 x i128]* %num, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call, [256 x [256 x i128]]** %amodp, align 8
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %a, align 8
  %uniform_array16 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array16, [256 x i128]** %b, align 8
  %uniform_array17 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array17, [256 x i128]** %x, align 8
  %uniform_array18 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array18, [256 x i128]** %y, align 8
  %uniform_array19 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array19, [256 x i128]** %u, align 8
  %uniform_array20 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array20, [256 x i128]** %v, align 8
  %uniform_array21 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array21, [256 x i128]** %ret, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %amodp22 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %amodp, align 8
  %i23 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %amodp22, i128 0, i128 1, i128 %i23
  %amodp24 = load i128, i128* %array_getter, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %a, align 8
  %i25 = load i128, i128* %i, align 4
  %a26 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i25
  store i128 %amodp24, i128* %a26, align 4
  %p27 = load [256 x i128]*, [256 x i128]** %find_fp_inverse.p.declare_arg, align 8
  %i28 = load i128, i128* %i, align 4
  %array_getter29 = getelementptr inbounds [256 x i128], [256 x i128]* %p27, i128 0, i128 %i28
  %p30 = load i128, i128* %array_getter29, align 4
  %ptr_getter31 = load [256 x i128]*, [256 x i128]** %b, align 8
  %i32 = load i128, i128* %i, align 4
  %b33 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter31, i128 0, i128 %i32
  store i128 %p30, i128* %b33, align 4
  %ptr_getter34 = load [256 x i128]*, [256 x i128]** %x, align 8
  %i35 = load i128, i128* %i, align 4
  %x36 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter34, i128 0, i128 %i35
  store i128 0, i128* %x36, align 4
  %ptr_getter37 = load [256 x i128]*, [256 x i128]** %y, align 8
  %i38 = load i128, i128* %i, align 4
  %y39 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter37, i128 0, i128 %i38
  store i128 0, i128* %y39, align 4
  %ptr_getter40 = load [256 x i128]*, [256 x i128]** %u, align 8
  %i41 = load i128, i128* %i, align 4
  %u42 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter40, i128 0, i128 %i41
  store i128 0, i128* %u42, align 4
  %ptr_getter43 = load [256 x i128]*, [256 x i128]** %v, align 8
  %i44 = load i128, i128* %i, align 4
  %v45 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter43, i128 0, i128 %i44
  store i128 0, i128* %v45, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i46 = load i128, i128* %i, align 4
  %add = add i128 %i46, 1
  store i128 %add, i128* %i, align 4
  %i47 = load i128, i128* %i, align 4
  %k48 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %slt = icmp slt i128 %i47, %k48
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %ptr_getter49 = load [256 x i128]*, [256 x i128]** %y, align 8
  %y50 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter49, i128 0, i128 0
  store i128 1, i128* %y50, align 4
  %ptr_getter51 = load [256 x i128]*, [256 x i128]** %u, align 8
  %u52 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter51, i128 0, i128 0
  store i128 1, i128* %u52, align 4
  store i128 0, i128* %l, align 4
  br label %loop.body53

loop.body53:                                      ; preds = %loop.latch210, %loop.exit
  store i128 0, i128* %ka, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body54

loop.body54:                                      ; preds = %loop.latch61, %loop.body53
  %a55 = load [256 x i128]*, [256 x i128]** %a, align 8
  %i56 = load i128, i128* %i, align 4
  %array_getter57 = getelementptr inbounds [256 x i128], [256 x i128]* %a55, i128 0, i128 %i56
  %a58 = load i128, i128* %array_getter57, align 4
  %ne = icmp ne i128 %a58, 0
  br i1 %ne, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body54
  %i59 = load i128, i128* %i, align 4
  %add60 = add i128 %i59, 1
  store i128 %add60, i128* %ka, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body54
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch61

loop.latch61:                                     ; preds = %if.exit
  %i62 = load i128, i128* %i, align 4
  %add63 = add i128 %i62, 1
  store i128 %add63, i128* %i, align 4
  %i64 = load i128, i128* %i, align 4
  %k65 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %slt66 = icmp slt i128 %i64, %k65
  br i1 %slt66, label %loop.body54, label %loop.exit67

loop.exit67:                                      ; preds = %loop.latch61
  %ka70 = load i128, i128* %ka, align 4
  %eq = icmp eq i128 %ka70, 0
  br i1 %eq, label %if.true68, label %if.false69

if.true68:                                        ; preds = %loop.exit67
  store i128 0, i128* %i, align 4
  br label %loop.body71

if.false69:                                       ; preds = %loop.exit67
  br label %if.exit87

loop.body71:                                      ; preds = %loop.latch79, %if.true68
  %x72 = load [256 x i128]*, [256 x i128]** %x, align 8
  %i73 = load i128, i128* %i, align 4
  %array_getter74 = getelementptr inbounds [256 x i128], [256 x i128]* %x72, i128 0, i128 %i73
  %x75 = load i128, i128* %array_getter74, align 4
  %ptr_getter76 = load [256 x i128]*, [256 x i128]** %ret, align 8
  %i77 = load i128, i128* %i, align 4
  %ret78 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter76, i128 0, i128 %i77
  store i128 %x75, i128* %ret78, align 4
  br label %loop.latch79

loop.latch79:                                     ; preds = %loop.body71
  %i80 = load i128, i128* %i, align 4
  %add81 = add i128 %i80, 1
  store i128 %add81, i128* %i, align 4
  %i82 = load i128, i128* %i, align 4
  %k83 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %slt84 = icmp slt i128 %i82, %k83
  br i1 %slt84, label %loop.body71, label %loop.exit85

loop.exit85:                                      ; preds = %loop.latch79
  %ret86 = load [256 x i128]*, [256 x i128]** %ret, align 8
  ret [256 x i128]* %ret86

if.exit87:                                        ; preds = %if.false69
  %n88 = load i128, i128* %find_fp_inverse.n.declare_arg, align 4
  %ka89 = load i128, i128* %ka, align 4
  %k90 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %ka91 = load i128, i128* %ka, align 4
  %sub = sub i128 %k90, %ka91
  %b92 = load [256 x i128]*, [256 x i128]** %b, align 8
  %a93 = load [256 x i128]*, [256 x i128]** %a, align 8
  %call94 = call [256 x [256 x i128]]* @long_div2(i128 %n88, i128 %ka89, i128 %sub, [256 x i128]* %b92, [256 x i128]* %a93)
  store [256 x [256 x i128]]* %call94, [256 x [256 x i128]]** %r, align 8
  %uniform_array95 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array95, [256 x i128]** %q, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body96

loop.body96:                                      ; preds = %loop.latch104, %if.exit87
  %r97 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %r, align 8
  %i98 = load i128, i128* %i, align 4
  %array_getter99 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %r97, i128 0, i128 0, i128 %i98
  %r100 = load i128, i128* %array_getter99, align 4
  %ptr_getter101 = load [256 x i128]*, [256 x i128]** %q, align 8
  %i102 = load i128, i128* %i, align 4
  %q103 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter101, i128 0, i128 %i102
  store i128 %r100, i128* %q103, align 4
  br label %loop.latch104

loop.latch104:                                    ; preds = %loop.body96
  %i105 = load i128, i128* %i, align 4
  %add106 = add i128 %i105, 1
  store i128 %add106, i128* %i, align 4
  %i107 = load i128, i128* %i, align 4
  %k108 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %ka109 = load i128, i128* %ka, align 4
  %sub110 = sub i128 %k108, %ka109
  %add111 = add i128 %sub110, 1
  %slt112 = icmp slt i128 %i107, %add111
  br i1 %slt112, label %loop.body96, label %loop.exit113

loop.exit113:                                     ; preds = %loop.latch104
  %k114 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %ka115 = load i128, i128* %ka, align 4
  %sub116 = sub i128 %k114, %ka115
  %add117 = add i128 %sub116, 1
  store i128 %add117, i128* %i, align 4
  br label %loop.body118

loop.body118:                                     ; preds = %loop.latch122, %loop.exit113
  %ptr_getter119 = load [256 x i128]*, [256 x i128]** %q, align 8
  %i120 = load i128, i128* %i, align 4
  %q121 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter119, i128 0, i128 %i120
  store i128 0, i128* %q121, align 4
  br label %loop.latch122

loop.latch122:                                    ; preds = %loop.body118
  %i123 = load i128, i128* %i, align 4
  %add124 = add i128 %i123, 1
  store i128 %add124, i128* %i, align 4
  %i125 = load i128, i128* %i, align 4
  %k126 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %slt127 = icmp slt i128 %i125, %k126
  br i1 %slt127, label %loop.body118, label %loop.exit128

loop.exit128:                                     ; preds = %loop.latch122
  %n129 = load i128, i128* %find_fp_inverse.n.declare_arg, align 4
  %k130 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %x131 = load [256 x i128]*, [256 x i128]** %x, align 8
  %n132 = load i128, i128* %find_fp_inverse.n.declare_arg, align 4
  %k133 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %u134 = load [256 x i128]*, [256 x i128]** %u, align 8
  %q135 = load [256 x i128]*, [256 x i128]** %q, align 8
  %p136 = load [256 x i128]*, [256 x i128]** %find_fp_inverse.p.declare_arg, align 8
  %call137 = call [256 x i128]* @prod_mod(i128 %n132, i128 %k133, [256 x i128]* %u134, [256 x i128]* %q135, [256 x i128]* %p136)
  %p138 = load [256 x i128]*, [256 x i128]** %find_fp_inverse.p.declare_arg, align 8
  %call139 = call [256 x i128]* @long_sub_mod(i128 %n129, i128 %k130, [256 x i128]* %x131, [256 x i128]* %call137, [256 x i128]* %p138)
  store [256 x i128]* %call139, [256 x i128]** %newu, align 8
  %n140 = load i128, i128* %find_fp_inverse.n.declare_arg, align 4
  %k141 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %y142 = load [256 x i128]*, [256 x i128]** %y, align 8
  %n143 = load i128, i128* %find_fp_inverse.n.declare_arg, align 4
  %k144 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %v145 = load [256 x i128]*, [256 x i128]** %v, align 8
  %q146 = load [256 x i128]*, [256 x i128]** %q, align 8
  %p147 = load [256 x i128]*, [256 x i128]** %find_fp_inverse.p.declare_arg, align 8
  %call148 = call [256 x i128]* @prod_mod(i128 %n143, i128 %k144, [256 x i128]* %v145, [256 x i128]* %q146, [256 x i128]* %p147)
  %p149 = load [256 x i128]*, [256 x i128]** %find_fp_inverse.p.declare_arg, align 8
  %call150 = call [256 x i128]* @long_sub_mod(i128 %n140, i128 %k141, [256 x i128]* %y142, [256 x i128]* %call148, [256 x i128]* %p149)
  store [256 x i128]* %call150, [256 x i128]** %newv, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body151

loop.body151:                                     ; preds = %loop.latch203, %loop.exit128
  %a152 = load [256 x i128]*, [256 x i128]** %a, align 8
  %i153 = load i128, i128* %i, align 4
  %array_getter154 = getelementptr inbounds [256 x i128], [256 x i128]* %a152, i128 0, i128 %i153
  %a155 = load i128, i128* %array_getter154, align 4
  %ptr_getter156 = load [256 x i128]*, [256 x i128]** %b, align 8
  %i157 = load i128, i128* %i, align 4
  %b158 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter156, i128 0, i128 %i157
  store i128 %a155, i128* %b158, align 4
  %i161 = load i128, i128* %i, align 4
  %ka162 = load i128, i128* %ka, align 4
  %slt163 = icmp slt i128 %i161, %ka162
  br i1 %slt163, label %if.true159, label %if.false160

if.true159:                                       ; preds = %loop.body151
  %r164 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %r, align 8
  %i165 = load i128, i128* %i, align 4
  %array_getter166 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %r164, i128 0, i128 1, i128 %i165
  %r167 = load i128, i128* %array_getter166, align 4
  %ptr_getter168 = load [256 x i128]*, [256 x i128]** %a, align 8
  %i169 = load i128, i128* %i, align 4
  %a170 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter168, i128 0, i128 %i169
  store i128 %r167, i128* %a170, align 4
  br label %if.exit174

if.false160:                                      ; preds = %loop.body151
  %ptr_getter171 = load [256 x i128]*, [256 x i128]** %a, align 8
  %i172 = load i128, i128* %i, align 4
  %a173 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter171, i128 0, i128 %i172
  store i128 0, i128* %a173, align 4
  br label %if.exit174

if.exit174:                                       ; preds = %if.false160, %if.true159
  %u175 = load [256 x i128]*, [256 x i128]** %u, align 8
  %i176 = load i128, i128* %i, align 4
  %array_getter177 = getelementptr inbounds [256 x i128], [256 x i128]* %u175, i128 0, i128 %i176
  %u178 = load i128, i128* %array_getter177, align 4
  %ptr_getter179 = load [256 x i128]*, [256 x i128]** %x, align 8
  %i180 = load i128, i128* %i, align 4
  %x181 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter179, i128 0, i128 %i180
  store i128 %u178, i128* %x181, align 4
  %v182 = load [256 x i128]*, [256 x i128]** %v, align 8
  %i183 = load i128, i128* %i, align 4
  %array_getter184 = getelementptr inbounds [256 x i128], [256 x i128]* %v182, i128 0, i128 %i183
  %v185 = load i128, i128* %array_getter184, align 4
  %ptr_getter186 = load [256 x i128]*, [256 x i128]** %y, align 8
  %i187 = load i128, i128* %i, align 4
  %y188 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter186, i128 0, i128 %i187
  store i128 %v185, i128* %y188, align 4
  %newu189 = load [256 x i128]*, [256 x i128]** %newu, align 8
  %i190 = load i128, i128* %i, align 4
  %array_getter191 = getelementptr inbounds [256 x i128], [256 x i128]* %newu189, i128 0, i128 %i190
  %newu192 = load i128, i128* %array_getter191, align 4
  %ptr_getter193 = load [256 x i128]*, [256 x i128]** %u, align 8
  %i194 = load i128, i128* %i, align 4
  %u195 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter193, i128 0, i128 %i194
  store i128 %newu192, i128* %u195, align 4
  %newv196 = load [256 x i128]*, [256 x i128]** %newv, align 8
  %i197 = load i128, i128* %i, align 4
  %array_getter198 = getelementptr inbounds [256 x i128], [256 x i128]* %newv196, i128 0, i128 %i197
  %newv199 = load i128, i128* %array_getter198, align 4
  %ptr_getter200 = load [256 x i128]*, [256 x i128]** %v, align 8
  %i201 = load i128, i128* %i, align 4
  %v202 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter200, i128 0, i128 %i201
  store i128 %newv199, i128* %v202, align 4
  br label %loop.latch203

loop.latch203:                                    ; preds = %if.exit174
  %i204 = load i128, i128* %i, align 4
  %add205 = add i128 %i204, 1
  store i128 %add205, i128* %i, align 4
  %i206 = load i128, i128* %i, align 4
  %k207 = load i128, i128* %find_fp_inverse.k.declare_arg, align 4
  %slt208 = icmp slt i128 %i206, %k207
  br i1 %slt208, label %loop.body151, label %loop.exit209

loop.exit209:                                     ; preds = %loop.latch203
  br label %loop.latch210

loop.latch210:                                    ; preds = %loop.exit209
  %l211 = load i128, i128* %l, align 4
  %add212 = add i128 %l211, 1
  store i128 %add212, i128* %l, align 4
  %l213 = load i128, i128* %l, align 4
  %slt214 = icmp slt i128 %l213, 1000
  br i1 %slt214, label %loop.body53, label %loop.exit215

loop.exit215:                                     ; preds = %loop.latch210
  %ret216 = load [256 x i128]*, [256 x i128]** %ret, align 8
  ret [256 x i128]* %ret216
}

define [256 x i128]* @mod_inv(i128 %0, i128 %1, [256 x i128]* %2, [256 x i128]* %3) {
entry:
  %mod_inv.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %mod_inv.n.declare_arg, align 4
  %mod_inv.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %mod_inv.k.declare_arg, align 4
  %mod_inv.a.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %2, [256 x i128]** %mod_inv.a.declare_arg, align 8
  %mod_inv.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %mod_inv.p.declare_arg, align 8
  %ret = alloca [256 x i128]*, align 8
  %ret1 = alloca [256 x i128], align 8
  store [256 x i128]* %ret1, [256 x i128]** %ret, align 8
  %two = alloca [256 x i128]*, align 8
  %two2 = alloca [256 x i128], align 8
  store [256 x i128]* %two2, [256 x i128]** %two, align 8
  %out = alloca [256 x i128]*, align 8
  %out3 = alloca [256 x i128], align 8
  store [256 x i128]* %out3, [256 x i128]** %out, align 8
  %isZero = alloca i128, align 8
  %isZero4 = call i128 @fn_intrinsic_inline_init()
  store i128 %isZero4, i128* %isZero, align 4
  %pCopy = alloca [256 x i128]*, align 8
  %pCopy5 = alloca [256 x i128], align 8
  store [256 x i128]* %pCopy5, [256 x i128]** %pCopy, align 8
  %i = alloca i128, align 8
  %i6 = call i128 @fn_intrinsic_inline_init()
  store i128 %i6, i128* %i, align 4
  %pMinusTwo = alloca [256 x i128]*, align 8
  %pMinusTwo7 = alloca [256 x i128], align 8
  store [256 x i128]* %pMinusTwo7, [256 x i128]** %pMinusTwo, align 8
  store i128 1, i128* %isZero, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %mod_inv.a.declare_arg, align 8
  %i8 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i8
  %a9 = load i128, i128* %array_getter, align 4
  %ne = icmp ne i128 %a9, 0
  br i1 %ne, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  store i128 0, i128* %isZero, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %i10 = load i128, i128* %i, align 4
  %add = add i128 %i10, 1
  store i128 %add, i128* %i, align 4
  %i11 = load i128, i128* %i, align 4
  %k = load i128, i128* %mod_inv.k.declare_arg, align 4
  %slt = icmp slt i128 %i11, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %isZero14 = load i128, i128* %isZero, align 4
  %eq = icmp eq i128 %isZero14, 1
  br i1 %eq, label %if.true12, label %if.false13

if.true12:                                        ; preds = %loop.exit
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %ret, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body15

if.false13:                                       ; preds = %loop.exit
  br label %if.exit26

loop.body15:                                      ; preds = %loop.latch18, %if.true12
  %ptr_getter = load [256 x i128]*, [256 x i128]** %ret, align 8
  %i16 = load i128, i128* %i, align 4
  %ret17 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i16
  store i128 0, i128* %ret17, align 4
  br label %loop.latch18

loop.latch18:                                     ; preds = %loop.body15
  %i19 = load i128, i128* %i, align 4
  %add20 = add i128 %i19, 1
  store i128 %add20, i128* %i, align 4
  %i21 = load i128, i128* %i, align 4
  %k22 = load i128, i128* %mod_inv.k.declare_arg, align 4
  %slt23 = icmp slt i128 %i21, %k22
  br i1 %slt23, label %loop.body15, label %loop.exit24

loop.exit24:                                      ; preds = %loop.latch18
  %ret25 = load [256 x i128]*, [256 x i128]** %ret, align 8
  ret [256 x i128]* %ret25

if.exit26:                                        ; preds = %if.false13
  %uniform_array27 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array27, [256 x i128]** %pCopy, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body28

loop.body28:                                      ; preds = %loop.latch44, %if.exit26
  %i31 = load i128, i128* %i, align 4
  %k32 = load i128, i128* %mod_inv.k.declare_arg, align 4
  %slt33 = icmp slt i128 %i31, %k32
  br i1 %slt33, label %if.true29, label %if.false30

if.true29:                                        ; preds = %loop.body28
  %p = load [256 x i128]*, [256 x i128]** %mod_inv.p.declare_arg, align 8
  %i34 = load i128, i128* %i, align 4
  %array_getter35 = getelementptr inbounds [256 x i128], [256 x i128]* %p, i128 0, i128 %i34
  %p36 = load i128, i128* %array_getter35, align 4
  %ptr_getter37 = load [256 x i128]*, [256 x i128]** %pCopy, align 8
  %i38 = load i128, i128* %i, align 4
  %pCopy39 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter37, i128 0, i128 %i38
  store i128 %p36, i128* %pCopy39, align 4
  br label %if.exit43

if.false30:                                       ; preds = %loop.body28
  %ptr_getter40 = load [256 x i128]*, [256 x i128]** %pCopy, align 8
  %i41 = load i128, i128* %i, align 4
  %pCopy42 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter40, i128 0, i128 %i41
  store i128 0, i128* %pCopy42, align 4
  br label %if.exit43

if.exit43:                                        ; preds = %if.false30, %if.true29
  br label %loop.latch44

loop.latch44:                                     ; preds = %if.exit43
  %i45 = load i128, i128* %i, align 4
  %add46 = add i128 %i45, 1
  store i128 %add46, i128* %i, align 4
  %i47 = load i128, i128* %i, align 4
  %slt48 = icmp slt i128 %i47, 50
  br i1 %slt48, label %loop.body28, label %loop.exit49

loop.exit49:                                      ; preds = %loop.latch44
  %uniform_array50 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array50, [256 x i128]** %two, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body51

loop.body51:                                      ; preds = %loop.latch55, %loop.exit49
  %ptr_getter52 = load [256 x i128]*, [256 x i128]** %two, align 8
  %i53 = load i128, i128* %i, align 4
  %two54 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter52, i128 0, i128 %i53
  store i128 0, i128* %two54, align 4
  br label %loop.latch55

loop.latch55:                                     ; preds = %loop.body51
  %i56 = load i128, i128* %i, align 4
  %add57 = add i128 %i56, 1
  store i128 %add57, i128* %i, align 4
  %i58 = load i128, i128* %i, align 4
  %slt59 = icmp slt i128 %i58, 50
  br i1 %slt59, label %loop.body51, label %loop.exit60

loop.exit60:                                      ; preds = %loop.latch55
  %ptr_getter61 = load [256 x i128]*, [256 x i128]** %two, align 8
  %two62 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter61, i128 0, i128 0
  store i128 2, i128* %two62, align 4
  %uniform_array63 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array63, [256 x i128]** %pMinusTwo, align 8
  %n = load i128, i128* %mod_inv.n.declare_arg, align 4
  %k64 = load i128, i128* %mod_inv.k.declare_arg, align 4
  %pCopy65 = load [256 x i128]*, [256 x i128]** %pCopy, align 8
  %two66 = load [256 x i128]*, [256 x i128]** %two, align 8
  %call = call [256 x i128]* @long_sub(i128 %n, i128 %k64, [256 x i128]* %pCopy65, [256 x i128]* %two66)
  store [256 x i128]* %call, [256 x i128]** %pMinusTwo, align 8
  %uniform_array67 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array67, [256 x i128]** %out, align 8
  %n68 = load i128, i128* %mod_inv.n.declare_arg, align 4
  %k69 = load i128, i128* %mod_inv.k.declare_arg, align 4
  %a70 = load [256 x i128]*, [256 x i128]** %mod_inv.a.declare_arg, align 8
  %pCopy71 = load [256 x i128]*, [256 x i128]** %pCopy, align 8
  %pMinusTwo72 = load [256 x i128]*, [256 x i128]** %pMinusTwo, align 8
  %call73 = call [256 x i128]* @mod_exp(i128 %n68, i128 %k69, [256 x i128]* %a70, [256 x i128]* %pCopy71, [256 x i128]* %pMinusTwo72)
  store [256 x i128]* %call73, [256 x i128]** %out, align 8
  %out74 = load [256 x i128]*, [256 x i128]** %out, align 8
  ret [256 x i128]* %out74
}

define void @fn_template_init_fp2sgn0(%struct_template_circuit_fp2sgn0* %0) {
entry:
  %Fp2Sgn0 = alloca %struct_template_circuit_fp2sgn0*, align 8
  store %struct_template_circuit_fp2sgn0* %0, %struct_template_circuit_fp2sgn0** %Fp2Sgn0, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %0, i32 0, i32 0
  %fp2sgn0.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2sgn0.n.declare_arg = alloca i128, align 8
  store i128 %fp2sgn0.n.read_arg_inner, i128* %fp2sgn0.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %0, i32 0, i32 1
  %fp2sgn0.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2sgn0.k.declare_arg = alloca i128, align 8
  store i128 %fp2sgn0.k.read_arg_inner, i128* %fp2sgn0.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %0, i32 0, i32 2
  %fp2sgn0.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fp2sgn0.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2sgn0.p.read_arg_inner, [256 x i128]** %fp2sgn0.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %0, i32 0, i32 3
  %fp2sgn0.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fp2sgn0.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2sgn0.in.read_input_inner, [256 x [256 x i128]]** %fp2sgn0.in.declare_input, align 8
  %fp2sgn0.out.declare_output = alloca i128, align 8
  %out = call i128 @fn_intrinsic_inline_init()
  store i128 %out, i128* %fp2sgn0.out.declare_output, align 4
  %i = alloca i128, align 8
  %i4 = call i128 @fn_intrinsic_inline_init()
  store i128 %i4, i128* %i, align 4
  %fp2sgn0.sgn1.declare_inter = alloca i128, align 8
  %sgn1 = call i128 @fn_intrinsic_inline_init()
  store i128 %sgn1, i128* %fp2sgn0.sgn1.declare_inter, align 4
  %idx = alloca i128, align 8
  %idx5 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx5, i128* %idx, align 4
  %sgn = alloca [256 x %struct_template_circuit_fpsgn0*]*, align 8
  %sgn6 = alloca [256 x %struct_template_circuit_fpsgn0*], align 8
  store [256 x %struct_template_circuit_fpsgn0*]* %sgn6, [256 x %struct_template_circuit_fpsgn0*]** %sgn, align 8
  %isZero = alloca %struct_template_circuit_bigiszero*, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch32, %entry
  %n = load i128, i128* %fp2sgn0.n.declare_arg, align 4
  %k = load i128, i128* %fp2sgn0.k.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2sgn0.p.declare_arg, align 8
  %call = call %struct_template_circuit_fpsgn0* @fn_template_build_fpsgn0(i128 %n, i128 %k, [256 x i128]* %p)
  %ptr_getter = load [256 x %struct_template_circuit_fpsgn0*]*, [256 x %struct_template_circuit_fpsgn0*]** %sgn, align 8
  %i7 = load i128, i128* %i, align 4
  %sgn8 = getelementptr inbounds [256 x %struct_template_circuit_fpsgn0*], [256 x %struct_template_circuit_fpsgn0*]* %ptr_getter, i128 0, i128 %i7
  store %struct_template_circuit_fpsgn0* %call, %struct_template_circuit_fpsgn0** %sgn8, align 8
  store i128 0, i128* %idx, align 4
  br label %loop.body9

loop.body9:                                       ; preds = %loop.latch, %loop.body
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2sgn0.in.declare_input, align 8
  %i10 = load i128, i128* %i, align 4
  %idx11 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %i10, i128 %idx11
  %in12 = load i128, i128* %array_getter, align 4
  %sgn13 = load [256 x %struct_template_circuit_fpsgn0*]*, [256 x %struct_template_circuit_fpsgn0*]** %sgn, align 8
  %i14 = load i128, i128* %i, align 4
  %array_getter15 = getelementptr inbounds [256 x %struct_template_circuit_fpsgn0*], [256 x %struct_template_circuit_fpsgn0*]* %sgn13, i128 0, i128 %i14
  %sgn16 = load %struct_template_circuit_fpsgn0*, %struct_template_circuit_fpsgn0** %array_getter15, align 8
  %struct_getter17 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %sgn16, i32 0, i32 3
  %fpsgn0.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter17, align 8
  %idx18 = load i128, i128* %idx, align 4
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsgn0.in.read_input_outter, i128 0, i128 %idx18
  %sgn20 = load i128, i128* %array_getter19, align 4
  call void @fn_intrinsic_add_constraint(i128 %sgn20, i128 %in12, i1* @constraint.308)
  %ptr_getter21 = load [256 x %struct_template_circuit_fpsgn0*]*, [256 x %struct_template_circuit_fpsgn0*]** %sgn, align 8
  %i22 = load i128, i128* %i, align 4
  %array_getter23 = getelementptr inbounds [256 x %struct_template_circuit_fpsgn0*], [256 x %struct_template_circuit_fpsgn0*]* %ptr_getter21, i128 0, i128 %i22
  %sgn24 = load %struct_template_circuit_fpsgn0*, %struct_template_circuit_fpsgn0** %array_getter23, align 8
  %struct_getter25 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %sgn24, i32 0, i32 3
  %fpsgn0.in.read_input_outter26 = load [256 x i128]*, [256 x i128]** %struct_getter25, align 8
  %idx27 = load i128, i128* %idx, align 4
  %sgn28 = getelementptr inbounds [256 x i128], [256 x i128]* %fpsgn0.in.read_input_outter26, i128 0, i128 %idx27
  store i128 %in12, i128* %sgn28, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body9
  %idx29 = load i128, i128* %idx, align 4
  %add = add i128 %idx29, 1
  store i128 %add, i128* %idx, align 4
  %idx30 = load i128, i128* %idx, align 4
  %k31 = load i128, i128* %fp2sgn0.k.declare_arg, align 4
  %slt = icmp slt i128 %idx30, %k31
  br i1 %slt, label %loop.body9, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch32

loop.latch32:                                     ; preds = %loop.exit
  %i33 = load i128, i128* %i, align 4
  %add34 = add i128 %i33, 1
  store i128 %add34, i128* %i, align 4
  %i35 = load i128, i128* %i, align 4
  %slt36 = icmp slt i128 %i35, 2
  br i1 %slt36, label %loop.body, label %loop.exit37

loop.exit37:                                      ; preds = %loop.latch32
  %k38 = load i128, i128* %fp2sgn0.k.declare_arg, align 4
  %call39 = call %struct_template_circuit_bigiszero* @fn_template_build_bigiszero(i128 %k38)
  store %struct_template_circuit_bigiszero* %call39, %struct_template_circuit_bigiszero** %isZero, align 8
  store i128 0, i128* %idx, align 4
  br label %loop.body40

loop.body40:                                      ; preds = %loop.latch55, %loop.exit37
  %in41 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2sgn0.in.declare_input, align 8
  %idx42 = load i128, i128* %idx, align 4
  %array_getter43 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in41, i128 0, i128 0, i128 %idx42
  %in44 = load i128, i128* %array_getter43, align 4
  %isZero45 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %isZero, align 8
  %struct_getter46 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %isZero45, i32 0, i32 1
  %bigiszero.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter46, align 8
  %idx47 = load i128, i128* %idx, align 4
  %array_getter48 = getelementptr inbounds [256 x i128], [256 x i128]* %bigiszero.in.read_input_outter, i128 0, i128 %idx47
  %isZero49 = load i128, i128* %array_getter48, align 4
  call void @fn_intrinsic_add_constraint(i128 %isZero49, i128 %in44, i1* @constraint.309)
  %ptr_getter50 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %isZero, align 8
  %struct_getter51 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %ptr_getter50, i32 0, i32 1
  %bigiszero.in.read_input_outter52 = load [256 x i128]*, [256 x i128]** %struct_getter51, align 8
  %idx53 = load i128, i128* %idx, align 4
  %isZero54 = getelementptr inbounds [256 x i128], [256 x i128]* %bigiszero.in.read_input_outter52, i128 0, i128 %idx53
  store i128 %in44, i128* %isZero54, align 4
  br label %loop.latch55

loop.latch55:                                     ; preds = %loop.body40
  %idx56 = load i128, i128* %idx, align 4
  %add57 = add i128 %idx56, 1
  store i128 %add57, i128* %idx, align 4
  %idx58 = load i128, i128* %idx, align 4
  %k59 = load i128, i128* %fp2sgn0.k.declare_arg, align 4
  %slt60 = icmp slt i128 %idx58, %k59
  br i1 %slt60, label %loop.body40, label %loop.exit61

loop.exit61:                                      ; preds = %loop.latch55
  %isZero62 = load %struct_template_circuit_bigiszero*, %struct_template_circuit_bigiszero** %isZero, align 8
  %struct_getter63 = getelementptr inbounds %struct_template_circuit_bigiszero, %struct_template_circuit_bigiszero* %isZero62, i32 0, i32 2
  %bigiszero.out.read_output_outter = load i128, i128* %struct_getter63, align 4
  %sgn64 = load [256 x %struct_template_circuit_fpsgn0*]*, [256 x %struct_template_circuit_fpsgn0*]** %sgn, align 8
  %array_getter65 = getelementptr inbounds [256 x %struct_template_circuit_fpsgn0*], [256 x %struct_template_circuit_fpsgn0*]* %sgn64, i128 0, i128 1
  %sgn66 = load %struct_template_circuit_fpsgn0*, %struct_template_circuit_fpsgn0** %array_getter65, align 8
  %struct_getter67 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %sgn66, i32 0, i32 5
  %fpsgn0.out.read_output_outter = load i128, i128* %struct_getter67, align 4
  %mul = mul i128 %bigiszero.out.read_output_outter, %fpsgn0.out.read_output_outter
  %sgn168 = load i128, i128* %fp2sgn0.sgn1.declare_inter, align 4
  call void @fn_intrinsic_add_constraint(i128 %sgn168, i128 %mul, i1* @constraint.310)
  %ptr_getter69 = load %struct_template_circuit_fp2sgn0*, %struct_template_circuit_fp2sgn0** %Fp2Sgn0, align 8
  %fp2sgn0.sgn1.write_inter_inner = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %ptr_getter69, i32 0, i32 4
  store i128 %mul, i128* %fp2sgn0.sgn1.write_inter_inner, align 4
  %Fp2Sgn070 = load %struct_template_circuit_fp2sgn0*, %struct_template_circuit_fp2sgn0** %Fp2Sgn0, align 8
  %struct_getter71 = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %Fp2Sgn070, i32 0, i32 4
  %fp2sgn0.sgn1.read_inter_inner = load i128, i128* %struct_getter71, align 4
  store i128 %fp2sgn0.sgn1.read_inter_inner, i128* %fp2sgn0.sgn1.declare_inter, align 4
  %sgn72 = load [256 x %struct_template_circuit_fpsgn0*]*, [256 x %struct_template_circuit_fpsgn0*]** %sgn, align 8
  %array_getter73 = getelementptr inbounds [256 x %struct_template_circuit_fpsgn0*], [256 x %struct_template_circuit_fpsgn0*]* %sgn72, i128 0, i128 0
  %sgn74 = load %struct_template_circuit_fpsgn0*, %struct_template_circuit_fpsgn0** %array_getter73, align 8
  %struct_getter75 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %sgn74, i32 0, i32 5
  %fpsgn0.out.read_output_outter76 = load i128, i128* %struct_getter75, align 4
  %sgn177 = load i128, i128* %fp2sgn0.sgn1.declare_inter, align 4
  %add78 = add i128 %fpsgn0.out.read_output_outter76, %sgn177
  %sgn79 = load [256 x %struct_template_circuit_fpsgn0*]*, [256 x %struct_template_circuit_fpsgn0*]** %sgn, align 8
  %array_getter80 = getelementptr inbounds [256 x %struct_template_circuit_fpsgn0*], [256 x %struct_template_circuit_fpsgn0*]* %sgn79, i128 0, i128 0
  %sgn81 = load %struct_template_circuit_fpsgn0*, %struct_template_circuit_fpsgn0** %array_getter80, align 8
  %struct_getter82 = getelementptr inbounds %struct_template_circuit_fpsgn0, %struct_template_circuit_fpsgn0* %sgn81, i32 0, i32 5
  %fpsgn0.out.read_output_outter83 = load i128, i128* %struct_getter82, align 4
  %sgn184 = load i128, i128* %fp2sgn0.sgn1.declare_inter, align 4
  %mul85 = mul i128 %fpsgn0.out.read_output_outter83, %sgn184
  %sub = sub i128 %add78, %mul85
  %out86 = load i128, i128* %fp2sgn0.out.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %out86, i128 %sub, i1* @constraint.311)
  %ptr_getter87 = load %struct_template_circuit_fp2sgn0*, %struct_template_circuit_fp2sgn0** %Fp2Sgn0, align 8
  %fp2sgn0.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %ptr_getter87, i32 0, i32 5
  store i128 %sub, i128* %fp2sgn0.out.write_output_inner, align 4
  %Fp2Sgn088 = load %struct_template_circuit_fp2sgn0*, %struct_template_circuit_fp2sgn0** %Fp2Sgn0, align 8
  %struct_getter89 = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %Fp2Sgn088, i32 0, i32 5
  %fp2sgn0.out.read_output_inner = load i128, i128* %struct_getter89, align 4
  store i128 %fp2sgn0.out.read_output_inner, i128* %fp2sgn0.out.declare_output, align 4
  br label %exit

exit:                                             ; preds = %loop.exit61
  %sgn190 = load i128, i128* %fp2sgn0.sgn1.declare_inter, align 4
  %fp2sgn0.sgn1.write_inter_inner91 = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %0, i32 0, i32 4
  store i128 %sgn190, i128* %fp2sgn0.sgn1.write_inter_inner91, align 4
  %out92 = load i128, i128* %fp2sgn0.out.declare_output, align 4
  %fp2sgn0.out.write_output_inner93 = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %0, i32 0, i32 5
  store i128 %out92, i128* %fp2sgn0.out.write_output_inner93, align 4
  ret void
}

define %struct_template_circuit_fp2sgn0* @fn_template_build_fp2sgn0(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fp2sgn0 = alloca %struct_template_circuit_fp2sgn0, align 8
  %fp2sgn0.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %struct_template_circuit_fp2sgn0, i32 0, i32 0
  store i128 %0, i128* %fp2sgn0.n.write_arg_inner, align 4
  %fp2sgn0.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %struct_template_circuit_fp2sgn0, i32 0, i32 1
  store i128 %1, i128* %fp2sgn0.k.write_arg_inner, align 4
  %fp2sgn0.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2sgn0, %struct_template_circuit_fp2sgn0* %struct_template_circuit_fp2sgn0, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fp2sgn0.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2sgn0* %struct_template_circuit_fp2sgn0
}

define void @fn_template_init_signedfp2carrymodp(%struct_template_circuit_signedfp2carrymodp* %0) {
entry:
  %SignedFp2CarryModP = alloca %struct_template_circuit_signedfp2carrymodp*, align 8
  store %struct_template_circuit_signedfp2carrymodp* %0, %struct_template_circuit_signedfp2carrymodp** %SignedFp2CarryModP, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %0, i32 0, i32 0
  %signedfp2carrymodp.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %signedfp2carrymodp.n.declare_arg = alloca i128, align 8
  store i128 %signedfp2carrymodp.n.read_arg_inner, i128* %signedfp2carrymodp.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %0, i32 0, i32 1
  %signedfp2carrymodp.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %signedfp2carrymodp.k.declare_arg = alloca i128, align 8
  store i128 %signedfp2carrymodp.k.read_arg_inner, i128* %signedfp2carrymodp.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %0, i32 0, i32 2
  %signedfp2carrymodp.overflow.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %signedfp2carrymodp.overflow.declare_arg = alloca i128, align 8
  store i128 %signedfp2carrymodp.overflow.read_arg_inner, i128* %signedfp2carrymodp.overflow.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %0, i32 0, i32 3
  %signedfp2carrymodp.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %signedfp2carrymodp.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %signedfp2carrymodp.p.read_arg_inner, [256 x i128]** %signedfp2carrymodp.p.declare_arg, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %0, i32 0, i32 4
  %signedfp2carrymodp.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %signedfp2carrymodp.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2carrymodp.in.read_input_inner, [256 x [256 x i128]]** %signedfp2carrymodp.in.declare_input, align 8
  %m = alloca i128, align 8
  %m5 = call i128 @fn_intrinsic_inline_init()
  store i128 %m5, i128* %m, align 4
  %i = alloca i128, align 8
  %i6 = call i128 @fn_intrinsic_inline_init()
  store i128 %i6, i128* %i, align 4
  %carry = alloca [256 x %struct_template_circuit_signedfpcarrymodp*]*, align 8
  %carry7 = alloca [256 x %struct_template_circuit_signedfpcarrymodp*], align 8
  store [256 x %struct_template_circuit_signedfpcarrymodp*]* %carry7, [256 x %struct_template_circuit_signedfpcarrymodp*]** %carry, align 8
  %signedfp2carrymodp.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %signedfp2carrymodp.out.declare_output, align 8
  %signedfp2carrymodp.x.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall8 = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %X = bitcast i8* %malloccall8 to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %X, [256 x [256 x i128]]** %signedfp2carrymodp.x.declare_output, align 8
  %idx = alloca i128, align 8
  %idx9 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx9, i128* %idx, align 4
  %overflow = load i128, i128* %signedfp2carrymodp.overflow.declare_arg, align 4
  %n = load i128, i128* %signedfp2carrymodp.n.declare_arg, align 4
  %add = add i128 %overflow, %n
  %sub = sub i128 %add, 1
  %n10 = load i128, i128* %signedfp2carrymodp.n.declare_arg, align 4
  %sdiv = sdiv i128 %sub, %n10
  store i128 %sdiv, i128* %m, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch89, %entry
  %n11 = load i128, i128* %signedfp2carrymodp.n.declare_arg, align 4
  %k = load i128, i128* %signedfp2carrymodp.k.declare_arg, align 4
  %overflow12 = load i128, i128* %signedfp2carrymodp.overflow.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %signedfp2carrymodp.p.declare_arg, align 8
  %call = call %struct_template_circuit_signedfpcarrymodp* @fn_template_build_signedfpcarrymodp(i128 %n11, i128 %k, i128 %overflow12, [256 x i128]* %p)
  %ptr_getter = load [256 x %struct_template_circuit_signedfpcarrymodp*]*, [256 x %struct_template_circuit_signedfpcarrymodp*]** %carry, align 8
  %i13 = load i128, i128* %i, align 4
  %carry14 = getelementptr inbounds [256 x %struct_template_circuit_signedfpcarrymodp*], [256 x %struct_template_circuit_signedfpcarrymodp*]* %ptr_getter, i128 0, i128 %i13
  store %struct_template_circuit_signedfpcarrymodp* %call, %struct_template_circuit_signedfpcarrymodp** %carry14, align 8
  store i128 0, i128* %idx, align 4
  br label %loop.body15

loop.body15:                                      ; preds = %loop.latch, %loop.body
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2carrymodp.in.declare_input, align 8
  %i16 = load i128, i128* %i, align 4
  %idx17 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %i16, i128 %idx17
  %in18 = load i128, i128* %array_getter, align 4
  %carry19 = load [256 x %struct_template_circuit_signedfpcarrymodp*]*, [256 x %struct_template_circuit_signedfpcarrymodp*]** %carry, align 8
  %i20 = load i128, i128* %i, align 4
  %array_getter21 = getelementptr inbounds [256 x %struct_template_circuit_signedfpcarrymodp*], [256 x %struct_template_circuit_signedfpcarrymodp*]* %carry19, i128 0, i128 %i20
  %carry22 = load %struct_template_circuit_signedfpcarrymodp*, %struct_template_circuit_signedfpcarrymodp** %array_getter21, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %carry22, i32 0, i32 4
  %signedfpcarrymodp.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter23, align 8
  %idx24 = load i128, i128* %idx, align 4
  %array_getter25 = getelementptr inbounds [256 x i128], [256 x i128]* %signedfpcarrymodp.in.read_input_outter, i128 0, i128 %idx24
  %carry26 = load i128, i128* %array_getter25, align 4
  call void @fn_intrinsic_add_constraint(i128 %carry26, i128 %in18, i1* @constraint.312)
  %ptr_getter27 = load [256 x %struct_template_circuit_signedfpcarrymodp*]*, [256 x %struct_template_circuit_signedfpcarrymodp*]** %carry, align 8
  %i28 = load i128, i128* %i, align 4
  %array_getter29 = getelementptr inbounds [256 x %struct_template_circuit_signedfpcarrymodp*], [256 x %struct_template_circuit_signedfpcarrymodp*]* %ptr_getter27, i128 0, i128 %i28
  %carry30 = load %struct_template_circuit_signedfpcarrymodp*, %struct_template_circuit_signedfpcarrymodp** %array_getter29, align 8
  %struct_getter31 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %carry30, i32 0, i32 4
  %signedfpcarrymodp.in.read_input_outter32 = load [256 x i128]*, [256 x i128]** %struct_getter31, align 8
  %idx33 = load i128, i128* %idx, align 4
  %carry34 = getelementptr inbounds [256 x i128], [256 x i128]* %signedfpcarrymodp.in.read_input_outter32, i128 0, i128 %idx33
  store i128 %in18, i128* %carry34, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body15
  %idx35 = load i128, i128* %idx, align 4
  %add36 = add i128 %idx35, 1
  store i128 %add36, i128* %idx, align 4
  %idx37 = load i128, i128* %idx, align 4
  %k38 = load i128, i128* %signedfp2carrymodp.k.declare_arg, align 4
  %slt = icmp slt i128 %idx37, %k38
  br i1 %slt, label %loop.body15, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %idx, align 4
  br label %loop.body39

loop.body39:                                      ; preds = %loop.latch57, %loop.exit
  %carry40 = load [256 x %struct_template_circuit_signedfpcarrymodp*]*, [256 x %struct_template_circuit_signedfpcarrymodp*]** %carry, align 8
  %i41 = load i128, i128* %i, align 4
  %array_getter42 = getelementptr inbounds [256 x %struct_template_circuit_signedfpcarrymodp*], [256 x %struct_template_circuit_signedfpcarrymodp*]* %carry40, i128 0, i128 %i41
  %carry43 = load %struct_template_circuit_signedfpcarrymodp*, %struct_template_circuit_signedfpcarrymodp** %array_getter42, align 8
  %struct_getter44 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %carry43, i32 0, i32 5
  %signedfpcarrymodp.x.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter44, align 8
  %idx45 = load i128, i128* %idx, align 4
  %array_getter46 = getelementptr inbounds [256 x i128], [256 x i128]* %signedfpcarrymodp.x.read_output_outter, i128 0, i128 %idx45
  %carry47 = load i128, i128* %array_getter46, align 4
  %X48 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2carrymodp.x.declare_output, align 8
  %i49 = load i128, i128* %i, align 4
  %idx50 = load i128, i128* %idx, align 4
  %array_getter51 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X48, i128 0, i128 %i49, i128 %idx50
  %X52 = load i128, i128* %array_getter51, align 4
  call void @fn_intrinsic_add_constraint(i128 %X52, i128 %carry47, i1* @constraint.313)
  %ptr_getter53 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2carrymodp.x.declare_output, align 8
  %i54 = load i128, i128* %i, align 4
  %idx55 = load i128, i128* %idx, align 4
  %X56 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter53, i128 0, i128 %i54, i128 %idx55
  store i128 %carry47, i128* %X56, align 4
  br label %loop.latch57

loop.latch57:                                     ; preds = %loop.body39
  %idx58 = load i128, i128* %idx, align 4
  %add59 = add i128 %idx58, 1
  store i128 %add59, i128* %idx, align 4
  %idx60 = load i128, i128* %idx, align 4
  %m61 = load i128, i128* %m, align 4
  %slt62 = icmp slt i128 %idx60, %m61
  br i1 %slt62, label %loop.body39, label %loop.exit63

loop.exit63:                                      ; preds = %loop.latch57
  store i128 0, i128* %idx, align 4
  br label %loop.body64

loop.body64:                                      ; preds = %loop.latch82, %loop.exit63
  %carry65 = load [256 x %struct_template_circuit_signedfpcarrymodp*]*, [256 x %struct_template_circuit_signedfpcarrymodp*]** %carry, align 8
  %i66 = load i128, i128* %i, align 4
  %array_getter67 = getelementptr inbounds [256 x %struct_template_circuit_signedfpcarrymodp*], [256 x %struct_template_circuit_signedfpcarrymodp*]* %carry65, i128 0, i128 %i66
  %carry68 = load %struct_template_circuit_signedfpcarrymodp*, %struct_template_circuit_signedfpcarrymodp** %array_getter67, align 8
  %struct_getter69 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %carry68, i32 0, i32 6
  %signedfpcarrymodp.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter69, align 8
  %idx70 = load i128, i128* %idx, align 4
  %array_getter71 = getelementptr inbounds [256 x i128], [256 x i128]* %signedfpcarrymodp.out.read_output_outter, i128 0, i128 %idx70
  %carry72 = load i128, i128* %array_getter71, align 4
  %out73 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2carrymodp.out.declare_output, align 8
  %i74 = load i128, i128* %i, align 4
  %idx75 = load i128, i128* %idx, align 4
  %array_getter76 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out73, i128 0, i128 %i74, i128 %idx75
  %out77 = load i128, i128* %array_getter76, align 4
  call void @fn_intrinsic_add_constraint(i128 %out77, i128 %carry72, i1* @constraint.314)
  %ptr_getter78 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2carrymodp.out.declare_output, align 8
  %i79 = load i128, i128* %i, align 4
  %idx80 = load i128, i128* %idx, align 4
  %out81 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter78, i128 0, i128 %i79, i128 %idx80
  store i128 %carry72, i128* %out81, align 4
  br label %loop.latch82

loop.latch82:                                     ; preds = %loop.body64
  %idx83 = load i128, i128* %idx, align 4
  %add84 = add i128 %idx83, 1
  store i128 %add84, i128* %idx, align 4
  %idx85 = load i128, i128* %idx, align 4
  %k86 = load i128, i128* %signedfp2carrymodp.k.declare_arg, align 4
  %slt87 = icmp slt i128 %idx85, %k86
  br i1 %slt87, label %loop.body64, label %loop.exit88

loop.exit88:                                      ; preds = %loop.latch82
  br label %loop.latch89

loop.latch89:                                     ; preds = %loop.exit88
  %i90 = load i128, i128* %i, align 4
  %add91 = add i128 %i90, 1
  store i128 %add91, i128* %i, align 4
  %i92 = load i128, i128* %i, align 4
  %slt93 = icmp slt i128 %i92, 2
  br i1 %slt93, label %loop.body, label %loop.exit94

loop.exit94:                                      ; preds = %loop.latch89
  br label %exit

exit:                                             ; preds = %loop.exit94
  %X95 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2carrymodp.x.declare_output, align 8
  %signedfp2carrymodp.x.write_output_inner = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %0, i32 0, i32 5
  store [256 x [256 x i128]]* %X95, [256 x [256 x i128]]** %signedfp2carrymodp.x.write_output_inner, align 8
  %out96 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2carrymodp.out.declare_output, align 8
  %signedfp2carrymodp.out.write_output_inner = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %0, i32 0, i32 6
  store [256 x [256 x i128]]* %out96, [256 x [256 x i128]]** %signedfp2carrymodp.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_signedfp2carrymodp* @fn_template_build_signedfp2carrymodp(i128 %0, i128 %1, i128 %2, [256 x i128]* %3) {
entry:
  %struct_template_circuit_signedfp2carrymodp = alloca %struct_template_circuit_signedfp2carrymodp, align 8
  %signedfp2carrymodp.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %struct_template_circuit_signedfp2carrymodp, i32 0, i32 0
  store i128 %0, i128* %signedfp2carrymodp.n.write_arg_inner, align 4
  %signedfp2carrymodp.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %struct_template_circuit_signedfp2carrymodp, i32 0, i32 1
  store i128 %1, i128* %signedfp2carrymodp.k.write_arg_inner, align 4
  %signedfp2carrymodp.overflow.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %struct_template_circuit_signedfp2carrymodp, i32 0, i32 2
  store i128 %2, i128* %signedfp2carrymodp.overflow.write_arg_inner, align 4
  %signedfp2carrymodp.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %struct_template_circuit_signedfp2carrymodp, i32 0, i32 3
  store [256 x i128]* %3, [256 x i128]** %signedfp2carrymodp.p.write_arg_inner, align 8
  ret %struct_template_circuit_signedfp2carrymodp* %struct_template_circuit_signedfp2carrymodp
}

define void @fn_template_init_pointontangent(%struct_template_circuit_pointontangent* %0) {
entry:
  %PointOnTangent = alloca %struct_template_circuit_pointontangent*, align 8
  store %struct_template_circuit_pointontangent* %0, %struct_template_circuit_pointontangent** %PointOnTangent, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %0, i32 0, i32 0
  %pointontangent.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %pointontangent.n.declare_arg = alloca i128, align 8
  store i128 %pointontangent.n.read_arg_inner, i128* %pointontangent.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %0, i32 0, i32 1
  %pointontangent.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %pointontangent.k.declare_arg = alloca i128, align 8
  store i128 %pointontangent.k.read_arg_inner, i128* %pointontangent.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %0, i32 0, i32 2
  %pointontangent.a.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %pointontangent.a.declare_arg = alloca i128, align 8
  store i128 %pointontangent.a.read_arg_inner, i128* %pointontangent.a.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %0, i32 0, i32 3
  %pointontangent.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %pointontangent.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %pointontangent.p.read_arg_inner, [256 x i128]** %pointontangent.p.declare_arg, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %0, i32 0, i32 4
  %pointontangent.in.read_input_inner = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter4, align 8
  %pointontangent.in.declare_input = alloca [256 x [256 x [256 x i128]]]*, align 8
  store [256 x [256 x [256 x i128]]]* %pointontangent.in.read_input_inner, [256 x [256 x [256 x i128]]]** %pointontangent.in.declare_input, align 8
  %right = alloca %struct_template_circuit_bigmultshortlongunequal*, align 8
  %constraint = alloca %struct_template_circuit_signedcheckcarrymodtozero*, align 8
  %left = alloca %struct_template_circuit_bigmultshortlong*, align 8
  %LOGK = alloca i128, align 8
  %LOGK5 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK5, i128* %LOGK, align 4
  %LOGK3 = alloca i128, align 8
  %LOGK36 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK36, i128* %LOGK3, align 4
  %diff_red = alloca %struct_template_circuit_primereduce*, align 8
  %x_sq = alloca %struct_template_circuit_bigmultshortlong*, align 8
  %i = alloca i128, align 8
  %i7 = call i128 @fn_intrinsic_inline_init()
  store i128 %i7, i128* %i, align 4
  %k = load i128, i128* %pointontangent.k.declare_arg, align 4
  %call = call i128 @log_ceil(i128 %k)
  store i128 %call, i128* %LOGK, align 4
  %k8 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %mul = mul i128 3, %k8
  %k9 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %mul10 = mul i128 2, %k9
  %sub = sub i128 %mul10, 1
  %mul11 = mul i128 %mul, %sub
  %add = add i128 %mul11, 1
  %call12 = call i128 @log_ceil(i128 %add)
  store i128 %call12, i128* %LOGK3, align 4
  %n = load i128, i128* %pointontangent.n.declare_arg, align 4
  %k13 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %n14 = load i128, i128* %pointontangent.n.declare_arg, align 4
  %mul15 = mul i128 2, %n14
  %LOGK16 = load i128, i128* %LOGK, align 4
  %add17 = add i128 %mul15, %LOGK16
  %call18 = call %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %n, i128 %k13, i128 %add17)
  store %struct_template_circuit_bigmultshortlong* %call18, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %in = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointontangent.in.declare_input, align 8
  %i19 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in, i128 0, i128 0, i128 0, i128 %i19
  %in20 = load i128, i128* %array_getter, align 4
  %x_sq21 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter22 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %x_sq21, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter22, align 8
  %i23 = load i128, i128* %i, align 4
  %array_getter24 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter, i128 0, i128 %i23
  %x_sq25 = load i128, i128* %array_getter24, align 4
  call void @fn_intrinsic_add_constraint(i128 %x_sq25, i128 %in20, i1* @constraint.315)
  %ptr_getter = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter27 = load [256 x i128]*, [256 x i128]** %struct_getter26, align 8
  %i28 = load i128, i128* %i, align 4
  %x_sq29 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter27, i128 0, i128 %i28
  store i128 %in20, i128* %x_sq29, align 4
  %in30 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointontangent.in.declare_input, align 8
  %i31 = load i128, i128* %i, align 4
  %array_getter32 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in30, i128 0, i128 0, i128 0, i128 %i31
  %in33 = load i128, i128* %array_getter32, align 4
  %x_sq34 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter35 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %x_sq34, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter35, align 8
  %i36 = load i128, i128* %i, align 4
  %array_getter37 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter, i128 0, i128 %i36
  %x_sq38 = load i128, i128* %array_getter37, align 4
  call void @fn_intrinsic_add_constraint(i128 %x_sq38, i128 %in33, i1* @constraint.316)
  %ptr_getter39 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter40 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter39, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter41 = load [256 x i128]*, [256 x i128]** %struct_getter40, align 8
  %i42 = load i128, i128* %i, align 4
  %x_sq43 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter41, i128 0, i128 %i42
  store i128 %in33, i128* %x_sq43, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i44 = load i128, i128* %i, align 4
  %add45 = add i128 %i44, 1
  store i128 %add45, i128* %i, align 4
  %i46 = load i128, i128* %i, align 4
  %k47 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %slt = icmp slt i128 %i46, %k47
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n48 = load i128, i128* %pointontangent.n.declare_arg, align 4
  %k49 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %mul50 = mul i128 2, %k49
  %sub51 = sub i128 %mul50, 1
  %k52 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %n53 = load i128, i128* %pointontangent.n.declare_arg, align 4
  %mul54 = mul i128 3, %n53
  %LOGK55 = load i128, i128* %LOGK, align 4
  %mul56 = mul i128 2, %LOGK55
  %add57 = add i128 %mul54, %mul56
  %add58 = add i128 %add57, 3
  %call59 = call %struct_template_circuit_bigmultshortlongunequal* @fn_template_build_bigmultshortlongunequal(i128 %n48, i128 %sub51, i128 %k52, i128 %add58)
  store %struct_template_circuit_bigmultshortlongunequal* %call59, %struct_template_circuit_bigmultshortlongunequal** %right, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body60

loop.body60:                                      ; preds = %loop.latch97, %loop.exit
  %i61 = load i128, i128* %i, align 4
  %eq = icmp eq i128 %i61, 0
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body60
  %x_sq62 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter63 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %x_sq62, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter63, align 8
  %i64 = load i128, i128* %i, align 4
  %array_getter65 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter, i128 0, i128 %i64
  %x_sq66 = load i128, i128* %array_getter65, align 4
  %mul67 = mul i128 3, %x_sq66
  %a = load i128, i128* %pointontangent.a.declare_arg, align 4
  %add68 = add i128 %mul67, %a
  %right69 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %right, align 8
  %struct_getter70 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %right69, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter70, align 8
  %i71 = load i128, i128* %i, align 4
  %array_getter72 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter, i128 0, i128 %i71
  %right73 = load i128, i128* %array_getter72, align 4
  call void @fn_intrinsic_add_constraint(i128 %right73, i128 %add68, i1* @constraint.317)
  %ptr_getter74 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %right, align 8
  %struct_getter75 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ptr_getter74, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter76 = load [256 x i128]*, [256 x i128]** %struct_getter75, align 8
  %i77 = load i128, i128* %i, align 4
  %right78 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter76, i128 0, i128 %i77
  store i128 %add68, i128* %right78, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body60
  %x_sq79 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter80 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %x_sq79, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter81 = load [256 x i128]*, [256 x i128]** %struct_getter80, align 8
  %i82 = load i128, i128* %i, align 4
  %array_getter83 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter81, i128 0, i128 %i82
  %x_sq84 = load i128, i128* %array_getter83, align 4
  %mul85 = mul i128 3, %x_sq84
  %right86 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %right, align 8
  %struct_getter87 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %right86, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter88 = load [256 x i128]*, [256 x i128]** %struct_getter87, align 8
  %i89 = load i128, i128* %i, align 4
  %array_getter90 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter88, i128 0, i128 %i89
  %right91 = load i128, i128* %array_getter90, align 4
  call void @fn_intrinsic_add_constraint(i128 %right91, i128 %mul85, i1* @constraint.318)
  %ptr_getter92 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %right, align 8
  %struct_getter93 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ptr_getter92, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter94 = load [256 x i128]*, [256 x i128]** %struct_getter93, align 8
  %i95 = load i128, i128* %i, align 4
  %right96 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter94, i128 0, i128 %i95
  store i128 %mul85, i128* %right96, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch97

loop.latch97:                                     ; preds = %if.exit
  %i98 = load i128, i128* %i, align 4
  %add99 = add i128 %i98, 1
  store i128 %add99, i128* %i, align 4
  %i100 = load i128, i128* %i, align 4
  %k101 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %mul102 = mul i128 2, %k101
  %sub103 = sub i128 %mul102, 1
  %slt104 = icmp slt i128 %i100, %sub103
  br i1 %slt104, label %loop.body60, label %loop.exit105

loop.exit105:                                     ; preds = %loop.latch97
  store i128 0, i128* %i, align 4
  br label %loop.body106

loop.body106:                                     ; preds = %loop.latch126, %loop.exit105
  %in107 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointontangent.in.declare_input, align 8
  %i108 = load i128, i128* %i, align 4
  %array_getter109 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in107, i128 0, i128 0, i128 0, i128 %i108
  %in110 = load i128, i128* %array_getter109, align 4
  %in111 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointontangent.in.declare_input, align 8
  %i112 = load i128, i128* %i, align 4
  %array_getter113 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in111, i128 0, i128 1, i128 0, i128 %i112
  %in114 = load i128, i128* %array_getter113, align 4
  %sub115 = sub i128 %in110, %in114
  %right116 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %right, align 8
  %struct_getter117 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %right116, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter117, align 8
  %i118 = load i128, i128* %i, align 4
  %array_getter119 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.b.read_input_outter, i128 0, i128 %i118
  %right120 = load i128, i128* %array_getter119, align 4
  call void @fn_intrinsic_add_constraint(i128 %right120, i128 %sub115, i1* @constraint.319)
  %ptr_getter121 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %right, align 8
  %struct_getter122 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ptr_getter121, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_outter123 = load [256 x i128]*, [256 x i128]** %struct_getter122, align 8
  %i124 = load i128, i128* %i, align 4
  %right125 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.b.read_input_outter123, i128 0, i128 %i124
  store i128 %sub115, i128* %right125, align 4
  br label %loop.latch126

loop.latch126:                                    ; preds = %loop.body106
  %i127 = load i128, i128* %i, align 4
  %add128 = add i128 %i127, 1
  store i128 %add128, i128* %i, align 4
  %i129 = load i128, i128* %i, align 4
  %k130 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %slt131 = icmp slt i128 %i129, %k130
  br i1 %slt131, label %loop.body106, label %loop.exit132

loop.exit132:                                     ; preds = %loop.latch126
  %n133 = load i128, i128* %pointontangent.n.declare_arg, align 4
  %k134 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %n135 = load i128, i128* %pointontangent.n.declare_arg, align 4
  %mul136 = mul i128 2, %n135
  %add137 = add i128 %mul136, 2
  %LOGK138 = load i128, i128* %LOGK, align 4
  %add139 = add i128 %add137, %LOGK138
  %call140 = call %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %n133, i128 %k134, i128 %add139)
  store %struct_template_circuit_bigmultshortlong* %call140, %struct_template_circuit_bigmultshortlong** %left, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body141

loop.body141:                                     ; preds = %loop.latch178, %loop.exit132
  %in142 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointontangent.in.declare_input, align 8
  %i143 = load i128, i128* %i, align 4
  %array_getter144 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in142, i128 0, i128 0, i128 1, i128 %i143
  %in145 = load i128, i128* %array_getter144, align 4
  %mul146 = mul i128 2, %in145
  %left147 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %left, align 8
  %struct_getter148 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %left147, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter149 = load [256 x i128]*, [256 x i128]** %struct_getter148, align 8
  %i150 = load i128, i128* %i, align 4
  %array_getter151 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter149, i128 0, i128 %i150
  %left152 = load i128, i128* %array_getter151, align 4
  call void @fn_intrinsic_add_constraint(i128 %left152, i128 %mul146, i1* @constraint.320)
  %ptr_getter153 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %left, align 8
  %struct_getter154 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter153, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter155 = load [256 x i128]*, [256 x i128]** %struct_getter154, align 8
  %i156 = load i128, i128* %i, align 4
  %left157 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter155, i128 0, i128 %i156
  store i128 %mul146, i128* %left157, align 4
  %in158 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointontangent.in.declare_input, align 8
  %i159 = load i128, i128* %i, align 4
  %array_getter160 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in158, i128 0, i128 0, i128 1, i128 %i159
  %in161 = load i128, i128* %array_getter160, align 4
  %in162 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %pointontangent.in.declare_input, align 8
  %i163 = load i128, i128* %i, align 4
  %array_getter164 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %in162, i128 0, i128 1, i128 1, i128 %i163
  %in165 = load i128, i128* %array_getter164, align 4
  %add166 = add i128 %in161, %in165
  %left167 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %left, align 8
  %struct_getter168 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %left167, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter169 = load [256 x i128]*, [256 x i128]** %struct_getter168, align 8
  %i170 = load i128, i128* %i, align 4
  %array_getter171 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter169, i128 0, i128 %i170
  %left172 = load i128, i128* %array_getter171, align 4
  call void @fn_intrinsic_add_constraint(i128 %left172, i128 %add166, i1* @constraint.321)
  %ptr_getter173 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %left, align 8
  %struct_getter174 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter173, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter175 = load [256 x i128]*, [256 x i128]** %struct_getter174, align 8
  %i176 = load i128, i128* %i, align 4
  %left177 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter175, i128 0, i128 %i176
  store i128 %add166, i128* %left177, align 4
  br label %loop.latch178

loop.latch178:                                    ; preds = %loop.body141
  %i179 = load i128, i128* %i, align 4
  %add180 = add i128 %i179, 1
  store i128 %add180, i128* %i, align 4
  %i181 = load i128, i128* %i, align 4
  %k182 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %slt183 = icmp slt i128 %i181, %k182
  br i1 %slt183, label %loop.body141, label %loop.exit184

loop.exit184:                                     ; preds = %loop.latch178
  %n185 = load i128, i128* %pointontangent.n.declare_arg, align 4
  %k186 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %k187 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %mul188 = mul i128 2, %k187
  %sub189 = sub i128 %mul188, 2
  %p = load [256 x i128]*, [256 x i128]** %pointontangent.p.declare_arg, align 8
  %n190 = load i128, i128* %pointontangent.n.declare_arg, align 4
  %mul191 = mul i128 4, %n190
  %LOGK3192 = load i128, i128* %LOGK3, align 4
  %add193 = add i128 %mul191, %LOGK3192
  %call194 = call %struct_template_circuit_primereduce* @fn_template_build_primereduce(i128 %n185, i128 %k186, i128 %sub189, [256 x i128]* %p, i128 %add193)
  store %struct_template_circuit_primereduce* %call194, %struct_template_circuit_primereduce** %diff_red, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body195

loop.body195:                                     ; preds = %loop.latch243, %loop.exit184
  %i198 = load i128, i128* %i, align 4
  %k199 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %mul200 = mul i128 2, %k199
  %sub201 = sub i128 %mul200, 1
  %slt202 = icmp slt i128 %i198, %sub201
  br i1 %slt202, label %if.true196, label %if.false197

if.true196:                                       ; preds = %loop.body195
  %right203 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %right, align 8
  %struct_getter204 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %right203, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter204, align 8
  %i205 = load i128, i128* %i, align 4
  %array_getter206 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter, i128 0, i128 %i205
  %right207 = load i128, i128* %array_getter206, align 4
  %left208 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %left, align 8
  %struct_getter209 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %left208, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter210 = load [256 x i128]*, [256 x i128]** %struct_getter209, align 8
  %i211 = load i128, i128* %i, align 4
  %array_getter212 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter210, i128 0, i128 %i211
  %left213 = load i128, i128* %array_getter212, align 4
  %sub214 = sub i128 %right207, %left213
  %diff_red215 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %diff_red, align 8
  %struct_getter216 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %diff_red215, i32 0, i32 5
  %primereduce.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter216, align 8
  %i217 = load i128, i128* %i, align 4
  %array_getter218 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter, i128 0, i128 %i217
  %diff_red219 = load i128, i128* %array_getter218, align 4
  call void @fn_intrinsic_add_constraint(i128 %diff_red219, i128 %sub214, i1* @constraint.322)
  %ptr_getter220 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %diff_red, align 8
  %struct_getter221 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %ptr_getter220, i32 0, i32 5
  %primereduce.in.read_input_outter222 = load [256 x i128]*, [256 x i128]** %struct_getter221, align 8
  %i223 = load i128, i128* %i, align 4
  %diff_red224 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter222, i128 0, i128 %i223
  store i128 %sub214, i128* %diff_red224, align 4
  br label %if.exit242

if.false197:                                      ; preds = %loop.body195
  %right225 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %right, align 8
  %struct_getter226 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %right225, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter227 = load [256 x i128]*, [256 x i128]** %struct_getter226, align 8
  %i228 = load i128, i128* %i, align 4
  %array_getter229 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter227, i128 0, i128 %i228
  %right230 = load i128, i128* %array_getter229, align 4
  %diff_red231 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %diff_red, align 8
  %struct_getter232 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %diff_red231, i32 0, i32 5
  %primereduce.in.read_input_outter233 = load [256 x i128]*, [256 x i128]** %struct_getter232, align 8
  %i234 = load i128, i128* %i, align 4
  %array_getter235 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter233, i128 0, i128 %i234
  %diff_red236 = load i128, i128* %array_getter235, align 4
  call void @fn_intrinsic_add_constraint(i128 %diff_red236, i128 %right230, i1* @constraint.323)
  %ptr_getter237 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %diff_red, align 8
  %struct_getter238 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %ptr_getter237, i32 0, i32 5
  %primereduce.in.read_input_outter239 = load [256 x i128]*, [256 x i128]** %struct_getter238, align 8
  %i240 = load i128, i128* %i, align 4
  %diff_red241 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter239, i128 0, i128 %i240
  store i128 %right230, i128* %diff_red241, align 4
  br label %if.exit242

if.exit242:                                       ; preds = %if.false197, %if.true196
  br label %loop.latch243

loop.latch243:                                    ; preds = %if.exit242
  %i244 = load i128, i128* %i, align 4
  %add245 = add i128 %i244, 1
  store i128 %add245, i128* %i, align 4
  %i246 = load i128, i128* %i, align 4
  %k247 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %mul248 = mul i128 3, %k247
  %sub249 = sub i128 %mul248, 2
  %slt250 = icmp slt i128 %i246, %sub249
  br i1 %slt250, label %loop.body195, label %loop.exit251

loop.exit251:                                     ; preds = %loop.latch243
  %n252 = load i128, i128* %pointontangent.n.declare_arg, align 4
  %k253 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %n254 = load i128, i128* %pointontangent.n.declare_arg, align 4
  %mul255 = mul i128 4, %n254
  %LOGK3256 = load i128, i128* %LOGK3, align 4
  %add257 = add i128 %mul255, %LOGK3256
  %p258 = load [256 x i128]*, [256 x i128]** %pointontangent.p.declare_arg, align 8
  %call259 = call %struct_template_circuit_signedcheckcarrymodtozero* @fn_template_build_signedcheckcarrymodtozero(i128 %n252, i128 %k253, i128 %add257, [256 x i128]* %p258)
  store %struct_template_circuit_signedcheckcarrymodtozero* %call259, %struct_template_circuit_signedcheckcarrymodtozero** %constraint, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body260

loop.body260:                                     ; preds = %loop.latch276, %loop.exit251
  %diff_red261 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %diff_red, align 8
  %struct_getter262 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %diff_red261, i32 0, i32 6
  %primereduce.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter262, align 8
  %i263 = load i128, i128* %i, align 4
  %array_getter264 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.out.read_output_outter, i128 0, i128 %i263
  %diff_red265 = load i128, i128* %array_getter264, align 4
  %constraint266 = load %struct_template_circuit_signedcheckcarrymodtozero*, %struct_template_circuit_signedcheckcarrymodtozero** %constraint, align 8
  %struct_getter267 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %constraint266, i32 0, i32 4
  %signedcheckcarrymodtozero.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter267, align 8
  %i268 = load i128, i128* %i, align 4
  %array_getter269 = getelementptr inbounds [256 x i128], [256 x i128]* %signedcheckcarrymodtozero.in.read_input_outter, i128 0, i128 %i268
  %constraint270 = load i128, i128* %array_getter269, align 4
  call void @fn_intrinsic_add_constraint(i128 %constraint270, i128 %diff_red265, i1* @constraint.324)
  %ptr_getter271 = load %struct_template_circuit_signedcheckcarrymodtozero*, %struct_template_circuit_signedcheckcarrymodtozero** %constraint, align 8
  %struct_getter272 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %ptr_getter271, i32 0, i32 4
  %signedcheckcarrymodtozero.in.read_input_outter273 = load [256 x i128]*, [256 x i128]** %struct_getter272, align 8
  %i274 = load i128, i128* %i, align 4
  %constraint275 = getelementptr inbounds [256 x i128], [256 x i128]* %signedcheckcarrymodtozero.in.read_input_outter273, i128 0, i128 %i274
  store i128 %diff_red265, i128* %constraint275, align 4
  br label %loop.latch276

loop.latch276:                                    ; preds = %loop.body260
  %i277 = load i128, i128* %i, align 4
  %add278 = add i128 %i277, 1
  store i128 %add278, i128* %i, align 4
  %i279 = load i128, i128* %i, align 4
  %k280 = load i128, i128* %pointontangent.k.declare_arg, align 4
  %slt281 = icmp slt i128 %i279, %k280
  br i1 %slt281, label %loop.body260, label %loop.exit282

loop.exit282:                                     ; preds = %loop.latch276
  br label %exit

exit:                                             ; preds = %loop.exit282
  ret void
}

define %struct_template_circuit_pointontangent* @fn_template_build_pointontangent(i128 %0, i128 %1, i128 %2, [256 x i128]* %3) {
entry:
  %struct_template_circuit_pointontangent = alloca %struct_template_circuit_pointontangent, align 8
  %pointontangent.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %struct_template_circuit_pointontangent, i32 0, i32 0
  store i128 %0, i128* %pointontangent.n.write_arg_inner, align 4
  %pointontangent.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %struct_template_circuit_pointontangent, i32 0, i32 1
  store i128 %1, i128* %pointontangent.k.write_arg_inner, align 4
  %pointontangent.a.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %struct_template_circuit_pointontangent, i32 0, i32 2
  store i128 %2, i128* %pointontangent.a.write_arg_inner, align 4
  %pointontangent.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %struct_template_circuit_pointontangent, i32 0, i32 3
  store [256 x i128]* %3, [256 x i128]** %pointontangent.p.write_arg_inner, align 8
  ret %struct_template_circuit_pointontangent* %struct_template_circuit_pointontangent
}

define void @fn_template_init_fpmultiply(%struct_template_circuit_fpmultiply* %0) {
entry:
  %FpMultiply = alloca %struct_template_circuit_fpmultiply*, align 8
  store %struct_template_circuit_fpmultiply* %0, %struct_template_circuit_fpmultiply** %FpMultiply, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fpmultiply, %struct_template_circuit_fpmultiply* %0, i32 0, i32 0
  %fpmultiply.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fpmultiply.n.declare_arg = alloca i128, align 8
  store i128 %fpmultiply.n.read_arg_inner, i128* %fpmultiply.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fpmultiply, %struct_template_circuit_fpmultiply* %0, i32 0, i32 1
  %fpmultiply.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fpmultiply.k.declare_arg = alloca i128, align 8
  store i128 %fpmultiply.k.read_arg_inner, i128* %fpmultiply.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fpmultiply, %struct_template_circuit_fpmultiply* %0, i32 0, i32 2
  %fpmultiply.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fpmultiply.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpmultiply.p.read_arg_inner, [256 x i128]** %fpmultiply.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fpmultiply, %struct_template_circuit_fpmultiply* %0, i32 0, i32 3
  %fpmultiply.a.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %fpmultiply.a.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpmultiply.a.read_input_inner, [256 x i128]** %fpmultiply.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_fpmultiply, %struct_template_circuit_fpmultiply* %0, i32 0, i32 4
  %fpmultiply.b.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %fpmultiply.b.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %fpmultiply.b.read_input_inner, [256 x i128]** %fpmultiply.b.declare_input, align 8
  %big_mod = alloca %struct_template_circuit_signedfpcarrymodp*, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %LOGK = alloca i128, align 8
  %LOGK6 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK6, i128* %LOGK, align 4
  %nocarry = alloca %struct_template_circuit_bigmultshortlong*, align 8
  %fpmultiply.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %fpmultiply.out.declare_output, align 8
  %red = alloca %struct_template_circuit_primereduce*, align 8
  %k = load i128, i128* %fpmultiply.k.declare_arg, align 4
  %call = call i128 @log_ceil(i128 %k)
  store i128 %call, i128* %LOGK, align 4
  %n = load i128, i128* %fpmultiply.n.declare_arg, align 4
  %k7 = load i128, i128* %fpmultiply.k.declare_arg, align 4
  %n8 = load i128, i128* %fpmultiply.n.declare_arg, align 4
  %mul = mul i128 2, %n8
  %LOGK9 = load i128, i128* %LOGK, align 4
  %add = add i128 %mul, %LOGK9
  %call10 = call %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %n, i128 %k7, i128 %add)
  store %struct_template_circuit_bigmultshortlong* %call10, %struct_template_circuit_bigmultshortlong** %nocarry, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x i128]*, [256 x i128]** %fpmultiply.a.declare_input, align 8
  %i11 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %a, i128 0, i128 %i11
  %a12 = load i128, i128* %array_getter, align 4
  %nocarry13 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %nocarry, align 8
  %struct_getter14 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %nocarry13, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter14, align 8
  %i15 = load i128, i128* %i, align 4
  %array_getter16 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter, i128 0, i128 %i15
  %nocarry17 = load i128, i128* %array_getter16, align 4
  call void @fn_intrinsic_add_constraint(i128 %nocarry17, i128 %a12, i1* @constraint.325)
  %ptr_getter = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %nocarry, align 8
  %struct_getter18 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter19 = load [256 x i128]*, [256 x i128]** %struct_getter18, align 8
  %i20 = load i128, i128* %i, align 4
  %nocarry21 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter19, i128 0, i128 %i20
  store i128 %a12, i128* %nocarry21, align 4
  %b = load [256 x i128]*, [256 x i128]** %fpmultiply.b.declare_input, align 8
  %i22 = load i128, i128* %i, align 4
  %array_getter23 = getelementptr inbounds [256 x i128], [256 x i128]* %b, i128 0, i128 %i22
  %b24 = load i128, i128* %array_getter23, align 4
  %nocarry25 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %nocarry, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %nocarry25, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter26, align 8
  %i27 = load i128, i128* %i, align 4
  %array_getter28 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter, i128 0, i128 %i27
  %nocarry29 = load i128, i128* %array_getter28, align 4
  call void @fn_intrinsic_add_constraint(i128 %nocarry29, i128 %b24, i1* @constraint.326)
  %ptr_getter30 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %nocarry, align 8
  %struct_getter31 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter30, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter32 = load [256 x i128]*, [256 x i128]** %struct_getter31, align 8
  %i33 = load i128, i128* %i, align 4
  %nocarry34 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter32, i128 0, i128 %i33
  store i128 %b24, i128* %nocarry34, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i35 = load i128, i128* %i, align 4
  %add36 = add i128 %i35, 1
  store i128 %add36, i128* %i, align 4
  %i37 = load i128, i128* %i, align 4
  %k38 = load i128, i128* %fpmultiply.k.declare_arg, align 4
  %slt = icmp slt i128 %i37, %k38
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n39 = load i128, i128* %fpmultiply.n.declare_arg, align 4
  %k40 = load i128, i128* %fpmultiply.k.declare_arg, align 4
  %k41 = load i128, i128* %fpmultiply.k.declare_arg, align 4
  %sub = sub i128 %k41, 1
  %p = load [256 x i128]*, [256 x i128]** %fpmultiply.p.declare_arg, align 8
  %n42 = load i128, i128* %fpmultiply.n.declare_arg, align 4
  %mul43 = mul i128 3, %n42
  %LOGK44 = load i128, i128* %LOGK, align 4
  %mul45 = mul i128 2, %LOGK44
  %add46 = add i128 %mul43, %mul45
  %call47 = call %struct_template_circuit_primereduce* @fn_template_build_primereduce(i128 %n39, i128 %k40, i128 %sub, [256 x i128]* %p, i128 %add46)
  store %struct_template_circuit_primereduce* %call47, %struct_template_circuit_primereduce** %red, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body48

loop.body48:                                      ; preds = %loop.latch64, %loop.exit
  %nocarry49 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %nocarry, align 8
  %struct_getter50 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %nocarry49, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter50, align 8
  %i51 = load i128, i128* %i, align 4
  %array_getter52 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter, i128 0, i128 %i51
  %nocarry53 = load i128, i128* %array_getter52, align 4
  %red54 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %red, align 8
  %struct_getter55 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %red54, i32 0, i32 5
  %primereduce.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter55, align 8
  %i56 = load i128, i128* %i, align 4
  %array_getter57 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter, i128 0, i128 %i56
  %red58 = load i128, i128* %array_getter57, align 4
  call void @fn_intrinsic_add_constraint(i128 %red58, i128 %nocarry53, i1* @constraint.327)
  %ptr_getter59 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %red, align 8
  %struct_getter60 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %ptr_getter59, i32 0, i32 5
  %primereduce.in.read_input_outter61 = load [256 x i128]*, [256 x i128]** %struct_getter60, align 8
  %i62 = load i128, i128* %i, align 4
  %red63 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter61, i128 0, i128 %i62
  store i128 %nocarry53, i128* %red63, align 4
  br label %loop.latch64

loop.latch64:                                     ; preds = %loop.body48
  %i65 = load i128, i128* %i, align 4
  %add66 = add i128 %i65, 1
  store i128 %add66, i128* %i, align 4
  %i67 = load i128, i128* %i, align 4
  %k68 = load i128, i128* %fpmultiply.k.declare_arg, align 4
  %mul69 = mul i128 2, %k68
  %sub70 = sub i128 %mul69, 1
  %slt71 = icmp slt i128 %i67, %sub70
  br i1 %slt71, label %loop.body48, label %loop.exit72

loop.exit72:                                      ; preds = %loop.latch64
  %n73 = load i128, i128* %fpmultiply.n.declare_arg, align 4
  %k74 = load i128, i128* %fpmultiply.k.declare_arg, align 4
  %n75 = load i128, i128* %fpmultiply.n.declare_arg, align 4
  %mul76 = mul i128 3, %n75
  %LOGK77 = load i128, i128* %LOGK, align 4
  %mul78 = mul i128 2, %LOGK77
  %add79 = add i128 %mul76, %mul78
  %p80 = load [256 x i128]*, [256 x i128]** %fpmultiply.p.declare_arg, align 8
  %call81 = call %struct_template_circuit_signedfpcarrymodp* @fn_template_build_signedfpcarrymodp(i128 %n73, i128 %k74, i128 %add79, [256 x i128]* %p80)
  store %struct_template_circuit_signedfpcarrymodp* %call81, %struct_template_circuit_signedfpcarrymodp** %big_mod, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body82

loop.body82:                                      ; preds = %loop.latch98, %loop.exit72
  %red83 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %red, align 8
  %struct_getter84 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %red83, i32 0, i32 6
  %primereduce.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter84, align 8
  %i85 = load i128, i128* %i, align 4
  %array_getter86 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.out.read_output_outter, i128 0, i128 %i85
  %red87 = load i128, i128* %array_getter86, align 4
  %big_mod88 = load %struct_template_circuit_signedfpcarrymodp*, %struct_template_circuit_signedfpcarrymodp** %big_mod, align 8
  %struct_getter89 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %big_mod88, i32 0, i32 4
  %signedfpcarrymodp.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter89, align 8
  %i90 = load i128, i128* %i, align 4
  %array_getter91 = getelementptr inbounds [256 x i128], [256 x i128]* %signedfpcarrymodp.in.read_input_outter, i128 0, i128 %i90
  %big_mod92 = load i128, i128* %array_getter91, align 4
  call void @fn_intrinsic_add_constraint(i128 %big_mod92, i128 %red87, i1* @constraint.328)
  %ptr_getter93 = load %struct_template_circuit_signedfpcarrymodp*, %struct_template_circuit_signedfpcarrymodp** %big_mod, align 8
  %struct_getter94 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %ptr_getter93, i32 0, i32 4
  %signedfpcarrymodp.in.read_input_outter95 = load [256 x i128]*, [256 x i128]** %struct_getter94, align 8
  %i96 = load i128, i128* %i, align 4
  %big_mod97 = getelementptr inbounds [256 x i128], [256 x i128]* %signedfpcarrymodp.in.read_input_outter95, i128 0, i128 %i96
  store i128 %red87, i128* %big_mod97, align 4
  br label %loop.latch98

loop.latch98:                                     ; preds = %loop.body82
  %i99 = load i128, i128* %i, align 4
  %add100 = add i128 %i99, 1
  store i128 %add100, i128* %i, align 4
  %i101 = load i128, i128* %i, align 4
  %k102 = load i128, i128* %fpmultiply.k.declare_arg, align 4
  %slt103 = icmp slt i128 %i101, %k102
  br i1 %slt103, label %loop.body82, label %loop.exit104

loop.exit104:                                     ; preds = %loop.latch98
  store i128 0, i128* %i, align 4
  br label %loop.body105

loop.body105:                                     ; preds = %loop.latch118, %loop.exit104
  %big_mod106 = load %struct_template_circuit_signedfpcarrymodp*, %struct_template_circuit_signedfpcarrymodp** %big_mod, align 8
  %struct_getter107 = getelementptr inbounds %struct_template_circuit_signedfpcarrymodp, %struct_template_circuit_signedfpcarrymodp* %big_mod106, i32 0, i32 6
  %signedfpcarrymodp.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter107, align 8
  %i108 = load i128, i128* %i, align 4
  %array_getter109 = getelementptr inbounds [256 x i128], [256 x i128]* %signedfpcarrymodp.out.read_output_outter, i128 0, i128 %i108
  %big_mod110 = load i128, i128* %array_getter109, align 4
  %out111 = load [256 x i128]*, [256 x i128]** %fpmultiply.out.declare_output, align 8
  %i112 = load i128, i128* %i, align 4
  %array_getter113 = getelementptr inbounds [256 x i128], [256 x i128]* %out111, i128 0, i128 %i112
  %out114 = load i128, i128* %array_getter113, align 4
  call void @fn_intrinsic_add_constraint(i128 %out114, i128 %big_mod110, i1* @constraint.329)
  %ptr_getter115 = load [256 x i128]*, [256 x i128]** %fpmultiply.out.declare_output, align 8
  %i116 = load i128, i128* %i, align 4
  %out117 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter115, i128 0, i128 %i116
  store i128 %big_mod110, i128* %out117, align 4
  br label %loop.latch118

loop.latch118:                                    ; preds = %loop.body105
  %i119 = load i128, i128* %i, align 4
  %add120 = add i128 %i119, 1
  store i128 %add120, i128* %i, align 4
  %i121 = load i128, i128* %i, align 4
  %k122 = load i128, i128* %fpmultiply.k.declare_arg, align 4
  %slt123 = icmp slt i128 %i121, %k122
  br i1 %slt123, label %loop.body105, label %loop.exit124

loop.exit124:                                     ; preds = %loop.latch118
  br label %exit

exit:                                             ; preds = %loop.exit124
  %out125 = load [256 x i128]*, [256 x i128]** %fpmultiply.out.declare_output, align 8
  %fpmultiply.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fpmultiply, %struct_template_circuit_fpmultiply* %0, i32 0, i32 5
  store [256 x i128]* %out125, [256 x i128]** %fpmultiply.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fpmultiply* @fn_template_build_fpmultiply(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fpmultiply = alloca %struct_template_circuit_fpmultiply, align 8
  %fpmultiply.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpmultiply, %struct_template_circuit_fpmultiply* %struct_template_circuit_fpmultiply, i32 0, i32 0
  store i128 %0, i128* %fpmultiply.n.write_arg_inner, align 4
  %fpmultiply.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpmultiply, %struct_template_circuit_fpmultiply* %struct_template_circuit_fpmultiply, i32 0, i32 1
  store i128 %1, i128* %fpmultiply.k.write_arg_inner, align 4
  %fpmultiply.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fpmultiply, %struct_template_circuit_fpmultiply* %struct_template_circuit_fpmultiply, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fpmultiply.p.write_arg_inner, align 8
  ret %struct_template_circuit_fpmultiply* %struct_template_circuit_fpmultiply
}

define [256 x [256 x i128]]* @find_Fp2_inverse(i128 %0, i128 %1, [256 x [256 x i128]]* %2, [256 x i128]* %3) {
entry:
  %find_fp2_inverse.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %find_fp2_inverse.n.declare_arg, align 4
  %find_fp2_inverse.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %find_fp2_inverse.k.declare_arg, align 4
  %find_fp2_inverse.a.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %2, [256 x [256 x i128]]** %find_fp2_inverse.a.declare_arg, align 8
  %find_fp2_inverse.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %find_fp2_inverse.p.declare_arg, align 8
  %out = alloca [256 x [256 x i128]]*, align 8
  %out1 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out1, [256 x [256 x i128]]** %out, align 8
  %out0_div = alloca [256 x [256 x i128]]*, align 8
  %out0_div2 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out0_div2, [256 x [256 x i128]]** %out0_div, align 8
  %out1_pre = alloca [256 x i128]*, align 8
  %out1_pre3 = alloca [256 x i128], align 8
  store [256 x i128]* %out1_pre3, [256 x i128]** %out1_pre, align 8
  %sq1 = alloca [256 x i128]*, align 8
  %sq14 = alloca [256 x i128], align 8
  store [256 x i128]* %sq14, [256 x i128]** %sq1, align 8
  %sq_sum = alloca [256 x i128]*, align 8
  %sq_sum5 = alloca [256 x i128], align 8
  store [256 x i128]* %sq_sum5, [256 x i128]** %sq_sum, align 8
  %lambda = alloca [256 x i128]*, align 8
  %lambda6 = alloca [256 x i128], align 8
  store [256 x i128]* %lambda6, [256 x i128]** %lambda, align 8
  %out0 = alloca [256 x i128]*, align 8
  %out07 = alloca [256 x i128], align 8
  store [256 x i128]* %out07, [256 x i128]** %out0, align 8
  %out18 = alloca [256 x i128]*, align 8
  %out19 = alloca [256 x i128], align 8
  store [256 x i128]* %out19, [256 x i128]** %out18, align 8
  %out1_div = alloca [256 x [256 x i128]]*, align 8
  %out1_div10 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out1_div10, [256 x [256 x i128]]** %out1_div, align 8
  %sq0 = alloca [256 x i128]*, align 8
  %sq011 = alloca [256 x i128], align 8
  store [256 x i128]* %sq011, [256 x i128]** %sq0, align 8
  %sq_sum_div = alloca [256 x [256 x i128]]*, align 8
  %sq_sum_div12 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %sq_sum_div12, [256 x [256 x i128]]** %sq_sum_div, align 8
  %n = load i128, i128* %find_fp2_inverse.n.declare_arg, align 4
  %k = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_inverse.a.declare_arg, align 8
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 0
  %a13 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %a13, [256 x i128]* %spice_inline_array, align 4
  %a14 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_inverse.a.declare_arg, align 8
  %array_getter15 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a14, i128 0, i128 0
  %a16 = load [256 x i128], [256 x i128]* %array_getter15, align 4
  %spice_inline_array17 = alloca [256 x i128], align 8
  store [256 x i128] %a16, [256 x i128]* %spice_inline_array17, align 4
  %call = call [256 x i128]* @prod(i128 %n, i128 %k, [256 x i128]* %spice_inline_array, [256 x i128]* %spice_inline_array17)
  store [256 x i128]* %call, [256 x i128]** %sq0, align 8
  %n18 = load i128, i128* %find_fp2_inverse.n.declare_arg, align 4
  %k19 = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %a20 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_inverse.a.declare_arg, align 8
  %array_getter21 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a20, i128 0, i128 1
  %a22 = load [256 x i128], [256 x i128]* %array_getter21, align 4
  %spice_inline_array23 = alloca [256 x i128], align 8
  store [256 x i128] %a22, [256 x i128]* %spice_inline_array23, align 4
  %a24 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_inverse.a.declare_arg, align 8
  %array_getter25 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a24, i128 0, i128 1
  %a26 = load [256 x i128], [256 x i128]* %array_getter25, align 4
  %spice_inline_array27 = alloca [256 x i128], align 8
  store [256 x i128] %a26, [256 x i128]* %spice_inline_array27, align 4
  %call28 = call [256 x i128]* @prod(i128 %n18, i128 %k19, [256 x i128]* %spice_inline_array23, [256 x i128]* %spice_inline_array27)
  store [256 x i128]* %call28, [256 x i128]** %sq1, align 8
  %n29 = load i128, i128* %find_fp2_inverse.n.declare_arg, align 4
  %k30 = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %mul = mul i128 2, %k30
  %sq031 = load [256 x i128]*, [256 x i128]** %sq0, align 8
  %sq132 = load [256 x i128]*, [256 x i128]** %sq1, align 8
  %call33 = call [256 x i128]* @long_add(i128 %n29, i128 %mul, [256 x i128]* %sq031, [256 x i128]* %sq132)
  store [256 x i128]* %call33, [256 x i128]** %sq_sum, align 8
  %n34 = load i128, i128* %find_fp2_inverse.n.declare_arg, align 4
  %k35 = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %k36 = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %add = add i128 %k36, 1
  %sq_sum37 = load [256 x i128]*, [256 x i128]** %sq_sum, align 8
  %p = load [256 x i128]*, [256 x i128]** %find_fp2_inverse.p.declare_arg, align 8
  %call38 = call [256 x [256 x i128]]* @long_div2(i128 %n34, i128 %k35, i128 %add, [256 x i128]* %sq_sum37, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call38, [256 x [256 x i128]]** %sq_sum_div, align 8
  %n39 = load i128, i128* %find_fp2_inverse.n.declare_arg, align 4
  %k40 = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %sq_sum_div41 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %sq_sum_div, align 8
  %array_getter42 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %sq_sum_div41, i128 0, i128 1
  %sq_sum_div43 = load [256 x i128], [256 x i128]* %array_getter42, align 4
  %spice_inline_array44 = alloca [256 x i128], align 8
  store [256 x i128] %sq_sum_div43, [256 x i128]* %spice_inline_array44, align 4
  %p45 = load [256 x i128]*, [256 x i128]** %find_fp2_inverse.p.declare_arg, align 8
  %call46 = call [256 x i128]* @mod_inv(i128 %n39, i128 %k40, [256 x i128]* %spice_inline_array44, [256 x i128]* %p45)
  store [256 x i128]* %call46, [256 x i128]** %lambda, align 8
  %n47 = load i128, i128* %find_fp2_inverse.n.declare_arg, align 4
  %k48 = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %lambda49 = load [256 x i128]*, [256 x i128]** %lambda, align 8
  %a50 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_inverse.a.declare_arg, align 8
  %array_getter51 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a50, i128 0, i128 0
  %a52 = load [256 x i128], [256 x i128]* %array_getter51, align 4
  %spice_inline_array53 = alloca [256 x i128], align 8
  store [256 x i128] %a52, [256 x i128]* %spice_inline_array53, align 4
  %call54 = call [256 x i128]* @prod(i128 %n47, i128 %k48, [256 x i128]* %lambda49, [256 x i128]* %spice_inline_array53)
  store [256 x i128]* %call54, [256 x i128]** %out0, align 8
  %n55 = load i128, i128* %find_fp2_inverse.n.declare_arg, align 4
  %k56 = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %out057 = load [256 x i128]*, [256 x i128]** %out0, align 8
  %p58 = load [256 x i128]*, [256 x i128]** %find_fp2_inverse.p.declare_arg, align 8
  %call59 = call [256 x [256 x i128]]* @long_div(i128 %n55, i128 %k56, [256 x i128]* %out057, [256 x i128]* %p58)
  store [256 x [256 x i128]]* %call59, [256 x [256 x i128]]** %out0_div, align 8
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %out, align 8
  %out0_div60 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out0_div, align 8
  %array_getter61 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out0_div60, i128 0, i128 1
  %out0_div62 = load [256 x i128], [256 x i128]* %array_getter61, align 4
  %spice_inline_array63 = alloca [256 x i128], align 8
  store [256 x i128] %out0_div62, [256 x i128]* %spice_inline_array63, align 4
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out64 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 0
  %4 = bitcast [256 x i128]* %out64 to i8*
  %5 = bitcast [256 x i128]* %spice_inline_array63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  %n65 = load i128, i128* %find_fp2_inverse.n.declare_arg, align 4
  %k66 = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %p67 = load [256 x i128]*, [256 x i128]** %find_fp2_inverse.p.declare_arg, align 8
  %a68 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_inverse.a.declare_arg, align 8
  %array_getter69 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a68, i128 0, i128 1
  %a70 = load [256 x i128], [256 x i128]* %array_getter69, align 4
  %spice_inline_array71 = alloca [256 x i128], align 8
  store [256 x i128] %a70, [256 x i128]* %spice_inline_array71, align 4
  %call72 = call [256 x i128]* @long_sub(i128 %n65, i128 %k66, [256 x i128]* %p67, [256 x i128]* %spice_inline_array71)
  store [256 x i128]* %call72, [256 x i128]** %out1_pre, align 8
  %n73 = load i128, i128* %find_fp2_inverse.n.declare_arg, align 4
  %k74 = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %lambda75 = load [256 x i128]*, [256 x i128]** %lambda, align 8
  %out1_pre76 = load [256 x i128]*, [256 x i128]** %out1_pre, align 8
  %call77 = call [256 x i128]* @prod(i128 %n73, i128 %k74, [256 x i128]* %lambda75, [256 x i128]* %out1_pre76)
  store [256 x i128]* %call77, [256 x i128]** %out18, align 8
  %n78 = load i128, i128* %find_fp2_inverse.n.declare_arg, align 4
  %k79 = load i128, i128* %find_fp2_inverse.k.declare_arg, align 4
  %out180 = load [256 x i128]*, [256 x i128]** %out18, align 8
  %p81 = load [256 x i128]*, [256 x i128]** %find_fp2_inverse.p.declare_arg, align 8
  %call82 = call [256 x [256 x i128]]* @long_div(i128 %n78, i128 %k79, [256 x i128]* %out180, [256 x i128]* %p81)
  store [256 x [256 x i128]]* %call82, [256 x [256 x i128]]** %out1_div, align 8
  %out1_div83 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out1_div, align 8
  %array_getter84 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out1_div83, i128 0, i128 1
  %out1_div85 = load [256 x i128], [256 x i128]* %array_getter84, align 4
  %spice_inline_array86 = alloca [256 x i128], align 8
  store [256 x i128] %out1_div85, [256 x i128]* %spice_inline_array86, align 4
  %ptr_getter87 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out88 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter87, i128 0, i128 1
  %6 = bitcast [256 x i128]* %out88 to i8*
  %7 = bitcast [256 x i128]* %spice_inline_array86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  %out89 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  ret [256 x [256 x i128]]* %out89
}

define void @fn_template_init_fp2compress(%struct_template_circuit_fp2compress* %0) {
entry:
  %Fp2Compress = alloca %struct_template_circuit_fp2compress*, align 8
  store %struct_template_circuit_fp2compress* %0, %struct_template_circuit_fp2compress** %Fp2Compress, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %0, i32 0, i32 0
  %fp2compress.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2compress.n.declare_arg = alloca i128, align 8
  store i128 %fp2compress.n.read_arg_inner, i128* %fp2compress.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %0, i32 0, i32 1
  %fp2compress.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2compress.k.declare_arg = alloca i128, align 8
  store i128 %fp2compress.k.read_arg_inner, i128* %fp2compress.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %0, i32 0, i32 2
  %fp2compress.m.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %fp2compress.m.declare_arg = alloca i128, align 8
  store i128 %fp2compress.m.read_arg_inner, i128* %fp2compress.m.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %0, i32 0, i32 3
  %fp2compress.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %fp2compress.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2compress.p.read_arg_inner, [256 x i128]** %fp2compress.p.declare_arg, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %0, i32 0, i32 4
  %fp2compress.m_out.read_arg_inner = load i128, i128* %struct_getter4, align 4
  %fp2compress.m_out.declare_arg = alloca i128, align 8
  store i128 %fp2compress.m_out.read_arg_inner, i128* %fp2compress.m_out.declare_arg, align 4
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %0, i32 0, i32 5
  %fp2compress.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %fp2compress.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2compress.in.read_input_inner, [256 x [256 x i128]]** %fp2compress.in.declare_input, align 8
  %j = alloca i128, align 8
  %j6 = call i128 @fn_intrinsic_inline_init()
  store i128 %j6, i128* %j, align 4
  %fp2compress.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %fp2compress.out.declare_output, align 8
  %c = alloca [256 x %struct_template_circuit_primereduce*]*, align 8
  %c7 = alloca [256 x %struct_template_circuit_primereduce*], align 8
  store [256 x %struct_template_circuit_primereduce*]* %c7, [256 x %struct_template_circuit_primereduce*]** %c, align 8
  %i = alloca i128, align 8
  %i8 = call i128 @fn_intrinsic_inline_init()
  store i128 %i8, i128* %i, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch36, %entry
  %n = load i128, i128* %fp2compress.n.declare_arg, align 4
  %k = load i128, i128* %fp2compress.k.declare_arg, align 4
  %m = load i128, i128* %fp2compress.m.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2compress.p.declare_arg, align 8
  %m_out = load i128, i128* %fp2compress.m_out.declare_arg, align 4
  %call = call %struct_template_circuit_primereduce* @fn_template_build_primereduce(i128 %n, i128 %k, i128 %m, [256 x i128]* %p, i128 %m_out)
  %ptr_getter = load [256 x %struct_template_circuit_primereduce*]*, [256 x %struct_template_circuit_primereduce*]** %c, align 8
  %i9 = load i128, i128* %i, align 4
  %c10 = getelementptr inbounds [256 x %struct_template_circuit_primereduce*], [256 x %struct_template_circuit_primereduce*]* %ptr_getter, i128 0, i128 %i9
  store %struct_template_circuit_primereduce* %call, %struct_template_circuit_primereduce** %c10, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body11

loop.body11:                                      ; preds = %loop.latch, %loop.body
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2compress.in.declare_input, align 8
  %i12 = load i128, i128* %i, align 4
  %j13 = load i128, i128* %j, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %i12, i128 %j13
  %in14 = load i128, i128* %array_getter, align 4
  %c15 = load [256 x %struct_template_circuit_primereduce*]*, [256 x %struct_template_circuit_primereduce*]** %c, align 8
  %i16 = load i128, i128* %i, align 4
  %array_getter17 = getelementptr inbounds [256 x %struct_template_circuit_primereduce*], [256 x %struct_template_circuit_primereduce*]* %c15, i128 0, i128 %i16
  %c18 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %array_getter17, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %c18, i32 0, i32 5
  %primereduce.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter19, align 8
  %j20 = load i128, i128* %j, align 4
  %array_getter21 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter, i128 0, i128 %j20
  %c22 = load i128, i128* %array_getter21, align 4
  call void @fn_intrinsic_add_constraint(i128 %c22, i128 %in14, i1* @constraint.330)
  %ptr_getter23 = load [256 x %struct_template_circuit_primereduce*]*, [256 x %struct_template_circuit_primereduce*]** %c, align 8
  %i24 = load i128, i128* %i, align 4
  %array_getter25 = getelementptr inbounds [256 x %struct_template_circuit_primereduce*], [256 x %struct_template_circuit_primereduce*]* %ptr_getter23, i128 0, i128 %i24
  %c26 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %array_getter25, align 8
  %struct_getter27 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %c26, i32 0, i32 5
  %primereduce.in.read_input_outter28 = load [256 x i128]*, [256 x i128]** %struct_getter27, align 8
  %j29 = load i128, i128* %j, align 4
  %c30 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter28, i128 0, i128 %j29
  store i128 %in14, i128* %c30, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body11
  %j31 = load i128, i128* %j, align 4
  %add = add i128 %j31, 1
  store i128 %add, i128* %j, align 4
  %j32 = load i128, i128* %j, align 4
  %k33 = load i128, i128* %fp2compress.k.declare_arg, align 4
  %m34 = load i128, i128* %fp2compress.m.declare_arg, align 4
  %add35 = add i128 %k33, %m34
  %slt = icmp slt i128 %j32, %add35
  br i1 %slt, label %loop.body11, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch36

loop.latch36:                                     ; preds = %loop.exit
  %i37 = load i128, i128* %i, align 4
  %add38 = add i128 %i37, 1
  store i128 %add38, i128* %i, align 4
  %i39 = load i128, i128* %i, align 4
  %slt40 = icmp slt i128 %i39, 2
  br i1 %slt40, label %loop.body, label %loop.exit41

loop.exit41:                                      ; preds = %loop.latch36
  store i128 0, i128* %i, align 4
  br label %loop.body42

loop.body42:                                      ; preds = %loop.latch68, %loop.exit41
  store i128 0, i128* %j, align 4
  br label %loop.body43

loop.body43:                                      ; preds = %loop.latch61, %loop.body42
  %c44 = load [256 x %struct_template_circuit_primereduce*]*, [256 x %struct_template_circuit_primereduce*]** %c, align 8
  %i45 = load i128, i128* %i, align 4
  %array_getter46 = getelementptr inbounds [256 x %struct_template_circuit_primereduce*], [256 x %struct_template_circuit_primereduce*]* %c44, i128 0, i128 %i45
  %c47 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %array_getter46, align 8
  %struct_getter48 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %c47, i32 0, i32 6
  %primereduce.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter48, align 8
  %j49 = load i128, i128* %j, align 4
  %array_getter50 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.out.read_output_outter, i128 0, i128 %j49
  %c51 = load i128, i128* %array_getter50, align 4
  %out52 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2compress.out.declare_output, align 8
  %i53 = load i128, i128* %i, align 4
  %j54 = load i128, i128* %j, align 4
  %array_getter55 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out52, i128 0, i128 %i53, i128 %j54
  %out56 = load i128, i128* %array_getter55, align 4
  call void @fn_intrinsic_add_constraint(i128 %out56, i128 %c51, i1* @constraint.331)
  %ptr_getter57 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2compress.out.declare_output, align 8
  %i58 = load i128, i128* %i, align 4
  %j59 = load i128, i128* %j, align 4
  %out60 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter57, i128 0, i128 %i58, i128 %j59
  store i128 %c51, i128* %out60, align 4
  br label %loop.latch61

loop.latch61:                                     ; preds = %loop.body43
  %j62 = load i128, i128* %j, align 4
  %add63 = add i128 %j62, 1
  store i128 %add63, i128* %j, align 4
  %j64 = load i128, i128* %j, align 4
  %k65 = load i128, i128* %fp2compress.k.declare_arg, align 4
  %slt66 = icmp slt i128 %j64, %k65
  br i1 %slt66, label %loop.body43, label %loop.exit67

loop.exit67:                                      ; preds = %loop.latch61
  br label %loop.latch68

loop.latch68:                                     ; preds = %loop.exit67
  %i69 = load i128, i128* %i, align 4
  %add70 = add i128 %i69, 1
  store i128 %add70, i128* %i, align 4
  %i71 = load i128, i128* %i, align 4
  %slt72 = icmp slt i128 %i71, 2
  br i1 %slt72, label %loop.body42, label %loop.exit73

loop.exit73:                                      ; preds = %loop.latch68
  br label %exit

exit:                                             ; preds = %loop.exit73
  %out74 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2compress.out.declare_output, align 8
  %fp2compress.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %0, i32 0, i32 6
  store [256 x [256 x i128]]* %out74, [256 x [256 x i128]]** %fp2compress.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fp2compress* @fn_template_build_fp2compress(i128 %0, i128 %1, i128 %2, [256 x i128]* %3, i128 %4) {
entry:
  %struct_template_circuit_fp2compress = alloca %struct_template_circuit_fp2compress, align 8
  %fp2compress.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %struct_template_circuit_fp2compress, i32 0, i32 0
  store i128 %0, i128* %fp2compress.n.write_arg_inner, align 4
  %fp2compress.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %struct_template_circuit_fp2compress, i32 0, i32 1
  store i128 %1, i128* %fp2compress.k.write_arg_inner, align 4
  %fp2compress.m.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %struct_template_circuit_fp2compress, i32 0, i32 2
  store i128 %2, i128* %fp2compress.m.write_arg_inner, align 4
  %fp2compress.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %struct_template_circuit_fp2compress, i32 0, i32 3
  store [256 x i128]* %3, [256 x i128]** %fp2compress.p.write_arg_inner, align 8
  %fp2compress.m_out.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %struct_template_circuit_fp2compress, i32 0, i32 4
  store i128 %4, i128* %fp2compress.m_out.write_arg_inner, align 4
  ret %struct_template_circuit_fp2compress* %struct_template_circuit_fp2compress
}

define [256 x [256 x i128]]* @find_Fp2_product(i128 %0, i128 %1, [256 x [256 x i128]]* %2, [256 x [256 x i128]]* %3, [256 x i128]* %4) {
entry:
  %find_fp2_product.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %find_fp2_product.n.declare_arg, align 4
  %find_fp2_product.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %find_fp2_product.k.declare_arg, align 4
  %find_fp2_product.a.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %2, [256 x [256 x i128]]** %find_fp2_product.a.declare_arg, align 8
  %find_fp2_product.b.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %3, [256 x [256 x i128]]** %find_fp2_product.b.declare_arg, align 8
  %find_fp2_product.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %find_fp2_product.p.declare_arg, align 8
  %out = alloca [256 x [256 x i128]]*, align 8
  %out1 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out1, [256 x [256 x i128]]** %out, align 8
  %ab = alloca [256 x [256 x [256 x i128]]]*, align 8
  %ab2 = alloca [256 x [256 x [256 x i128]]], align 8
  store [256 x [256 x [256 x i128]]]* %ab2, [256 x [256 x [256 x i128]]]** %ab, align 8
  %i = alloca i128, align 8
  %i3 = call i128 @fn_intrinsic_inline_init()
  store i128 %i3, i128* %i, align 4
  %j = alloca i128, align 8
  %j4 = call i128 @fn_intrinsic_inline_init()
  store i128 %j4, i128* %j, align 4
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %out, align 8
  %uniform_array5 = alloca [256 x [256 x [256 x i128]]], align 8
  store [256 x [256 x [256 x i128]]]* %uniform_array5, [256 x [256 x [256 x i128]]]** %ab, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch18, %entry
  store i128 0, i128* %j, align 4
  br label %loop.body6

loop.body6:                                       ; preds = %loop.latch, %loop.body
  %n = load i128, i128* %find_fp2_product.n.declare_arg, align 4
  %k = load i128, i128* %find_fp2_product.k.declare_arg, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_product.a.declare_arg, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i7
  %a8 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %a8, [256 x i128]* %spice_inline_array, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_product.b.declare_arg, align 8
  %j9 = load i128, i128* %j, align 4
  %array_getter10 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %j9
  %b11 = load [256 x i128], [256 x i128]* %array_getter10, align 4
  %spice_inline_array12 = alloca [256 x i128], align 8
  store [256 x i128] %b11, [256 x i128]* %spice_inline_array12, align 4
  %p = load [256 x i128]*, [256 x i128]** %find_fp2_product.p.declare_arg, align 8
  %call = call [256 x i128]* @prod_mod(i128 %n, i128 %k, [256 x i128]* %spice_inline_array, [256 x i128]* %spice_inline_array12, [256 x i128]* %p)
  %ptr_getter = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ab, align 8
  %i13 = load i128, i128* %i, align 4
  %j14 = load i128, i128* %j, align 4
  %ab15 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter, i128 0, i128 %i13, i128 %j14
  %5 = bitcast [256 x i128]* %ab15 to i8*
  %6 = bitcast [256 x i128]* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body6
  %j16 = load i128, i128* %j, align 4
  %add = add i128 %j16, 1
  store i128 %add, i128* %j, align 4
  %j17 = load i128, i128* %j, align 4
  %slt = icmp slt i128 %j17, 2
  br i1 %slt, label %loop.body6, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch18

loop.latch18:                                     ; preds = %loop.exit
  %i19 = load i128, i128* %i, align 4
  %add20 = add i128 %i19, 1
  store i128 %add20, i128* %i, align 4
  %i21 = load i128, i128* %i, align 4
  %slt22 = icmp slt i128 %i21, 2
  br i1 %slt22, label %loop.body, label %loop.exit23

loop.exit23:                                      ; preds = %loop.latch18
  %n24 = load i128, i128* %find_fp2_product.n.declare_arg, align 4
  %k25 = load i128, i128* %find_fp2_product.k.declare_arg, align 4
  %ab26 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ab, align 8
  %array_getter27 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ab26, i128 0, i128 0, i128 0
  %ab28 = load [256 x i128], [256 x i128]* %array_getter27, align 4
  %spice_inline_array29 = alloca [256 x i128], align 8
  store [256 x i128] %ab28, [256 x i128]* %spice_inline_array29, align 4
  %ab30 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ab, align 8
  %array_getter31 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ab30, i128 0, i128 1, i128 1
  %ab32 = load [256 x i128], [256 x i128]* %array_getter31, align 4
  %spice_inline_array33 = alloca [256 x i128], align 8
  store [256 x i128] %ab32, [256 x i128]* %spice_inline_array33, align 4
  %p34 = load [256 x i128]*, [256 x i128]** %find_fp2_product.p.declare_arg, align 8
  %call35 = call [256 x i128]* @long_sub_mod(i128 %n24, i128 %k25, [256 x i128]* %spice_inline_array29, [256 x i128]* %spice_inline_array33, [256 x i128]* %p34)
  %ptr_getter36 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out37 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter36, i128 0, i128 0
  %7 = bitcast [256 x i128]* %out37 to i8*
  %8 = bitcast [256 x i128]* %call35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  %n38 = load i128, i128* %find_fp2_product.n.declare_arg, align 4
  %k39 = load i128, i128* %find_fp2_product.k.declare_arg, align 4
  %ab40 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ab, align 8
  %array_getter41 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ab40, i128 0, i128 0, i128 1
  %ab42 = load [256 x i128], [256 x i128]* %array_getter41, align 4
  %spice_inline_array43 = alloca [256 x i128], align 8
  store [256 x i128] %ab42, [256 x i128]* %spice_inline_array43, align 4
  %ab44 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ab, align 8
  %array_getter45 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ab44, i128 0, i128 1, i128 0
  %ab46 = load [256 x i128], [256 x i128]* %array_getter45, align 4
  %spice_inline_array47 = alloca [256 x i128], align 8
  store [256 x i128] %ab46, [256 x i128]* %spice_inline_array47, align 4
  %p48 = load [256 x i128]*, [256 x i128]** %find_fp2_product.p.declare_arg, align 8
  %call49 = call [256 x i128]* @long_add_mod(i128 %n38, i128 %k39, [256 x i128]* %spice_inline_array43, [256 x i128]* %spice_inline_array47, [256 x i128]* %p48)
  %ptr_getter50 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out51 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter50, i128 0, i128 1
  %9 = bitcast [256 x i128]* %out51 to i8*
  %10 = bitcast [256 x i128]* %call49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  %out52 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  ret [256 x [256 x i128]]* %out52
}

define void @fn_template_init_pointoncurve(%struct_template_circuit_pointoncurve* %0) {
entry:
  %PointOnCurve = alloca %struct_template_circuit_pointoncurve*, align 8
  store %struct_template_circuit_pointoncurve* %0, %struct_template_circuit_pointoncurve** %PointOnCurve, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %0, i32 0, i32 0
  %pointoncurve.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %pointoncurve.n.declare_arg = alloca i128, align 8
  store i128 %pointoncurve.n.read_arg_inner, i128* %pointoncurve.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %0, i32 0, i32 1
  %pointoncurve.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %pointoncurve.k.declare_arg = alloca i128, align 8
  store i128 %pointoncurve.k.read_arg_inner, i128* %pointoncurve.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %0, i32 0, i32 2
  %pointoncurve.a.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %pointoncurve.a.declare_arg = alloca i128, align 8
  store i128 %pointoncurve.a.read_arg_inner, i128* %pointoncurve.a.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %0, i32 0, i32 3
  %pointoncurve.b.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %pointoncurve.b.declare_arg = alloca i128, align 8
  store i128 %pointoncurve.b.read_arg_inner, i128* %pointoncurve.b.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %0, i32 0, i32 4
  %pointoncurve.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %pointoncurve.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %pointoncurve.p.read_arg_inner, [256 x i128]** %pointoncurve.p.declare_arg, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %0, i32 0, i32 5
  %pointoncurve.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %pointoncurve.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %pointoncurve.in.read_input_inner, [256 x [256 x i128]]** %pointoncurve.in.declare_input, align 8
  %x_sq = alloca %struct_template_circuit_bigmultshortlong*, align 8
  %LOGK2 = alloca i128, align 8
  %LOGK26 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK26, i128* %LOGK2, align 4
  %LOGK = alloca i128, align 8
  %LOGK7 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK7, i128* %LOGK, align 4
  %i = alloca i128, align 8
  %i8 = call i128 @fn_intrinsic_inline_init()
  store i128 %i8, i128* %i, align 4
  %y_sq_red = alloca %struct_template_circuit_primereduce*, align 8
  %x_cu = alloca %struct_template_circuit_bigmultshortlongunequal*, align 8
  %cu_red = alloca %struct_template_circuit_primereduce*, align 8
  %constraint = alloca %struct_template_circuit_signedcheckcarrymodtozero*, align 8
  %y_sq = alloca %struct_template_circuit_bigmultshortlong*, align 8
  %k = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %call = call i128 @log_ceil(i128 %k)
  store i128 %call, i128* %LOGK, align 4
  %k9 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %mul = mul i128 2, %k9
  %sub = sub i128 %mul, 1
  %k10 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %k11 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %mul12 = mul i128 %k10, %k11
  %add = add i128 %mul12, 1
  %mul13 = mul i128 %sub, %add
  %call14 = call i128 @log_ceil(i128 %mul13)
  store i128 %call14, i128* %LOGK2, align 4
  %n = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %k15 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %n16 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %mul17 = mul i128 2, %n16
  %LOGK18 = load i128, i128* %LOGK, align 4
  %add19 = add i128 %mul17, %LOGK18
  %call20 = call %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %n, i128 %k15, i128 %add19)
  store %struct_template_circuit_bigmultshortlong* %call20, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %n21 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %k22 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %n23 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %mul24 = mul i128 2, %n23
  %LOGK25 = load i128, i128* %LOGK, align 4
  %add26 = add i128 %mul24, %LOGK25
  %call27 = call %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %n21, i128 %k22, i128 %add26)
  store %struct_template_circuit_bigmultshortlong* %call27, %struct_template_circuit_bigmultshortlong** %y_sq, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pointoncurve.in.declare_input, align 8
  %i28 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 0, i128 %i28
  %in29 = load i128, i128* %array_getter, align 4
  %x_sq30 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter31 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %x_sq30, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter31, align 8
  %i32 = load i128, i128* %i, align 4
  %array_getter33 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter, i128 0, i128 %i32
  %x_sq34 = load i128, i128* %array_getter33, align 4
  call void @fn_intrinsic_add_constraint(i128 %x_sq34, i128 %in29, i1* @constraint.332)
  %ptr_getter = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter35 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter36 = load [256 x i128]*, [256 x i128]** %struct_getter35, align 8
  %i37 = load i128, i128* %i, align 4
  %x_sq38 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter36, i128 0, i128 %i37
  store i128 %in29, i128* %x_sq38, align 4
  %in39 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pointoncurve.in.declare_input, align 8
  %i40 = load i128, i128* %i, align 4
  %array_getter41 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in39, i128 0, i128 0, i128 %i40
  %in42 = load i128, i128* %array_getter41, align 4
  %x_sq43 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter44 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %x_sq43, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter44, align 8
  %i45 = load i128, i128* %i, align 4
  %array_getter46 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter, i128 0, i128 %i45
  %x_sq47 = load i128, i128* %array_getter46, align 4
  call void @fn_intrinsic_add_constraint(i128 %x_sq47, i128 %in42, i1* @constraint.333)
  %ptr_getter48 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter49 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter48, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter50 = load [256 x i128]*, [256 x i128]** %struct_getter49, align 8
  %i51 = load i128, i128* %i, align 4
  %x_sq52 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter50, i128 0, i128 %i51
  store i128 %in42, i128* %x_sq52, align 4
  %in53 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pointoncurve.in.declare_input, align 8
  %i54 = load i128, i128* %i, align 4
  %array_getter55 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in53, i128 0, i128 1, i128 %i54
  %in56 = load i128, i128* %array_getter55, align 4
  %y_sq57 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %y_sq, align 8
  %struct_getter58 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %y_sq57, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter59 = load [256 x i128]*, [256 x i128]** %struct_getter58, align 8
  %i60 = load i128, i128* %i, align 4
  %array_getter61 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter59, i128 0, i128 %i60
  %y_sq62 = load i128, i128* %array_getter61, align 4
  call void @fn_intrinsic_add_constraint(i128 %y_sq62, i128 %in56, i1* @constraint.334)
  %ptr_getter63 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %y_sq, align 8
  %struct_getter64 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter63, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter65 = load [256 x i128]*, [256 x i128]** %struct_getter64, align 8
  %i66 = load i128, i128* %i, align 4
  %y_sq67 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter65, i128 0, i128 %i66
  store i128 %in56, i128* %y_sq67, align 4
  %in68 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pointoncurve.in.declare_input, align 8
  %i69 = load i128, i128* %i, align 4
  %array_getter70 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in68, i128 0, i128 1, i128 %i69
  %in71 = load i128, i128* %array_getter70, align 4
  %y_sq72 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %y_sq, align 8
  %struct_getter73 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %y_sq72, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter74 = load [256 x i128]*, [256 x i128]** %struct_getter73, align 8
  %i75 = load i128, i128* %i, align 4
  %array_getter76 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter74, i128 0, i128 %i75
  %y_sq77 = load i128, i128* %array_getter76, align 4
  call void @fn_intrinsic_add_constraint(i128 %y_sq77, i128 %in71, i1* @constraint.335)
  %ptr_getter78 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %y_sq, align 8
  %struct_getter79 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter78, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter80 = load [256 x i128]*, [256 x i128]** %struct_getter79, align 8
  %i81 = load i128, i128* %i, align 4
  %y_sq82 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter80, i128 0, i128 %i81
  store i128 %in71, i128* %y_sq82, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i83 = load i128, i128* %i, align 4
  %add84 = add i128 %i83, 1
  store i128 %add84, i128* %i, align 4
  %i85 = load i128, i128* %i, align 4
  %k86 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %slt = icmp slt i128 %i85, %k86
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n87 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %k88 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %mul89 = mul i128 2, %k88
  %sub90 = sub i128 %mul89, 1
  %k91 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %n92 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %mul93 = mul i128 3, %n92
  %LOGK94 = load i128, i128* %LOGK, align 4
  %mul95 = mul i128 2, %LOGK94
  %add96 = add i128 %mul93, %mul95
  %call97 = call %struct_template_circuit_bigmultshortlongunequal* @fn_template_build_bigmultshortlongunequal(i128 %n87, i128 %sub90, i128 %k91, i128 %add96)
  store %struct_template_circuit_bigmultshortlongunequal* %call97, %struct_template_circuit_bigmultshortlongunequal** %x_cu, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body98

loop.body98:                                      ; preds = %loop.latch114, %loop.exit
  %x_sq99 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %x_sq, align 8
  %struct_getter100 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %x_sq99, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter100, align 8
  %i101 = load i128, i128* %i, align 4
  %array_getter102 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter, i128 0, i128 %i101
  %x_sq103 = load i128, i128* %array_getter102, align 4
  %x_cu104 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %x_cu, align 8
  %struct_getter105 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %x_cu104, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter105, align 8
  %i106 = load i128, i128* %i, align 4
  %array_getter107 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter, i128 0, i128 %i106
  %x_cu108 = load i128, i128* %array_getter107, align 4
  call void @fn_intrinsic_add_constraint(i128 %x_cu108, i128 %x_sq103, i1* @constraint.336)
  %ptr_getter109 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %x_cu, align 8
  %struct_getter110 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ptr_getter109, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter111 = load [256 x i128]*, [256 x i128]** %struct_getter110, align 8
  %i112 = load i128, i128* %i, align 4
  %x_cu113 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter111, i128 0, i128 %i112
  store i128 %x_sq103, i128* %x_cu113, align 4
  br label %loop.latch114

loop.latch114:                                    ; preds = %loop.body98
  %i115 = load i128, i128* %i, align 4
  %add116 = add i128 %i115, 1
  store i128 %add116, i128* %i, align 4
  %i117 = load i128, i128* %i, align 4
  %k118 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %mul119 = mul i128 2, %k118
  %sub120 = sub i128 %mul119, 1
  %slt121 = icmp slt i128 %i117, %sub120
  br i1 %slt121, label %loop.body98, label %loop.exit122

loop.exit122:                                     ; preds = %loop.latch114
  store i128 0, i128* %i, align 4
  br label %loop.body123

loop.body123:                                     ; preds = %loop.latch138, %loop.exit122
  %in124 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pointoncurve.in.declare_input, align 8
  %i125 = load i128, i128* %i, align 4
  %array_getter126 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in124, i128 0, i128 0, i128 %i125
  %in127 = load i128, i128* %array_getter126, align 4
  %x_cu128 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %x_cu, align 8
  %struct_getter129 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %x_cu128, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter129, align 8
  %i130 = load i128, i128* %i, align 4
  %array_getter131 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.b.read_input_outter, i128 0, i128 %i130
  %x_cu132 = load i128, i128* %array_getter131, align 4
  call void @fn_intrinsic_add_constraint(i128 %x_cu132, i128 %in127, i1* @constraint.337)
  %ptr_getter133 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %x_cu, align 8
  %struct_getter134 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ptr_getter133, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_outter135 = load [256 x i128]*, [256 x i128]** %struct_getter134, align 8
  %i136 = load i128, i128* %i, align 4
  %x_cu137 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.b.read_input_outter135, i128 0, i128 %i136
  store i128 %in127, i128* %x_cu137, align 4
  br label %loop.latch138

loop.latch138:                                    ; preds = %loop.body123
  %i139 = load i128, i128* %i, align 4
  %add140 = add i128 %i139, 1
  store i128 %add140, i128* %i, align 4
  %i141 = load i128, i128* %i, align 4
  %k142 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %slt143 = icmp slt i128 %i141, %k142
  br i1 %slt143, label %loop.body123, label %loop.exit144

loop.exit144:                                     ; preds = %loop.latch138
  %n145 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %k146 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %k147 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %mul148 = mul i128 2, %k147
  %sub149 = sub i128 %mul148, 2
  %p = load [256 x i128]*, [256 x i128]** %pointoncurve.p.declare_arg, align 8
  %n150 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %mul151 = mul i128 4, %n150
  %LOGK152 = load i128, i128* %LOGK, align 4
  %mul153 = mul i128 3, %LOGK152
  %add154 = add i128 %mul151, %mul153
  %add155 = add i128 %add154, 1
  %call156 = call %struct_template_circuit_primereduce* @fn_template_build_primereduce(i128 %n145, i128 %k146, i128 %sub149, [256 x i128]* %p, i128 %add155)
  store %struct_template_circuit_primereduce* %call156, %struct_template_circuit_primereduce** %cu_red, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body157

loop.body157:                                     ; preds = %loop.latch228, %loop.exit144
  %i158 = load i128, i128* %i, align 4
  %eq = icmp eq i128 %i158, 0
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body157
  %x_cu159 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %x_cu, align 8
  %struct_getter160 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %x_cu159, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter160, align 8
  %i161 = load i128, i128* %i, align 4
  %array_getter162 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter, i128 0, i128 %i161
  %x_cu163 = load i128, i128* %array_getter162, align 4
  %a = load i128, i128* %pointoncurve.a.declare_arg, align 4
  %in164 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pointoncurve.in.declare_input, align 8
  %i165 = load i128, i128* %i, align 4
  %array_getter166 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in164, i128 0, i128 0, i128 %i165
  %in167 = load i128, i128* %array_getter166, align 4
  %mul168 = mul i128 %a, %in167
  %add169 = add i128 %x_cu163, %mul168
  %b = load i128, i128* %pointoncurve.b.declare_arg, align 4
  %add170 = add i128 %add169, %b
  %cu_red171 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cu_red, align 8
  %struct_getter172 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %cu_red171, i32 0, i32 5
  %primereduce.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter172, align 8
  %i173 = load i128, i128* %i, align 4
  %array_getter174 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter, i128 0, i128 %i173
  %cu_red175 = load i128, i128* %array_getter174, align 4
  call void @fn_intrinsic_add_constraint(i128 %cu_red175, i128 %add170, i1* @constraint.338)
  %ptr_getter176 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cu_red, align 8
  %struct_getter177 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %ptr_getter176, i32 0, i32 5
  %primereduce.in.read_input_outter178 = load [256 x i128]*, [256 x i128]** %struct_getter177, align 8
  %i179 = load i128, i128* %i, align 4
  %cu_red180 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter178, i128 0, i128 %i179
  store i128 %add170, i128* %cu_red180, align 4
  br label %if.exit227

if.false:                                         ; preds = %loop.body157
  %i183 = load i128, i128* %i, align 4
  %k184 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %slt185 = icmp slt i128 %i183, %k184
  br i1 %slt185, label %if.true181, label %if.false182

if.true181:                                       ; preds = %if.false
  %x_cu186 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %x_cu, align 8
  %struct_getter187 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %x_cu186, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter188 = load [256 x i128]*, [256 x i128]** %struct_getter187, align 8
  %i189 = load i128, i128* %i, align 4
  %array_getter190 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter188, i128 0, i128 %i189
  %x_cu191 = load i128, i128* %array_getter190, align 4
  %a192 = load i128, i128* %pointoncurve.a.declare_arg, align 4
  %in193 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %pointoncurve.in.declare_input, align 8
  %i194 = load i128, i128* %i, align 4
  %array_getter195 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in193, i128 0, i128 0, i128 %i194
  %in196 = load i128, i128* %array_getter195, align 4
  %mul197 = mul i128 %a192, %in196
  %add198 = add i128 %x_cu191, %mul197
  %cu_red199 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cu_red, align 8
  %struct_getter200 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %cu_red199, i32 0, i32 5
  %primereduce.in.read_input_outter201 = load [256 x i128]*, [256 x i128]** %struct_getter200, align 8
  %i202 = load i128, i128* %i, align 4
  %array_getter203 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter201, i128 0, i128 %i202
  %cu_red204 = load i128, i128* %array_getter203, align 4
  call void @fn_intrinsic_add_constraint(i128 %cu_red204, i128 %add198, i1* @constraint.339)
  %ptr_getter205 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cu_red, align 8
  %struct_getter206 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %ptr_getter205, i32 0, i32 5
  %primereduce.in.read_input_outter207 = load [256 x i128]*, [256 x i128]** %struct_getter206, align 8
  %i208 = load i128, i128* %i, align 4
  %cu_red209 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter207, i128 0, i128 %i208
  store i128 %add198, i128* %cu_red209, align 4
  br label %if.exit

if.false182:                                      ; preds = %if.false
  %x_cu210 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %x_cu, align 8
  %struct_getter211 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %x_cu210, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter212 = load [256 x i128]*, [256 x i128]** %struct_getter211, align 8
  %i213 = load i128, i128* %i, align 4
  %array_getter214 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter212, i128 0, i128 %i213
  %x_cu215 = load i128, i128* %array_getter214, align 4
  %cu_red216 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cu_red, align 8
  %struct_getter217 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %cu_red216, i32 0, i32 5
  %primereduce.in.read_input_outter218 = load [256 x i128]*, [256 x i128]** %struct_getter217, align 8
  %i219 = load i128, i128* %i, align 4
  %array_getter220 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter218, i128 0, i128 %i219
  %cu_red221 = load i128, i128* %array_getter220, align 4
  call void @fn_intrinsic_add_constraint(i128 %cu_red221, i128 %x_cu215, i1* @constraint.340)
  %ptr_getter222 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cu_red, align 8
  %struct_getter223 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %ptr_getter222, i32 0, i32 5
  %primereduce.in.read_input_outter224 = load [256 x i128]*, [256 x i128]** %struct_getter223, align 8
  %i225 = load i128, i128* %i, align 4
  %cu_red226 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter224, i128 0, i128 %i225
  store i128 %x_cu215, i128* %cu_red226, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false182, %if.true181
  br label %if.exit227

if.exit227:                                       ; preds = %if.exit, %if.true
  br label %loop.latch228

loop.latch228:                                    ; preds = %if.exit227
  %i229 = load i128, i128* %i, align 4
  %add230 = add i128 %i229, 1
  store i128 %add230, i128* %i, align 4
  %i231 = load i128, i128* %i, align 4
  %k232 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %mul233 = mul i128 3, %k232
  %sub234 = sub i128 %mul233, 2
  %slt235 = icmp slt i128 %i231, %sub234
  br i1 %slt235, label %loop.body157, label %loop.exit236

loop.exit236:                                     ; preds = %loop.latch228
  %n237 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %k238 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %k239 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %sub240 = sub i128 %k239, 1
  %p241 = load [256 x i128]*, [256 x i128]** %pointoncurve.p.declare_arg, align 8
  %n242 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %mul243 = mul i128 3, %n242
  %LOGK244 = load i128, i128* %LOGK, align 4
  %mul245 = mul i128 2, %LOGK244
  %add246 = add i128 %mul243, %mul245
  %add247 = add i128 %add246, 1
  %call248 = call %struct_template_circuit_primereduce* @fn_template_build_primereduce(i128 %n237, i128 %k238, i128 %sub240, [256 x i128]* %p241, i128 %add247)
  store %struct_template_circuit_primereduce* %call248, %struct_template_circuit_primereduce** %y_sq_red, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body249

loop.body249:                                     ; preds = %loop.latch267, %loop.exit236
  %y_sq250 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %y_sq, align 8
  %struct_getter251 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %y_sq250, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter252 = load [256 x i128]*, [256 x i128]** %struct_getter251, align 8
  %i253 = load i128, i128* %i, align 4
  %array_getter254 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter252, i128 0, i128 %i253
  %y_sq255 = load i128, i128* %array_getter254, align 4
  %y_sq_red256 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %y_sq_red, align 8
  %struct_getter257 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %y_sq_red256, i32 0, i32 5
  %primereduce.in.read_input_outter258 = load [256 x i128]*, [256 x i128]** %struct_getter257, align 8
  %i259 = load i128, i128* %i, align 4
  %array_getter260 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter258, i128 0, i128 %i259
  %y_sq_red261 = load i128, i128* %array_getter260, align 4
  call void @fn_intrinsic_add_constraint(i128 %y_sq_red261, i128 %y_sq255, i1* @constraint.341)
  %ptr_getter262 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %y_sq_red, align 8
  %struct_getter263 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %ptr_getter262, i32 0, i32 5
  %primereduce.in.read_input_outter264 = load [256 x i128]*, [256 x i128]** %struct_getter263, align 8
  %i265 = load i128, i128* %i, align 4
  %y_sq_red266 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter264, i128 0, i128 %i265
  store i128 %y_sq255, i128* %y_sq_red266, align 4
  br label %loop.latch267

loop.latch267:                                    ; preds = %loop.body249
  %i268 = load i128, i128* %i, align 4
  %add269 = add i128 %i268, 1
  store i128 %add269, i128* %i, align 4
  %i270 = load i128, i128* %i, align 4
  %k271 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %mul272 = mul i128 2, %k271
  %sub273 = sub i128 %mul272, 1
  %slt274 = icmp slt i128 %i270, %sub273
  br i1 %slt274, label %loop.body249, label %loop.exit275

loop.exit275:                                     ; preds = %loop.latch267
  %n276 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %k277 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %n278 = load i128, i128* %pointoncurve.n.declare_arg, align 4
  %mul279 = mul i128 4, %n278
  %LOGK2280 = load i128, i128* %LOGK2, align 4
  %add281 = add i128 %mul279, %LOGK2280
  %p282 = load [256 x i128]*, [256 x i128]** %pointoncurve.p.declare_arg, align 8
  %call283 = call %struct_template_circuit_signedcheckcarrymodtozero* @fn_template_build_signedcheckcarrymodtozero(i128 %n276, i128 %k277, i128 %add281, [256 x i128]* %p282)
  store %struct_template_circuit_signedcheckcarrymodtozero* %call283, %struct_template_circuit_signedcheckcarrymodtozero** %constraint, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body284

loop.body284:                                     ; preds = %loop.latch307, %loop.exit275
  %cu_red285 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cu_red, align 8
  %struct_getter286 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %cu_red285, i32 0, i32 6
  %primereduce.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter286, align 8
  %i287 = load i128, i128* %i, align 4
  %array_getter288 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.out.read_output_outter, i128 0, i128 %i287
  %cu_red289 = load i128, i128* %array_getter288, align 4
  %y_sq_red290 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %y_sq_red, align 8
  %struct_getter291 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %y_sq_red290, i32 0, i32 6
  %primereduce.out.read_output_outter292 = load [256 x i128]*, [256 x i128]** %struct_getter291, align 8
  %i293 = load i128, i128* %i, align 4
  %array_getter294 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.out.read_output_outter292, i128 0, i128 %i293
  %y_sq_red295 = load i128, i128* %array_getter294, align 4
  %sub296 = sub i128 %cu_red289, %y_sq_red295
  %constraint297 = load %struct_template_circuit_signedcheckcarrymodtozero*, %struct_template_circuit_signedcheckcarrymodtozero** %constraint, align 8
  %struct_getter298 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %constraint297, i32 0, i32 4
  %signedcheckcarrymodtozero.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter298, align 8
  %i299 = load i128, i128* %i, align 4
  %array_getter300 = getelementptr inbounds [256 x i128], [256 x i128]* %signedcheckcarrymodtozero.in.read_input_outter, i128 0, i128 %i299
  %constraint301 = load i128, i128* %array_getter300, align 4
  call void @fn_intrinsic_add_constraint(i128 %constraint301, i128 %sub296, i1* @constraint.342)
  %ptr_getter302 = load %struct_template_circuit_signedcheckcarrymodtozero*, %struct_template_circuit_signedcheckcarrymodtozero** %constraint, align 8
  %struct_getter303 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %ptr_getter302, i32 0, i32 4
  %signedcheckcarrymodtozero.in.read_input_outter304 = load [256 x i128]*, [256 x i128]** %struct_getter303, align 8
  %i305 = load i128, i128* %i, align 4
  %constraint306 = getelementptr inbounds [256 x i128], [256 x i128]* %signedcheckcarrymodtozero.in.read_input_outter304, i128 0, i128 %i305
  store i128 %sub296, i128* %constraint306, align 4
  br label %loop.latch307

loop.latch307:                                    ; preds = %loop.body284
  %i308 = load i128, i128* %i, align 4
  %add309 = add i128 %i308, 1
  store i128 %add309, i128* %i, align 4
  %i310 = load i128, i128* %i, align 4
  %k311 = load i128, i128* %pointoncurve.k.declare_arg, align 4
  %slt312 = icmp slt i128 %i310, %k311
  br i1 %slt312, label %loop.body284, label %loop.exit313

loop.exit313:                                     ; preds = %loop.latch307
  br label %exit

exit:                                             ; preds = %loop.exit313
  ret void
}

define %struct_template_circuit_pointoncurve* @fn_template_build_pointoncurve(i128 %0, i128 %1, i128 %2, i128 %3, [256 x i128]* %4) {
entry:
  %struct_template_circuit_pointoncurve = alloca %struct_template_circuit_pointoncurve, align 8
  %pointoncurve.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %struct_template_circuit_pointoncurve, i32 0, i32 0
  store i128 %0, i128* %pointoncurve.n.write_arg_inner, align 4
  %pointoncurve.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %struct_template_circuit_pointoncurve, i32 0, i32 1
  store i128 %1, i128* %pointoncurve.k.write_arg_inner, align 4
  %pointoncurve.a.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %struct_template_circuit_pointoncurve, i32 0, i32 2
  store i128 %2, i128* %pointoncurve.a.write_arg_inner, align 4
  %pointoncurve.b.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %struct_template_circuit_pointoncurve, i32 0, i32 3
  store i128 %3, i128* %pointoncurve.b.write_arg_inner, align 4
  %pointoncurve.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %struct_template_circuit_pointoncurve, i32 0, i32 4
  store [256 x i128]* %4, [256 x i128]** %pointoncurve.p.write_arg_inner, align 8
  ret %struct_template_circuit_pointoncurve* %struct_template_circuit_pointoncurve
}

define void @fn_template_init_signedfp2multiplynocarrycompressthree(%struct_template_circuit_signedfp2multiplynocarrycompressthree* %0) {
entry:
  %SignedFp2MultiplyNoCarryCompressThree = alloca %struct_template_circuit_signedfp2multiplynocarrycompressthree*, align 8
  store %struct_template_circuit_signedfp2multiplynocarrycompressthree* %0, %struct_template_circuit_signedfp2multiplynocarrycompressthree** %SignedFp2MultiplyNoCarryCompressThree, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %0, i32 0, i32 0
  %signedfp2multiplynocarrycompressthree.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %signedfp2multiplynocarrycompressthree.n.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarrycompressthree.n.read_arg_inner, i128* %signedfp2multiplynocarrycompressthree.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %0, i32 0, i32 1
  %signedfp2multiplynocarrycompressthree.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %signedfp2multiplynocarrycompressthree.k.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarrycompressthree.k.read_arg_inner, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %0, i32 0, i32 2
  %signedfp2multiplynocarrycompressthree.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %signedfp2multiplynocarrycompressthree.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %signedfp2multiplynocarrycompressthree.p.read_arg_inner, [256 x i128]** %signedfp2multiplynocarrycompressthree.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %0, i32 0, i32 3
  %signedfp2multiplynocarrycompressthree.m_in.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %signedfp2multiplynocarrycompressthree.m_in.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarrycompressthree.m_in.read_arg_inner, i128* %signedfp2multiplynocarrycompressthree.m_in.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %0, i32 0, i32 4
  %signedfp2multiplynocarrycompressthree.m_out.read_arg_inner = load i128, i128* %struct_getter4, align 4
  %signedfp2multiplynocarrycompressthree.m_out.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarrycompressthree.m_out.read_arg_inner, i128* %signedfp2multiplynocarrycompressthree.m_out.declare_arg, align 4
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %0, i32 0, i32 5
  %signedfp2multiplynocarrycompressthree.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %signedfp2multiplynocarrycompressthree.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2multiplynocarrycompressthree.a.read_input_inner, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.a.declare_input, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %0, i32 0, i32 6
  %signedfp2multiplynocarrycompressthree.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter6, align 8
  %signedfp2multiplynocarrycompressthree.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2multiplynocarrycompressthree.b.read_input_inner, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.b.declare_input, align 8
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %0, i32 0, i32 7
  %signedfp2multiplynocarrycompressthree.c.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter7, align 8
  %signedfp2multiplynocarrycompressthree.c.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2multiplynocarrycompressthree.c.read_input_inner, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.c.declare_input, align 8
  %abc = alloca %struct_template_circuit_signedfp2multiplynocarryunequal*, align 8
  %signedfp2multiplynocarrycompressthree.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.out.declare_output, align 8
  %compress = alloca %struct_template_circuit_fp2compress*, align 8
  %i = alloca i128, align 8
  %i8 = call i128 @fn_intrinsic_inline_init()
  store i128 %i8, i128* %i, align 4
  %ab = alloca %struct_template_circuit_signedfp2multiplynocarry*, align 8
  %LOGK = alloca i128, align 8
  %LOGK9 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK9, i128* %LOGK, align 4
  %idx = alloca i128, align 8
  %idx10 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx10, i128* %idx, align 4
  %j = alloca i128, align 8
  %j11 = call i128 @fn_intrinsic_inline_init()
  store i128 %j11, i128* %j, align 4
  %k = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %call = call i128 @log_ceil(i128 %k)
  store i128 %call, i128* %LOGK, align 4
  %n = load i128, i128* %signedfp2multiplynocarrycompressthree.n.declare_arg, align 4
  %k12 = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %m_in = load i128, i128* %signedfp2multiplynocarrycompressthree.m_in.declare_arg, align 4
  %mul = mul i128 2, %m_in
  %LOGK13 = load i128, i128* %LOGK, align 4
  %add = add i128 %mul, %LOGK13
  %add14 = add i128 %add, 1
  %call15 = call %struct_template_circuit_signedfp2multiplynocarry* @fn_template_build_signedfp2multiplynocarry(i128 %n, i128 %k12, i128 %add14)
  store %struct_template_circuit_signedfp2multiplynocarry* %call15, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch51, %entry
  store i128 0, i128* %idx, align 4
  br label %loop.body16

loop.body16:                                      ; preds = %loop.latch, %loop.body
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.a.declare_input, align 8
  %i17 = load i128, i128* %i, align 4
  %idx18 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i17, i128 %idx18
  %a19 = load i128, i128* %array_getter, align 4
  %ab20 = load %struct_template_circuit_signedfp2multiplynocarry*, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  %struct_getter21 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %ab20, i32 0, i32 3
  %signedfp2multiplynocarry.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter21, align 8
  %i22 = load i128, i128* %i, align 4
  %idx23 = load i128, i128* %idx, align 4
  %array_getter24 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarry.a.read_input_outter, i128 0, i128 %i22, i128 %idx23
  %ab25 = load i128, i128* %array_getter24, align 4
  call void @fn_intrinsic_add_constraint(i128 %ab25, i128 %a19, i1* @constraint.343)
  %ptr_getter = load %struct_template_circuit_signedfp2multiplynocarry*, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %ptr_getter, i32 0, i32 3
  %signedfp2multiplynocarry.a.read_input_outter27 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter26, align 8
  %i28 = load i128, i128* %i, align 4
  %idx29 = load i128, i128* %idx, align 4
  %ab30 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarry.a.read_input_outter27, i128 0, i128 %i28, i128 %idx29
  store i128 %a19, i128* %ab30, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.b.declare_input, align 8
  %i31 = load i128, i128* %i, align 4
  %idx32 = load i128, i128* %idx, align 4
  %array_getter33 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %i31, i128 %idx32
  %b34 = load i128, i128* %array_getter33, align 4
  %ab35 = load %struct_template_circuit_signedfp2multiplynocarry*, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  %struct_getter36 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %ab35, i32 0, i32 4
  %signedfp2multiplynocarry.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter36, align 8
  %i37 = load i128, i128* %i, align 4
  %idx38 = load i128, i128* %idx, align 4
  %array_getter39 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarry.b.read_input_outter, i128 0, i128 %i37, i128 %idx38
  %ab40 = load i128, i128* %array_getter39, align 4
  call void @fn_intrinsic_add_constraint(i128 %ab40, i128 %b34, i1* @constraint.344)
  %ptr_getter41 = load %struct_template_circuit_signedfp2multiplynocarry*, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  %struct_getter42 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %ptr_getter41, i32 0, i32 4
  %signedfp2multiplynocarry.b.read_input_outter43 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter42, align 8
  %i44 = load i128, i128* %i, align 4
  %idx45 = load i128, i128* %idx, align 4
  %ab46 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarry.b.read_input_outter43, i128 0, i128 %i44, i128 %idx45
  store i128 %b34, i128* %ab46, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body16
  %idx47 = load i128, i128* %idx, align 4
  %add48 = add i128 %idx47, 1
  store i128 %add48, i128* %idx, align 4
  %idx49 = load i128, i128* %idx, align 4
  %k50 = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %slt = icmp slt i128 %idx49, %k50
  br i1 %slt, label %loop.body16, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch51

loop.latch51:                                     ; preds = %loop.exit
  %i52 = load i128, i128* %i, align 4
  %add53 = add i128 %i52, 1
  store i128 %add53, i128* %i, align 4
  %i54 = load i128, i128* %i, align 4
  %slt55 = icmp slt i128 %i54, 2
  br i1 %slt55, label %loop.body, label %loop.exit56

loop.exit56:                                      ; preds = %loop.latch51
  %n57 = load i128, i128* %signedfp2multiplynocarrycompressthree.n.declare_arg, align 4
  %k58 = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %mul59 = mul i128 2, %k58
  %sub = sub i128 %mul59, 1
  %k60 = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %m_in61 = load i128, i128* %signedfp2multiplynocarrycompressthree.m_in.declare_arg, align 4
  %mul62 = mul i128 3, %m_in61
  %LOGK63 = load i128, i128* %LOGK, align 4
  %mul64 = mul i128 2, %LOGK63
  %add65 = add i128 %mul62, %mul64
  %add66 = add i128 %add65, 2
  %call67 = call %struct_template_circuit_signedfp2multiplynocarryunequal* @fn_template_build_signedfp2multiplynocarryunequal(i128 %n57, i128 %sub, i128 %k60, i128 %add66)
  store %struct_template_circuit_signedfp2multiplynocarryunequal* %call67, %struct_template_circuit_signedfp2multiplynocarryunequal** %abc, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body68

loop.body68:                                      ; preds = %loop.latch121, %loop.exit56
  store i128 0, i128* %idx, align 4
  br label %loop.body69

loop.body69:                                      ; preds = %loop.latch88, %loop.body68
  %ab70 = load %struct_template_circuit_signedfp2multiplynocarry*, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  %struct_getter71 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %ab70, i32 0, i32 5
  %signedfp2multiplynocarry.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter71, align 8
  %i72 = load i128, i128* %i, align 4
  %idx73 = load i128, i128* %idx, align 4
  %array_getter74 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarry.out.read_output_outter, i128 0, i128 %i72, i128 %idx73
  %ab75 = load i128, i128* %array_getter74, align 4
  %abc76 = load %struct_template_circuit_signedfp2multiplynocarryunequal*, %struct_template_circuit_signedfp2multiplynocarryunequal** %abc, align 8
  %struct_getter77 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %abc76, i32 0, i32 4
  %signedfp2multiplynocarryunequal.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter77, align 8
  %i78 = load i128, i128* %i, align 4
  %idx79 = load i128, i128* %idx, align 4
  %array_getter80 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.a.read_input_outter, i128 0, i128 %i78, i128 %idx79
  %abc81 = load i128, i128* %array_getter80, align 4
  call void @fn_intrinsic_add_constraint(i128 %abc81, i128 %ab75, i1* @constraint.345)
  %ptr_getter82 = load %struct_template_circuit_signedfp2multiplynocarryunequal*, %struct_template_circuit_signedfp2multiplynocarryunequal** %abc, align 8
  %struct_getter83 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %ptr_getter82, i32 0, i32 4
  %signedfp2multiplynocarryunequal.a.read_input_outter84 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter83, align 8
  %i85 = load i128, i128* %i, align 4
  %idx86 = load i128, i128* %idx, align 4
  %abc87 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.a.read_input_outter84, i128 0, i128 %i85, i128 %idx86
  store i128 %ab75, i128* %abc87, align 4
  br label %loop.latch88

loop.latch88:                                     ; preds = %loop.body69
  %idx89 = load i128, i128* %idx, align 4
  %add90 = add i128 %idx89, 1
  store i128 %add90, i128* %idx, align 4
  %idx91 = load i128, i128* %idx, align 4
  %k92 = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %mul93 = mul i128 2, %k92
  %sub94 = sub i128 %mul93, 1
  %slt95 = icmp slt i128 %idx91, %sub94
  br i1 %slt95, label %loop.body69, label %loop.exit96

loop.exit96:                                      ; preds = %loop.latch88
  store i128 0, i128* %idx, align 4
  br label %loop.body97

loop.body97:                                      ; preds = %loop.latch114, %loop.exit96
  %c = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.c.declare_input, align 8
  %i98 = load i128, i128* %i, align 4
  %idx99 = load i128, i128* %idx, align 4
  %array_getter100 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %c, i128 0, i128 %i98, i128 %idx99
  %c101 = load i128, i128* %array_getter100, align 4
  %abc102 = load %struct_template_circuit_signedfp2multiplynocarryunequal*, %struct_template_circuit_signedfp2multiplynocarryunequal** %abc, align 8
  %struct_getter103 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %abc102, i32 0, i32 5
  %signedfp2multiplynocarryunequal.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter103, align 8
  %i104 = load i128, i128* %i, align 4
  %idx105 = load i128, i128* %idx, align 4
  %array_getter106 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.b.read_input_outter, i128 0, i128 %i104, i128 %idx105
  %abc107 = load i128, i128* %array_getter106, align 4
  call void @fn_intrinsic_add_constraint(i128 %abc107, i128 %c101, i1* @constraint.346)
  %ptr_getter108 = load %struct_template_circuit_signedfp2multiplynocarryunequal*, %struct_template_circuit_signedfp2multiplynocarryunequal** %abc, align 8
  %struct_getter109 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %ptr_getter108, i32 0, i32 5
  %signedfp2multiplynocarryunequal.b.read_input_outter110 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter109, align 8
  %i111 = load i128, i128* %i, align 4
  %idx112 = load i128, i128* %idx, align 4
  %abc113 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.b.read_input_outter110, i128 0, i128 %i111, i128 %idx112
  store i128 %c101, i128* %abc113, align 4
  br label %loop.latch114

loop.latch114:                                    ; preds = %loop.body97
  %idx115 = load i128, i128* %idx, align 4
  %add116 = add i128 %idx115, 1
  store i128 %add116, i128* %idx, align 4
  %idx117 = load i128, i128* %idx, align 4
  %k118 = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %slt119 = icmp slt i128 %idx117, %k118
  br i1 %slt119, label %loop.body97, label %loop.exit120

loop.exit120:                                     ; preds = %loop.latch114
  br label %loop.latch121

loop.latch121:                                    ; preds = %loop.exit120
  %i122 = load i128, i128* %i, align 4
  %add123 = add i128 %i122, 1
  store i128 %add123, i128* %i, align 4
  %i124 = load i128, i128* %i, align 4
  %slt125 = icmp slt i128 %i124, 2
  br i1 %slt125, label %loop.body68, label %loop.exit126

loop.exit126:                                     ; preds = %loop.latch121
  %n127 = load i128, i128* %signedfp2multiplynocarrycompressthree.n.declare_arg, align 4
  %k128 = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %k129 = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %mul130 = mul i128 2, %k129
  %sub131 = sub i128 %mul130, 2
  %p = load [256 x i128]*, [256 x i128]** %signedfp2multiplynocarrycompressthree.p.declare_arg, align 8
  %m_in132 = load i128, i128* %signedfp2multiplynocarrycompressthree.m_in.declare_arg, align 4
  %mul133 = mul i128 3, %m_in132
  %n134 = load i128, i128* %signedfp2multiplynocarrycompressthree.n.declare_arg, align 4
  %add135 = add i128 %mul133, %n134
  %LOGK136 = load i128, i128* %LOGK, align 4
  %mul137 = mul i128 3, %LOGK136
  %add138 = add i128 %add135, %mul137
  %add139 = add i128 %add138, 3
  %call140 = call %struct_template_circuit_fp2compress* @fn_template_build_fp2compress(i128 %n127, i128 %k128, i128 %sub131, [256 x i128]* %p, i128 %add139)
  store %struct_template_circuit_fp2compress* %call140, %struct_template_circuit_fp2compress** %compress, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body141

loop.body141:                                     ; preds = %loop.latch170, %loop.exit126
  store i128 0, i128* %j, align 4
  br label %loop.body142

loop.body142:                                     ; preds = %loop.latch161, %loop.body141
  %abc143 = load %struct_template_circuit_signedfp2multiplynocarryunequal*, %struct_template_circuit_signedfp2multiplynocarryunequal** %abc, align 8
  %struct_getter144 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarryunequal, %struct_template_circuit_signedfp2multiplynocarryunequal* %abc143, i32 0, i32 6
  %signedfp2multiplynocarryunequal.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter144, align 8
  %i145 = load i128, i128* %i, align 4
  %j146 = load i128, i128* %j, align 4
  %array_getter147 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarryunequal.out.read_output_outter, i128 0, i128 %i145, i128 %j146
  %abc148 = load i128, i128* %array_getter147, align 4
  %compress149 = load %struct_template_circuit_fp2compress*, %struct_template_circuit_fp2compress** %compress, align 8
  %struct_getter150 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %compress149, i32 0, i32 5
  %fp2compress.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter150, align 8
  %i151 = load i128, i128* %i, align 4
  %j152 = load i128, i128* %j, align 4
  %array_getter153 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2compress.in.read_input_outter, i128 0, i128 %i151, i128 %j152
  %compress154 = load i128, i128* %array_getter153, align 4
  call void @fn_intrinsic_add_constraint(i128 %compress154, i128 %abc148, i1* @constraint.347)
  %ptr_getter155 = load %struct_template_circuit_fp2compress*, %struct_template_circuit_fp2compress** %compress, align 8
  %struct_getter156 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %ptr_getter155, i32 0, i32 5
  %fp2compress.in.read_input_outter157 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter156, align 8
  %i158 = load i128, i128* %i, align 4
  %j159 = load i128, i128* %j, align 4
  %compress160 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2compress.in.read_input_outter157, i128 0, i128 %i158, i128 %j159
  store i128 %abc148, i128* %compress160, align 4
  br label %loop.latch161

loop.latch161:                                    ; preds = %loop.body142
  %j162 = load i128, i128* %j, align 4
  %add163 = add i128 %j162, 1
  store i128 %add163, i128* %j, align 4
  %j164 = load i128, i128* %j, align 4
  %k165 = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %mul166 = mul i128 3, %k165
  %sub167 = sub i128 %mul166, 2
  %slt168 = icmp slt i128 %j164, %sub167
  br i1 %slt168, label %loop.body142, label %loop.exit169

loop.exit169:                                     ; preds = %loop.latch161
  br label %loop.latch170

loop.latch170:                                    ; preds = %loop.exit169
  %i171 = load i128, i128* %i, align 4
  %add172 = add i128 %i171, 1
  store i128 %add172, i128* %i, align 4
  %i173 = load i128, i128* %i, align 4
  %slt174 = icmp slt i128 %i173, 2
  br i1 %slt174, label %loop.body141, label %loop.exit175

loop.exit175:                                     ; preds = %loop.latch170
  store i128 0, i128* %i, align 4
  br label %loop.body176

loop.body176:                                     ; preds = %loop.latch200, %loop.exit175
  store i128 0, i128* %j, align 4
  br label %loop.body177

loop.body177:                                     ; preds = %loop.latch193, %loop.body176
  %compress178 = load %struct_template_circuit_fp2compress*, %struct_template_circuit_fp2compress** %compress, align 8
  %struct_getter179 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %compress178, i32 0, i32 6
  %fp2compress.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter179, align 8
  %i180 = load i128, i128* %i, align 4
  %j181 = load i128, i128* %j, align 4
  %array_getter182 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2compress.out.read_output_outter, i128 0, i128 %i180, i128 %j181
  %compress183 = load i128, i128* %array_getter182, align 4
  %out184 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.out.declare_output, align 8
  %i185 = load i128, i128* %i, align 4
  %j186 = load i128, i128* %j, align 4
  %array_getter187 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out184, i128 0, i128 %i185, i128 %j186
  %out188 = load i128, i128* %array_getter187, align 4
  call void @fn_intrinsic_add_constraint(i128 %out188, i128 %compress183, i1* @constraint.348)
  %ptr_getter189 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.out.declare_output, align 8
  %i190 = load i128, i128* %i, align 4
  %j191 = load i128, i128* %j, align 4
  %out192 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter189, i128 0, i128 %i190, i128 %j191
  store i128 %compress183, i128* %out192, align 4
  br label %loop.latch193

loop.latch193:                                    ; preds = %loop.body177
  %j194 = load i128, i128* %j, align 4
  %add195 = add i128 %j194, 1
  store i128 %add195, i128* %j, align 4
  %j196 = load i128, i128* %j, align 4
  %k197 = load i128, i128* %signedfp2multiplynocarrycompressthree.k.declare_arg, align 4
  %slt198 = icmp slt i128 %j196, %k197
  br i1 %slt198, label %loop.body177, label %loop.exit199

loop.exit199:                                     ; preds = %loop.latch193
  br label %loop.latch200

loop.latch200:                                    ; preds = %loop.exit199
  %i201 = load i128, i128* %i, align 4
  %add202 = add i128 %i201, 1
  store i128 %add202, i128* %i, align 4
  %i203 = load i128, i128* %i, align 4
  %slt204 = icmp slt i128 %i203, 2
  br i1 %slt204, label %loop.body176, label %loop.exit205

loop.exit205:                                     ; preds = %loop.latch200
  br label %exit

exit:                                             ; preds = %loop.exit205
  %out206 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.out.declare_output, align 8
  %signedfp2multiplynocarrycompressthree.out.write_output_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %0, i32 0, i32 8
  store [256 x [256 x i128]]* %out206, [256 x [256 x i128]]** %signedfp2multiplynocarrycompressthree.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_signedfp2multiplynocarrycompressthree* @fn_template_build_signedfp2multiplynocarrycompressthree(i128 %0, i128 %1, [256 x i128]* %2, i128 %3, i128 %4) {
entry:
  %struct_template_circuit_signedfp2multiplynocarrycompressthree = alloca %struct_template_circuit_signedfp2multiplynocarrycompressthree, align 8
  %signedfp2multiplynocarrycompressthree.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %struct_template_circuit_signedfp2multiplynocarrycompressthree, i32 0, i32 0
  store i128 %0, i128* %signedfp2multiplynocarrycompressthree.n.write_arg_inner, align 4
  %signedfp2multiplynocarrycompressthree.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %struct_template_circuit_signedfp2multiplynocarrycompressthree, i32 0, i32 1
  store i128 %1, i128* %signedfp2multiplynocarrycompressthree.k.write_arg_inner, align 4
  %signedfp2multiplynocarrycompressthree.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %struct_template_circuit_signedfp2multiplynocarrycompressthree, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %signedfp2multiplynocarrycompressthree.p.write_arg_inner, align 8
  %signedfp2multiplynocarrycompressthree.m_in.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %struct_template_circuit_signedfp2multiplynocarrycompressthree, i32 0, i32 3
  store i128 %3, i128* %signedfp2multiplynocarrycompressthree.m_in.write_arg_inner, align 4
  %signedfp2multiplynocarrycompressthree.m_out.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %struct_template_circuit_signedfp2multiplynocarrycompressthree, i32 0, i32 4
  store i128 %4, i128* %signedfp2multiplynocarrycompressthree.m_out.write_arg_inner, align 4
  ret %struct_template_circuit_signedfp2multiplynocarrycompressthree* %struct_template_circuit_signedfp2multiplynocarrycompressthree
}

define void @fn_template_init_ellipticcurveaddunequal(%struct_template_circuit_ellipticcurveaddunequal* %0) {
entry:
  %EllipticCurveAddUnequal = alloca %struct_template_circuit_ellipticcurveaddunequal*, align 8
  store %struct_template_circuit_ellipticcurveaddunequal* %0, %struct_template_circuit_ellipticcurveaddunequal** %EllipticCurveAddUnequal, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %0, i32 0, i32 0
  %ellipticcurveaddunequal.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %ellipticcurveaddunequal.n.declare_arg = alloca i128, align 8
  store i128 %ellipticcurveaddunequal.n.read_arg_inner, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %0, i32 0, i32 1
  %ellipticcurveaddunequal.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %ellipticcurveaddunequal.k.declare_arg = alloca i128, align 8
  store i128 %ellipticcurveaddunequal.k.read_arg_inner, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %0, i32 0, i32 2
  %ellipticcurveaddunequal.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %ellipticcurveaddunequal.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %ellipticcurveaddunequal.p.read_arg_inner, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %0, i32 0, i32 3
  %ellipticcurveaddunequal.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %ellipticcurveaddunequal.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %ellipticcurveaddunequal.a.read_input_inner, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %0, i32 0, i32 4
  %ellipticcurveaddunequal.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %ellipticcurveaddunequal.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %ellipticcurveaddunequal.b.read_input_inner, [256 x [256 x i128]]** %ellipticcurveaddunequal.b.declare_input, align 8
  %dy_sq = alloca %struct_template_circuit_bigmultshortlong*, align 8
  %LOGK = alloca i128, align 8
  %LOGK5 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK5, i128* %LOGK, align 4
  %dx_sq = alloca %struct_template_circuit_bigmultshortlong*, align 8
  %cubic_mod = alloca %struct_template_circuit_signedcheckcarrymodtozero*, align 8
  %LOGK3 = alloca i128, align 8
  %LOGK36 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK36, i128* %LOGK3, align 4
  %dy = alloca [256 x i128]*, align 8
  %dy7 = alloca [256 x i128], align 8
  store [256 x i128]* %dy7, [256 x i128]** %dy, align 8
  %dx = alloca [256 x i128]*, align 8
  %dx8 = alloca [256 x i128], align 8
  store [256 x i128]* %dx8, [256 x i128]** %dx, align 8
  %cubic = alloca %struct_template_circuit_bigmultshortlongunequal*, align 8
  %y_constraint = alloca %struct_template_circuit_pointonline*, align 8
  %ellipticcurveaddunequal.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %ellipticcurveaddunequal.out.declare_output, align 8
  %x3 = alloca [256 x i128]*, align 8
  %x39 = alloca [256 x i128], align 8
  store [256 x i128]* %x39, [256 x i128]** %x3, align 8
  %lambda = alloca [256 x i128]*, align 8
  %lambda10 = alloca [256 x i128], align 8
  store [256 x i128]* %lambda10, [256 x i128]** %lambda, align 8
  %i = alloca i128, align 8
  %i11 = call i128 @fn_intrinsic_inline_init()
  store i128 %i11, i128* %i, align 4
  %cubic_red = alloca %struct_template_circuit_primereduce*, align 8
  %j = alloca i128, align 8
  %j12 = call i128 @fn_intrinsic_inline_init()
  store i128 %j12, i128* %j, align 4
  %range_check = alloca %struct_template_circuit_rangecheck2d*, align 8
  %dx_inv = alloca [256 x i128]*, align 8
  %dx_inv13 = alloca [256 x i128], align 8
  store [256 x i128]* %dx_inv13, [256 x i128]** %dx_inv, align 8
  %lambda_sq = alloca [256 x i128]*, align 8
  %lambda_sq14 = alloca [256 x i128], align 8
  store [256 x i128]* %lambda_sq14, [256 x i128]** %lambda_sq, align 8
  %y3 = alloca [256 x i128]*, align 8
  %y315 = alloca [256 x i128], align 8
  store [256 x i128]* %y315, [256 x i128]** %y3, align 8
  %k = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %call = call i128 @log_ceil(i128 %k)
  store i128 %call, i128* %LOGK, align 4
  %k16 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %mul = mul i128 3, %k16
  %k17 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %mul18 = mul i128 %mul, %k17
  %k19 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %mul20 = mul i128 2, %k19
  %sub = sub i128 %mul20, 1
  %mul21 = mul i128 %mul18, %sub
  %add = add i128 %mul21, 1
  %call22 = call i128 @log_ceil(i128 %add)
  store i128 %call22, i128* %LOGK3, align 4
  %n = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k23 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.b.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 1
  %b24 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %b24, [256 x i128]* %spice_inline_array, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %array_getter25 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 1
  %a26 = load [256 x i128], [256 x i128]* %array_getter25, align 4
  %spice_inline_array27 = alloca [256 x i128], align 8
  store [256 x i128] %a26, [256 x i128]* %spice_inline_array27, align 4
  %p = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call28 = call [256 x i128]* @long_sub_mod(i128 %n, i128 %k23, [256 x i128]* %spice_inline_array, [256 x i128]* %spice_inline_array27, [256 x i128]* %p)
  store [256 x i128]* %call28, [256 x i128]** %dy, align 8
  %n29 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k30 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %b31 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.b.declare_input, align 8
  %array_getter32 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b31, i128 0, i128 0
  %b33 = load [256 x i128], [256 x i128]* %array_getter32, align 4
  %spice_inline_array34 = alloca [256 x i128], align 8
  store [256 x i128] %b33, [256 x i128]* %spice_inline_array34, align 4
  %a35 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %array_getter36 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a35, i128 0, i128 0
  %a37 = load [256 x i128], [256 x i128]* %array_getter36, align 4
  %spice_inline_array38 = alloca [256 x i128], align 8
  store [256 x i128] %a37, [256 x i128]* %spice_inline_array38, align 4
  %p39 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call40 = call [256 x i128]* @long_sub_mod(i128 %n29, i128 %k30, [256 x i128]* %spice_inline_array34, [256 x i128]* %spice_inline_array38, [256 x i128]* %p39)
  store [256 x i128]* %call40, [256 x i128]** %dx, align 8
  %n41 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k42 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %dx43 = load [256 x i128]*, [256 x i128]** %dx, align 8
  %p44 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call45 = call [256 x i128]* @mod_inv(i128 %n41, i128 %k42, [256 x i128]* %dx43, [256 x i128]* %p44)
  store [256 x i128]* %call45, [256 x i128]** %dx_inv, align 8
  %n46 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k47 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %dy48 = load [256 x i128]*, [256 x i128]** %dy, align 8
  %dx_inv49 = load [256 x i128]*, [256 x i128]** %dx_inv, align 8
  %p50 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call51 = call [256 x i128]* @prod_mod(i128 %n46, i128 %k47, [256 x i128]* %dy48, [256 x i128]* %dx_inv49, [256 x i128]* %p50)
  store [256 x i128]* %call51, [256 x i128]** %lambda, align 8
  %n52 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k53 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %lambda54 = load [256 x i128]*, [256 x i128]** %lambda, align 8
  %lambda55 = load [256 x i128]*, [256 x i128]** %lambda, align 8
  %p56 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call57 = call [256 x i128]* @prod_mod(i128 %n52, i128 %k53, [256 x i128]* %lambda54, [256 x i128]* %lambda55, [256 x i128]* %p56)
  store [256 x i128]* %call57, [256 x i128]** %lambda_sq, align 8
  %n58 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k59 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %n60 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k61 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %lambda_sq62 = load [256 x i128]*, [256 x i128]** %lambda_sq, align 8
  %a63 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %array_getter64 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a63, i128 0, i128 0
  %a65 = load [256 x i128], [256 x i128]* %array_getter64, align 4
  %spice_inline_array66 = alloca [256 x i128], align 8
  store [256 x i128] %a65, [256 x i128]* %spice_inline_array66, align 4
  %p67 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call68 = call [256 x i128]* @long_sub_mod(i128 %n60, i128 %k61, [256 x i128]* %lambda_sq62, [256 x i128]* %spice_inline_array66, [256 x i128]* %p67)
  %b69 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.b.declare_input, align 8
  %array_getter70 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b69, i128 0, i128 0
  %b71 = load [256 x i128], [256 x i128]* %array_getter70, align 4
  %spice_inline_array72 = alloca [256 x i128], align 8
  store [256 x i128] %b71, [256 x i128]* %spice_inline_array72, align 4
  %p73 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call74 = call [256 x i128]* @long_sub_mod(i128 %n58, i128 %k59, [256 x i128]* %call68, [256 x i128]* %spice_inline_array72, [256 x i128]* %p73)
  store [256 x i128]* %call74, [256 x i128]** %x3, align 8
  %n75 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k76 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %n77 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k78 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %lambda79 = load [256 x i128]*, [256 x i128]** %lambda, align 8
  %n80 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k81 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %a82 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %array_getter83 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a82, i128 0, i128 0
  %a84 = load [256 x i128], [256 x i128]* %array_getter83, align 4
  %spice_inline_array85 = alloca [256 x i128], align 8
  store [256 x i128] %a84, [256 x i128]* %spice_inline_array85, align 4
  %x386 = load [256 x i128]*, [256 x i128]** %x3, align 8
  %p87 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call88 = call [256 x i128]* @long_sub_mod(i128 %n80, i128 %k81, [256 x i128]* %spice_inline_array85, [256 x i128]* %x386, [256 x i128]* %p87)
  %p89 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call90 = call [256 x i128]* @prod_mod(i128 %n77, i128 %k78, [256 x i128]* %lambda79, [256 x i128]* %call88, [256 x i128]* %p89)
  %a91 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %array_getter92 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a91, i128 0, i128 1
  %a93 = load [256 x i128], [256 x i128]* %array_getter92, align 4
  %spice_inline_array94 = alloca [256 x i128], align 8
  store [256 x i128] %a93, [256 x i128]* %spice_inline_array94, align 4
  %p95 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call96 = call [256 x i128]* @long_sub_mod(i128 %n75, i128 %k76, [256 x i128]* %call90, [256 x i128]* %spice_inline_array94, [256 x i128]* %p95)
  store [256 x i128]* %call96, [256 x i128]** %y3, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %x397 = load [256 x i128]*, [256 x i128]** %x3, align 8
  %i98 = load i128, i128* %i, align 4
  %array_getter99 = getelementptr inbounds [256 x i128], [256 x i128]* %x397, i128 0, i128 %i98
  %x3100 = load i128, i128* %array_getter99, align 4
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.out.declare_output, align 8
  %i101 = load i128, i128* %i, align 4
  %out102 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 0, i128 %i101
  store i128 %x3100, i128* %out102, align 4
  %y3103 = load [256 x i128]*, [256 x i128]** %y3, align 8
  %i104 = load i128, i128* %i, align 4
  %array_getter105 = getelementptr inbounds [256 x i128], [256 x i128]* %y3103, i128 0, i128 %i104
  %y3106 = load i128, i128* %array_getter105, align 4
  %ptr_getter107 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.out.declare_output, align 8
  %i108 = load i128, i128* %i, align 4
  %out109 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter107, i128 0, i128 1, i128 %i108
  store i128 %y3106, i128* %out109, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i110 = load i128, i128* %i, align 4
  %add111 = add i128 %i110, 1
  store i128 %add111, i128* %i, align 4
  %i112 = load i128, i128* %i, align 4
  %k113 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %slt = icmp slt i128 %i112, %k113
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n114 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k115 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %n116 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %mul117 = mul i128 2, %n116
  %LOGK118 = load i128, i128* %LOGK, align 4
  %add119 = add i128 %mul117, %LOGK118
  %add120 = add i128 %add119, 2
  %call121 = call %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %n114, i128 %k115, i128 %add120)
  store %struct_template_circuit_bigmultshortlong* %call121, %struct_template_circuit_bigmultshortlong** %dx_sq, align 8
  %n122 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k123 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %n124 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %mul125 = mul i128 2, %n124
  %LOGK126 = load i128, i128* %LOGK, align 4
  %add127 = add i128 %mul125, %LOGK126
  %add128 = add i128 %add127, 2
  %call129 = call %struct_template_circuit_bigmultshortlong* @fn_template_build_bigmultshortlong(i128 %n122, i128 %k123, i128 %add128)
  store %struct_template_circuit_bigmultshortlong* %call129, %struct_template_circuit_bigmultshortlong** %dy_sq, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body130

loop.body130:                                     ; preds = %loop.latch209, %loop.exit
  %b131 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.b.declare_input, align 8
  %i132 = load i128, i128* %i, align 4
  %array_getter133 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b131, i128 0, i128 0, i128 %i132
  %b134 = load i128, i128* %array_getter133, align 4
  %a135 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %i136 = load i128, i128* %i, align 4
  %array_getter137 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a135, i128 0, i128 0, i128 %i136
  %a138 = load i128, i128* %array_getter137, align 4
  %sub139 = sub i128 %b134, %a138
  %dx_sq140 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %dx_sq, align 8
  %struct_getter141 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %dx_sq140, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter141, align 8
  %i142 = load i128, i128* %i, align 4
  %array_getter143 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter, i128 0, i128 %i142
  %dx_sq144 = load i128, i128* %array_getter143, align 4
  call void @fn_intrinsic_add_constraint(i128 %dx_sq144, i128 %sub139, i1* @constraint.349)
  %ptr_getter145 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %dx_sq, align 8
  %struct_getter146 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter145, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter147 = load [256 x i128]*, [256 x i128]** %struct_getter146, align 8
  %i148 = load i128, i128* %i, align 4
  %dx_sq149 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter147, i128 0, i128 %i148
  store i128 %sub139, i128* %dx_sq149, align 4
  %b150 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.b.declare_input, align 8
  %i151 = load i128, i128* %i, align 4
  %array_getter152 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b150, i128 0, i128 0, i128 %i151
  %b153 = load i128, i128* %array_getter152, align 4
  %a154 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %i155 = load i128, i128* %i, align 4
  %array_getter156 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a154, i128 0, i128 0, i128 %i155
  %a157 = load i128, i128* %array_getter156, align 4
  %sub158 = sub i128 %b153, %a157
  %dx_sq159 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %dx_sq, align 8
  %struct_getter160 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %dx_sq159, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter160, align 8
  %i161 = load i128, i128* %i, align 4
  %array_getter162 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter, i128 0, i128 %i161
  %dx_sq163 = load i128, i128* %array_getter162, align 4
  call void @fn_intrinsic_add_constraint(i128 %dx_sq163, i128 %sub158, i1* @constraint.350)
  %ptr_getter164 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %dx_sq, align 8
  %struct_getter165 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter164, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter166 = load [256 x i128]*, [256 x i128]** %struct_getter165, align 8
  %i167 = load i128, i128* %i, align 4
  %dx_sq168 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter166, i128 0, i128 %i167
  store i128 %sub158, i128* %dx_sq168, align 4
  %b169 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.b.declare_input, align 8
  %i170 = load i128, i128* %i, align 4
  %array_getter171 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b169, i128 0, i128 1, i128 %i170
  %b172 = load i128, i128* %array_getter171, align 4
  %a173 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %i174 = load i128, i128* %i, align 4
  %array_getter175 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a173, i128 0, i128 1, i128 %i174
  %a176 = load i128, i128* %array_getter175, align 4
  %sub177 = sub i128 %b172, %a176
  %dy_sq178 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %dy_sq, align 8
  %struct_getter179 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %dy_sq178, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter180 = load [256 x i128]*, [256 x i128]** %struct_getter179, align 8
  %i181 = load i128, i128* %i, align 4
  %array_getter182 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter180, i128 0, i128 %i181
  %dy_sq183 = load i128, i128* %array_getter182, align 4
  call void @fn_intrinsic_add_constraint(i128 %dy_sq183, i128 %sub177, i1* @constraint.351)
  %ptr_getter184 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %dy_sq, align 8
  %struct_getter185 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter184, i32 0, i32 3
  %bigmultshortlong.a.read_input_outter186 = load [256 x i128]*, [256 x i128]** %struct_getter185, align 8
  %i187 = load i128, i128* %i, align 4
  %dy_sq188 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.a.read_input_outter186, i128 0, i128 %i187
  store i128 %sub177, i128* %dy_sq188, align 4
  %b189 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.b.declare_input, align 8
  %i190 = load i128, i128* %i, align 4
  %array_getter191 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b189, i128 0, i128 1, i128 %i190
  %b192 = load i128, i128* %array_getter191, align 4
  %a193 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %i194 = load i128, i128* %i, align 4
  %array_getter195 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a193, i128 0, i128 1, i128 %i194
  %a196 = load i128, i128* %array_getter195, align 4
  %sub197 = sub i128 %b192, %a196
  %dy_sq198 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %dy_sq, align 8
  %struct_getter199 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %dy_sq198, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter200 = load [256 x i128]*, [256 x i128]** %struct_getter199, align 8
  %i201 = load i128, i128* %i, align 4
  %array_getter202 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter200, i128 0, i128 %i201
  %dy_sq203 = load i128, i128* %array_getter202, align 4
  call void @fn_intrinsic_add_constraint(i128 %dy_sq203, i128 %sub197, i1* @constraint.352)
  %ptr_getter204 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %dy_sq, align 8
  %struct_getter205 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %ptr_getter204, i32 0, i32 4
  %bigmultshortlong.b.read_input_outter206 = load [256 x i128]*, [256 x i128]** %struct_getter205, align 8
  %i207 = load i128, i128* %i, align 4
  %dy_sq208 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.b.read_input_outter206, i128 0, i128 %i207
  store i128 %sub197, i128* %dy_sq208, align 4
  br label %loop.latch209

loop.latch209:                                    ; preds = %loop.body130
  %i210 = load i128, i128* %i, align 4
  %add211 = add i128 %i210, 1
  store i128 %add211, i128* %i, align 4
  %i212 = load i128, i128* %i, align 4
  %k213 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %slt214 = icmp slt i128 %i212, %k213
  br i1 %slt214, label %loop.body130, label %loop.exit215

loop.exit215:                                     ; preds = %loop.latch209
  %n216 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k217 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %k218 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %mul219 = mul i128 2, %k218
  %sub220 = sub i128 %mul219, 1
  %n221 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %mul222 = mul i128 3, %n221
  %add223 = add i128 %mul222, 4
  %LOGK224 = load i128, i128* %LOGK, align 4
  %mul225 = mul i128 2, %LOGK224
  %add226 = add i128 %add223, %mul225
  %call227 = call %struct_template_circuit_bigmultshortlongunequal* @fn_template_build_bigmultshortlongunequal(i128 %n216, i128 %k217, i128 %sub220, i128 %add226)
  store %struct_template_circuit_bigmultshortlongunequal* %call227, %struct_template_circuit_bigmultshortlongunequal** %cubic, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body228

loop.body228:                                     ; preds = %loop.latch253, %loop.exit215
  %a229 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %i230 = load i128, i128* %i, align 4
  %array_getter231 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a229, i128 0, i128 0, i128 %i230
  %a232 = load i128, i128* %array_getter231, align 4
  %b233 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.b.declare_input, align 8
  %i234 = load i128, i128* %i, align 4
  %array_getter235 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b233, i128 0, i128 0, i128 %i234
  %b236 = load i128, i128* %array_getter235, align 4
  %add237 = add i128 %a232, %b236
  %out238 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.out.declare_output, align 8
  %i239 = load i128, i128* %i, align 4
  %array_getter240 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out238, i128 0, i128 0, i128 %i239
  %out241 = load i128, i128* %array_getter240, align 4
  %add242 = add i128 %add237, %out241
  %cubic243 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %cubic, align 8
  %struct_getter244 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %cubic243, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter244, align 8
  %i245 = load i128, i128* %i, align 4
  %array_getter246 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter, i128 0, i128 %i245
  %cubic247 = load i128, i128* %array_getter246, align 4
  call void @fn_intrinsic_add_constraint(i128 %cubic247, i128 %add242, i1* @constraint.353)
  %ptr_getter248 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %cubic, align 8
  %struct_getter249 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ptr_getter248, i32 0, i32 4
  %bigmultshortlongunequal.a.read_input_outter250 = load [256 x i128]*, [256 x i128]** %struct_getter249, align 8
  %i251 = load i128, i128* %i, align 4
  %cubic252 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.a.read_input_outter250, i128 0, i128 %i251
  store i128 %add242, i128* %cubic252, align 4
  br label %loop.latch253

loop.latch253:                                    ; preds = %loop.body228
  %i254 = load i128, i128* %i, align 4
  %add255 = add i128 %i254, 1
  store i128 %add255, i128* %i, align 4
  %i256 = load i128, i128* %i, align 4
  %k257 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %slt258 = icmp slt i128 %i256, %k257
  br i1 %slt258, label %loop.body228, label %loop.exit259

loop.exit259:                                     ; preds = %loop.latch253
  store i128 0, i128* %i, align 4
  br label %loop.body260

loop.body260:                                     ; preds = %loop.latch276, %loop.exit259
  %dx_sq261 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %dx_sq, align 8
  %struct_getter262 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %dx_sq261, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter262, align 8
  %i263 = load i128, i128* %i, align 4
  %array_getter264 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter, i128 0, i128 %i263
  %dx_sq265 = load i128, i128* %array_getter264, align 4
  %cubic266 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %cubic, align 8
  %struct_getter267 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %cubic266, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter267, align 8
  %i268 = load i128, i128* %i, align 4
  %array_getter269 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.b.read_input_outter, i128 0, i128 %i268
  %cubic270 = load i128, i128* %array_getter269, align 4
  call void @fn_intrinsic_add_constraint(i128 %cubic270, i128 %dx_sq265, i1* @constraint.354)
  %ptr_getter271 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %cubic, align 8
  %struct_getter272 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %ptr_getter271, i32 0, i32 5
  %bigmultshortlongunequal.b.read_input_outter273 = load [256 x i128]*, [256 x i128]** %struct_getter272, align 8
  %i274 = load i128, i128* %i, align 4
  %cubic275 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.b.read_input_outter273, i128 0, i128 %i274
  store i128 %dx_sq265, i128* %cubic275, align 4
  br label %loop.latch276

loop.latch276:                                    ; preds = %loop.body260
  %i277 = load i128, i128* %i, align 4
  %add278 = add i128 %i277, 1
  store i128 %add278, i128* %i, align 4
  %i279 = load i128, i128* %i, align 4
  %k280 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %mul281 = mul i128 2, %k280
  %sub282 = sub i128 %mul281, 1
  %slt283 = icmp slt i128 %i279, %sub282
  br i1 %slt283, label %loop.body260, label %loop.exit284

loop.exit284:                                     ; preds = %loop.latch276
  %n285 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k286 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %k287 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %mul288 = mul i128 2, %k287
  %sub289 = sub i128 %mul288, 2
  %p290 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %n291 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %mul292 = mul i128 4, %n291
  %LOGK3293 = load i128, i128* %LOGK3, align 4
  %add294 = add i128 %mul292, %LOGK3293
  %call295 = call %struct_template_circuit_primereduce* @fn_template_build_primereduce(i128 %n285, i128 %k286, i128 %sub289, [256 x i128]* %p290, i128 %add294)
  store %struct_template_circuit_primereduce* %call295, %struct_template_circuit_primereduce** %cubic_red, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body296

loop.body296:                                     ; preds = %loop.latch319, %loop.exit284
  %cubic297 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %cubic, align 8
  %struct_getter298 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %cubic297, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter298, align 8
  %i299 = load i128, i128* %i, align 4
  %array_getter300 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter, i128 0, i128 %i299
  %cubic301 = load i128, i128* %array_getter300, align 4
  %dy_sq302 = load %struct_template_circuit_bigmultshortlong*, %struct_template_circuit_bigmultshortlong** %dy_sq, align 8
  %struct_getter303 = getelementptr inbounds %struct_template_circuit_bigmultshortlong, %struct_template_circuit_bigmultshortlong* %dy_sq302, i32 0, i32 5
  %bigmultshortlong.out.read_output_outter304 = load [256 x i128]*, [256 x i128]** %struct_getter303, align 8
  %i305 = load i128, i128* %i, align 4
  %array_getter306 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlong.out.read_output_outter304, i128 0, i128 %i305
  %dy_sq307 = load i128, i128* %array_getter306, align 4
  %sub308 = sub i128 %cubic301, %dy_sq307
  %cubic_red309 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cubic_red, align 8
  %struct_getter310 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %cubic_red309, i32 0, i32 5
  %primereduce.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter310, align 8
  %i311 = load i128, i128* %i, align 4
  %array_getter312 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter, i128 0, i128 %i311
  %cubic_red313 = load i128, i128* %array_getter312, align 4
  call void @fn_intrinsic_add_constraint(i128 %cubic_red313, i128 %sub308, i1* @constraint.355)
  %ptr_getter314 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cubic_red, align 8
  %struct_getter315 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %ptr_getter314, i32 0, i32 5
  %primereduce.in.read_input_outter316 = load [256 x i128]*, [256 x i128]** %struct_getter315, align 8
  %i317 = load i128, i128* %i, align 4
  %cubic_red318 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter316, i128 0, i128 %i317
  store i128 %sub308, i128* %cubic_red318, align 4
  br label %loop.latch319

loop.latch319:                                    ; preds = %loop.body296
  %i320 = load i128, i128* %i, align 4
  %add321 = add i128 %i320, 1
  store i128 %add321, i128* %i, align 4
  %i322 = load i128, i128* %i, align 4
  %k323 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %mul324 = mul i128 2, %k323
  %sub325 = sub i128 %mul324, 1
  %slt326 = icmp slt i128 %i322, %sub325
  br i1 %slt326, label %loop.body296, label %loop.exit327

loop.exit327:                                     ; preds = %loop.latch319
  %k328 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %mul329 = mul i128 2, %k328
  %sub330 = sub i128 %mul329, 1
  store i128 %sub330, i128* %i, align 4
  br label %loop.body331

loop.body331:                                     ; preds = %loop.latch349, %loop.exit327
  %cubic332 = load %struct_template_circuit_bigmultshortlongunequal*, %struct_template_circuit_bigmultshortlongunequal** %cubic, align 8
  %struct_getter333 = getelementptr inbounds %struct_template_circuit_bigmultshortlongunequal, %struct_template_circuit_bigmultshortlongunequal* %cubic332, i32 0, i32 6
  %bigmultshortlongunequal.out.read_output_outter334 = load [256 x i128]*, [256 x i128]** %struct_getter333, align 8
  %i335 = load i128, i128* %i, align 4
  %array_getter336 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmultshortlongunequal.out.read_output_outter334, i128 0, i128 %i335
  %cubic337 = load i128, i128* %array_getter336, align 4
  %cubic_red338 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cubic_red, align 8
  %struct_getter339 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %cubic_red338, i32 0, i32 5
  %primereduce.in.read_input_outter340 = load [256 x i128]*, [256 x i128]** %struct_getter339, align 8
  %i341 = load i128, i128* %i, align 4
  %array_getter342 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter340, i128 0, i128 %i341
  %cubic_red343 = load i128, i128* %array_getter342, align 4
  call void @fn_intrinsic_add_constraint(i128 %cubic_red343, i128 %cubic337, i1* @constraint.356)
  %ptr_getter344 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cubic_red, align 8
  %struct_getter345 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %ptr_getter344, i32 0, i32 5
  %primereduce.in.read_input_outter346 = load [256 x i128]*, [256 x i128]** %struct_getter345, align 8
  %i347 = load i128, i128* %i, align 4
  %cubic_red348 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.in.read_input_outter346, i128 0, i128 %i347
  store i128 %cubic337, i128* %cubic_red348, align 4
  br label %loop.latch349

loop.latch349:                                    ; preds = %loop.body331
  %i350 = load i128, i128* %i, align 4
  %add351 = add i128 %i350, 1
  store i128 %add351, i128* %i, align 4
  %i352 = load i128, i128* %i, align 4
  %k353 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %mul354 = mul i128 3, %k353
  %sub355 = sub i128 %mul354, 2
  %slt356 = icmp slt i128 %i352, %sub355
  br i1 %slt356, label %loop.body331, label %loop.exit357

loop.exit357:                                     ; preds = %loop.latch349
  %n358 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k359 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %n360 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %mul361 = mul i128 4, %n360
  %LOGK3362 = load i128, i128* %LOGK3, align 4
  %add363 = add i128 %mul361, %LOGK3362
  %p364 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call365 = call %struct_template_circuit_signedcheckcarrymodtozero* @fn_template_build_signedcheckcarrymodtozero(i128 %n358, i128 %k359, i128 %add363, [256 x i128]* %p364)
  store %struct_template_circuit_signedcheckcarrymodtozero* %call365, %struct_template_circuit_signedcheckcarrymodtozero** %cubic_mod, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body366

loop.body366:                                     ; preds = %loop.latch382, %loop.exit357
  %cubic_red367 = load %struct_template_circuit_primereduce*, %struct_template_circuit_primereduce** %cubic_red, align 8
  %struct_getter368 = getelementptr inbounds %struct_template_circuit_primereduce, %struct_template_circuit_primereduce* %cubic_red367, i32 0, i32 6
  %primereduce.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter368, align 8
  %i369 = load i128, i128* %i, align 4
  %array_getter370 = getelementptr inbounds [256 x i128], [256 x i128]* %primereduce.out.read_output_outter, i128 0, i128 %i369
  %cubic_red371 = load i128, i128* %array_getter370, align 4
  %cubic_mod372 = load %struct_template_circuit_signedcheckcarrymodtozero*, %struct_template_circuit_signedcheckcarrymodtozero** %cubic_mod, align 8
  %struct_getter373 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %cubic_mod372, i32 0, i32 4
  %signedcheckcarrymodtozero.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter373, align 8
  %i374 = load i128, i128* %i, align 4
  %array_getter375 = getelementptr inbounds [256 x i128], [256 x i128]* %signedcheckcarrymodtozero.in.read_input_outter, i128 0, i128 %i374
  %cubic_mod376 = load i128, i128* %array_getter375, align 4
  call void @fn_intrinsic_add_constraint(i128 %cubic_mod376, i128 %cubic_red371, i1* @constraint.357)
  %ptr_getter377 = load %struct_template_circuit_signedcheckcarrymodtozero*, %struct_template_circuit_signedcheckcarrymodtozero** %cubic_mod, align 8
  %struct_getter378 = getelementptr inbounds %struct_template_circuit_signedcheckcarrymodtozero, %struct_template_circuit_signedcheckcarrymodtozero* %ptr_getter377, i32 0, i32 4
  %signedcheckcarrymodtozero.in.read_input_outter379 = load [256 x i128]*, [256 x i128]** %struct_getter378, align 8
  %i380 = load i128, i128* %i, align 4
  %cubic_mod381 = getelementptr inbounds [256 x i128], [256 x i128]* %signedcheckcarrymodtozero.in.read_input_outter379, i128 0, i128 %i380
  store i128 %cubic_red371, i128* %cubic_mod381, align 4
  br label %loop.latch382

loop.latch382:                                    ; preds = %loop.body366
  %i383 = load i128, i128* %i, align 4
  %add384 = add i128 %i383, 1
  store i128 %add384, i128* %i, align 4
  %i385 = load i128, i128* %i, align 4
  %k386 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %slt387 = icmp slt i128 %i385, %k386
  br i1 %slt387, label %loop.body366, label %loop.exit388

loop.exit388:                                     ; preds = %loop.latch382
  %n389 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k390 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %p391 = load [256 x i128]*, [256 x i128]** %ellipticcurveaddunequal.p.declare_arg, align 8
  %call392 = call %struct_template_circuit_pointonline* @fn_template_build_pointonline(i128 %n389, i128 %k390, [256 x i128]* %p391)
  store %struct_template_circuit_pointonline* %call392, %struct_template_circuit_pointonline** %y_constraint, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body393

loop.body393:                                     ; preds = %loop.latch454, %loop.exit388
  store i128 0, i128* %j, align 4
  br label %loop.body394

loop.body394:                                     ; preds = %loop.latch448, %loop.body393
  %a395 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.a.declare_input, align 8
  %j396 = load i128, i128* %j, align 4
  %i397 = load i128, i128* %i, align 4
  %array_getter398 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a395, i128 0, i128 %j396, i128 %i397
  %a399 = load i128, i128* %array_getter398, align 4
  %y_constraint400 = load %struct_template_circuit_pointonline*, %struct_template_circuit_pointonline** %y_constraint, align 8
  %struct_getter401 = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %y_constraint400, i32 0, i32 3
  %pointonline.in.read_input_outter = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter401, align 8
  %j402 = load i128, i128* %j, align 4
  %i403 = load i128, i128* %i, align 4
  %array_getter404 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %pointonline.in.read_input_outter, i128 0, i128 0, i128 %j402, i128 %i403
  %y_constraint405 = load i128, i128* %array_getter404, align 4
  call void @fn_intrinsic_add_constraint(i128 %y_constraint405, i128 %a399, i1* @constraint.358)
  %ptr_getter406 = load %struct_template_circuit_pointonline*, %struct_template_circuit_pointonline** %y_constraint, align 8
  %struct_getter407 = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %ptr_getter406, i32 0, i32 3
  %pointonline.in.read_input_outter408 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter407, align 8
  %j409 = load i128, i128* %j, align 4
  %i410 = load i128, i128* %i, align 4
  %y_constraint411 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %pointonline.in.read_input_outter408, i128 0, i128 0, i128 %j409, i128 %i410
  store i128 %a399, i128* %y_constraint411, align 4
  %b412 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.b.declare_input, align 8
  %j413 = load i128, i128* %j, align 4
  %i414 = load i128, i128* %i, align 4
  %array_getter415 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b412, i128 0, i128 %j413, i128 %i414
  %b416 = load i128, i128* %array_getter415, align 4
  %y_constraint417 = load %struct_template_circuit_pointonline*, %struct_template_circuit_pointonline** %y_constraint, align 8
  %struct_getter418 = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %y_constraint417, i32 0, i32 3
  %pointonline.in.read_input_outter419 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter418, align 8
  %j420 = load i128, i128* %j, align 4
  %i421 = load i128, i128* %i, align 4
  %array_getter422 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %pointonline.in.read_input_outter419, i128 0, i128 1, i128 %j420, i128 %i421
  %y_constraint423 = load i128, i128* %array_getter422, align 4
  call void @fn_intrinsic_add_constraint(i128 %y_constraint423, i128 %b416, i1* @constraint.359)
  %ptr_getter424 = load %struct_template_circuit_pointonline*, %struct_template_circuit_pointonline** %y_constraint, align 8
  %struct_getter425 = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %ptr_getter424, i32 0, i32 3
  %pointonline.in.read_input_outter426 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter425, align 8
  %j427 = load i128, i128* %j, align 4
  %i428 = load i128, i128* %i, align 4
  %y_constraint429 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %pointonline.in.read_input_outter426, i128 0, i128 1, i128 %j427, i128 %i428
  store i128 %b416, i128* %y_constraint429, align 4
  %out430 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.out.declare_output, align 8
  %j431 = load i128, i128* %j, align 4
  %i432 = load i128, i128* %i, align 4
  %array_getter433 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out430, i128 0, i128 %j431, i128 %i432
  %out434 = load i128, i128* %array_getter433, align 4
  %y_constraint435 = load %struct_template_circuit_pointonline*, %struct_template_circuit_pointonline** %y_constraint, align 8
  %struct_getter436 = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %y_constraint435, i32 0, i32 3
  %pointonline.in.read_input_outter437 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter436, align 8
  %j438 = load i128, i128* %j, align 4
  %i439 = load i128, i128* %i, align 4
  %array_getter440 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %pointonline.in.read_input_outter437, i128 0, i128 2, i128 %j438, i128 %i439
  %y_constraint441 = load i128, i128* %array_getter440, align 4
  call void @fn_intrinsic_add_constraint(i128 %y_constraint441, i128 %out434, i1* @constraint.360)
  %ptr_getter442 = load %struct_template_circuit_pointonline*, %struct_template_circuit_pointonline** %y_constraint, align 8
  %struct_getter443 = getelementptr inbounds %struct_template_circuit_pointonline, %struct_template_circuit_pointonline* %ptr_getter442, i32 0, i32 3
  %pointonline.in.read_input_outter444 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter443, align 8
  %j445 = load i128, i128* %j, align 4
  %i446 = load i128, i128* %i, align 4
  %y_constraint447 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %pointonline.in.read_input_outter444, i128 0, i128 2, i128 %j445, i128 %i446
  store i128 %out434, i128* %y_constraint447, align 4
  br label %loop.latch448

loop.latch448:                                    ; preds = %loop.body394
  %j449 = load i128, i128* %j, align 4
  %add450 = add i128 %j449, 1
  store i128 %add450, i128* %j, align 4
  %j451 = load i128, i128* %j, align 4
  %slt452 = icmp slt i128 %j451, 2
  br i1 %slt452, label %loop.body394, label %loop.exit453

loop.exit453:                                     ; preds = %loop.latch448
  br label %loop.latch454

loop.latch454:                                    ; preds = %loop.exit453
  %i455 = load i128, i128* %i, align 4
  %add456 = add i128 %i455, 1
  store i128 %add456, i128* %i, align 4
  %i457 = load i128, i128* %i, align 4
  %k458 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %slt459 = icmp slt i128 %i457, %k458
  br i1 %slt459, label %loop.body393, label %loop.exit460

loop.exit460:                                     ; preds = %loop.latch454
  %n461 = load i128, i128* %ellipticcurveaddunequal.n.declare_arg, align 4
  %k462 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %call463 = call %struct_template_circuit_rangecheck2d* @fn_template_build_rangecheck2d(i128 %n461, i128 %k462)
  store %struct_template_circuit_rangecheck2d* %call463, %struct_template_circuit_rangecheck2d** %range_check, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body464

loop.body464:                                     ; preds = %loop.latch490, %loop.exit460
  store i128 0, i128* %i, align 4
  br label %loop.body465

loop.body465:                                     ; preds = %loop.latch483, %loop.body464
  %out466 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.out.declare_output, align 8
  %j467 = load i128, i128* %j, align 4
  %i468 = load i128, i128* %i, align 4
  %array_getter469 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out466, i128 0, i128 %j467, i128 %i468
  %out470 = load i128, i128* %array_getter469, align 4
  %range_check471 = load %struct_template_circuit_rangecheck2d*, %struct_template_circuit_rangecheck2d** %range_check, align 8
  %struct_getter472 = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %range_check471, i32 0, i32 2
  %rangecheck2d.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter472, align 8
  %j473 = load i128, i128* %j, align 4
  %i474 = load i128, i128* %i, align 4
  %array_getter475 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %rangecheck2d.in.read_input_outter, i128 0, i128 %j473, i128 %i474
  %range_check476 = load i128, i128* %array_getter475, align 4
  call void @fn_intrinsic_add_constraint(i128 %range_check476, i128 %out470, i1* @constraint.361)
  %ptr_getter477 = load %struct_template_circuit_rangecheck2d*, %struct_template_circuit_rangecheck2d** %range_check, align 8
  %struct_getter478 = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %ptr_getter477, i32 0, i32 2
  %rangecheck2d.in.read_input_outter479 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter478, align 8
  %j480 = load i128, i128* %j, align 4
  %i481 = load i128, i128* %i, align 4
  %range_check482 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %rangecheck2d.in.read_input_outter479, i128 0, i128 %j480, i128 %i481
  store i128 %out470, i128* %range_check482, align 4
  br label %loop.latch483

loop.latch483:                                    ; preds = %loop.body465
  %i484 = load i128, i128* %i, align 4
  %add485 = add i128 %i484, 1
  store i128 %add485, i128* %i, align 4
  %i486 = load i128, i128* %i, align 4
  %k487 = load i128, i128* %ellipticcurveaddunequal.k.declare_arg, align 4
  %slt488 = icmp slt i128 %i486, %k487
  br i1 %slt488, label %loop.body465, label %loop.exit489

loop.exit489:                                     ; preds = %loop.latch483
  br label %loop.latch490

loop.latch490:                                    ; preds = %loop.exit489
  %j491 = load i128, i128* %j, align 4
  %add492 = add i128 %j491, 1
  store i128 %add492, i128* %j, align 4
  %j493 = load i128, i128* %j, align 4
  %slt494 = icmp slt i128 %j493, 2
  br i1 %slt494, label %loop.body464, label %loop.exit495

loop.exit495:                                     ; preds = %loop.latch490
  br label %exit

exit:                                             ; preds = %loop.exit495
  %out496 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveaddunequal.out.declare_output, align 8
  %ellipticcurveaddunequal.out.write_output_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %0, i32 0, i32 5
  store [256 x [256 x i128]]* %out496, [256 x [256 x i128]]** %ellipticcurveaddunequal.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_ellipticcurveaddunequal* @fn_template_build_ellipticcurveaddunequal(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_ellipticcurveaddunequal = alloca %struct_template_circuit_ellipticcurveaddunequal, align 8
  %ellipticcurveaddunequal.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %struct_template_circuit_ellipticcurveaddunequal, i32 0, i32 0
  store i128 %0, i128* %ellipticcurveaddunequal.n.write_arg_inner, align 4
  %ellipticcurveaddunequal.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %struct_template_circuit_ellipticcurveaddunequal, i32 0, i32 1
  store i128 %1, i128* %ellipticcurveaddunequal.k.write_arg_inner, align 4
  %ellipticcurveaddunequal.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %struct_template_circuit_ellipticcurveaddunequal, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %ellipticcurveaddunequal.p.write_arg_inner, align 8
  ret %struct_template_circuit_ellipticcurveaddunequal* %struct_template_circuit_ellipticcurveaddunequal
}

define void @fn_template_init_bigmodinv(%struct_template_circuit_bigmodinv* %0) {
entry:
  %BigModInv = alloca %struct_template_circuit_bigmodinv*, align 8
  store %struct_template_circuit_bigmodinv* %0, %struct_template_circuit_bigmodinv** %BigModInv, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_bigmodinv, %struct_template_circuit_bigmodinv* %0, i32 0, i32 0
  %bigmodinv.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %bigmodinv.n.declare_arg = alloca i128, align 8
  store i128 %bigmodinv.n.read_arg_inner, i128* %bigmodinv.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_bigmodinv, %struct_template_circuit_bigmodinv* %0, i32 0, i32 1
  %bigmodinv.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %bigmodinv.k.declare_arg = alloca i128, align 8
  store i128 %bigmodinv.k.read_arg_inner, i128* %bigmodinv.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_bigmodinv, %struct_template_circuit_bigmodinv* %0, i32 0, i32 2
  %bigmodinv.in.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %bigmodinv.in.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmodinv.in.read_input_inner, [256 x i128]** %bigmodinv.in.declare_input, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_bigmodinv, %struct_template_circuit_bigmodinv* %0, i32 0, i32 3
  %bigmodinv.p.read_input_inner = load [256 x i128]*, [256 x i128]** %struct_getter3, align 8
  %bigmodinv.p.declare_input = alloca [256 x i128]*, align 8
  store [256 x i128]* %bigmodinv.p.read_input_inner, [256 x i128]** %bigmodinv.p.declare_input, align 8
  %range_checks = alloca [256 x %struct_template_circuit_num2bits*]*, align 8
  %range_checks4 = alloca [256 x %struct_template_circuit_num2bits*], align 8
  store [256 x %struct_template_circuit_num2bits*]* %range_checks4, [256 x %struct_template_circuit_num2bits*]** %range_checks, align 8
  %mult = alloca %struct_template_circuit_bigmult*, align 8
  %i = alloca i128, align 8
  %i5 = call i128 @fn_intrinsic_inline_init()
  store i128 %i5, i128* %i, align 4
  %inv = alloca [256 x i128]*, align 8
  %inv6 = alloca [256 x i128], align 8
  store [256 x i128]* %inv6, [256 x i128]** %inv, align 8
  %bigmodinv.out.declare_output = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %out, [256 x i128]** %bigmodinv.out.declare_output, align 8
  %mod = alloca %struct_template_circuit_bigmod*, align 8
  %n = load i128, i128* %bigmodinv.n.declare_arg, align 4
  %k = load i128, i128* %bigmodinv.k.declare_arg, align 4
  %in = load [256 x i128]*, [256 x i128]** %bigmodinv.in.declare_input, align 8
  %p = load [256 x i128]*, [256 x i128]** %bigmodinv.p.declare_input, align 8
  %call = call [256 x i128]* @mod_inv(i128 %n, i128 %k, [256 x i128]* %in, [256 x i128]* %p)
  store [256 x i128]* %call, [256 x i128]** %inv, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %inv7 = load [256 x i128]*, [256 x i128]** %inv, align 8
  %i8 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %inv7, i128 0, i128 %i8
  %inv9 = load i128, i128* %array_getter, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %bigmodinv.out.declare_output, align 8
  %i10 = load i128, i128* %i, align 4
  %out11 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i10
  store i128 %inv9, i128* %out11, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i12 = load i128, i128* %i, align 4
  %add = add i128 %i12, 1
  store i128 %add, i128* %i, align 4
  %i13 = load i128, i128* %i, align 4
  %k14 = load i128, i128* %bigmodinv.k.declare_arg, align 4
  %slt = icmp slt i128 %i13, %k14
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %i, align 4
  br label %loop.body15

loop.body15:                                      ; preds = %loop.latch34, %loop.exit
  %n16 = load i128, i128* %bigmodinv.n.declare_arg, align 4
  %call17 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n16)
  %ptr_getter18 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %range_checks, align 8
  %i19 = load i128, i128* %i, align 4
  %range_checks20 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter18, i128 0, i128 %i19
  store %struct_template_circuit_num2bits* %call17, %struct_template_circuit_num2bits** %range_checks20, align 8
  %out21 = load [256 x i128]*, [256 x i128]** %bigmodinv.out.declare_output, align 8
  %i22 = load i128, i128* %i, align 4
  %array_getter23 = getelementptr inbounds [256 x i128], [256 x i128]* %out21, i128 0, i128 %i22
  %out24 = load i128, i128* %array_getter23, align 4
  %range_checks25 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %range_checks, align 8
  %i26 = load i128, i128* %i, align 4
  %array_getter27 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %range_checks25, i128 0, i128 %i26
  %range_checks28 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter27, align 8
  %struct_getter29 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %range_checks28, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter29, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %out24, i1* @constraint.362)
  %ptr_getter30 = load [256 x %struct_template_circuit_num2bits*]*, [256 x %struct_template_circuit_num2bits*]** %range_checks, align 8
  %i31 = load i128, i128* %i, align 4
  %array_getter32 = getelementptr inbounds [256 x %struct_template_circuit_num2bits*], [256 x %struct_template_circuit_num2bits*]* %ptr_getter30, i128 0, i128 %i31
  %range_checks33 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter32, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %range_checks33, i32 0, i32 1
  store i128 %out24, i128* %num2bits.in.write_input_outter, align 4
  br label %loop.latch34

loop.latch34:                                     ; preds = %loop.body15
  %i35 = load i128, i128* %i, align 4
  %add36 = add i128 %i35, 1
  store i128 %add36, i128* %i, align 4
  %i37 = load i128, i128* %i, align 4
  %k38 = load i128, i128* %bigmodinv.k.declare_arg, align 4
  %slt39 = icmp slt i128 %i37, %k38
  br i1 %slt39, label %loop.body15, label %loop.exit40

loop.exit40:                                      ; preds = %loop.latch34
  %n41 = load i128, i128* %bigmodinv.n.declare_arg, align 4
  %k42 = load i128, i128* %bigmodinv.k.declare_arg, align 4
  %call43 = call %struct_template_circuit_bigmult* @fn_template_build_bigmult(i128 %n41, i128 %k42)
  store %struct_template_circuit_bigmult* %call43, %struct_template_circuit_bigmult** %mult, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body44

loop.body44:                                      ; preds = %loop.latch73, %loop.exit40
  %in45 = load [256 x i128]*, [256 x i128]** %bigmodinv.in.declare_input, align 8
  %i46 = load i128, i128* %i, align 4
  %array_getter47 = getelementptr inbounds [256 x i128], [256 x i128]* %in45, i128 0, i128 %i46
  %in48 = load i128, i128* %array_getter47, align 4
  %mult49 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mult, align 8
  %struct_getter50 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mult49, i32 0, i32 2
  %bigmult.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter50, align 8
  %i51 = load i128, i128* %i, align 4
  %array_getter52 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter, i128 0, i128 %i51
  %mult53 = load i128, i128* %array_getter52, align 4
  call void @fn_intrinsic_add_constraint(i128 %mult53, i128 %in48, i1* @constraint.363)
  %ptr_getter54 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mult, align 8
  %struct_getter55 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter54, i32 0, i32 2
  %bigmult.a.read_input_outter56 = load [256 x i128]*, [256 x i128]** %struct_getter55, align 8
  %i57 = load i128, i128* %i, align 4
  %mult58 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.a.read_input_outter56, i128 0, i128 %i57
  store i128 %in48, i128* %mult58, align 4
  %out59 = load [256 x i128]*, [256 x i128]** %bigmodinv.out.declare_output, align 8
  %i60 = load i128, i128* %i, align 4
  %array_getter61 = getelementptr inbounds [256 x i128], [256 x i128]* %out59, i128 0, i128 %i60
  %out62 = load i128, i128* %array_getter61, align 4
  %mult63 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mult, align 8
  %struct_getter64 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mult63, i32 0, i32 3
  %bigmult.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter64, align 8
  %i65 = load i128, i128* %i, align 4
  %array_getter66 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter, i128 0, i128 %i65
  %mult67 = load i128, i128* %array_getter66, align 4
  call void @fn_intrinsic_add_constraint(i128 %mult67, i128 %out62, i1* @constraint.364)
  %ptr_getter68 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mult, align 8
  %struct_getter69 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %ptr_getter68, i32 0, i32 3
  %bigmult.b.read_input_outter70 = load [256 x i128]*, [256 x i128]** %struct_getter69, align 8
  %i71 = load i128, i128* %i, align 4
  %mult72 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.b.read_input_outter70, i128 0, i128 %i71
  store i128 %out62, i128* %mult72, align 4
  br label %loop.latch73

loop.latch73:                                     ; preds = %loop.body44
  %i74 = load i128, i128* %i, align 4
  %add75 = add i128 %i74, 1
  store i128 %add75, i128* %i, align 4
  %i76 = load i128, i128* %i, align 4
  %k77 = load i128, i128* %bigmodinv.k.declare_arg, align 4
  %slt78 = icmp slt i128 %i76, %k77
  br i1 %slt78, label %loop.body44, label %loop.exit79

loop.exit79:                                      ; preds = %loop.latch73
  %n80 = load i128, i128* %bigmodinv.n.declare_arg, align 4
  %k81 = load i128, i128* %bigmodinv.k.declare_arg, align 4
  %call82 = call %struct_template_circuit_bigmod* @fn_template_build_bigmod(i128 %n80, i128 %k81)
  store %struct_template_circuit_bigmod* %call82, %struct_template_circuit_bigmod** %mod, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body83

loop.body83:                                      ; preds = %loop.latch99, %loop.exit79
  %mult84 = load %struct_template_circuit_bigmult*, %struct_template_circuit_bigmult** %mult, align 8
  %struct_getter85 = getelementptr inbounds %struct_template_circuit_bigmult, %struct_template_circuit_bigmult* %mult84, i32 0, i32 4
  %bigmult.out.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter85, align 8
  %i86 = load i128, i128* %i, align 4
  %array_getter87 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmult.out.read_output_outter, i128 0, i128 %i86
  %mult88 = load i128, i128* %array_getter87, align 4
  %mod89 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %mod, align 8
  %struct_getter90 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %mod89, i32 0, i32 2
  %bigmod.a.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter90, align 8
  %i91 = load i128, i128* %i, align 4
  %array_getter92 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.a.read_input_outter, i128 0, i128 %i91
  %mod93 = load i128, i128* %array_getter92, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod93, i128 %mult88, i1* @constraint.365)
  %ptr_getter94 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %mod, align 8
  %struct_getter95 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %ptr_getter94, i32 0, i32 2
  %bigmod.a.read_input_outter96 = load [256 x i128]*, [256 x i128]** %struct_getter95, align 8
  %i97 = load i128, i128* %i, align 4
  %mod98 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.a.read_input_outter96, i128 0, i128 %i97
  store i128 %mult88, i128* %mod98, align 4
  br label %loop.latch99

loop.latch99:                                     ; preds = %loop.body83
  %i100 = load i128, i128* %i, align 4
  %add101 = add i128 %i100, 1
  store i128 %add101, i128* %i, align 4
  %i102 = load i128, i128* %i, align 4
  %k103 = load i128, i128* %bigmodinv.k.declare_arg, align 4
  %mul = mul i128 2, %k103
  %slt104 = icmp slt i128 %i102, %mul
  br i1 %slt104, label %loop.body83, label %loop.exit105

loop.exit105:                                     ; preds = %loop.latch99
  store i128 0, i128* %i, align 4
  br label %loop.body106

loop.body106:                                     ; preds = %loop.latch121, %loop.exit105
  %p107 = load [256 x i128]*, [256 x i128]** %bigmodinv.p.declare_input, align 8
  %i108 = load i128, i128* %i, align 4
  %array_getter109 = getelementptr inbounds [256 x i128], [256 x i128]* %p107, i128 0, i128 %i108
  %p110 = load i128, i128* %array_getter109, align 4
  %mod111 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %mod, align 8
  %struct_getter112 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %mod111, i32 0, i32 3
  %bigmod.b.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter112, align 8
  %i113 = load i128, i128* %i, align 4
  %array_getter114 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.b.read_input_outter, i128 0, i128 %i113
  %mod115 = load i128, i128* %array_getter114, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod115, i128 %p110, i1* @constraint.366)
  %ptr_getter116 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %mod, align 8
  %struct_getter117 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %ptr_getter116, i32 0, i32 3
  %bigmod.b.read_input_outter118 = load [256 x i128]*, [256 x i128]** %struct_getter117, align 8
  %i119 = load i128, i128* %i, align 4
  %mod120 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.b.read_input_outter118, i128 0, i128 %i119
  store i128 %p110, i128* %mod120, align 4
  br label %loop.latch121

loop.latch121:                                    ; preds = %loop.body106
  %i122 = load i128, i128* %i, align 4
  %add123 = add i128 %i122, 1
  store i128 %add123, i128* %i, align 4
  %i124 = load i128, i128* %i, align 4
  %k125 = load i128, i128* %bigmodinv.k.declare_arg, align 4
  %slt126 = icmp slt i128 %i124, %k125
  br i1 %slt126, label %loop.body106, label %loop.exit127

loop.exit127:                                     ; preds = %loop.latch121
  %mod128 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %mod, align 8
  %struct_getter129 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %mod128, i32 0, i32 5
  %bigmod.mod.read_output_outter = load [256 x i128]*, [256 x i128]** %struct_getter129, align 8
  %array_getter130 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.mod.read_output_outter, i128 0, i128 0
  %mod131 = load i128, i128* %array_getter130, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod131, i128 1, i1* @constraint.367)
  store i128 1, i128* %i, align 4
  br label %loop.body132

loop.body132:                                     ; preds = %loop.latch139, %loop.exit127
  %mod133 = load %struct_template_circuit_bigmod*, %struct_template_circuit_bigmod** %mod, align 8
  %struct_getter134 = getelementptr inbounds %struct_template_circuit_bigmod, %struct_template_circuit_bigmod* %mod133, i32 0, i32 5
  %bigmod.mod.read_output_outter135 = load [256 x i128]*, [256 x i128]** %struct_getter134, align 8
  %i136 = load i128, i128* %i, align 4
  %array_getter137 = getelementptr inbounds [256 x i128], [256 x i128]* %bigmod.mod.read_output_outter135, i128 0, i128 %i136
  %mod138 = load i128, i128* %array_getter137, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod138, i128 0, i1* @constraint.368)
  br label %loop.latch139

loop.latch139:                                    ; preds = %loop.body132
  %i140 = load i128, i128* %i, align 4
  %add141 = add i128 %i140, 1
  store i128 %add141, i128* %i, align 4
  %i142 = load i128, i128* %i, align 4
  %k143 = load i128, i128* %bigmodinv.k.declare_arg, align 4
  %slt144 = icmp slt i128 %i142, %k143
  br i1 %slt144, label %loop.body132, label %loop.exit145

loop.exit145:                                     ; preds = %loop.latch139
  br label %exit

exit:                                             ; preds = %loop.exit145
  %out146 = load [256 x i128]*, [256 x i128]** %bigmodinv.out.declare_output, align 8
  %bigmodinv.out.write_output_inner = getelementptr inbounds %struct_template_circuit_bigmodinv, %struct_template_circuit_bigmodinv* %0, i32 0, i32 4
  store [256 x i128]* %out146, [256 x i128]** %bigmodinv.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_bigmodinv* @fn_template_build_bigmodinv(i128 %0, i128 %1) {
entry:
  %struct_template_circuit_bigmodinv = alloca %struct_template_circuit_bigmodinv, align 8
  %bigmodinv.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmodinv, %struct_template_circuit_bigmodinv* %struct_template_circuit_bigmodinv, i32 0, i32 0
  store i128 %0, i128* %bigmodinv.n.write_arg_inner, align 4
  %bigmodinv.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_bigmodinv, %struct_template_circuit_bigmodinv* %struct_template_circuit_bigmodinv, i32 0, i32 1
  store i128 %1, i128* %bigmodinv.k.write_arg_inner, align 4
  ret %struct_template_circuit_bigmodinv* %struct_template_circuit_bigmodinv
}

define void @fn_template_init_fp2multiplythree(%struct_template_circuit_fp2multiplythree* %0) {
entry:
  %Fp2MultiplyThree = alloca %struct_template_circuit_fp2multiplythree*, align 8
  store %struct_template_circuit_fp2multiplythree* %0, %struct_template_circuit_fp2multiplythree** %Fp2MultiplyThree, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2multiplythree, %struct_template_circuit_fp2multiplythree* %0, i32 0, i32 0
  %fp2multiplythree.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2multiplythree.n.declare_arg = alloca i128, align 8
  store i128 %fp2multiplythree.n.read_arg_inner, i128* %fp2multiplythree.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2multiplythree, %struct_template_circuit_fp2multiplythree* %0, i32 0, i32 1
  %fp2multiplythree.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2multiplythree.k.declare_arg = alloca i128, align 8
  store i128 %fp2multiplythree.k.read_arg_inner, i128* %fp2multiplythree.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2multiplythree, %struct_template_circuit_fp2multiplythree* %0, i32 0, i32 2
  %fp2multiplythree.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fp2multiplythree.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2multiplythree.p.read_arg_inner, [256 x i128]** %fp2multiplythree.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2multiplythree, %struct_template_circuit_fp2multiplythree* %0, i32 0, i32 3
  %fp2multiplythree.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fp2multiplythree.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2multiplythree.a.read_input_inner, [256 x [256 x i128]]** %fp2multiplythree.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_fp2multiplythree, %struct_template_circuit_fp2multiplythree* %0, i32 0, i32 4
  %fp2multiplythree.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %fp2multiplythree.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2multiplythree.b.read_input_inner, [256 x [256 x i128]]** %fp2multiplythree.b.declare_input, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_fp2multiplythree, %struct_template_circuit_fp2multiplythree* %0, i32 0, i32 5
  %fp2multiplythree.c.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %fp2multiplythree.c.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2multiplythree.c.read_input_inner, [256 x [256 x i128]]** %fp2multiplythree.c.declare_input, align 8
  %i = alloca i128, align 8
  %i6 = call i128 @fn_intrinsic_inline_init()
  store i128 %i6, i128* %i, align 4
  %carry_mod = alloca %struct_template_circuit_signedfp2carrymodp*, align 8
  %fp2multiplythree.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %fp2multiplythree.out.declare_output, align 8
  %compress = alloca %struct_template_circuit_signedfp2multiplynocarrycompressthree*, align 8
  %idx = alloca i128, align 8
  %idx7 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx7, i128* %idx, align 4
  %j = alloca i128, align 8
  %j8 = call i128 @fn_intrinsic_inline_init()
  store i128 %j8, i128* %j, align 4
  %LOGK3 = alloca i128, align 8
  %LOGK39 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK39, i128* %LOGK3, align 4
  %k = load i128, i128* %fp2multiplythree.k.declare_arg, align 4
  %mul = mul i128 4, %k
  %k10 = load i128, i128* %fp2multiplythree.k.declare_arg, align 4
  %mul11 = mul i128 %mul, %k10
  %k12 = load i128, i128* %fp2multiplythree.k.declare_arg, align 4
  %mul13 = mul i128 2, %k12
  %sub = sub i128 %mul13, 1
  %mul14 = mul i128 %mul11, %sub
  %call = call i128 @log_ceil(i128 %mul14)
  store i128 %call, i128* %LOGK3, align 4
  %n = load i128, i128* %fp2multiplythree.n.declare_arg, align 4
  %k15 = load i128, i128* %fp2multiplythree.k.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2multiplythree.p.declare_arg, align 8
  %n16 = load i128, i128* %fp2multiplythree.n.declare_arg, align 4
  %n17 = load i128, i128* %fp2multiplythree.n.declare_arg, align 4
  %mul18 = mul i128 4, %n17
  %LOGK319 = load i128, i128* %LOGK3, align 4
  %add = add i128 %mul18, %LOGK319
  %call20 = call %struct_template_circuit_signedfp2multiplynocarrycompressthree* @fn_template_build_signedfp2multiplynocarrycompressthree(i128 %n, i128 %k15, [256 x i128]* %p, i128 %n16, i128 %add)
  store %struct_template_circuit_signedfp2multiplynocarrycompressthree* %call20, %struct_template_circuit_signedfp2multiplynocarrycompressthree** %compress, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch72, %entry
  store i128 0, i128* %idx, align 4
  br label %loop.body21

loop.body21:                                      ; preds = %loop.latch, %loop.body
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiplythree.a.declare_input, align 8
  %i22 = load i128, i128* %i, align 4
  %idx23 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i22, i128 %idx23
  %a24 = load i128, i128* %array_getter, align 4
  %compress25 = load %struct_template_circuit_signedfp2multiplynocarrycompressthree*, %struct_template_circuit_signedfp2multiplynocarrycompressthree** %compress, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %compress25, i32 0, i32 5
  %signedfp2multiplynocarrycompressthree.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter26, align 8
  %i27 = load i128, i128* %i, align 4
  %idx28 = load i128, i128* %idx, align 4
  %array_getter29 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompressthree.a.read_input_outter, i128 0, i128 %i27, i128 %idx28
  %compress30 = load i128, i128* %array_getter29, align 4
  call void @fn_intrinsic_add_constraint(i128 %compress30, i128 %a24, i1* @constraint.369)
  %ptr_getter = load %struct_template_circuit_signedfp2multiplynocarrycompressthree*, %struct_template_circuit_signedfp2multiplynocarrycompressthree** %compress, align 8
  %struct_getter31 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %ptr_getter, i32 0, i32 5
  %signedfp2multiplynocarrycompressthree.a.read_input_outter32 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter31, align 8
  %i33 = load i128, i128* %i, align 4
  %idx34 = load i128, i128* %idx, align 4
  %compress35 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompressthree.a.read_input_outter32, i128 0, i128 %i33, i128 %idx34
  store i128 %a24, i128* %compress35, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiplythree.b.declare_input, align 8
  %i36 = load i128, i128* %i, align 4
  %idx37 = load i128, i128* %idx, align 4
  %array_getter38 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %i36, i128 %idx37
  %b39 = load i128, i128* %array_getter38, align 4
  %compress40 = load %struct_template_circuit_signedfp2multiplynocarrycompressthree*, %struct_template_circuit_signedfp2multiplynocarrycompressthree** %compress, align 8
  %struct_getter41 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %compress40, i32 0, i32 6
  %signedfp2multiplynocarrycompressthree.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter41, align 8
  %i42 = load i128, i128* %i, align 4
  %idx43 = load i128, i128* %idx, align 4
  %array_getter44 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompressthree.b.read_input_outter, i128 0, i128 %i42, i128 %idx43
  %compress45 = load i128, i128* %array_getter44, align 4
  call void @fn_intrinsic_add_constraint(i128 %compress45, i128 %b39, i1* @constraint.370)
  %ptr_getter46 = load %struct_template_circuit_signedfp2multiplynocarrycompressthree*, %struct_template_circuit_signedfp2multiplynocarrycompressthree** %compress, align 8
  %struct_getter47 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %ptr_getter46, i32 0, i32 6
  %signedfp2multiplynocarrycompressthree.b.read_input_outter48 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter47, align 8
  %i49 = load i128, i128* %i, align 4
  %idx50 = load i128, i128* %idx, align 4
  %compress51 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompressthree.b.read_input_outter48, i128 0, i128 %i49, i128 %idx50
  store i128 %b39, i128* %compress51, align 4
  %c = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiplythree.c.declare_input, align 8
  %i52 = load i128, i128* %i, align 4
  %idx53 = load i128, i128* %idx, align 4
  %array_getter54 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %c, i128 0, i128 %i52, i128 %idx53
  %c55 = load i128, i128* %array_getter54, align 4
  %compress56 = load %struct_template_circuit_signedfp2multiplynocarrycompressthree*, %struct_template_circuit_signedfp2multiplynocarrycompressthree** %compress, align 8
  %struct_getter57 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %compress56, i32 0, i32 7
  %signedfp2multiplynocarrycompressthree.c.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter57, align 8
  %i58 = load i128, i128* %i, align 4
  %idx59 = load i128, i128* %idx, align 4
  %array_getter60 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompressthree.c.read_input_outter, i128 0, i128 %i58, i128 %idx59
  %compress61 = load i128, i128* %array_getter60, align 4
  call void @fn_intrinsic_add_constraint(i128 %compress61, i128 %c55, i1* @constraint.371)
  %ptr_getter62 = load %struct_template_circuit_signedfp2multiplynocarrycompressthree*, %struct_template_circuit_signedfp2multiplynocarrycompressthree** %compress, align 8
  %struct_getter63 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %ptr_getter62, i32 0, i32 7
  %signedfp2multiplynocarrycompressthree.c.read_input_outter64 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter63, align 8
  %i65 = load i128, i128* %i, align 4
  %idx66 = load i128, i128* %idx, align 4
  %compress67 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompressthree.c.read_input_outter64, i128 0, i128 %i65, i128 %idx66
  store i128 %c55, i128* %compress67, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body21
  %idx68 = load i128, i128* %idx, align 4
  %add69 = add i128 %idx68, 1
  store i128 %add69, i128* %idx, align 4
  %idx70 = load i128, i128* %idx, align 4
  %k71 = load i128, i128* %fp2multiplythree.k.declare_arg, align 4
  %slt = icmp slt i128 %idx70, %k71
  br i1 %slt, label %loop.body21, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch72

loop.latch72:                                     ; preds = %loop.exit
  %i73 = load i128, i128* %i, align 4
  %add74 = add i128 %i73, 1
  store i128 %add74, i128* %i, align 4
  %i75 = load i128, i128* %i, align 4
  %slt76 = icmp slt i128 %i75, 2
  br i1 %slt76, label %loop.body, label %loop.exit77

loop.exit77:                                      ; preds = %loop.latch72
  %n78 = load i128, i128* %fp2multiplythree.n.declare_arg, align 4
  %k79 = load i128, i128* %fp2multiplythree.k.declare_arg, align 4
  %n80 = load i128, i128* %fp2multiplythree.n.declare_arg, align 4
  %mul81 = mul i128 4, %n80
  %LOGK382 = load i128, i128* %LOGK3, align 4
  %add83 = add i128 %mul81, %LOGK382
  %p84 = load [256 x i128]*, [256 x i128]** %fp2multiplythree.p.declare_arg, align 8
  %call85 = call %struct_template_circuit_signedfp2carrymodp* @fn_template_build_signedfp2carrymodp(i128 %n78, i128 %k79, i128 %add83, [256 x i128]* %p84)
  store %struct_template_circuit_signedfp2carrymodp* %call85, %struct_template_circuit_signedfp2carrymodp** %carry_mod, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body86

loop.body86:                                      ; preds = %loop.latch113, %loop.exit77
  store i128 0, i128* %j, align 4
  br label %loop.body87

loop.body87:                                      ; preds = %loop.latch106, %loop.body86
  %compress88 = load %struct_template_circuit_signedfp2multiplynocarrycompressthree*, %struct_template_circuit_signedfp2multiplynocarrycompressthree** %compress, align 8
  %struct_getter89 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompressthree, %struct_template_circuit_signedfp2multiplynocarrycompressthree* %compress88, i32 0, i32 8
  %signedfp2multiplynocarrycompressthree.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter89, align 8
  %i90 = load i128, i128* %i, align 4
  %j91 = load i128, i128* %j, align 4
  %array_getter92 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompressthree.out.read_output_outter, i128 0, i128 %i90, i128 %j91
  %compress93 = load i128, i128* %array_getter92, align 4
  %carry_mod94 = load %struct_template_circuit_signedfp2carrymodp*, %struct_template_circuit_signedfp2carrymodp** %carry_mod, align 8
  %struct_getter95 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %carry_mod94, i32 0, i32 4
  %signedfp2carrymodp.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter95, align 8
  %i96 = load i128, i128* %i, align 4
  %j97 = load i128, i128* %j, align 4
  %array_getter98 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2carrymodp.in.read_input_outter, i128 0, i128 %i96, i128 %j97
  %carry_mod99 = load i128, i128* %array_getter98, align 4
  call void @fn_intrinsic_add_constraint(i128 %carry_mod99, i128 %compress93, i1* @constraint.372)
  %ptr_getter100 = load %struct_template_circuit_signedfp2carrymodp*, %struct_template_circuit_signedfp2carrymodp** %carry_mod, align 8
  %struct_getter101 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %ptr_getter100, i32 0, i32 4
  %signedfp2carrymodp.in.read_input_outter102 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter101, align 8
  %i103 = load i128, i128* %i, align 4
  %j104 = load i128, i128* %j, align 4
  %carry_mod105 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2carrymodp.in.read_input_outter102, i128 0, i128 %i103, i128 %j104
  store i128 %compress93, i128* %carry_mod105, align 4
  br label %loop.latch106

loop.latch106:                                    ; preds = %loop.body87
  %j107 = load i128, i128* %j, align 4
  %add108 = add i128 %j107, 1
  store i128 %add108, i128* %j, align 4
  %j109 = load i128, i128* %j, align 4
  %k110 = load i128, i128* %fp2multiplythree.k.declare_arg, align 4
  %slt111 = icmp slt i128 %j109, %k110
  br i1 %slt111, label %loop.body87, label %loop.exit112

loop.exit112:                                     ; preds = %loop.latch106
  br label %loop.latch113

loop.latch113:                                    ; preds = %loop.exit112
  %i114 = load i128, i128* %i, align 4
  %add115 = add i128 %i114, 1
  store i128 %add115, i128* %i, align 4
  %i116 = load i128, i128* %i, align 4
  %slt117 = icmp slt i128 %i116, 2
  br i1 %slt117, label %loop.body86, label %loop.exit118

loop.exit118:                                     ; preds = %loop.latch113
  store i128 0, i128* %i, align 4
  br label %loop.body119

loop.body119:                                     ; preds = %loop.latch143, %loop.exit118
  store i128 0, i128* %j, align 4
  br label %loop.body120

loop.body120:                                     ; preds = %loop.latch136, %loop.body119
  %carry_mod121 = load %struct_template_circuit_signedfp2carrymodp*, %struct_template_circuit_signedfp2carrymodp** %carry_mod, align 8
  %struct_getter122 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %carry_mod121, i32 0, i32 6
  %signedfp2carrymodp.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter122, align 8
  %i123 = load i128, i128* %i, align 4
  %j124 = load i128, i128* %j, align 4
  %array_getter125 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2carrymodp.out.read_output_outter, i128 0, i128 %i123, i128 %j124
  %carry_mod126 = load i128, i128* %array_getter125, align 4
  %out127 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiplythree.out.declare_output, align 8
  %i128 = load i128, i128* %i, align 4
  %j129 = load i128, i128* %j, align 4
  %array_getter130 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out127, i128 0, i128 %i128, i128 %j129
  %out131 = load i128, i128* %array_getter130, align 4
  call void @fn_intrinsic_add_constraint(i128 %out131, i128 %carry_mod126, i1* @constraint.373)
  %ptr_getter132 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiplythree.out.declare_output, align 8
  %i133 = load i128, i128* %i, align 4
  %j134 = load i128, i128* %j, align 4
  %out135 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter132, i128 0, i128 %i133, i128 %j134
  store i128 %carry_mod126, i128* %out135, align 4
  br label %loop.latch136

loop.latch136:                                    ; preds = %loop.body120
  %j137 = load i128, i128* %j, align 4
  %add138 = add i128 %j137, 1
  store i128 %add138, i128* %j, align 4
  %j139 = load i128, i128* %j, align 4
  %k140 = load i128, i128* %fp2multiplythree.k.declare_arg, align 4
  %slt141 = icmp slt i128 %j139, %k140
  br i1 %slt141, label %loop.body120, label %loop.exit142

loop.exit142:                                     ; preds = %loop.latch136
  br label %loop.latch143

loop.latch143:                                    ; preds = %loop.exit142
  %i144 = load i128, i128* %i, align 4
  %add145 = add i128 %i144, 1
  store i128 %add145, i128* %i, align 4
  %i146 = load i128, i128* %i, align 4
  %slt147 = icmp slt i128 %i146, 2
  br i1 %slt147, label %loop.body119, label %loop.exit148

loop.exit148:                                     ; preds = %loop.latch143
  br label %exit

exit:                                             ; preds = %loop.exit148
  %out149 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiplythree.out.declare_output, align 8
  %fp2multiplythree.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2multiplythree, %struct_template_circuit_fp2multiplythree* %0, i32 0, i32 6
  store [256 x [256 x i128]]* %out149, [256 x [256 x i128]]** %fp2multiplythree.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fp2multiplythree* @fn_template_build_fp2multiplythree(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fp2multiplythree = alloca %struct_template_circuit_fp2multiplythree, align 8
  %fp2multiplythree.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2multiplythree, %struct_template_circuit_fp2multiplythree* %struct_template_circuit_fp2multiplythree, i32 0, i32 0
  store i128 %0, i128* %fp2multiplythree.n.write_arg_inner, align 4
  %fp2multiplythree.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2multiplythree, %struct_template_circuit_fp2multiplythree* %struct_template_circuit_fp2multiplythree, i32 0, i32 1
  store i128 %1, i128* %fp2multiplythree.k.write_arg_inner, align 4
  %fp2multiplythree.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2multiplythree, %struct_template_circuit_fp2multiplythree* %struct_template_circuit_fp2multiplythree, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fp2multiplythree.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2multiplythree* %struct_template_circuit_fp2multiplythree
}

define void @fn_template_init_signedfp2compresscarry(%struct_template_circuit_signedfp2compresscarry* %0) {
entry:
  %SignedFp2CompressCarry = alloca %struct_template_circuit_signedfp2compresscarry*, align 8
  store %struct_template_circuit_signedfp2compresscarry* %0, %struct_template_circuit_signedfp2compresscarry** %SignedFp2CompressCarry, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %0, i32 0, i32 0
  %signedfp2compresscarry.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %signedfp2compresscarry.n.declare_arg = alloca i128, align 8
  store i128 %signedfp2compresscarry.n.read_arg_inner, i128* %signedfp2compresscarry.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %0, i32 0, i32 1
  %signedfp2compresscarry.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %signedfp2compresscarry.k.declare_arg = alloca i128, align 8
  store i128 %signedfp2compresscarry.k.read_arg_inner, i128* %signedfp2compresscarry.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %0, i32 0, i32 2
  %signedfp2compresscarry.m.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %signedfp2compresscarry.m.declare_arg = alloca i128, align 8
  store i128 %signedfp2compresscarry.m.read_arg_inner, i128* %signedfp2compresscarry.m.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %0, i32 0, i32 3
  %signedfp2compresscarry.overflow.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %signedfp2compresscarry.overflow.declare_arg = alloca i128, align 8
  store i128 %signedfp2compresscarry.overflow.read_arg_inner, i128* %signedfp2compresscarry.overflow.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %0, i32 0, i32 4
  %signedfp2compresscarry.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %signedfp2compresscarry.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %signedfp2compresscarry.p.read_arg_inner, [256 x i128]** %signedfp2compresscarry.p.declare_arg, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %0, i32 0, i32 5
  %signedfp2compresscarry.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %signedfp2compresscarry.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2compresscarry.in.read_input_inner, [256 x [256 x i128]]** %signedfp2compresscarry.in.declare_input, align 8
  %idx = alloca i128, align 8
  %idx6 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx6, i128* %idx, align 4
  %compress = alloca %struct_template_circuit_fp2compress*, align 8
  %signedfp2compresscarry.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %signedfp2compresscarry.out.declare_output, align 8
  %carry = alloca %struct_template_circuit_signedfp2carrymodp*, align 8
  %LOGM = alloca i128, align 8
  %LOGM7 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGM7, i128* %LOGM, align 4
  %i = alloca i128, align 8
  %i8 = call i128 @fn_intrinsic_inline_init()
  store i128 %i8, i128* %i, align 4
  %m = load i128, i128* %signedfp2compresscarry.m.declare_arg, align 4
  %add = add i128 %m, 1
  %call = call i128 @log_ceil(i128 %add)
  store i128 %call, i128* %LOGM, align 4
  %n = load i128, i128* %signedfp2compresscarry.n.declare_arg, align 4
  %k = load i128, i128* %signedfp2compresscarry.k.declare_arg, align 4
  %m9 = load i128, i128* %signedfp2compresscarry.m.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %signedfp2compresscarry.p.declare_arg, align 8
  %overflow = load i128, i128* %signedfp2compresscarry.overflow.declare_arg, align 4
  %n10 = load i128, i128* %signedfp2compresscarry.n.declare_arg, align 4
  %add11 = add i128 %overflow, %n10
  %LOGM12 = load i128, i128* %LOGM, align 4
  %add13 = add i128 %add11, %LOGM12
  %call14 = call %struct_template_circuit_fp2compress* @fn_template_build_fp2compress(i128 %n, i128 %k, i128 %m9, [256 x i128]* %p, i128 %add13)
  store %struct_template_circuit_fp2compress* %call14, %struct_template_circuit_fp2compress** %compress, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch36, %entry
  store i128 0, i128* %idx, align 4
  br label %loop.body15

loop.body15:                                      ; preds = %loop.latch, %loop.body
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2compresscarry.in.declare_input, align 8
  %i16 = load i128, i128* %i, align 4
  %idx17 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %i16, i128 %idx17
  %in18 = load i128, i128* %array_getter, align 4
  %compress19 = load %struct_template_circuit_fp2compress*, %struct_template_circuit_fp2compress** %compress, align 8
  %struct_getter20 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %compress19, i32 0, i32 5
  %fp2compress.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter20, align 8
  %i21 = load i128, i128* %i, align 4
  %idx22 = load i128, i128* %idx, align 4
  %array_getter23 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2compress.in.read_input_outter, i128 0, i128 %i21, i128 %idx22
  %compress24 = load i128, i128* %array_getter23, align 4
  call void @fn_intrinsic_add_constraint(i128 %compress24, i128 %in18, i1* @constraint.374)
  %ptr_getter = load %struct_template_circuit_fp2compress*, %struct_template_circuit_fp2compress** %compress, align 8
  %struct_getter25 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %ptr_getter, i32 0, i32 5
  %fp2compress.in.read_input_outter26 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter25, align 8
  %i27 = load i128, i128* %i, align 4
  %idx28 = load i128, i128* %idx, align 4
  %compress29 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2compress.in.read_input_outter26, i128 0, i128 %i27, i128 %idx28
  store i128 %in18, i128* %compress29, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body15
  %idx30 = load i128, i128* %idx, align 4
  %add31 = add i128 %idx30, 1
  store i128 %add31, i128* %idx, align 4
  %idx32 = load i128, i128* %idx, align 4
  %k33 = load i128, i128* %signedfp2compresscarry.k.declare_arg, align 4
  %m34 = load i128, i128* %signedfp2compresscarry.m.declare_arg, align 4
  %add35 = add i128 %k33, %m34
  %slt = icmp slt i128 %idx32, %add35
  br i1 %slt, label %loop.body15, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch36

loop.latch36:                                     ; preds = %loop.exit
  %i37 = load i128, i128* %i, align 4
  %add38 = add i128 %i37, 1
  store i128 %add38, i128* %i, align 4
  %i39 = load i128, i128* %i, align 4
  %slt40 = icmp slt i128 %i39, 2
  br i1 %slt40, label %loop.body, label %loop.exit41

loop.exit41:                                      ; preds = %loop.latch36
  %n42 = load i128, i128* %signedfp2compresscarry.n.declare_arg, align 4
  %k43 = load i128, i128* %signedfp2compresscarry.k.declare_arg, align 4
  %overflow44 = load i128, i128* %signedfp2compresscarry.overflow.declare_arg, align 4
  %n45 = load i128, i128* %signedfp2compresscarry.n.declare_arg, align 4
  %add46 = add i128 %overflow44, %n45
  %LOGM47 = load i128, i128* %LOGM, align 4
  %add48 = add i128 %add46, %LOGM47
  %p49 = load [256 x i128]*, [256 x i128]** %signedfp2compresscarry.p.declare_arg, align 8
  %call50 = call %struct_template_circuit_signedfp2carrymodp* @fn_template_build_signedfp2carrymodp(i128 %n42, i128 %k43, i128 %add48, [256 x i128]* %p49)
  store %struct_template_circuit_signedfp2carrymodp* %call50, %struct_template_circuit_signedfp2carrymodp** %carry, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body51

loop.body51:                                      ; preds = %loop.latch78, %loop.exit41
  store i128 0, i128* %idx, align 4
  br label %loop.body52

loop.body52:                                      ; preds = %loop.latch71, %loop.body51
  %compress53 = load %struct_template_circuit_fp2compress*, %struct_template_circuit_fp2compress** %compress, align 8
  %struct_getter54 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %compress53, i32 0, i32 6
  %fp2compress.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter54, align 8
  %i55 = load i128, i128* %i, align 4
  %idx56 = load i128, i128* %idx, align 4
  %array_getter57 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2compress.out.read_output_outter, i128 0, i128 %i55, i128 %idx56
  %compress58 = load i128, i128* %array_getter57, align 4
  %carry59 = load %struct_template_circuit_signedfp2carrymodp*, %struct_template_circuit_signedfp2carrymodp** %carry, align 8
  %struct_getter60 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %carry59, i32 0, i32 4
  %signedfp2carrymodp.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter60, align 8
  %i61 = load i128, i128* %i, align 4
  %idx62 = load i128, i128* %idx, align 4
  %array_getter63 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2carrymodp.in.read_input_outter, i128 0, i128 %i61, i128 %idx62
  %carry64 = load i128, i128* %array_getter63, align 4
  call void @fn_intrinsic_add_constraint(i128 %carry64, i128 %compress58, i1* @constraint.375)
  %ptr_getter65 = load %struct_template_circuit_signedfp2carrymodp*, %struct_template_circuit_signedfp2carrymodp** %carry, align 8
  %struct_getter66 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %ptr_getter65, i32 0, i32 4
  %signedfp2carrymodp.in.read_input_outter67 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter66, align 8
  %i68 = load i128, i128* %i, align 4
  %idx69 = load i128, i128* %idx, align 4
  %carry70 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2carrymodp.in.read_input_outter67, i128 0, i128 %i68, i128 %idx69
  store i128 %compress58, i128* %carry70, align 4
  br label %loop.latch71

loop.latch71:                                     ; preds = %loop.body52
  %idx72 = load i128, i128* %idx, align 4
  %add73 = add i128 %idx72, 1
  store i128 %add73, i128* %idx, align 4
  %idx74 = load i128, i128* %idx, align 4
  %k75 = load i128, i128* %signedfp2compresscarry.k.declare_arg, align 4
  %slt76 = icmp slt i128 %idx74, %k75
  br i1 %slt76, label %loop.body52, label %loop.exit77

loop.exit77:                                      ; preds = %loop.latch71
  br label %loop.latch78

loop.latch78:                                     ; preds = %loop.exit77
  %i79 = load i128, i128* %i, align 4
  %add80 = add i128 %i79, 1
  store i128 %add80, i128* %i, align 4
  %i81 = load i128, i128* %i, align 4
  %slt82 = icmp slt i128 %i81, 2
  br i1 %slt82, label %loop.body51, label %loop.exit83

loop.exit83:                                      ; preds = %loop.latch78
  store i128 0, i128* %i, align 4
  br label %loop.body84

loop.body84:                                      ; preds = %loop.latch108, %loop.exit83
  store i128 0, i128* %idx, align 4
  br label %loop.body85

loop.body85:                                      ; preds = %loop.latch101, %loop.body84
  %carry86 = load %struct_template_circuit_signedfp2carrymodp*, %struct_template_circuit_signedfp2carrymodp** %carry, align 8
  %struct_getter87 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %carry86, i32 0, i32 6
  %signedfp2carrymodp.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter87, align 8
  %i88 = load i128, i128* %i, align 4
  %idx89 = load i128, i128* %idx, align 4
  %array_getter90 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2carrymodp.out.read_output_outter, i128 0, i128 %i88, i128 %idx89
  %carry91 = load i128, i128* %array_getter90, align 4
  %out92 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2compresscarry.out.declare_output, align 8
  %i93 = load i128, i128* %i, align 4
  %idx94 = load i128, i128* %idx, align 4
  %array_getter95 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out92, i128 0, i128 %i93, i128 %idx94
  %out96 = load i128, i128* %array_getter95, align 4
  call void @fn_intrinsic_add_constraint(i128 %out96, i128 %carry91, i1* @constraint.376)
  %ptr_getter97 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2compresscarry.out.declare_output, align 8
  %i98 = load i128, i128* %i, align 4
  %idx99 = load i128, i128* %idx, align 4
  %out100 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter97, i128 0, i128 %i98, i128 %idx99
  store i128 %carry91, i128* %out100, align 4
  br label %loop.latch101

loop.latch101:                                    ; preds = %loop.body85
  %idx102 = load i128, i128* %idx, align 4
  %add103 = add i128 %idx102, 1
  store i128 %add103, i128* %idx, align 4
  %idx104 = load i128, i128* %idx, align 4
  %k105 = load i128, i128* %signedfp2compresscarry.k.declare_arg, align 4
  %slt106 = icmp slt i128 %idx104, %k105
  br i1 %slt106, label %loop.body85, label %loop.exit107

loop.exit107:                                     ; preds = %loop.latch101
  br label %loop.latch108

loop.latch108:                                    ; preds = %loop.exit107
  %i109 = load i128, i128* %i, align 4
  %add110 = add i128 %i109, 1
  store i128 %add110, i128* %i, align 4
  %i111 = load i128, i128* %i, align 4
  %slt112 = icmp slt i128 %i111, 2
  br i1 %slt112, label %loop.body84, label %loop.exit113

loop.exit113:                                     ; preds = %loop.latch108
  br label %exit

exit:                                             ; preds = %loop.exit113
  %out114 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2compresscarry.out.declare_output, align 8
  %signedfp2compresscarry.out.write_output_inner = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %0, i32 0, i32 6
  store [256 x [256 x i128]]* %out114, [256 x [256 x i128]]** %signedfp2compresscarry.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_signedfp2compresscarry* @fn_template_build_signedfp2compresscarry(i128 %0, i128 %1, i128 %2, i128 %3, [256 x i128]* %4) {
entry:
  %struct_template_circuit_signedfp2compresscarry = alloca %struct_template_circuit_signedfp2compresscarry, align 8
  %signedfp2compresscarry.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %struct_template_circuit_signedfp2compresscarry, i32 0, i32 0
  store i128 %0, i128* %signedfp2compresscarry.n.write_arg_inner, align 4
  %signedfp2compresscarry.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %struct_template_circuit_signedfp2compresscarry, i32 0, i32 1
  store i128 %1, i128* %signedfp2compresscarry.k.write_arg_inner, align 4
  %signedfp2compresscarry.m.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %struct_template_circuit_signedfp2compresscarry, i32 0, i32 2
  store i128 %2, i128* %signedfp2compresscarry.m.write_arg_inner, align 4
  %signedfp2compresscarry.overflow.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %struct_template_circuit_signedfp2compresscarry, i32 0, i32 3
  store i128 %3, i128* %signedfp2compresscarry.overflow.write_arg_inner, align 4
  %signedfp2compresscarry.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2compresscarry, %struct_template_circuit_signedfp2compresscarry* %struct_template_circuit_signedfp2compresscarry, i32 0, i32 4
  store [256 x i128]* %4, [256 x i128]** %signedfp2compresscarry.p.write_arg_inner, align 8
  ret %struct_template_circuit_signedfp2compresscarry* %struct_template_circuit_signedfp2compresscarry
}

define [256 x [256 x i128]]* @find_Fp2_exp(i128 %0, i128 %1, [256 x [256 x i128]]* %2, [256 x i128]* %3, [256 x i128]* %4) {
entry:
  %find_fp2_exp.n.declare_arg = alloca i128, align 8
  store i128 %0, i128* %find_fp2_exp.n.declare_arg, align 4
  %find_fp2_exp.k.declare_arg = alloca i128, align 8
  store i128 %1, i128* %find_fp2_exp.k.declare_arg, align 4
  %find_fp2_exp.a.declare_arg = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %2, [256 x [256 x i128]]** %find_fp2_exp.a.declare_arg, align 8
  %find_fp2_exp.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %3, [256 x i128]** %find_fp2_exp.p.declare_arg, align 8
  %find_fp2_exp.e.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %4, [256 x i128]** %find_fp2_exp.e.declare_arg, align 8
  %out = alloca [256 x [256 x i128]]*, align 8
  %out1 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out1, [256 x [256 x i128]]** %out, align 8
  %i = alloca i128, align 8
  %i2 = call i128 @fn_intrinsic_inline_init()
  store i128 %i2, i128* %i, align 4
  %bitLength = alloca i128, align 8
  %bitLength3 = call i128 @fn_intrinsic_inline_init()
  store i128 %bitLength3, i128* %bitLength, align 4
  %eBits = alloca [256 x i128]*, align 8
  %eBits4 = alloca [256 x i128], align 8
  store [256 x i128]* %eBits4, [256 x i128]** %eBits, align 8
  %j = alloca i128, align 8
  %j5 = call i128 @fn_intrinsic_inline_init()
  store i128 %j5, i128* %j, align 4
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %eBits, align 8
  store i128 0, i128* %bitLength, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch31, %entry
  store i128 0, i128* %j, align 4
  br label %loop.body6

loop.body6:                                       ; preds = %loop.latch, %loop.body
  %e = load [256 x i128]*, [256 x i128]** %find_fp2_exp.e.declare_arg, align 8
  %i7 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %e, i128 0, i128 %i7
  %e8 = load i128, i128* %array_getter, align 4
  %j9 = load i128, i128* %j, align 4
  %rshift = lshr i128 %e8, %j9
  %and = and i128 %rshift, 1
  %ptr_getter = load [256 x i128]*, [256 x i128]** %eBits, align 8
  %j10 = load i128, i128* %j, align 4
  %n = load i128, i128* %find_fp2_exp.n.declare_arg, align 4
  %i11 = load i128, i128* %i, align 4
  %mul = mul i128 %n, %i11
  %add = add i128 %j10, %mul
  %eBits12 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %add
  store i128 %and, i128* %eBits12, align 4
  %eBits13 = load [256 x i128]*, [256 x i128]** %eBits, align 8
  %j14 = load i128, i128* %j, align 4
  %n15 = load i128, i128* %find_fp2_exp.n.declare_arg, align 4
  %i16 = load i128, i128* %i, align 4
  %mul17 = mul i128 %n15, %i16
  %add18 = add i128 %j14, %mul17
  %array_getter19 = getelementptr inbounds [256 x i128], [256 x i128]* %eBits13, i128 0, i128 %add18
  %eBits20 = load i128, i128* %array_getter19, align 4
  %eq = icmp eq i128 %eBits20, 1
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body6
  %j21 = load i128, i128* %j, align 4
  %n22 = load i128, i128* %find_fp2_exp.n.declare_arg, align 4
  %i23 = load i128, i128* %i, align 4
  %mul24 = mul i128 %n22, %i23
  %add25 = add i128 %j21, %mul24
  %add26 = add i128 %add25, 1
  store i128 %add26, i128* %bitLength, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body6
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %j27 = load i128, i128* %j, align 4
  %add28 = add i128 %j27, 1
  store i128 %add28, i128* %j, align 4
  %j29 = load i128, i128* %j, align 4
  %n30 = load i128, i128* %find_fp2_exp.n.declare_arg, align 4
  %slt = icmp slt i128 %j29, %n30
  br i1 %slt, label %loop.body6, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch31

loop.latch31:                                     ; preds = %loop.exit
  %i32 = load i128, i128* %i, align 4
  %add33 = add i128 %i32, 1
  store i128 %add33, i128* %i, align 4
  %i34 = load i128, i128* %i, align 4
  %k = load i128, i128* %find_fp2_exp.k.declare_arg, align 4
  %mul35 = mul i128 2, %k
  %slt36 = icmp slt i128 %i34, %mul35
  br i1 %slt36, label %loop.body, label %loop.exit37

loop.exit37:                                      ; preds = %loop.latch31
  %uniform_array38 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array38, [256 x [256 x i128]]** %out, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body39

loop.body39:                                      ; preds = %loop.latch46, %loop.exit37
  %ptr_getter40 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %i41 = load i128, i128* %i, align 4
  %out42 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter40, i128 0, i128 0, i128 %i41
  store i128 0, i128* %out42, align 4
  %ptr_getter43 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %i44 = load i128, i128* %i, align 4
  %out45 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter43, i128 0, i128 1, i128 %i44
  store i128 0, i128* %out45, align 4
  br label %loop.latch46

loop.latch46:                                     ; preds = %loop.body39
  %i47 = load i128, i128* %i, align 4
  %add48 = add i128 %i47, 1
  store i128 %add48, i128* %i, align 4
  %i49 = load i128, i128* %i, align 4
  %slt50 = icmp slt i128 %i49, 50
  br i1 %slt50, label %loop.body39, label %loop.exit51

loop.exit51:                                      ; preds = %loop.latch46
  %ptr_getter52 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out53 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter52, i128 0, i128 0, i128 0
  store i128 1, i128* %out53, align 4
  %bitLength54 = load i128, i128* %bitLength, align 4
  %sub = sub i128 %bitLength54, 1
  store i128 %sub, i128* %i, align 4
  br label %loop.body55

loop.body55:                                      ; preds = %loop.latch77, %loop.exit51
  %eBits58 = load [256 x i128]*, [256 x i128]** %eBits, align 8
  %i59 = load i128, i128* %i, align 4
  %array_getter60 = getelementptr inbounds [256 x i128], [256 x i128]* %eBits58, i128 0, i128 %i59
  %eBits61 = load i128, i128* %array_getter60, align 4
  %eq62 = icmp eq i128 %eBits61, 1
  br i1 %eq62, label %if.true56, label %if.false57

if.true56:                                        ; preds = %loop.body55
  %n63 = load i128, i128* %find_fp2_exp.n.declare_arg, align 4
  %k64 = load i128, i128* %find_fp2_exp.k.declare_arg, align 4
  %out65 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %find_fp2_exp.a.declare_arg, align 8
  %p = load [256 x i128]*, [256 x i128]** %find_fp2_exp.p.declare_arg, align 8
  %call = call [256 x [256 x i128]]* @find_Fp2_product(i128 %n63, i128 %k64, [256 x [256 x i128]]* %out65, [256 x [256 x i128]]* %a, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call, [256 x [256 x i128]]** %out, align 8
  br label %if.exit66

if.false57:                                       ; preds = %loop.body55
  br label %if.exit66

if.exit66:                                        ; preds = %if.false57, %if.true56
  %i69 = load i128, i128* %i, align 4
  %sgt = icmp sgt i128 %i69, 0
  br i1 %sgt, label %if.true67, label %if.false68

if.true67:                                        ; preds = %if.exit66
  %n70 = load i128, i128* %find_fp2_exp.n.declare_arg, align 4
  %k71 = load i128, i128* %find_fp2_exp.k.declare_arg, align 4
  %out72 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %out73 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  %p74 = load [256 x i128]*, [256 x i128]** %find_fp2_exp.p.declare_arg, align 8
  %call75 = call [256 x [256 x i128]]* @find_Fp2_product(i128 %n70, i128 %k71, [256 x [256 x i128]]* %out72, [256 x [256 x i128]]* %out73, [256 x i128]* %p74)
  store [256 x [256 x i128]]* %call75, [256 x [256 x i128]]** %out, align 8
  br label %if.exit76

if.false68:                                       ; preds = %if.exit66
  br label %if.exit76

if.exit76:                                        ; preds = %if.false68, %if.true67
  br label %loop.latch77

loop.latch77:                                     ; preds = %if.exit76
  %i78 = load i128, i128* %i, align 4
  %sub79 = sub i128 %i78, 1
  store i128 %sub79, i128* %i, align 4
  %i80 = load i128, i128* %i, align 4
  %sge = icmp sge i128 %i80, 0
  br i1 %sge, label %loop.body55, label %loop.exit81

loop.exit81:                                      ; preds = %loop.latch77
  %out82 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out, align 8
  ret [256 x [256 x i128]]* %out82
}

define void @fn_template_init_signedfp2multiplynocarrycompress(%struct_template_circuit_signedfp2multiplynocarrycompress* %0) {
entry:
  %SignedFp2MultiplyNoCarryCompress = alloca %struct_template_circuit_signedfp2multiplynocarrycompress*, align 8
  store %struct_template_circuit_signedfp2multiplynocarrycompress* %0, %struct_template_circuit_signedfp2multiplynocarrycompress** %SignedFp2MultiplyNoCarryCompress, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %0, i32 0, i32 0
  %signedfp2multiplynocarrycompress.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %signedfp2multiplynocarrycompress.n.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarrycompress.n.read_arg_inner, i128* %signedfp2multiplynocarrycompress.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %0, i32 0, i32 1
  %signedfp2multiplynocarrycompress.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %signedfp2multiplynocarrycompress.k.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarrycompress.k.read_arg_inner, i128* %signedfp2multiplynocarrycompress.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %0, i32 0, i32 2
  %signedfp2multiplynocarrycompress.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %signedfp2multiplynocarrycompress.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %signedfp2multiplynocarrycompress.p.read_arg_inner, [256 x i128]** %signedfp2multiplynocarrycompress.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %0, i32 0, i32 3
  %signedfp2multiplynocarrycompress.m_in.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %signedfp2multiplynocarrycompress.m_in.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarrycompress.m_in.read_arg_inner, i128* %signedfp2multiplynocarrycompress.m_in.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %0, i32 0, i32 4
  %signedfp2multiplynocarrycompress.m_out.read_arg_inner = load i128, i128* %struct_getter4, align 4
  %signedfp2multiplynocarrycompress.m_out.declare_arg = alloca i128, align 8
  store i128 %signedfp2multiplynocarrycompress.m_out.read_arg_inner, i128* %signedfp2multiplynocarrycompress.m_out.declare_arg, align 4
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %0, i32 0, i32 5
  %signedfp2multiplynocarrycompress.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %signedfp2multiplynocarrycompress.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.a.read_input_inner, [256 x [256 x i128]]** %signedfp2multiplynocarrycompress.a.declare_input, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %0, i32 0, i32 6
  %signedfp2multiplynocarrycompress.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter6, align 8
  %signedfp2multiplynocarrycompress.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.b.read_input_inner, [256 x [256 x i128]]** %signedfp2multiplynocarrycompress.b.declare_input, align 8
  %compress = alloca %struct_template_circuit_fp2compress*, align 8
  %idx = alloca i128, align 8
  %idx7 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx7, i128* %idx, align 4
  %LOGK2 = alloca i128, align 8
  %LOGK28 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK28, i128* %LOGK2, align 4
  %LOGK1 = alloca i128, align 8
  %LOGK19 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK19, i128* %LOGK1, align 4
  %ab = alloca %struct_template_circuit_signedfp2multiplynocarry*, align 8
  %signedfp2multiplynocarrycompress.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %signedfp2multiplynocarrycompress.out.declare_output, align 8
  %j = alloca i128, align 8
  %j10 = call i128 @fn_intrinsic_inline_init()
  store i128 %j10, i128* %j, align 4
  %i = alloca i128, align 8
  %i11 = call i128 @fn_intrinsic_inline_init()
  store i128 %i11, i128* %i, align 4
  %k = load i128, i128* %signedfp2multiplynocarrycompress.k.declare_arg, align 4
  %mul = mul i128 2, %k
  %call = call i128 @log_ceil(i128 %mul)
  store i128 %call, i128* %LOGK1, align 4
  %n = load i128, i128* %signedfp2multiplynocarrycompress.n.declare_arg, align 4
  %k12 = load i128, i128* %signedfp2multiplynocarrycompress.k.declare_arg, align 4
  %m_in = load i128, i128* %signedfp2multiplynocarrycompress.m_in.declare_arg, align 4
  %mul13 = mul i128 2, %m_in
  %LOGK114 = load i128, i128* %LOGK1, align 4
  %add = add i128 %mul13, %LOGK114
  %call15 = call %struct_template_circuit_signedfp2multiplynocarry* @fn_template_build_signedfp2multiplynocarry(i128 %n, i128 %k12, i128 %add)
  store %struct_template_circuit_signedfp2multiplynocarry* %call15, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch51, %entry
  store i128 0, i128* %idx, align 4
  br label %loop.body16

loop.body16:                                      ; preds = %loop.latch, %loop.body
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompress.a.declare_input, align 8
  %i17 = load i128, i128* %i, align 4
  %idx18 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %i17, i128 %idx18
  %a19 = load i128, i128* %array_getter, align 4
  %ab20 = load %struct_template_circuit_signedfp2multiplynocarry*, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  %struct_getter21 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %ab20, i32 0, i32 3
  %signedfp2multiplynocarry.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter21, align 8
  %i22 = load i128, i128* %i, align 4
  %idx23 = load i128, i128* %idx, align 4
  %array_getter24 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarry.a.read_input_outter, i128 0, i128 %i22, i128 %idx23
  %ab25 = load i128, i128* %array_getter24, align 4
  call void @fn_intrinsic_add_constraint(i128 %ab25, i128 %a19, i1* @constraint.377)
  %ptr_getter = load %struct_template_circuit_signedfp2multiplynocarry*, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  %struct_getter26 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %ptr_getter, i32 0, i32 3
  %signedfp2multiplynocarry.a.read_input_outter27 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter26, align 8
  %i28 = load i128, i128* %i, align 4
  %idx29 = load i128, i128* %idx, align 4
  %ab30 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarry.a.read_input_outter27, i128 0, i128 %i28, i128 %idx29
  store i128 %a19, i128* %ab30, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompress.b.declare_input, align 8
  %i31 = load i128, i128* %i, align 4
  %idx32 = load i128, i128* %idx, align 4
  %array_getter33 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %i31, i128 %idx32
  %b34 = load i128, i128* %array_getter33, align 4
  %ab35 = load %struct_template_circuit_signedfp2multiplynocarry*, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  %struct_getter36 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %ab35, i32 0, i32 4
  %signedfp2multiplynocarry.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter36, align 8
  %i37 = load i128, i128* %i, align 4
  %idx38 = load i128, i128* %idx, align 4
  %array_getter39 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarry.b.read_input_outter, i128 0, i128 %i37, i128 %idx38
  %ab40 = load i128, i128* %array_getter39, align 4
  call void @fn_intrinsic_add_constraint(i128 %ab40, i128 %b34, i1* @constraint.378)
  %ptr_getter41 = load %struct_template_circuit_signedfp2multiplynocarry*, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  %struct_getter42 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %ptr_getter41, i32 0, i32 4
  %signedfp2multiplynocarry.b.read_input_outter43 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter42, align 8
  %i44 = load i128, i128* %i, align 4
  %idx45 = load i128, i128* %idx, align 4
  %ab46 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarry.b.read_input_outter43, i128 0, i128 %i44, i128 %idx45
  store i128 %b34, i128* %ab46, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body16
  %idx47 = load i128, i128* %idx, align 4
  %add48 = add i128 %idx47, 1
  store i128 %add48, i128* %idx, align 4
  %idx49 = load i128, i128* %idx, align 4
  %k50 = load i128, i128* %signedfp2multiplynocarrycompress.k.declare_arg, align 4
  %slt = icmp slt i128 %idx49, %k50
  br i1 %slt, label %loop.body16, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch51

loop.latch51:                                     ; preds = %loop.exit
  %i52 = load i128, i128* %i, align 4
  %add53 = add i128 %i52, 1
  store i128 %add53, i128* %i, align 4
  %i54 = load i128, i128* %i, align 4
  %slt55 = icmp slt i128 %i54, 2
  br i1 %slt55, label %loop.body, label %loop.exit56

loop.exit56:                                      ; preds = %loop.latch51
  %k57 = load i128, i128* %signedfp2multiplynocarrycompress.k.declare_arg, align 4
  %mul58 = mul i128 2, %k57
  %k59 = load i128, i128* %signedfp2multiplynocarrycompress.k.declare_arg, align 4
  %mul60 = mul i128 %mul58, %k59
  %call61 = call i128 @log_ceil(i128 %mul60)
  store i128 %call61, i128* %LOGK2, align 4
  %n62 = load i128, i128* %signedfp2multiplynocarrycompress.n.declare_arg, align 4
  %k63 = load i128, i128* %signedfp2multiplynocarrycompress.k.declare_arg, align 4
  %k64 = load i128, i128* %signedfp2multiplynocarrycompress.k.declare_arg, align 4
  %sub = sub i128 %k64, 1
  %p = load [256 x i128]*, [256 x i128]** %signedfp2multiplynocarrycompress.p.declare_arg, align 8
  %m_in65 = load i128, i128* %signedfp2multiplynocarrycompress.m_in.declare_arg, align 4
  %mul66 = mul i128 2, %m_in65
  %n67 = load i128, i128* %signedfp2multiplynocarrycompress.n.declare_arg, align 4
  %add68 = add i128 %mul66, %n67
  %LOGK269 = load i128, i128* %LOGK2, align 4
  %add70 = add i128 %add68, %LOGK269
  %call71 = call %struct_template_circuit_fp2compress* @fn_template_build_fp2compress(i128 %n62, i128 %k63, i128 %sub, [256 x i128]* %p, i128 %add70)
  store %struct_template_circuit_fp2compress* %call71, %struct_template_circuit_fp2compress** %compress, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body72

loop.body72:                                      ; preds = %loop.latch101, %loop.exit56
  store i128 0, i128* %j, align 4
  br label %loop.body73

loop.body73:                                      ; preds = %loop.latch92, %loop.body72
  %ab74 = load %struct_template_circuit_signedfp2multiplynocarry*, %struct_template_circuit_signedfp2multiplynocarry** %ab, align 8
  %struct_getter75 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarry, %struct_template_circuit_signedfp2multiplynocarry* %ab74, i32 0, i32 5
  %signedfp2multiplynocarry.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter75, align 8
  %i76 = load i128, i128* %i, align 4
  %j77 = load i128, i128* %j, align 4
  %array_getter78 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarry.out.read_output_outter, i128 0, i128 %i76, i128 %j77
  %ab79 = load i128, i128* %array_getter78, align 4
  %compress80 = load %struct_template_circuit_fp2compress*, %struct_template_circuit_fp2compress** %compress, align 8
  %struct_getter81 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %compress80, i32 0, i32 5
  %fp2compress.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter81, align 8
  %i82 = load i128, i128* %i, align 4
  %j83 = load i128, i128* %j, align 4
  %array_getter84 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2compress.in.read_input_outter, i128 0, i128 %i82, i128 %j83
  %compress85 = load i128, i128* %array_getter84, align 4
  call void @fn_intrinsic_add_constraint(i128 %compress85, i128 %ab79, i1* @constraint.379)
  %ptr_getter86 = load %struct_template_circuit_fp2compress*, %struct_template_circuit_fp2compress** %compress, align 8
  %struct_getter87 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %ptr_getter86, i32 0, i32 5
  %fp2compress.in.read_input_outter88 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter87, align 8
  %i89 = load i128, i128* %i, align 4
  %j90 = load i128, i128* %j, align 4
  %compress91 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2compress.in.read_input_outter88, i128 0, i128 %i89, i128 %j90
  store i128 %ab79, i128* %compress91, align 4
  br label %loop.latch92

loop.latch92:                                     ; preds = %loop.body73
  %j93 = load i128, i128* %j, align 4
  %add94 = add i128 %j93, 1
  store i128 %add94, i128* %j, align 4
  %j95 = load i128, i128* %j, align 4
  %k96 = load i128, i128* %signedfp2multiplynocarrycompress.k.declare_arg, align 4
  %mul97 = mul i128 2, %k96
  %sub98 = sub i128 %mul97, 1
  %slt99 = icmp slt i128 %j95, %sub98
  br i1 %slt99, label %loop.body73, label %loop.exit100

loop.exit100:                                     ; preds = %loop.latch92
  br label %loop.latch101

loop.latch101:                                    ; preds = %loop.exit100
  %i102 = load i128, i128* %i, align 4
  %add103 = add i128 %i102, 1
  store i128 %add103, i128* %i, align 4
  %i104 = load i128, i128* %i, align 4
  %slt105 = icmp slt i128 %i104, 2
  br i1 %slt105, label %loop.body72, label %loop.exit106

loop.exit106:                                     ; preds = %loop.latch101
  store i128 0, i128* %i, align 4
  br label %loop.body107

loop.body107:                                     ; preds = %loop.latch131, %loop.exit106
  store i128 0, i128* %j, align 4
  br label %loop.body108

loop.body108:                                     ; preds = %loop.latch124, %loop.body107
  %compress109 = load %struct_template_circuit_fp2compress*, %struct_template_circuit_fp2compress** %compress, align 8
  %struct_getter110 = getelementptr inbounds %struct_template_circuit_fp2compress, %struct_template_circuit_fp2compress* %compress109, i32 0, i32 6
  %fp2compress.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter110, align 8
  %i111 = load i128, i128* %i, align 4
  %j112 = load i128, i128* %j, align 4
  %array_getter113 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2compress.out.read_output_outter, i128 0, i128 %i111, i128 %j112
  %compress114 = load i128, i128* %array_getter113, align 4
  %out115 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompress.out.declare_output, align 8
  %i116 = load i128, i128* %i, align 4
  %j117 = load i128, i128* %j, align 4
  %array_getter118 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out115, i128 0, i128 %i116, i128 %j117
  %out119 = load i128, i128* %array_getter118, align 4
  call void @fn_intrinsic_add_constraint(i128 %out119, i128 %compress114, i1* @constraint.380)
  %ptr_getter120 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompress.out.declare_output, align 8
  %i121 = load i128, i128* %i, align 4
  %j122 = load i128, i128* %j, align 4
  %out123 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter120, i128 0, i128 %i121, i128 %j122
  store i128 %compress114, i128* %out123, align 4
  br label %loop.latch124

loop.latch124:                                    ; preds = %loop.body108
  %j125 = load i128, i128* %j, align 4
  %add126 = add i128 %j125, 1
  store i128 %add126, i128* %j, align 4
  %j127 = load i128, i128* %j, align 4
  %k128 = load i128, i128* %signedfp2multiplynocarrycompress.k.declare_arg, align 4
  %slt129 = icmp slt i128 %j127, %k128
  br i1 %slt129, label %loop.body108, label %loop.exit130

loop.exit130:                                     ; preds = %loop.latch124
  br label %loop.latch131

loop.latch131:                                    ; preds = %loop.exit130
  %i132 = load i128, i128* %i, align 4
  %add133 = add i128 %i132, 1
  store i128 %add133, i128* %i, align 4
  %i134 = load i128, i128* %i, align 4
  %slt135 = icmp slt i128 %i134, 2
  br i1 %slt135, label %loop.body107, label %loop.exit136

loop.exit136:                                     ; preds = %loop.latch131
  br label %exit

exit:                                             ; preds = %loop.exit136
  %out137 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2multiplynocarrycompress.out.declare_output, align 8
  %signedfp2multiplynocarrycompress.out.write_output_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %0, i32 0, i32 7
  store [256 x [256 x i128]]* %out137, [256 x [256 x i128]]** %signedfp2multiplynocarrycompress.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_signedfp2multiplynocarrycompress* @fn_template_build_signedfp2multiplynocarrycompress(i128 %0, i128 %1, [256 x i128]* %2, i128 %3, i128 %4) {
entry:
  %struct_template_circuit_signedfp2multiplynocarrycompress = alloca %struct_template_circuit_signedfp2multiplynocarrycompress, align 8
  %signedfp2multiplynocarrycompress.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %struct_template_circuit_signedfp2multiplynocarrycompress, i32 0, i32 0
  store i128 %0, i128* %signedfp2multiplynocarrycompress.n.write_arg_inner, align 4
  %signedfp2multiplynocarrycompress.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %struct_template_circuit_signedfp2multiplynocarrycompress, i32 0, i32 1
  store i128 %1, i128* %signedfp2multiplynocarrycompress.k.write_arg_inner, align 4
  %signedfp2multiplynocarrycompress.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %struct_template_circuit_signedfp2multiplynocarrycompress, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %signedfp2multiplynocarrycompress.p.write_arg_inner, align 8
  %signedfp2multiplynocarrycompress.m_in.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %struct_template_circuit_signedfp2multiplynocarrycompress, i32 0, i32 3
  store i128 %3, i128* %signedfp2multiplynocarrycompress.m_in.write_arg_inner, align 4
  %signedfp2multiplynocarrycompress.m_out.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %struct_template_circuit_signedfp2multiplynocarrycompress, i32 0, i32 4
  store i128 %4, i128* %signedfp2multiplynocarrycompress.m_out.write_arg_inner, align 4
  ret %struct_template_circuit_signedfp2multiplynocarrycompress* %struct_template_circuit_signedfp2multiplynocarrycompress
}

define void @fn_template_init_ellipticcurvedouble(%struct_template_circuit_ellipticcurvedouble* %0) {
entry:
  %EllipticCurveDouble = alloca %struct_template_circuit_ellipticcurvedouble*, align 8
  store %struct_template_circuit_ellipticcurvedouble* %0, %struct_template_circuit_ellipticcurvedouble** %EllipticCurveDouble, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %0, i32 0, i32 0
  %ellipticcurvedouble.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %ellipticcurvedouble.n.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvedouble.n.read_arg_inner, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %0, i32 0, i32 1
  %ellipticcurvedouble.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %ellipticcurvedouble.k.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvedouble.k.read_arg_inner, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %0, i32 0, i32 2
  %ellipticcurvedouble.a.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %ellipticcurvedouble.a.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvedouble.a.read_arg_inner, i128* %ellipticcurvedouble.a.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %0, i32 0, i32 3
  %ellipticcurvedouble.b.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %ellipticcurvedouble.b.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvedouble.b.read_arg_inner, i128* %ellipticcurvedouble.b.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %0, i32 0, i32 4
  %ellipticcurvedouble.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %ellipticcurvedouble.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %ellipticcurvedouble.p.read_arg_inner, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %0, i32 0, i32 5
  %ellipticcurvedouble.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %ellipticcurvedouble.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %ellipticcurvedouble.in.read_input_inner, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %point_on_tangent = alloca %struct_template_circuit_pointontangent*, align 8
  %j = alloca i128, align 8
  %j6 = call i128 @fn_intrinsic_inline_init()
  store i128 %j6, i128* %j, align 4
  %point_on_curve = alloca %struct_template_circuit_pointoncurve*, align 8
  %ellipticcurvedouble.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %ellipticcurvedouble.out.declare_output, align 8
  %range_check = alloca %struct_template_circuit_rangecheck2d*, align 8
  %long_3 = alloca [256 x i128]*, align 8
  %long_37 = alloca [256 x i128], align 8
  store [256 x i128]* %long_37, [256 x i128]** %long_3, align 8
  %i = alloca i128, align 8
  %i8 = call i128 @fn_intrinsic_inline_init()
  store i128 %i8, i128* %i, align 4
  %y3 = alloca [256 x i128]*, align 8
  %y39 = alloca [256 x i128], align 8
  store [256 x i128]* %y39, [256 x i128]** %y3, align 8
  %x3_eq_x1 = alloca %struct_template_circuit_fpisequal*, align 8
  %lamb = alloca [256 x i128]*, align 8
  %lamb10 = alloca [256 x i128], align 8
  store [256 x i128]* %lamb10, [256 x i128]** %lamb, align 8
  %long_a = alloca [256 x i128]*, align 8
  %long_a11 = alloca [256 x i128], align 8
  store [256 x i128]* %long_a11, [256 x i128]** %long_a, align 8
  %lamb_denom = alloca [256 x i128]*, align 8
  %lamb_denom12 = alloca [256 x i128], align 8
  store [256 x i128]* %lamb_denom12, [256 x i128]** %lamb_denom, align 8
  %x3 = alloca [256 x i128]*, align 8
  %x313 = alloca [256 x i128], align 8
  store [256 x i128]* %x313, [256 x i128]** %x3, align 8
  %lamb_num = alloca [256 x i128]*, align 8
  %lamb_num14 = alloca [256 x i128], align 8
  store [256 x i128]* %lamb_num14, [256 x i128]** %lamb_num, align 8
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %long_a, align 8
  %uniform_array15 = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array15, [256 x i128]** %long_3, align 8
  %a = load i128, i128* %ellipticcurvedouble.a.declare_arg, align 4
  %ptr_getter = load [256 x i128]*, [256 x i128]** %long_a, align 8
  %long_a16 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 0
  store i128 %a, i128* %long_a16, align 4
  %ptr_getter17 = load [256 x i128]*, [256 x i128]** %long_3, align 8
  %long_318 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter17, i128 0, i128 0
  store i128 3, i128* %long_318, align 4
  store i128 1, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %ptr_getter19 = load [256 x i128]*, [256 x i128]** %long_a, align 8
  %i20 = load i128, i128* %i, align 4
  %long_a21 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter19, i128 0, i128 %i20
  store i128 0, i128* %long_a21, align 4
  %ptr_getter22 = load [256 x i128]*, [256 x i128]** %long_3, align 8
  %i23 = load i128, i128* %i, align 4
  %long_324 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter22, i128 0, i128 %i23
  store i128 0, i128* %long_324, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i25 = load i128, i128* %i, align 4
  %add = add i128 %i25, 1
  store i128 %add, i128* %i, align 4
  %i26 = load i128, i128* %i, align 4
  %k = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %slt = icmp slt i128 %i26, %k
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k27 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %long_a28 = load [256 x i128]*, [256 x i128]** %long_a, align 8
  %n29 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k30 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %long_331 = load [256 x i128]*, [256 x i128]** %long_3, align 8
  %n32 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k33 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 0
  %in34 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %in34, [256 x i128]* %spice_inline_array, align 4
  %in35 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %array_getter36 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in35, i128 0, i128 0
  %in37 = load [256 x i128], [256 x i128]* %array_getter36, align 4
  %spice_inline_array38 = alloca [256 x i128], align 8
  store [256 x i128] %in37, [256 x i128]* %spice_inline_array38, align 4
  %p = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call = call [256 x i128]* @prod_mod(i128 %n32, i128 %k33, [256 x i128]* %spice_inline_array, [256 x i128]* %spice_inline_array38, [256 x i128]* %p)
  %p39 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call40 = call [256 x i128]* @prod_mod(i128 %n29, i128 %k30, [256 x i128]* %long_331, [256 x i128]* %call, [256 x i128]* %p39)
  %p41 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call42 = call [256 x i128]* @long_add_mod(i128 %n, i128 %k27, [256 x i128]* %long_a28, [256 x i128]* %call40, [256 x i128]* %p41)
  store [256 x i128]* %call42, [256 x i128]** %lamb_num, align 8
  %n43 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k44 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %in45 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %array_getter46 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in45, i128 0, i128 1
  %in47 = load [256 x i128], [256 x i128]* %array_getter46, align 4
  %spice_inline_array48 = alloca [256 x i128], align 8
  store [256 x i128] %in47, [256 x i128]* %spice_inline_array48, align 4
  %in49 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %array_getter50 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in49, i128 0, i128 1
  %in51 = load [256 x i128], [256 x i128]* %array_getter50, align 4
  %spice_inline_array52 = alloca [256 x i128], align 8
  store [256 x i128] %in51, [256 x i128]* %spice_inline_array52, align 4
  %p53 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call54 = call [256 x i128]* @long_add_mod(i128 %n43, i128 %k44, [256 x i128]* %spice_inline_array48, [256 x i128]* %spice_inline_array52, [256 x i128]* %p53)
  store [256 x i128]* %call54, [256 x i128]** %lamb_denom, align 8
  %n55 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k56 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %lamb_num57 = load [256 x i128]*, [256 x i128]** %lamb_num, align 8
  %n58 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k59 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %lamb_denom60 = load [256 x i128]*, [256 x i128]** %lamb_denom, align 8
  %p61 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call62 = call [256 x i128]* @mod_inv(i128 %n58, i128 %k59, [256 x i128]* %lamb_denom60, [256 x i128]* %p61)
  %p63 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call64 = call [256 x i128]* @prod_mod(i128 %n55, i128 %k56, [256 x i128]* %lamb_num57, [256 x i128]* %call62, [256 x i128]* %p63)
  store [256 x i128]* %call64, [256 x i128]** %lamb, align 8
  %n65 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k66 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %n67 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k68 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %lamb69 = load [256 x i128]*, [256 x i128]** %lamb, align 8
  %lamb70 = load [256 x i128]*, [256 x i128]** %lamb, align 8
  %p71 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call72 = call [256 x i128]* @prod_mod(i128 %n67, i128 %k68, [256 x i128]* %lamb69, [256 x i128]* %lamb70, [256 x i128]* %p71)
  %n73 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k74 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %in75 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %array_getter76 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in75, i128 0, i128 0
  %in77 = load [256 x i128], [256 x i128]* %array_getter76, align 4
  %spice_inline_array78 = alloca [256 x i128], align 8
  store [256 x i128] %in77, [256 x i128]* %spice_inline_array78, align 4
  %in79 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %array_getter80 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in79, i128 0, i128 0
  %in81 = load [256 x i128], [256 x i128]* %array_getter80, align 4
  %spice_inline_array82 = alloca [256 x i128], align 8
  store [256 x i128] %in81, [256 x i128]* %spice_inline_array82, align 4
  %p83 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call84 = call [256 x i128]* @long_add_mod(i128 %n73, i128 %k74, [256 x i128]* %spice_inline_array78, [256 x i128]* %spice_inline_array82, [256 x i128]* %p83)
  %p85 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call86 = call [256 x i128]* @long_sub_mod(i128 %n65, i128 %k66, [256 x i128]* %call72, [256 x i128]* %call84, [256 x i128]* %p85)
  store [256 x i128]* %call86, [256 x i128]** %x3, align 8
  %n87 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k88 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %n89 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k90 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %lamb91 = load [256 x i128]*, [256 x i128]** %lamb, align 8
  %n92 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k93 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %in94 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %array_getter95 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in94, i128 0, i128 0
  %in96 = load [256 x i128], [256 x i128]* %array_getter95, align 4
  %spice_inline_array97 = alloca [256 x i128], align 8
  store [256 x i128] %in96, [256 x i128]* %spice_inline_array97, align 4
  %x398 = load [256 x i128]*, [256 x i128]** %x3, align 8
  %p99 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call100 = call [256 x i128]* @long_sub_mod(i128 %n92, i128 %k93, [256 x i128]* %spice_inline_array97, [256 x i128]* %x398, [256 x i128]* %p99)
  %p101 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call102 = call [256 x i128]* @prod_mod(i128 %n89, i128 %k90, [256 x i128]* %lamb91, [256 x i128]* %call100, [256 x i128]* %p101)
  %in103 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %array_getter104 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in103, i128 0, i128 1
  %in105 = load [256 x i128], [256 x i128]* %array_getter104, align 4
  %spice_inline_array106 = alloca [256 x i128], align 8
  store [256 x i128] %in105, [256 x i128]* %spice_inline_array106, align 4
  %p107 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call108 = call [256 x i128]* @long_sub_mod(i128 %n87, i128 %k88, [256 x i128]* %call102, [256 x i128]* %spice_inline_array106, [256 x i128]* %p107)
  store [256 x i128]* %call108, [256 x i128]** %y3, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body109

loop.body109:                                     ; preds = %loop.latch124, %loop.exit
  %x3110 = load [256 x i128]*, [256 x i128]** %x3, align 8
  %i111 = load i128, i128* %i, align 4
  %array_getter112 = getelementptr inbounds [256 x i128], [256 x i128]* %x3110, i128 0, i128 %i111
  %x3113 = load i128, i128* %array_getter112, align 4
  %ptr_getter114 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.out.declare_output, align 8
  %i115 = load i128, i128* %i, align 4
  %out116 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter114, i128 0, i128 0, i128 %i115
  store i128 %x3113, i128* %out116, align 4
  %y3117 = load [256 x i128]*, [256 x i128]** %y3, align 8
  %i118 = load i128, i128* %i, align 4
  %array_getter119 = getelementptr inbounds [256 x i128], [256 x i128]* %y3117, i128 0, i128 %i118
  %y3120 = load i128, i128* %array_getter119, align 4
  %ptr_getter121 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.out.declare_output, align 8
  %i122 = load i128, i128* %i, align 4
  %out123 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter121, i128 0, i128 1, i128 %i122
  store i128 %y3120, i128* %out123, align 4
  br label %loop.latch124

loop.latch124:                                    ; preds = %loop.body109
  %i125 = load i128, i128* %i, align 4
  %add126 = add i128 %i125, 1
  store i128 %add126, i128* %i, align 4
  %i127 = load i128, i128* %i, align 4
  %k128 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %slt129 = icmp slt i128 %i127, %k128
  br i1 %slt129, label %loop.body109, label %loop.exit130

loop.exit130:                                     ; preds = %loop.latch124
  %n131 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k132 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %call133 = call %struct_template_circuit_rangecheck2d* @fn_template_build_rangecheck2d(i128 %n131, i128 %k132)
  store %struct_template_circuit_rangecheck2d* %call133, %struct_template_circuit_rangecheck2d** %range_check, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body134

loop.body134:                                     ; preds = %loop.latch160, %loop.exit130
  store i128 0, i128* %i, align 4
  br label %loop.body135

loop.body135:                                     ; preds = %loop.latch153, %loop.body134
  %out136 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.out.declare_output, align 8
  %j137 = load i128, i128* %j, align 4
  %i138 = load i128, i128* %i, align 4
  %array_getter139 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out136, i128 0, i128 %j137, i128 %i138
  %out140 = load i128, i128* %array_getter139, align 4
  %range_check141 = load %struct_template_circuit_rangecheck2d*, %struct_template_circuit_rangecheck2d** %range_check, align 8
  %struct_getter142 = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %range_check141, i32 0, i32 2
  %rangecheck2d.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter142, align 8
  %j143 = load i128, i128* %j, align 4
  %i144 = load i128, i128* %i, align 4
  %array_getter145 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %rangecheck2d.in.read_input_outter, i128 0, i128 %j143, i128 %i144
  %range_check146 = load i128, i128* %array_getter145, align 4
  call void @fn_intrinsic_add_constraint(i128 %range_check146, i128 %out140, i1* @constraint.381)
  %ptr_getter147 = load %struct_template_circuit_rangecheck2d*, %struct_template_circuit_rangecheck2d** %range_check, align 8
  %struct_getter148 = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %ptr_getter147, i32 0, i32 2
  %rangecheck2d.in.read_input_outter149 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter148, align 8
  %j150 = load i128, i128* %j, align 4
  %i151 = load i128, i128* %i, align 4
  %range_check152 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %rangecheck2d.in.read_input_outter149, i128 0, i128 %j150, i128 %i151
  store i128 %out140, i128* %range_check152, align 4
  br label %loop.latch153

loop.latch153:                                    ; preds = %loop.body135
  %i154 = load i128, i128* %i, align 4
  %add155 = add i128 %i154, 1
  store i128 %add155, i128* %i, align 4
  %i156 = load i128, i128* %i, align 4
  %k157 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %slt158 = icmp slt i128 %i156, %k157
  br i1 %slt158, label %loop.body135, label %loop.exit159

loop.exit159:                                     ; preds = %loop.latch153
  br label %loop.latch160

loop.latch160:                                    ; preds = %loop.exit159
  %j161 = load i128, i128* %j, align 4
  %add162 = add i128 %j161, 1
  store i128 %add162, i128* %j, align 4
  %j163 = load i128, i128* %j, align 4
  %slt164 = icmp slt i128 %j163, 2
  br i1 %slt164, label %loop.body134, label %loop.exit165

loop.exit165:                                     ; preds = %loop.latch160
  %n166 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k167 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %a168 = load i128, i128* %ellipticcurvedouble.a.declare_arg, align 4
  %p169 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call170 = call %struct_template_circuit_pointontangent* @fn_template_build_pointontangent(i128 %n166, i128 %k167, i128 %a168, [256 x i128]* %p169)
  store %struct_template_circuit_pointontangent* %call170, %struct_template_circuit_pointontangent** %point_on_tangent, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body171

loop.body171:                                     ; preds = %loop.latch215, %loop.exit165
  store i128 0, i128* %i, align 4
  br label %loop.body172

loop.body172:                                     ; preds = %loop.latch208, %loop.body171
  %in173 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %j174 = load i128, i128* %j, align 4
  %i175 = load i128, i128* %i, align 4
  %array_getter176 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in173, i128 0, i128 %j174, i128 %i175
  %in177 = load i128, i128* %array_getter176, align 4
  %point_on_tangent178 = load %struct_template_circuit_pointontangent*, %struct_template_circuit_pointontangent** %point_on_tangent, align 8
  %struct_getter179 = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %point_on_tangent178, i32 0, i32 4
  %pointontangent.in.read_input_outter = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter179, align 8
  %j180 = load i128, i128* %j, align 4
  %i181 = load i128, i128* %i, align 4
  %array_getter182 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %pointontangent.in.read_input_outter, i128 0, i128 0, i128 %j180, i128 %i181
  %point_on_tangent183 = load i128, i128* %array_getter182, align 4
  call void @fn_intrinsic_add_constraint(i128 %point_on_tangent183, i128 %in177, i1* @constraint.382)
  %ptr_getter184 = load %struct_template_circuit_pointontangent*, %struct_template_circuit_pointontangent** %point_on_tangent, align 8
  %struct_getter185 = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %ptr_getter184, i32 0, i32 4
  %pointontangent.in.read_input_outter186 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter185, align 8
  %j187 = load i128, i128* %j, align 4
  %i188 = load i128, i128* %i, align 4
  %point_on_tangent189 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %pointontangent.in.read_input_outter186, i128 0, i128 0, i128 %j187, i128 %i188
  store i128 %in177, i128* %point_on_tangent189, align 4
  %out190 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.out.declare_output, align 8
  %j191 = load i128, i128* %j, align 4
  %i192 = load i128, i128* %i, align 4
  %array_getter193 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out190, i128 0, i128 %j191, i128 %i192
  %out194 = load i128, i128* %array_getter193, align 4
  %point_on_tangent195 = load %struct_template_circuit_pointontangent*, %struct_template_circuit_pointontangent** %point_on_tangent, align 8
  %struct_getter196 = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %point_on_tangent195, i32 0, i32 4
  %pointontangent.in.read_input_outter197 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter196, align 8
  %j198 = load i128, i128* %j, align 4
  %i199 = load i128, i128* %i, align 4
  %array_getter200 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %pointontangent.in.read_input_outter197, i128 0, i128 1, i128 %j198, i128 %i199
  %point_on_tangent201 = load i128, i128* %array_getter200, align 4
  call void @fn_intrinsic_add_constraint(i128 %point_on_tangent201, i128 %out194, i1* @constraint.383)
  %ptr_getter202 = load %struct_template_circuit_pointontangent*, %struct_template_circuit_pointontangent** %point_on_tangent, align 8
  %struct_getter203 = getelementptr inbounds %struct_template_circuit_pointontangent, %struct_template_circuit_pointontangent* %ptr_getter202, i32 0, i32 4
  %pointontangent.in.read_input_outter204 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %struct_getter203, align 8
  %j205 = load i128, i128* %j, align 4
  %i206 = load i128, i128* %i, align 4
  %point_on_tangent207 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %pointontangent.in.read_input_outter204, i128 0, i128 1, i128 %j205, i128 %i206
  store i128 %out194, i128* %point_on_tangent207, align 4
  br label %loop.latch208

loop.latch208:                                    ; preds = %loop.body172
  %i209 = load i128, i128* %i, align 4
  %add210 = add i128 %i209, 1
  store i128 %add210, i128* %i, align 4
  %i211 = load i128, i128* %i, align 4
  %k212 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %slt213 = icmp slt i128 %i211, %k212
  br i1 %slt213, label %loop.body172, label %loop.exit214

loop.exit214:                                     ; preds = %loop.latch208
  br label %loop.latch215

loop.latch215:                                    ; preds = %loop.exit214
  %j216 = load i128, i128* %j, align 4
  %add217 = add i128 %j216, 1
  store i128 %add217, i128* %j, align 4
  %j218 = load i128, i128* %j, align 4
  %slt219 = icmp slt i128 %j218, 2
  br i1 %slt219, label %loop.body171, label %loop.exit220

loop.exit220:                                     ; preds = %loop.latch215
  %n221 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k222 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %a223 = load i128, i128* %ellipticcurvedouble.a.declare_arg, align 4
  %b = load i128, i128* %ellipticcurvedouble.b.declare_arg, align 4
  %p224 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call225 = call %struct_template_circuit_pointoncurve* @fn_template_build_pointoncurve(i128 %n221, i128 %k222, i128 %a223, i128 %b, [256 x i128]* %p224)
  store %struct_template_circuit_pointoncurve* %call225, %struct_template_circuit_pointoncurve** %point_on_curve, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body226

loop.body226:                                     ; preds = %loop.latch252, %loop.exit220
  store i128 0, i128* %i, align 4
  br label %loop.body227

loop.body227:                                     ; preds = %loop.latch245, %loop.body226
  %out228 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.out.declare_output, align 8
  %j229 = load i128, i128* %j, align 4
  %i230 = load i128, i128* %i, align 4
  %array_getter231 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out228, i128 0, i128 %j229, i128 %i230
  %out232 = load i128, i128* %array_getter231, align 4
  %point_on_curve233 = load %struct_template_circuit_pointoncurve*, %struct_template_circuit_pointoncurve** %point_on_curve, align 8
  %struct_getter234 = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %point_on_curve233, i32 0, i32 5
  %pointoncurve.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter234, align 8
  %j235 = load i128, i128* %j, align 4
  %i236 = load i128, i128* %i, align 4
  %array_getter237 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pointoncurve.in.read_input_outter, i128 0, i128 %j235, i128 %i236
  %point_on_curve238 = load i128, i128* %array_getter237, align 4
  call void @fn_intrinsic_add_constraint(i128 %point_on_curve238, i128 %out232, i1* @constraint.384)
  %ptr_getter239 = load %struct_template_circuit_pointoncurve*, %struct_template_circuit_pointoncurve** %point_on_curve, align 8
  %struct_getter240 = getelementptr inbounds %struct_template_circuit_pointoncurve, %struct_template_circuit_pointoncurve* %ptr_getter239, i32 0, i32 5
  %pointoncurve.in.read_input_outter241 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter240, align 8
  %j242 = load i128, i128* %j, align 4
  %i243 = load i128, i128* %i, align 4
  %point_on_curve244 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %pointoncurve.in.read_input_outter241, i128 0, i128 %j242, i128 %i243
  store i128 %out232, i128* %point_on_curve244, align 4
  br label %loop.latch245

loop.latch245:                                    ; preds = %loop.body227
  %i246 = load i128, i128* %i, align 4
  %add247 = add i128 %i246, 1
  store i128 %add247, i128* %i, align 4
  %i248 = load i128, i128* %i, align 4
  %k249 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %slt250 = icmp slt i128 %i248, %k249
  br i1 %slt250, label %loop.body227, label %loop.exit251

loop.exit251:                                     ; preds = %loop.latch245
  br label %loop.latch252

loop.latch252:                                    ; preds = %loop.exit251
  %j253 = load i128, i128* %j, align 4
  %add254 = add i128 %j253, 1
  store i128 %add254, i128* %j, align 4
  %j255 = load i128, i128* %j, align 4
  %slt256 = icmp slt i128 %j255, 2
  br i1 %slt256, label %loop.body226, label %loop.exit257

loop.exit257:                                     ; preds = %loop.latch252
  %n258 = load i128, i128* %ellipticcurvedouble.n.declare_arg, align 4
  %k259 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %p260 = load [256 x i128]*, [256 x i128]** %ellipticcurvedouble.p.declare_arg, align 8
  %call261 = call %struct_template_circuit_fpisequal* @fn_template_build_fpisequal(i128 %n258, i128 %k259, [256 x i128]* %p260)
  store %struct_template_circuit_fpisequal* %call261, %struct_template_circuit_fpisequal** %x3_eq_x1, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body262

loop.body262:                                     ; preds = %loop.latch292, %loop.exit257
  %out263 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.out.declare_output, align 8
  %i264 = load i128, i128* %i, align 4
  %array_getter265 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out263, i128 0, i128 0, i128 %i264
  %out266 = load i128, i128* %array_getter265, align 4
  %x3_eq_x1267 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x3_eq_x1, align 8
  %struct_getter268 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %x3_eq_x1267, i32 0, i32 3
  %fpisequal.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter268, align 8
  %i269 = load i128, i128* %i, align 4
  %array_getter270 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter, i128 0, i128 0, i128 %i269
  %x3_eq_x1271 = load i128, i128* %array_getter270, align 4
  call void @fn_intrinsic_add_constraint(i128 %x3_eq_x1271, i128 %out266, i1* @constraint.385)
  %ptr_getter272 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x3_eq_x1, align 8
  %struct_getter273 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %ptr_getter272, i32 0, i32 3
  %fpisequal.in.read_input_outter274 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter273, align 8
  %i275 = load i128, i128* %i, align 4
  %x3_eq_x1276 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter274, i128 0, i128 0, i128 %i275
  store i128 %out266, i128* %x3_eq_x1276, align 4
  %in277 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.in.declare_input, align 8
  %i278 = load i128, i128* %i, align 4
  %array_getter279 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in277, i128 0, i128 0, i128 %i278
  %in280 = load i128, i128* %array_getter279, align 4
  %x3_eq_x1281 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x3_eq_x1, align 8
  %struct_getter282 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %x3_eq_x1281, i32 0, i32 3
  %fpisequal.in.read_input_outter283 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter282, align 8
  %i284 = load i128, i128* %i, align 4
  %array_getter285 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter283, i128 0, i128 1, i128 %i284
  %x3_eq_x1286 = load i128, i128* %array_getter285, align 4
  call void @fn_intrinsic_add_constraint(i128 %x3_eq_x1286, i128 %in280, i1* @constraint.386)
  %ptr_getter287 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x3_eq_x1, align 8
  %struct_getter288 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %ptr_getter287, i32 0, i32 3
  %fpisequal.in.read_input_outter289 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter288, align 8
  %i290 = load i128, i128* %i, align 4
  %x3_eq_x1291 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter289, i128 0, i128 1, i128 %i290
  store i128 %in280, i128* %x3_eq_x1291, align 4
  br label %loop.latch292

loop.latch292:                                    ; preds = %loop.body262
  %i293 = load i128, i128* %i, align 4
  %add294 = add i128 %i293, 1
  store i128 %add294, i128* %i, align 4
  %i295 = load i128, i128* %i, align 4
  %k296 = load i128, i128* %ellipticcurvedouble.k.declare_arg, align 4
  %slt297 = icmp slt i128 %i295, %k296
  br i1 %slt297, label %loop.body262, label %loop.exit298

loop.exit298:                                     ; preds = %loop.latch292
  %x3_eq_x1299 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x3_eq_x1, align 8
  %struct_getter300 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %x3_eq_x1299, i32 0, i32 4
  %fpisequal.out.read_output_outter = load i128, i128* %struct_getter300, align 4
  call void @fn_intrinsic_add_constraint(i128 %fpisequal.out.read_output_outter, i128 0, i1* @constraint.387)
  br label %exit

exit:                                             ; preds = %loop.exit298
  %out301 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvedouble.out.declare_output, align 8
  %ellipticcurvedouble.out.write_output_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %0, i32 0, i32 6
  store [256 x [256 x i128]]* %out301, [256 x [256 x i128]]** %ellipticcurvedouble.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_ellipticcurvedouble* @fn_template_build_ellipticcurvedouble(i128 %0, i128 %1, i128 %2, i128 %3, [256 x i128]* %4) {
entry:
  %struct_template_circuit_ellipticcurvedouble = alloca %struct_template_circuit_ellipticcurvedouble, align 8
  %ellipticcurvedouble.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %struct_template_circuit_ellipticcurvedouble, i32 0, i32 0
  store i128 %0, i128* %ellipticcurvedouble.n.write_arg_inner, align 4
  %ellipticcurvedouble.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %struct_template_circuit_ellipticcurvedouble, i32 0, i32 1
  store i128 %1, i128* %ellipticcurvedouble.k.write_arg_inner, align 4
  %ellipticcurvedouble.a.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %struct_template_circuit_ellipticcurvedouble, i32 0, i32 2
  store i128 %2, i128* %ellipticcurvedouble.a.write_arg_inner, align 4
  %ellipticcurvedouble.b.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %struct_template_circuit_ellipticcurvedouble, i32 0, i32 3
  store i128 %3, i128* %ellipticcurvedouble.b.write_arg_inner, align 4
  %ellipticcurvedouble.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %struct_template_circuit_ellipticcurvedouble, i32 0, i32 4
  store [256 x i128]* %4, [256 x i128]** %ellipticcurvedouble.p.write_arg_inner, align 8
  ret %struct_template_circuit_ellipticcurvedouble* %struct_template_circuit_ellipticcurvedouble
}

define void @fn_template_init_signedfp2divide(%struct_template_circuit_signedfp2divide* %0) {
entry:
  %SignedFp2Divide = alloca %struct_template_circuit_signedfp2divide*, align 8
  store %struct_template_circuit_signedfp2divide* %0, %struct_template_circuit_signedfp2divide** %SignedFp2Divide, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %0, i32 0, i32 0
  %signedfp2divide.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %signedfp2divide.n.declare_arg = alloca i128, align 8
  store i128 %signedfp2divide.n.read_arg_inner, i128* %signedfp2divide.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %0, i32 0, i32 1
  %signedfp2divide.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %signedfp2divide.k.declare_arg = alloca i128, align 8
  store i128 %signedfp2divide.k.read_arg_inner, i128* %signedfp2divide.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %0, i32 0, i32 2
  %signedfp2divide.overflowa.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %signedfp2divide.overflowa.declare_arg = alloca i128, align 8
  store i128 %signedfp2divide.overflowa.read_arg_inner, i128* %signedfp2divide.overflowa.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %0, i32 0, i32 3
  %signedfp2divide.overflowb.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %signedfp2divide.overflowb.declare_arg = alloca i128, align 8
  store i128 %signedfp2divide.overflowb.read_arg_inner, i128* %signedfp2divide.overflowb.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %0, i32 0, i32 4
  %signedfp2divide.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %signedfp2divide.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %signedfp2divide.p.read_arg_inner, [256 x i128]** %signedfp2divide.p.declare_arg, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %0, i32 0, i32 5
  %signedfp2divide.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %signedfp2divide.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2divide.a.read_input_inner, [256 x [256 x i128]]** %signedfp2divide.a.declare_input, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %0, i32 0, i32 6
  %signedfp2divide.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter6, align 8
  %signedfp2divide.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %signedfp2divide.b.read_input_inner, [256 x [256 x i128]]** %signedfp2divide.b.declare_input, align 8
  %signedfp2divide.x.declare_inter = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %X = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %X, [256 x [256 x i128]]** %signedfp2divide.x.declare_inter, align 8
  %b_mod = alloca [256 x [256 x i128]]*, align 8
  %b_mod7 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %b_mod7, [256 x [256 x i128]]** %b_mod, align 8
  %XY1 = alloca [256 x [256 x [256 x i128]]]*, align 8
  %XY18 = alloca [256 x [256 x [256 x i128]]], align 8
  store [256 x [256 x [256 x i128]]]* %XY18, [256 x [256 x [256 x i128]]]** %XY1, align 8
  %LOGK2 = alloca i128, align 8
  %LOGK29 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK29, i128* %LOGK2, align 4
  %overflow = alloca i128, align 8
  %overflow10 = call i128 @fn_intrinsic_inline_init()
  store i128 %overflow10, i128* %overflow, align 4
  %i = alloca i128, align 8
  %i11 = call i128 @fn_intrinsic_inline_init()
  store i128 %i11, i128* %i, align 4
  %XY = alloca [256 x [256 x [256 x i128]]]*, align 8
  %XY12 = alloca [256 x [256 x [256 x i128]]], align 8
  store [256 x [256 x [256 x i128]]]* %XY12, [256 x [256 x [256 x i128]]]** %XY, align 8
  %ma = alloca i128, align 8
  %ma13 = call i128 @fn_intrinsic_inline_init()
  store i128 %ma13, i128* %ma, align 4
  %out_var = alloca [256 x [256 x i128]]*, align 8
  %out_var14 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %out_var14, [256 x [256 x i128]]** %out_var, align 8
  %X_range_checks = alloca [256 x [256 x %struct_template_circuit_num2bits*]]*, align 8
  %X_range_checks15 = alloca [256 x [256 x %struct_template_circuit_num2bits*]], align 8
  store [256 x [256 x %struct_template_circuit_num2bits*]]* %X_range_checks15, [256 x [256 x %struct_template_circuit_num2bits*]]** %X_range_checks, align 8
  %a_mod = alloca [256 x [256 x i128]]*, align 8
  %a_mod16 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %a_mod16, [256 x [256 x i128]]** %a_mod, align 8
  %mb = alloca i128, align 8
  %mb17 = call i128 @fn_intrinsic_inline_init()
  store i128 %mb17, i128* %mb, align 4
  %signedfp2divide.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall18 = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall18 to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %signedfp2divide.out.declare_output, align 8
  %eps = alloca i128, align 8
  %eps19 = call i128 @fn_intrinsic_inline_init()
  store i128 %eps19, i128* %eps, align 4
  %temp = alloca [256 x [256 x i128]]*, align 8
  %temp20 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %temp20, [256 x [256 x i128]]** %temp, align 8
  %b_inv = alloca [256 x [256 x i128]]*, align 8
  %b_inv21 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %b_inv21, [256 x [256 x i128]]** %b_inv, align 8
  %mult = alloca %struct_template_circuit_signedfp2multiplynocarrycompress*, align 8
  %m = alloca i128, align 8
  %m22 = call i128 @fn_intrinsic_inline_init()
  store i128 %m22, i128* %m, align 4
  %mod_check = alloca [256 x %struct_template_circuit_checkcarrymodp*]*, align 8
  %mod_check23 = alloca [256 x %struct_template_circuit_checkcarrymodp*], align 8
  store [256 x %struct_template_circuit_checkcarrymodp*]* %mod_check23, [256 x %struct_template_circuit_checkcarrymodp*]** %mod_check, align 8
  %check = alloca %struct_template_circuit_rangecheck2d*, align 8
  %overflowa = load i128, i128* %signedfp2divide.overflowa.declare_arg, align 4
  %n = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %sdiv = sdiv i128 %overflowa, %n
  store i128 %sdiv, i128* %ma, align 4
  %overflowb = load i128, i128* %signedfp2divide.overflowb.declare_arg, align 4
  %n24 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %sdiv25 = sdiv i128 %overflowb, %n24
  store i128 %sdiv25, i128* %mb, align 4
  %uniform_array = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array, [256 x [256 x i128]]** %a_mod, align 8
  %uniform_array26 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %uniform_array26, [256 x [256 x i128]]** %b_mod, align 8
  store i128 0, i128* %eps, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %n27 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %k = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %ma28 = load i128, i128* %ma, align 4
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.a.declare_input, align 8
  %eps29 = load i128, i128* %eps, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 %eps29
  %a30 = load [256 x i128], [256 x i128]* %array_getter, align 4
  %spice_inline_array = alloca [256 x i128], align 8
  store [256 x i128] %a30, [256 x i128]* %spice_inline_array, align 4
  %p = load [256 x i128]*, [256 x i128]** %signedfp2divide.p.declare_arg, align 8
  %call = call [256 x [256 x i128]]* @get_signed_Fp_carry_witness(i128 %n27, i128 %k, i128 %ma28, [256 x i128]* %spice_inline_array, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call, [256 x [256 x i128]]** %temp, align 8
  %temp31 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %temp, align 8
  %array_getter32 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %temp31, i128 0, i128 1
  %temp33 = load [256 x i128], [256 x i128]* %array_getter32, align 4
  %spice_inline_array34 = alloca [256 x i128], align 8
  store [256 x i128] %temp33, [256 x i128]* %spice_inline_array34, align 4
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %a_mod, align 8
  %eps35 = load i128, i128* %eps, align 4
  %a_mod36 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 %eps35
  %1 = bitcast [256 x i128]* %a_mod36 to i8*
  %2 = bitcast [256 x i128]* %spice_inline_array34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %2, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  %n37 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %k38 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %mb39 = load i128, i128* %mb, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.b.declare_input, align 8
  %eps40 = load i128, i128* %eps, align 4
  %array_getter41 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 %eps40
  %b42 = load [256 x i128], [256 x i128]* %array_getter41, align 4
  %spice_inline_array43 = alloca [256 x i128], align 8
  store [256 x i128] %b42, [256 x i128]* %spice_inline_array43, align 4
  %p44 = load [256 x i128]*, [256 x i128]** %signedfp2divide.p.declare_arg, align 8
  %call45 = call [256 x [256 x i128]]* @get_signed_Fp_carry_witness(i128 %n37, i128 %k38, i128 %mb39, [256 x i128]* %spice_inline_array43, [256 x i128]* %p44)
  store [256 x [256 x i128]]* %call45, [256 x [256 x i128]]** %temp, align 8
  %temp46 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %temp, align 8
  %array_getter47 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %temp46, i128 0, i128 1
  %temp48 = load [256 x i128], [256 x i128]* %array_getter47, align 4
  %spice_inline_array49 = alloca [256 x i128], align 8
  store [256 x i128] %temp48, [256 x i128]* %spice_inline_array49, align 4
  %ptr_getter50 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_mod, align 8
  %eps51 = load i128, i128* %eps, align 4
  %b_mod52 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter50, i128 0, i128 %eps51
  %3 = bitcast [256 x i128]* %b_mod52 to i8*
  %4 = bitcast [256 x i128]* %spice_inline_array49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i64), i1 false)
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %eps53 = load i128, i128* %eps, align 4
  %add = add i128 %eps53, 1
  store i128 %add, i128* %eps, align 4
  %eps54 = load i128, i128* %eps, align 4
  %slt = icmp slt i128 %eps54, 2
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n55 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %k56 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %b_mod57 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_mod, align 8
  %p58 = load [256 x i128]*, [256 x i128]** %signedfp2divide.p.declare_arg, align 8
  %call59 = call [256 x [256 x i128]]* @find_Fp2_inverse(i128 %n55, i128 %k56, [256 x [256 x i128]]* %b_mod57, [256 x i128]* %p58)
  store [256 x [256 x i128]]* %call59, [256 x [256 x i128]]** %b_inv, align 8
  %n60 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %k61 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %a_mod62 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %a_mod, align 8
  %b_inv63 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %b_inv, align 8
  %p64 = load [256 x i128]*, [256 x i128]** %signedfp2divide.p.declare_arg, align 8
  %call65 = call [256 x [256 x i128]]* @find_Fp2_product(i128 %n60, i128 %k61, [256 x [256 x i128]]* %a_mod62, [256 x [256 x i128]]* %b_inv63, [256 x i128]* %p64)
  store [256 x [256 x i128]]* %call65, [256 x [256 x i128]]** %out_var, align 8
  store i128 0, i128* %eps, align 4
  br label %loop.body66

loop.body66:                                      ; preds = %loop.latch84, %loop.exit
  store i128 0, i128* %i, align 4
  br label %loop.body67

loop.body67:                                      ; preds = %loop.latch77, %loop.body66
  %out_var68 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %out_var, align 8
  %eps69 = load i128, i128* %eps, align 4
  %i70 = load i128, i128* %i, align 4
  %array_getter71 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out_var68, i128 0, i128 %eps69, i128 %i70
  %out_var72 = load i128, i128* %array_getter71, align 4
  %ptr_getter73 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.out.declare_output, align 8
  %eps74 = load i128, i128* %eps, align 4
  %i75 = load i128, i128* %i, align 4
  %out76 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter73, i128 0, i128 %eps74, i128 %i75
  store i128 %out_var72, i128* %out76, align 4
  br label %loop.latch77

loop.latch77:                                     ; preds = %loop.body67
  %i78 = load i128, i128* %i, align 4
  %add79 = add i128 %i78, 1
  store i128 %add79, i128* %i, align 4
  %i80 = load i128, i128* %i, align 4
  %k81 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %slt82 = icmp slt i128 %i80, %k81
  br i1 %slt82, label %loop.body67, label %loop.exit83

loop.exit83:                                      ; preds = %loop.latch77
  br label %loop.latch84

loop.latch84:                                     ; preds = %loop.exit83
  %eps85 = load i128, i128* %eps, align 4
  %add86 = add i128 %eps85, 1
  store i128 %add86, i128* %eps, align 4
  %eps87 = load i128, i128* %eps, align 4
  %slt88 = icmp slt i128 %eps87, 2
  br i1 %slt88, label %loop.body66, label %loop.exit89

loop.exit89:                                      ; preds = %loop.latch84
  %n90 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %k91 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %call92 = call %struct_template_circuit_rangecheck2d* @fn_template_build_rangecheck2d(i128 %n90, i128 %k91)
  store %struct_template_circuit_rangecheck2d* %call92, %struct_template_circuit_rangecheck2d** %check, align 8
  store i128 0, i128* %eps, align 4
  br label %loop.body93

loop.body93:                                      ; preds = %loop.latch119, %loop.exit89
  store i128 0, i128* %i, align 4
  br label %loop.body94

loop.body94:                                      ; preds = %loop.latch112, %loop.body93
  %out95 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.out.declare_output, align 8
  %eps96 = load i128, i128* %eps, align 4
  %i97 = load i128, i128* %i, align 4
  %array_getter98 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out95, i128 0, i128 %eps96, i128 %i97
  %out99 = load i128, i128* %array_getter98, align 4
  %check100 = load %struct_template_circuit_rangecheck2d*, %struct_template_circuit_rangecheck2d** %check, align 8
  %struct_getter101 = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %check100, i32 0, i32 2
  %rangecheck2d.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter101, align 8
  %eps102 = load i128, i128* %eps, align 4
  %i103 = load i128, i128* %i, align 4
  %array_getter104 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %rangecheck2d.in.read_input_outter, i128 0, i128 %eps102, i128 %i103
  %check105 = load i128, i128* %array_getter104, align 4
  call void @fn_intrinsic_add_constraint(i128 %check105, i128 %out99, i1* @constraint.388)
  %ptr_getter106 = load %struct_template_circuit_rangecheck2d*, %struct_template_circuit_rangecheck2d** %check, align 8
  %struct_getter107 = getelementptr inbounds %struct_template_circuit_rangecheck2d, %struct_template_circuit_rangecheck2d* %ptr_getter106, i32 0, i32 2
  %rangecheck2d.in.read_input_outter108 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter107, align 8
  %eps109 = load i128, i128* %eps, align 4
  %i110 = load i128, i128* %i, align 4
  %check111 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %rangecheck2d.in.read_input_outter108, i128 0, i128 %eps109, i128 %i110
  store i128 %out99, i128* %check111, align 4
  br label %loop.latch112

loop.latch112:                                    ; preds = %loop.body94
  %i113 = load i128, i128* %i, align 4
  %add114 = add i128 %i113, 1
  store i128 %add114, i128* %i, align 4
  %i115 = load i128, i128* %i, align 4
  %k116 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %slt117 = icmp slt i128 %i115, %k116
  br i1 %slt117, label %loop.body94, label %loop.exit118

loop.exit118:                                     ; preds = %loop.latch112
  br label %loop.latch119

loop.latch119:                                    ; preds = %loop.exit118
  %eps120 = load i128, i128* %eps, align 4
  %add121 = add i128 %eps120, 1
  store i128 %add121, i128* %eps, align 4
  %eps122 = load i128, i128* %eps, align 4
  %slt123 = icmp slt i128 %eps122, 2
  br i1 %slt123, label %loop.body93, label %loop.exit124

loop.exit124:                                     ; preds = %loop.latch119
  %k125 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %mul = mul i128 2, %k125
  %k126 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %mul127 = mul i128 %mul, %k126
  %call128 = call i128 @log_ceil(i128 %mul127)
  store i128 %call128, i128* %LOGK2, align 4
  %n129 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %k130 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %p131 = load [256 x i128]*, [256 x i128]** %signedfp2divide.p.declare_arg, align 8
  %n132 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %overflowb133 = load i128, i128* %signedfp2divide.overflowb.declare_arg, align 4
  %call134 = call i128 @max(i128 %n132, i128 %overflowb133)
  %n135 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %mul136 = mul i128 2, %n135
  %overflowb137 = load i128, i128* %signedfp2divide.overflowb.declare_arg, align 4
  %add138 = add i128 %mul136, %overflowb137
  %LOGK2139 = load i128, i128* %LOGK2, align 4
  %add140 = add i128 %add138, %LOGK2139
  %call141 = call %struct_template_circuit_signedfp2multiplynocarrycompress* @fn_template_build_signedfp2multiplynocarrycompress(i128 %n129, i128 %k130, [256 x i128]* %p131, i128 %call134, i128 %add140)
  store %struct_template_circuit_signedfp2multiplynocarrycompress* %call141, %struct_template_circuit_signedfp2multiplynocarrycompress** %mult, align 8
  store i128 0, i128* %eps, align 4
  br label %loop.body142

loop.body142:                                     ; preds = %loop.latch185, %loop.exit124
  store i128 0, i128* %i, align 4
  br label %loop.body143

loop.body143:                                     ; preds = %loop.latch178, %loop.body142
  %out144 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.out.declare_output, align 8
  %eps145 = load i128, i128* %eps, align 4
  %i146 = load i128, i128* %i, align 4
  %array_getter147 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out144, i128 0, i128 %eps145, i128 %i146
  %out148 = load i128, i128* %array_getter147, align 4
  %mult149 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %mult, align 8
  %struct_getter150 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %mult149, i32 0, i32 5
  %signedfp2multiplynocarrycompress.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter150, align 8
  %eps151 = load i128, i128* %eps, align 4
  %i152 = load i128, i128* %i, align 4
  %array_getter153 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.a.read_input_outter, i128 0, i128 %eps151, i128 %i152
  %mult154 = load i128, i128* %array_getter153, align 4
  call void @fn_intrinsic_add_constraint(i128 %mult154, i128 %out148, i1* @constraint.389)
  %ptr_getter155 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %mult, align 8
  %struct_getter156 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %ptr_getter155, i32 0, i32 5
  %signedfp2multiplynocarrycompress.a.read_input_outter157 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter156, align 8
  %eps158 = load i128, i128* %eps, align 4
  %i159 = load i128, i128* %i, align 4
  %mult160 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.a.read_input_outter157, i128 0, i128 %eps158, i128 %i159
  store i128 %out148, i128* %mult160, align 4
  %b161 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.b.declare_input, align 8
  %eps162 = load i128, i128* %eps, align 4
  %i163 = load i128, i128* %i, align 4
  %array_getter164 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b161, i128 0, i128 %eps162, i128 %i163
  %b165 = load i128, i128* %array_getter164, align 4
  %mult166 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %mult, align 8
  %struct_getter167 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %mult166, i32 0, i32 6
  %signedfp2multiplynocarrycompress.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter167, align 8
  %eps168 = load i128, i128* %eps, align 4
  %i169 = load i128, i128* %i, align 4
  %array_getter170 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.b.read_input_outter, i128 0, i128 %eps168, i128 %i169
  %mult171 = load i128, i128* %array_getter170, align 4
  call void @fn_intrinsic_add_constraint(i128 %mult171, i128 %b165, i1* @constraint.390)
  %ptr_getter172 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %mult, align 8
  %struct_getter173 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %ptr_getter172, i32 0, i32 6
  %signedfp2multiplynocarrycompress.b.read_input_outter174 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter173, align 8
  %eps175 = load i128, i128* %eps, align 4
  %i176 = load i128, i128* %i, align 4
  %mult177 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.b.read_input_outter174, i128 0, i128 %eps175, i128 %i176
  store i128 %b165, i128* %mult177, align 4
  br label %loop.latch178

loop.latch178:                                    ; preds = %loop.body143
  %i179 = load i128, i128* %i, align 4
  %add180 = add i128 %i179, 1
  store i128 %add180, i128* %i, align 4
  %i181 = load i128, i128* %i, align 4
  %k182 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %slt183 = icmp slt i128 %i181, %k182
  br i1 %slt183, label %loop.body143, label %loop.exit184

loop.exit184:                                     ; preds = %loop.latch178
  br label %loop.latch185

loop.latch185:                                    ; preds = %loop.exit184
  %eps186 = load i128, i128* %eps, align 4
  %add187 = add i128 %eps186, 1
  store i128 %add187, i128* %eps, align 4
  %eps188 = load i128, i128* %eps, align 4
  %slt189 = icmp slt i128 %eps188, 2
  br i1 %slt189, label %loop.body142, label %loop.exit190

loop.exit190:                                     ; preds = %loop.latch185
  %mb191 = load i128, i128* %mb, align 4
  %k192 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %add193 = add i128 %mb191, %k192
  %ma194 = load i128, i128* %ma, align 4
  %call195 = call i128 @max(i128 %add193, i128 %ma194)
  store i128 %call195, i128* %m, align 4
  %n196 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %k197 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %m198 = load i128, i128* %m, align 4
  %mult199 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %mult, align 8
  %struct_getter200 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %mult199, i32 0, i32 7
  %signedfp2multiplynocarrycompress.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter200, align 8
  %p201 = load [256 x i128]*, [256 x i128]** %signedfp2divide.p.declare_arg, align 8
  %call202 = call [256 x [256 x [256 x i128]]]* @get_signed_Fp2_carry_witness(i128 %n196, i128 %k197, i128 %m198, [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.out.read_output_outter, [256 x i128]* %p201)
  store [256 x [256 x [256 x i128]]]* %call202, [256 x [256 x [256 x i128]]]** %XY, align 8
  %n203 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %k204 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %m205 = load i128, i128* %m, align 4
  %a206 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.a.declare_input, align 8
  %p207 = load [256 x i128]*, [256 x i128]** %signedfp2divide.p.declare_arg, align 8
  %call208 = call [256 x [256 x [256 x i128]]]* @get_signed_Fp2_carry_witness(i128 %n203, i128 %k204, i128 %m205, [256 x [256 x i128]]* %a206, [256 x i128]* %p207)
  store [256 x [256 x [256 x i128]]]* %call208, [256 x [256 x [256 x i128]]]** %XY1, align 8
  store i128 0, i128* %eps, align 4
  br label %loop.body209

loop.body209:                                     ; preds = %loop.latch258, %loop.exit190
  store i128 0, i128* %i, align 4
  br label %loop.body210

loop.body210:                                     ; preds = %loop.latch251, %loop.body209
  %XY211 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %XY, align 8
  %eps212 = load i128, i128* %eps, align 4
  %i213 = load i128, i128* %i, align 4
  %array_getter214 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %XY211, i128 0, i128 %eps212, i128 0, i128 %i213
  %XY215 = load i128, i128* %array_getter214, align 4
  %XY1216 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %XY1, align 8
  %eps217 = load i128, i128* %eps, align 4
  %i218 = load i128, i128* %i, align 4
  %array_getter219 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %XY1216, i128 0, i128 %eps217, i128 0, i128 %i218
  %XY1220 = load i128, i128* %array_getter219, align 4
  %sub = sub i128 %XY215, %XY1220
  %ptr_getter221 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.x.declare_inter, align 8
  %eps222 = load i128, i128* %eps, align 4
  %i223 = load i128, i128* %i, align 4
  %X224 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter221, i128 0, i128 %eps222, i128 %i223
  store i128 %sub, i128* %X224, align 4
  %n225 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %add226 = add i128 %n225, 2
  %call227 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %add226)
  %ptr_getter228 = load [256 x [256 x %struct_template_circuit_num2bits*]]*, [256 x [256 x %struct_template_circuit_num2bits*]]** %X_range_checks, align 8
  %eps229 = load i128, i128* %eps, align 4
  %i230 = load i128, i128* %i, align 4
  %X_range_checks231 = getelementptr inbounds [256 x [256 x %struct_template_circuit_num2bits*]], [256 x [256 x %struct_template_circuit_num2bits*]]* %ptr_getter228, i128 0, i128 %eps229, i128 %i230
  store %struct_template_circuit_num2bits* %call227, %struct_template_circuit_num2bits** %X_range_checks231, align 8
  %X232 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.x.declare_inter, align 8
  %eps233 = load i128, i128* %eps, align 4
  %i234 = load i128, i128* %i, align 4
  %array_getter235 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X232, i128 0, i128 %eps233, i128 %i234
  %X236 = load i128, i128* %array_getter235, align 4
  %n237 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %add238 = add i128 %n237, 1
  %lshift = shl i128 1, %add238
  %add239 = add i128 %X236, %lshift
  %X_range_checks240 = load [256 x [256 x %struct_template_circuit_num2bits*]]*, [256 x [256 x %struct_template_circuit_num2bits*]]** %X_range_checks, align 8
  %eps241 = load i128, i128* %eps, align 4
  %i242 = load i128, i128* %i, align 4
  %array_getter243 = getelementptr inbounds [256 x [256 x %struct_template_circuit_num2bits*]], [256 x [256 x %struct_template_circuit_num2bits*]]* %X_range_checks240, i128 0, i128 %eps241, i128 %i242
  %X_range_checks244 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter243, align 8
  %struct_getter245 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %X_range_checks244, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter245, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %add239, i1* @constraint.391)
  %ptr_getter246 = load [256 x [256 x %struct_template_circuit_num2bits*]]*, [256 x [256 x %struct_template_circuit_num2bits*]]** %X_range_checks, align 8
  %eps247 = load i128, i128* %eps, align 4
  %i248 = load i128, i128* %i, align 4
  %array_getter249 = getelementptr inbounds [256 x [256 x %struct_template_circuit_num2bits*]], [256 x [256 x %struct_template_circuit_num2bits*]]* %ptr_getter246, i128 0, i128 %eps247, i128 %i248
  %X_range_checks250 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter249, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %X_range_checks250, i32 0, i32 1
  store i128 %add239, i128* %num2bits.in.write_input_outter, align 4
  br label %loop.latch251

loop.latch251:                                    ; preds = %loop.body210
  %i252 = load i128, i128* %i, align 4
  %add253 = add i128 %i252, 1
  store i128 %add253, i128* %i, align 4
  %i254 = load i128, i128* %i, align 4
  %m255 = load i128, i128* %m, align 4
  %slt256 = icmp slt i128 %i254, %m255
  br i1 %slt256, label %loop.body210, label %loop.exit257

loop.exit257:                                     ; preds = %loop.latch251
  br label %loop.latch258

loop.latch258:                                    ; preds = %loop.exit257
  %eps259 = load i128, i128* %eps, align 4
  %add260 = add i128 %eps259, 1
  store i128 %add260, i128* %eps, align 4
  %eps261 = load i128, i128* %eps, align 4
  %slt262 = icmp slt i128 %eps261, 2
  br i1 %slt262, label %loop.body209, label %loop.exit263

loop.exit263:                                     ; preds = %loop.latch258
  %n264 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %mul265 = mul i128 2, %n264
  %overflowb266 = load i128, i128* %signedfp2divide.overflowb.declare_arg, align 4
  %add267 = add i128 %mul265, %overflowb266
  %LOGK2268 = load i128, i128* %LOGK2, align 4
  %add269 = add i128 %add267, %LOGK2268
  %overflowa270 = load i128, i128* %signedfp2divide.overflowa.declare_arg, align 4
  %call271 = call i128 @max(i128 %add269, i128 %overflowa270)
  store i128 %call271, i128* %overflow, align 4
  store i128 0, i128* %eps, align 4
  br label %loop.body272

loop.body272:                                     ; preds = %loop.latch365, %loop.exit263
  %n273 = load i128, i128* %signedfp2divide.n.declare_arg, align 4
  %k274 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %m275 = load i128, i128* %m, align 4
  %overflow276 = load i128, i128* %overflow, align 4
  %add277 = add i128 %overflow276, 1
  %p278 = load [256 x i128]*, [256 x i128]** %signedfp2divide.p.declare_arg, align 8
  %call279 = call %struct_template_circuit_checkcarrymodp* @fn_template_build_checkcarrymodp(i128 %n273, i128 %k274, i128 %m275, i128 %add277, [256 x i128]* %p278)
  %ptr_getter280 = load [256 x %struct_template_circuit_checkcarrymodp*]*, [256 x %struct_template_circuit_checkcarrymodp*]** %mod_check, align 8
  %eps281 = load i128, i128* %eps, align 4
  %mod_check282 = getelementptr inbounds [256 x %struct_template_circuit_checkcarrymodp*], [256 x %struct_template_circuit_checkcarrymodp*]* %ptr_getter280, i128 0, i128 %eps281
  store %struct_template_circuit_checkcarrymodp* %call279, %struct_template_circuit_checkcarrymodp** %mod_check282, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body283

loop.body283:                                     ; preds = %loop.latch329, %loop.body272
  %mult284 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %mult, align 8
  %struct_getter285 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %mult284, i32 0, i32 7
  %signedfp2multiplynocarrycompress.out.read_output_outter286 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter285, align 8
  %eps287 = load i128, i128* %eps, align 4
  %i288 = load i128, i128* %i, align 4
  %array_getter289 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.out.read_output_outter286, i128 0, i128 %eps287, i128 %i288
  %mult290 = load i128, i128* %array_getter289, align 4
  %a291 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.a.declare_input, align 8
  %eps292 = load i128, i128* %eps, align 4
  %i293 = load i128, i128* %i, align 4
  %array_getter294 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a291, i128 0, i128 %eps292, i128 %i293
  %a295 = load i128, i128* %array_getter294, align 4
  %sub296 = sub i128 %mult290, %a295
  %mod_check297 = load [256 x %struct_template_circuit_checkcarrymodp*]*, [256 x %struct_template_circuit_checkcarrymodp*]** %mod_check, align 8
  %eps298 = load i128, i128* %eps, align 4
  %array_getter299 = getelementptr inbounds [256 x %struct_template_circuit_checkcarrymodp*], [256 x %struct_template_circuit_checkcarrymodp*]* %mod_check297, i128 0, i128 %eps298
  %mod_check300 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %array_getter299, align 8
  %struct_getter301 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check300, i32 0, i32 5
  %checkcarrymodp.in.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter301, align 8
  %i302 = load i128, i128* %i, align 4
  %array_getter303 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.in.read_input_outter, i128 0, i128 %i302
  %mod_check304 = load i128, i128* %array_getter303, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod_check304, i128 %sub296, i1* @constraint.392)
  %ptr_getter305 = load [256 x %struct_template_circuit_checkcarrymodp*]*, [256 x %struct_template_circuit_checkcarrymodp*]** %mod_check, align 8
  %eps306 = load i128, i128* %eps, align 4
  %array_getter307 = getelementptr inbounds [256 x %struct_template_circuit_checkcarrymodp*], [256 x %struct_template_circuit_checkcarrymodp*]* %ptr_getter305, i128 0, i128 %eps306
  %mod_check308 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %array_getter307, align 8
  %struct_getter309 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check308, i32 0, i32 5
  %checkcarrymodp.in.read_input_outter310 = load [256 x i128]*, [256 x i128]** %struct_getter309, align 8
  %i311 = load i128, i128* %i, align 4
  %mod_check312 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.in.read_input_outter310, i128 0, i128 %i311
  store i128 %sub296, i128* %mod_check312, align 4
  %mod_check313 = load [256 x %struct_template_circuit_checkcarrymodp*]*, [256 x %struct_template_circuit_checkcarrymodp*]** %mod_check, align 8
  %eps314 = load i128, i128* %eps, align 4
  %array_getter315 = getelementptr inbounds [256 x %struct_template_circuit_checkcarrymodp*], [256 x %struct_template_circuit_checkcarrymodp*]* %mod_check313, i128 0, i128 %eps314
  %mod_check316 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %array_getter315, align 8
  %struct_getter317 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check316, i32 0, i32 7
  %checkcarrymodp.y.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter317, align 8
  %i318 = load i128, i128* %i, align 4
  %array_getter319 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.y.read_input_outter, i128 0, i128 %i318
  %mod_check320 = load i128, i128* %array_getter319, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod_check320, i128 0, i1* @constraint.393)
  %ptr_getter321 = load [256 x %struct_template_circuit_checkcarrymodp*]*, [256 x %struct_template_circuit_checkcarrymodp*]** %mod_check, align 8
  %eps322 = load i128, i128* %eps, align 4
  %array_getter323 = getelementptr inbounds [256 x %struct_template_circuit_checkcarrymodp*], [256 x %struct_template_circuit_checkcarrymodp*]* %ptr_getter321, i128 0, i128 %eps322
  %mod_check324 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %array_getter323, align 8
  %struct_getter325 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check324, i32 0, i32 7
  %checkcarrymodp.y.read_input_outter326 = load [256 x i128]*, [256 x i128]** %struct_getter325, align 8
  %i327 = load i128, i128* %i, align 4
  %mod_check328 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.y.read_input_outter326, i128 0, i128 %i327
  store i128 0, i128* %mod_check328, align 4
  br label %loop.latch329

loop.latch329:                                    ; preds = %loop.body283
  %i330 = load i128, i128* %i, align 4
  %add331 = add i128 %i330, 1
  store i128 %add331, i128* %i, align 4
  %i332 = load i128, i128* %i, align 4
  %k333 = load i128, i128* %signedfp2divide.k.declare_arg, align 4
  %slt334 = icmp slt i128 %i332, %k333
  br i1 %slt334, label %loop.body283, label %loop.exit335

loop.exit335:                                     ; preds = %loop.latch329
  store i128 0, i128* %i, align 4
  br label %loop.body336

loop.body336:                                     ; preds = %loop.latch358, %loop.exit335
  %X337 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.x.declare_inter, align 8
  %eps338 = load i128, i128* %eps, align 4
  %i339 = load i128, i128* %i, align 4
  %array_getter340 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %X337, i128 0, i128 %eps338, i128 %i339
  %X341 = load i128, i128* %array_getter340, align 4
  %mod_check342 = load [256 x %struct_template_circuit_checkcarrymodp*]*, [256 x %struct_template_circuit_checkcarrymodp*]** %mod_check, align 8
  %eps343 = load i128, i128* %eps, align 4
  %array_getter344 = getelementptr inbounds [256 x %struct_template_circuit_checkcarrymodp*], [256 x %struct_template_circuit_checkcarrymodp*]* %mod_check342, i128 0, i128 %eps343
  %mod_check345 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %array_getter344, align 8
  %struct_getter346 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check345, i32 0, i32 6
  %checkcarrymodp.x.read_input_outter = load [256 x i128]*, [256 x i128]** %struct_getter346, align 8
  %i347 = load i128, i128* %i, align 4
  %array_getter348 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.x.read_input_outter, i128 0, i128 %i347
  %mod_check349 = load i128, i128* %array_getter348, align 4
  call void @fn_intrinsic_add_constraint(i128 %mod_check349, i128 %X341, i1* @constraint.394)
  %ptr_getter350 = load [256 x %struct_template_circuit_checkcarrymodp*]*, [256 x %struct_template_circuit_checkcarrymodp*]** %mod_check, align 8
  %eps351 = load i128, i128* %eps, align 4
  %array_getter352 = getelementptr inbounds [256 x %struct_template_circuit_checkcarrymodp*], [256 x %struct_template_circuit_checkcarrymodp*]* %ptr_getter350, i128 0, i128 %eps351
  %mod_check353 = load %struct_template_circuit_checkcarrymodp*, %struct_template_circuit_checkcarrymodp** %array_getter352, align 8
  %struct_getter354 = getelementptr inbounds %struct_template_circuit_checkcarrymodp, %struct_template_circuit_checkcarrymodp* %mod_check353, i32 0, i32 6
  %checkcarrymodp.x.read_input_outter355 = load [256 x i128]*, [256 x i128]** %struct_getter354, align 8
  %i356 = load i128, i128* %i, align 4
  %mod_check357 = getelementptr inbounds [256 x i128], [256 x i128]* %checkcarrymodp.x.read_input_outter355, i128 0, i128 %i356
  store i128 %X341, i128* %mod_check357, align 4
  br label %loop.latch358

loop.latch358:                                    ; preds = %loop.body336
  %i359 = load i128, i128* %i, align 4
  %add360 = add i128 %i359, 1
  store i128 %add360, i128* %i, align 4
  %i361 = load i128, i128* %i, align 4
  %m362 = load i128, i128* %m, align 4
  %slt363 = icmp slt i128 %i361, %m362
  br i1 %slt363, label %loop.body336, label %loop.exit364

loop.exit364:                                     ; preds = %loop.latch358
  br label %loop.latch365

loop.latch365:                                    ; preds = %loop.exit364
  %eps366 = load i128, i128* %eps, align 4
  %add367 = add i128 %eps366, 1
  store i128 %add367, i128* %eps, align 4
  %eps368 = load i128, i128* %eps, align 4
  %slt369 = icmp slt i128 %eps368, 2
  br i1 %slt369, label %loop.body272, label %loop.exit370

loop.exit370:                                     ; preds = %loop.latch365
  br label %exit

exit:                                             ; preds = %loop.exit370
  %X371 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.x.declare_inter, align 8
  %signedfp2divide.x.write_inter_inner = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %0, i32 0, i32 7
  store [256 x [256 x i128]]* %X371, [256 x [256 x i128]]** %signedfp2divide.x.write_inter_inner, align 8
  %out372 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %signedfp2divide.out.declare_output, align 8
  %signedfp2divide.out.write_output_inner = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %0, i32 0, i32 8
  store [256 x [256 x i128]]* %out372, [256 x [256 x i128]]** %signedfp2divide.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_signedfp2divide* @fn_template_build_signedfp2divide(i128 %0, i128 %1, i128 %2, i128 %3, [256 x i128]* %4) {
entry:
  %struct_template_circuit_signedfp2divide = alloca %struct_template_circuit_signedfp2divide, align 8
  %signedfp2divide.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %struct_template_circuit_signedfp2divide, i32 0, i32 0
  store i128 %0, i128* %signedfp2divide.n.write_arg_inner, align 4
  %signedfp2divide.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %struct_template_circuit_signedfp2divide, i32 0, i32 1
  store i128 %1, i128* %signedfp2divide.k.write_arg_inner, align 4
  %signedfp2divide.overflowa.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %struct_template_circuit_signedfp2divide, i32 0, i32 2
  store i128 %2, i128* %signedfp2divide.overflowa.write_arg_inner, align 4
  %signedfp2divide.overflowb.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %struct_template_circuit_signedfp2divide, i32 0, i32 3
  store i128 %3, i128* %signedfp2divide.overflowb.write_arg_inner, align 4
  %signedfp2divide.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_signedfp2divide, %struct_template_circuit_signedfp2divide* %struct_template_circuit_signedfp2divide, i32 0, i32 4
  store [256 x i128]* %4, [256 x i128]** %signedfp2divide.p.write_arg_inner, align 8
  ret %struct_template_circuit_signedfp2divide* %struct_template_circuit_signedfp2divide
}

define void @fn_template_init_fp2multiply(%struct_template_circuit_fp2multiply* %0) {
entry:
  %Fp2Multiply = alloca %struct_template_circuit_fp2multiply*, align 8
  store %struct_template_circuit_fp2multiply* %0, %struct_template_circuit_fp2multiply** %Fp2Multiply, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %0, i32 0, i32 0
  %fp2multiply.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2multiply.n.declare_arg = alloca i128, align 8
  store i128 %fp2multiply.n.read_arg_inner, i128* %fp2multiply.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %0, i32 0, i32 1
  %fp2multiply.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2multiply.k.declare_arg = alloca i128, align 8
  store i128 %fp2multiply.k.read_arg_inner, i128* %fp2multiply.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %0, i32 0, i32 2
  %fp2multiply.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fp2multiply.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2multiply.p.read_arg_inner, [256 x i128]** %fp2multiply.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %0, i32 0, i32 3
  %fp2multiply.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fp2multiply.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2multiply.a.read_input_inner, [256 x [256 x i128]]** %fp2multiply.a.declare_input, align 8
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %0, i32 0, i32 4
  %fp2multiply.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter4, align 8
  %fp2multiply.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2multiply.b.read_input_inner, [256 x [256 x i128]]** %fp2multiply.b.declare_input, align 8
  %carry_mod = alloca %struct_template_circuit_signedfp2carrymodp*, align 8
  %c = alloca %struct_template_circuit_signedfp2multiplynocarrycompress*, align 8
  %LOGK2 = alloca i128, align 8
  %LOGK25 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK25, i128* %LOGK2, align 4
  %fp2multiply.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %fp2multiply.out.declare_output, align 8
  %j = alloca i128, align 8
  %j6 = call i128 @fn_intrinsic_inline_init()
  store i128 %j6, i128* %j, align 4
  %i = alloca i128, align 8
  %i7 = call i128 @fn_intrinsic_inline_init()
  store i128 %i7, i128* %i, align 4
  %k = load i128, i128* %fp2multiply.k.declare_arg, align 4
  %mul = mul i128 2, %k
  %k8 = load i128, i128* %fp2multiply.k.declare_arg, align 4
  %mul9 = mul i128 %mul, %k8
  %call = call i128 @log_ceil(i128 %mul9)
  store i128 %call, i128* %LOGK2, align 4
  %n = load i128, i128* %fp2multiply.n.declare_arg, align 4
  %k10 = load i128, i128* %fp2multiply.k.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %fp2multiply.p.declare_arg, align 8
  %n11 = load i128, i128* %fp2multiply.n.declare_arg, align 4
  %n12 = load i128, i128* %fp2multiply.n.declare_arg, align 4
  %mul13 = mul i128 3, %n12
  %LOGK214 = load i128, i128* %LOGK2, align 4
  %add = add i128 %mul13, %LOGK214
  %call15 = call %struct_template_circuit_signedfp2multiplynocarrycompress* @fn_template_build_signedfp2multiplynocarrycompress(i128 %n, i128 %k10, [256 x i128]* %p, i128 %n11, i128 %add)
  store %struct_template_circuit_signedfp2multiplynocarrycompress* %call15, %struct_template_circuit_signedfp2multiplynocarrycompress** %c, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiply.a.declare_input, align 8
  %i16 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 0, i128 %i16
  %a17 = load i128, i128* %array_getter, align 4
  %c18 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %c, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %c18, i32 0, i32 5
  %signedfp2multiplynocarrycompress.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter19, align 8
  %i20 = load i128, i128* %i, align 4
  %array_getter21 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.a.read_input_outter, i128 0, i128 0, i128 %i20
  %c22 = load i128, i128* %array_getter21, align 4
  call void @fn_intrinsic_add_constraint(i128 %c22, i128 %a17, i1* @constraint.395)
  %ptr_getter = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %c, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %ptr_getter, i32 0, i32 5
  %signedfp2multiplynocarrycompress.a.read_input_outter24 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter23, align 8
  %i25 = load i128, i128* %i, align 4
  %c26 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.a.read_input_outter24, i128 0, i128 0, i128 %i25
  store i128 %a17, i128* %c26, align 4
  %a27 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiply.a.declare_input, align 8
  %i28 = load i128, i128* %i, align 4
  %array_getter29 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a27, i128 0, i128 1, i128 %i28
  %a30 = load i128, i128* %array_getter29, align 4
  %c31 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %c, align 8
  %struct_getter32 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %c31, i32 0, i32 5
  %signedfp2multiplynocarrycompress.a.read_input_outter33 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter32, align 8
  %i34 = load i128, i128* %i, align 4
  %array_getter35 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.a.read_input_outter33, i128 0, i128 1, i128 %i34
  %c36 = load i128, i128* %array_getter35, align 4
  call void @fn_intrinsic_add_constraint(i128 %c36, i128 %a30, i1* @constraint.396)
  %ptr_getter37 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %c, align 8
  %struct_getter38 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %ptr_getter37, i32 0, i32 5
  %signedfp2multiplynocarrycompress.a.read_input_outter39 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter38, align 8
  %i40 = load i128, i128* %i, align 4
  %c41 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.a.read_input_outter39, i128 0, i128 1, i128 %i40
  store i128 %a30, i128* %c41, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiply.b.declare_input, align 8
  %i42 = load i128, i128* %i, align 4
  %array_getter43 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 0, i128 %i42
  %b44 = load i128, i128* %array_getter43, align 4
  %c45 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %c, align 8
  %struct_getter46 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %c45, i32 0, i32 6
  %signedfp2multiplynocarrycompress.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter46, align 8
  %i47 = load i128, i128* %i, align 4
  %array_getter48 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.b.read_input_outter, i128 0, i128 0, i128 %i47
  %c49 = load i128, i128* %array_getter48, align 4
  call void @fn_intrinsic_add_constraint(i128 %c49, i128 %b44, i1* @constraint.397)
  %ptr_getter50 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %c, align 8
  %struct_getter51 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %ptr_getter50, i32 0, i32 6
  %signedfp2multiplynocarrycompress.b.read_input_outter52 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter51, align 8
  %i53 = load i128, i128* %i, align 4
  %c54 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.b.read_input_outter52, i128 0, i128 0, i128 %i53
  store i128 %b44, i128* %c54, align 4
  %b55 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiply.b.declare_input, align 8
  %i56 = load i128, i128* %i, align 4
  %array_getter57 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b55, i128 0, i128 1, i128 %i56
  %b58 = load i128, i128* %array_getter57, align 4
  %c59 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %c, align 8
  %struct_getter60 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %c59, i32 0, i32 6
  %signedfp2multiplynocarrycompress.b.read_input_outter61 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter60, align 8
  %i62 = load i128, i128* %i, align 4
  %array_getter63 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.b.read_input_outter61, i128 0, i128 1, i128 %i62
  %c64 = load i128, i128* %array_getter63, align 4
  call void @fn_intrinsic_add_constraint(i128 %c64, i128 %b58, i1* @constraint.398)
  %ptr_getter65 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %c, align 8
  %struct_getter66 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %ptr_getter65, i32 0, i32 6
  %signedfp2multiplynocarrycompress.b.read_input_outter67 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter66, align 8
  %i68 = load i128, i128* %i, align 4
  %c69 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.b.read_input_outter67, i128 0, i128 1, i128 %i68
  store i128 %b58, i128* %c69, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %i70 = load i128, i128* %i, align 4
  %add71 = add i128 %i70, 1
  store i128 %add71, i128* %i, align 4
  %i72 = load i128, i128* %i, align 4
  %k73 = load i128, i128* %fp2multiply.k.declare_arg, align 4
  %slt = icmp slt i128 %i72, %k73
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %n74 = load i128, i128* %fp2multiply.n.declare_arg, align 4
  %k75 = load i128, i128* %fp2multiply.k.declare_arg, align 4
  %n76 = load i128, i128* %fp2multiply.n.declare_arg, align 4
  %mul77 = mul i128 3, %n76
  %LOGK278 = load i128, i128* %LOGK2, align 4
  %add79 = add i128 %mul77, %LOGK278
  %p80 = load [256 x i128]*, [256 x i128]** %fp2multiply.p.declare_arg, align 8
  %call81 = call %struct_template_circuit_signedfp2carrymodp* @fn_template_build_signedfp2carrymodp(i128 %n74, i128 %k75, i128 %add79, [256 x i128]* %p80)
  store %struct_template_circuit_signedfp2carrymodp* %call81, %struct_template_circuit_signedfp2carrymodp** %carry_mod, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body82

loop.body82:                                      ; preds = %loop.latch109, %loop.exit
  store i128 0, i128* %j, align 4
  br label %loop.body83

loop.body83:                                      ; preds = %loop.latch102, %loop.body82
  %c84 = load %struct_template_circuit_signedfp2multiplynocarrycompress*, %struct_template_circuit_signedfp2multiplynocarrycompress** %c, align 8
  %struct_getter85 = getelementptr inbounds %struct_template_circuit_signedfp2multiplynocarrycompress, %struct_template_circuit_signedfp2multiplynocarrycompress* %c84, i32 0, i32 7
  %signedfp2multiplynocarrycompress.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter85, align 8
  %i86 = load i128, i128* %i, align 4
  %j87 = load i128, i128* %j, align 4
  %array_getter88 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2multiplynocarrycompress.out.read_output_outter, i128 0, i128 %i86, i128 %j87
  %c89 = load i128, i128* %array_getter88, align 4
  %carry_mod90 = load %struct_template_circuit_signedfp2carrymodp*, %struct_template_circuit_signedfp2carrymodp** %carry_mod, align 8
  %struct_getter91 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %carry_mod90, i32 0, i32 4
  %signedfp2carrymodp.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter91, align 8
  %i92 = load i128, i128* %i, align 4
  %j93 = load i128, i128* %j, align 4
  %array_getter94 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2carrymodp.in.read_input_outter, i128 0, i128 %i92, i128 %j93
  %carry_mod95 = load i128, i128* %array_getter94, align 4
  call void @fn_intrinsic_add_constraint(i128 %carry_mod95, i128 %c89, i1* @constraint.399)
  %ptr_getter96 = load %struct_template_circuit_signedfp2carrymodp*, %struct_template_circuit_signedfp2carrymodp** %carry_mod, align 8
  %struct_getter97 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %ptr_getter96, i32 0, i32 4
  %signedfp2carrymodp.in.read_input_outter98 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter97, align 8
  %i99 = load i128, i128* %i, align 4
  %j100 = load i128, i128* %j, align 4
  %carry_mod101 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2carrymodp.in.read_input_outter98, i128 0, i128 %i99, i128 %j100
  store i128 %c89, i128* %carry_mod101, align 4
  br label %loop.latch102

loop.latch102:                                    ; preds = %loop.body83
  %j103 = load i128, i128* %j, align 4
  %add104 = add i128 %j103, 1
  store i128 %add104, i128* %j, align 4
  %j105 = load i128, i128* %j, align 4
  %k106 = load i128, i128* %fp2multiply.k.declare_arg, align 4
  %slt107 = icmp slt i128 %j105, %k106
  br i1 %slt107, label %loop.body83, label %loop.exit108

loop.exit108:                                     ; preds = %loop.latch102
  br label %loop.latch109

loop.latch109:                                    ; preds = %loop.exit108
  %i110 = load i128, i128* %i, align 4
  %add111 = add i128 %i110, 1
  store i128 %add111, i128* %i, align 4
  %i112 = load i128, i128* %i, align 4
  %slt113 = icmp slt i128 %i112, 2
  br i1 %slt113, label %loop.body82, label %loop.exit114

loop.exit114:                                     ; preds = %loop.latch109
  store i128 0, i128* %i, align 4
  br label %loop.body115

loop.body115:                                     ; preds = %loop.latch139, %loop.exit114
  store i128 0, i128* %j, align 4
  br label %loop.body116

loop.body116:                                     ; preds = %loop.latch132, %loop.body115
  %carry_mod117 = load %struct_template_circuit_signedfp2carrymodp*, %struct_template_circuit_signedfp2carrymodp** %carry_mod, align 8
  %struct_getter118 = getelementptr inbounds %struct_template_circuit_signedfp2carrymodp, %struct_template_circuit_signedfp2carrymodp* %carry_mod117, i32 0, i32 6
  %signedfp2carrymodp.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter118, align 8
  %i119 = load i128, i128* %i, align 4
  %j120 = load i128, i128* %j, align 4
  %array_getter121 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %signedfp2carrymodp.out.read_output_outter, i128 0, i128 %i119, i128 %j120
  %carry_mod122 = load i128, i128* %array_getter121, align 4
  %out123 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiply.out.declare_output, align 8
  %i124 = load i128, i128* %i, align 4
  %j125 = load i128, i128* %j, align 4
  %array_getter126 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out123, i128 0, i128 %i124, i128 %j125
  %out127 = load i128, i128* %array_getter126, align 4
  call void @fn_intrinsic_add_constraint(i128 %out127, i128 %carry_mod122, i1* @constraint.400)
  %ptr_getter128 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiply.out.declare_output, align 8
  %i129 = load i128, i128* %i, align 4
  %j130 = load i128, i128* %j, align 4
  %out131 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter128, i128 0, i128 %i129, i128 %j130
  store i128 %carry_mod122, i128* %out131, align 4
  br label %loop.latch132

loop.latch132:                                    ; preds = %loop.body116
  %j133 = load i128, i128* %j, align 4
  %add134 = add i128 %j133, 1
  store i128 %add134, i128* %j, align 4
  %j135 = load i128, i128* %j, align 4
  %k136 = load i128, i128* %fp2multiply.k.declare_arg, align 4
  %slt137 = icmp slt i128 %j135, %k136
  br i1 %slt137, label %loop.body116, label %loop.exit138

loop.exit138:                                     ; preds = %loop.latch132
  br label %loop.latch139

loop.latch139:                                    ; preds = %loop.exit138
  %i140 = load i128, i128* %i, align 4
  %add141 = add i128 %i140, 1
  store i128 %add141, i128* %i, align 4
  %i142 = load i128, i128* %i, align 4
  %slt143 = icmp slt i128 %i142, 2
  br i1 %slt143, label %loop.body115, label %loop.exit144

loop.exit144:                                     ; preds = %loop.latch139
  br label %exit

exit:                                             ; preds = %loop.exit144
  %out145 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2multiply.out.declare_output, align 8
  %fp2multiply.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %0, i32 0, i32 5
  store [256 x [256 x i128]]* %out145, [256 x [256 x i128]]** %fp2multiply.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fp2multiply* @fn_template_build_fp2multiply(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fp2multiply = alloca %struct_template_circuit_fp2multiply, align 8
  %fp2multiply.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %struct_template_circuit_fp2multiply, i32 0, i32 0
  store i128 %0, i128* %fp2multiply.n.write_arg_inner, align 4
  %fp2multiply.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %struct_template_circuit_fp2multiply, i32 0, i32 1
  store i128 %1, i128* %fp2multiply.k.write_arg_inner, align 4
  %fp2multiply.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %struct_template_circuit_fp2multiply, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fp2multiply.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2multiply* %struct_template_circuit_fp2multiply
}

define void @fn_template_init_ellipticcurveadd(%struct_template_circuit_ellipticcurveadd* %0) {
entry:
  %EllipticCurveAdd = alloca %struct_template_circuit_ellipticcurveadd*, align 8
  store %struct_template_circuit_ellipticcurveadd* %0, %struct_template_circuit_ellipticcurveadd** %EllipticCurveAdd, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 0
  %ellipticcurveadd.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %ellipticcurveadd.n.declare_arg = alloca i128, align 8
  store i128 %ellipticcurveadd.n.read_arg_inner, i128* %ellipticcurveadd.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 1
  %ellipticcurveadd.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %ellipticcurveadd.k.declare_arg = alloca i128, align 8
  store i128 %ellipticcurveadd.k.read_arg_inner, i128* %ellipticcurveadd.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 2
  %ellipticcurveadd.a1.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %ellipticcurveadd.a1.declare_arg = alloca i128, align 8
  store i128 %ellipticcurveadd.a1.read_arg_inner, i128* %ellipticcurveadd.a1.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 3
  %ellipticcurveadd.b1.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %ellipticcurveadd.b1.declare_arg = alloca i128, align 8
  store i128 %ellipticcurveadd.b1.read_arg_inner, i128* %ellipticcurveadd.b1.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 4
  %ellipticcurveadd.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %ellipticcurveadd.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %ellipticcurveadd.p.read_arg_inner, [256 x i128]** %ellipticcurveadd.p.declare_arg, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 5
  %ellipticcurveadd.a.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %ellipticcurveadd.a.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %ellipticcurveadd.a.read_input_inner, [256 x [256 x i128]]** %ellipticcurveadd.a.declare_input, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 6
  %ellipticcurveadd.aisinfinity.read_input_inner = load i128, i128* %struct_getter6, align 4
  %ellipticcurveadd.aisinfinity.declare_input = alloca i128, align 8
  store i128 %ellipticcurveadd.aisinfinity.read_input_inner, i128* %ellipticcurveadd.aisinfinity.declare_input, align 4
  %struct_getter7 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 7
  %ellipticcurveadd.b.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter7, align 8
  %ellipticcurveadd.b.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %ellipticcurveadd.b.read_input_inner, [256 x [256 x i128]]** %ellipticcurveadd.b.declare_input, align 8
  %struct_getter8 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 8
  %ellipticcurveadd.bisinfinity.read_input_inner = load i128, i128* %struct_getter8, align 4
  %ellipticcurveadd.bisinfinity.declare_input = alloca i128, align 8
  store i128 %ellipticcurveadd.bisinfinity.read_input_inner, i128* %ellipticcurveadd.bisinfinity.declare_input, align 4
  %ellipticcurveadd.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %ellipticcurveadd.out.declare_output, align 8
  %idx = alloca i128, align 8
  %idx9 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx9, i128* %idx, align 4
  %doub = alloca %struct_template_circuit_ellipticcurvedouble*, align 8
  %ellipticcurveadd.ab0.declare_inter = alloca i128, align 8
  %ab0 = call i128 @fn_intrinsic_inline_init()
  store i128 %ab0, i128* %ellipticcurveadd.ab0.declare_inter, align 4
  %ellipticcurveadd.anegb.declare_inter = alloca i128, align 8
  %anegb = call i128 @fn_intrinsic_inline_init()
  store i128 %anegb, i128* %ellipticcurveadd.anegb.declare_inter, align 4
  %x_equal = alloca %struct_template_circuit_fpisequal*, align 8
  %add = alloca %struct_template_circuit_ellipticcurveaddunequal*, align 8
  %y_equal = alloca %struct_template_circuit_fpisequal*, align 8
  %iz = alloca %struct_template_circuit_iszero*, align 8
  %ellipticcurveadd.add_is_double.declare_inter = alloca i128, align 8
  %add_is_double = call i128 @fn_intrinsic_inline_init()
  store i128 %add_is_double, i128* %ellipticcurveadd.add_is_double.declare_inter, align 4
  %ellipticcurveadd.tmp.declare_inter = alloca [256 x [256 x [256 x i128]]]*, align 8
  %malloccall10 = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x [256 x i128]]]* getelementptr ([256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* null, i32 1) to i32))
  %tmp = bitcast i8* %malloccall10 to [256 x [256 x [256 x i128]]]*
  store [256 x [256 x [256 x i128]]]* %tmp, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %ellipticcurveadd.isinfinity.declare_output = alloca i128, align 8
  %isInfinity = call i128 @fn_intrinsic_inline_init()
  store i128 %isInfinity, i128* %ellipticcurveadd.isinfinity.declare_output, align 4
  %i = alloca i128, align 8
  %i11 = call i128 @fn_intrinsic_inline_init()
  store i128 %i11, i128* %i, align 4
  %n = load i128, i128* %ellipticcurveadd.n.declare_arg, align 4
  %k = load i128, i128* %ellipticcurveadd.k.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %ellipticcurveadd.p.declare_arg, align 8
  %call = call %struct_template_circuit_fpisequal* @fn_template_build_fpisequal(i128 %n, i128 %k, [256 x i128]* %p)
  store %struct_template_circuit_fpisequal* %call, %struct_template_circuit_fpisequal** %x_equal, align 8
  %n12 = load i128, i128* %ellipticcurveadd.n.declare_arg, align 4
  %k13 = load i128, i128* %ellipticcurveadd.k.declare_arg, align 4
  %p14 = load [256 x i128]*, [256 x i128]** %ellipticcurveadd.p.declare_arg, align 8
  %call15 = call %struct_template_circuit_fpisequal* @fn_template_build_fpisequal(i128 %n12, i128 %k13, [256 x i128]* %p14)
  store %struct_template_circuit_fpisequal* %call15, %struct_template_circuit_fpisequal** %y_equal, align 8
  store i128 0, i128* %idx, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %a = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.a.declare_input, align 8
  %idx16 = load i128, i128* %idx, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a, i128 0, i128 0, i128 %idx16
  %a17 = load i128, i128* %array_getter, align 4
  %x_equal18 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x_equal, align 8
  %struct_getter19 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %x_equal18, i32 0, i32 3
  %fpisequal.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter19, align 8
  %idx20 = load i128, i128* %idx, align 4
  %array_getter21 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter, i128 0, i128 0, i128 %idx20
  %x_equal22 = load i128, i128* %array_getter21, align 4
  call void @fn_intrinsic_add_constraint(i128 %x_equal22, i128 %a17, i1* @constraint.401)
  %ptr_getter = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x_equal, align 8
  %struct_getter23 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %ptr_getter, i32 0, i32 3
  %fpisequal.in.read_input_outter24 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter23, align 8
  %idx25 = load i128, i128* %idx, align 4
  %x_equal26 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter24, i128 0, i128 0, i128 %idx25
  store i128 %a17, i128* %x_equal26, align 4
  %b = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.b.declare_input, align 8
  %idx27 = load i128, i128* %idx, align 4
  %array_getter28 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b, i128 0, i128 0, i128 %idx27
  %b29 = load i128, i128* %array_getter28, align 4
  %x_equal30 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x_equal, align 8
  %struct_getter31 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %x_equal30, i32 0, i32 3
  %fpisequal.in.read_input_outter32 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter31, align 8
  %idx33 = load i128, i128* %idx, align 4
  %array_getter34 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter32, i128 0, i128 1, i128 %idx33
  %x_equal35 = load i128, i128* %array_getter34, align 4
  call void @fn_intrinsic_add_constraint(i128 %x_equal35, i128 %b29, i1* @constraint.402)
  %ptr_getter36 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x_equal, align 8
  %struct_getter37 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %ptr_getter36, i32 0, i32 3
  %fpisequal.in.read_input_outter38 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter37, align 8
  %idx39 = load i128, i128* %idx, align 4
  %x_equal40 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter38, i128 0, i128 1, i128 %idx39
  store i128 %b29, i128* %x_equal40, align 4
  %a41 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.a.declare_input, align 8
  %idx42 = load i128, i128* %idx, align 4
  %array_getter43 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a41, i128 0, i128 1, i128 %idx42
  %a44 = load i128, i128* %array_getter43, align 4
  %y_equal45 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %y_equal, align 8
  %struct_getter46 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %y_equal45, i32 0, i32 3
  %fpisequal.in.read_input_outter47 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter46, align 8
  %idx48 = load i128, i128* %idx, align 4
  %array_getter49 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter47, i128 0, i128 0, i128 %idx48
  %y_equal50 = load i128, i128* %array_getter49, align 4
  call void @fn_intrinsic_add_constraint(i128 %y_equal50, i128 %a44, i1* @constraint.403)
  %ptr_getter51 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %y_equal, align 8
  %struct_getter52 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %ptr_getter51, i32 0, i32 3
  %fpisequal.in.read_input_outter53 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter52, align 8
  %idx54 = load i128, i128* %idx, align 4
  %y_equal55 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter53, i128 0, i128 0, i128 %idx54
  store i128 %a44, i128* %y_equal55, align 4
  %b56 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.b.declare_input, align 8
  %idx57 = load i128, i128* %idx, align 4
  %array_getter58 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b56, i128 0, i128 1, i128 %idx57
  %b59 = load i128, i128* %array_getter58, align 4
  %y_equal60 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %y_equal, align 8
  %struct_getter61 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %y_equal60, i32 0, i32 3
  %fpisequal.in.read_input_outter62 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter61, align 8
  %idx63 = load i128, i128* %idx, align 4
  %array_getter64 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter62, i128 0, i128 1, i128 %idx63
  %y_equal65 = load i128, i128* %array_getter64, align 4
  call void @fn_intrinsic_add_constraint(i128 %y_equal65, i128 %b59, i1* @constraint.404)
  %ptr_getter66 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %y_equal, align 8
  %struct_getter67 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %ptr_getter66, i32 0, i32 3
  %fpisequal.in.read_input_outter68 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter67, align 8
  %idx69 = load i128, i128* %idx, align 4
  %y_equal70 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter68, i128 0, i128 1, i128 %idx69
  store i128 %b59, i128* %y_equal70, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body
  %idx71 = load i128, i128* %idx, align 4
  %add72 = add i128 %idx71, 1
  store i128 %add72, i128* %idx, align 4
  %idx73 = load i128, i128* %idx, align 4
  %k74 = load i128, i128* %ellipticcurveadd.k.declare_arg, align 4
  %slt = icmp slt i128 %idx73, %k74
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  %x_equal75 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x_equal, align 8
  %struct_getter76 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %x_equal75, i32 0, i32 4
  %fpisequal.out.read_output_outter = load i128, i128* %struct_getter76, align 4
  %y_equal77 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %y_equal, align 8
  %struct_getter78 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %y_equal77, i32 0, i32 4
  %fpisequal.out.read_output_outter79 = load i128, i128* %struct_getter78, align 4
  %mul = mul i128 %fpisequal.out.read_output_outter, %fpisequal.out.read_output_outter79
  %add_is_double80 = load i128, i128* %ellipticcurveadd.add_is_double.declare_inter, align 4
  call void @fn_intrinsic_add_constraint(i128 %add_is_double80, i128 %mul, i1* @constraint.405)
  %ptr_getter81 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %EllipticCurveAdd, align 8
  %ellipticcurveadd.add_is_double.write_inter_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %ptr_getter81, i32 0, i32 9
  store i128 %mul, i128* %ellipticcurveadd.add_is_double.write_inter_inner, align 4
  %EllipticCurveAdd82 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %EllipticCurveAdd, align 8
  %struct_getter83 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %EllipticCurveAdd82, i32 0, i32 9
  %ellipticcurveadd.add_is_double.read_inter_inner = load i128, i128* %struct_getter83, align 4
  store i128 %ellipticcurveadd.add_is_double.read_inter_inner, i128* %ellipticcurveadd.add_is_double.declare_inter, align 4
  %call84 = call %struct_template_circuit_iszero* @fn_template_build_iszero()
  store %struct_template_circuit_iszero* %call84, %struct_template_circuit_iszero** %iz, align 8
  %b85 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.b.declare_input, align 8
  %array_getter86 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b85, i128 0, i128 0, i128 0
  %b87 = load i128, i128* %array_getter86, align 4
  %iz88 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %iz, align 8
  %struct_getter89 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %iz88, i32 0, i32 0
  %iszero.in.read_input_outter = load i128, i128* %struct_getter89, align 4
  call void @fn_intrinsic_add_constraint(i128 %iszero.in.read_input_outter, i128 %b87, i1* @constraint.406)
  %ptr_getter90 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %iz, align 8
  %iszero.in.write_input_outter = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %ptr_getter90, i32 0, i32 0
  store i128 %b87, i128* %iszero.in.write_input_outter, align 4
  %n91 = load i128, i128* %ellipticcurveadd.n.declare_arg, align 4
  %k92 = load i128, i128* %ellipticcurveadd.k.declare_arg, align 4
  %p93 = load [256 x i128]*, [256 x i128]** %ellipticcurveadd.p.declare_arg, align 8
  %call94 = call %struct_template_circuit_ellipticcurveaddunequal* @fn_template_build_ellipticcurveaddunequal(i128 %n91, i128 %k92, [256 x i128]* %p93)
  store %struct_template_circuit_ellipticcurveaddunequal* %call94, %struct_template_circuit_ellipticcurveaddunequal** %add, align 8
  %n95 = load i128, i128* %ellipticcurveadd.n.declare_arg, align 4
  %k96 = load i128, i128* %ellipticcurveadd.k.declare_arg, align 4
  %a1 = load i128, i128* %ellipticcurveadd.a1.declare_arg, align 4
  %b1 = load i128, i128* %ellipticcurveadd.b1.declare_arg, align 4
  %p97 = load [256 x i128]*, [256 x i128]** %ellipticcurveadd.p.declare_arg, align 8
  %call98 = call %struct_template_circuit_ellipticcurvedouble* @fn_template_build_ellipticcurvedouble(i128 %n95, i128 %k96, i128 %a1, i128 %b1, [256 x i128]* %p97)
  store %struct_template_circuit_ellipticcurvedouble* %call98, %struct_template_circuit_ellipticcurvedouble** %doub, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body99

loop.body99:                                      ; preds = %loop.latch192, %loop.exit
  store i128 0, i128* %idx, align 4
  br label %loop.body100

loop.body100:                                     ; preds = %loop.latch185, %loop.body99
  %a101 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.a.declare_input, align 8
  %i102 = load i128, i128* %i, align 4
  %idx103 = load i128, i128* %idx, align 4
  %array_getter104 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a101, i128 0, i128 %i102, i128 %idx103
  %a105 = load i128, i128* %array_getter104, align 4
  %add106 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %add, align 8
  %struct_getter107 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %add106, i32 0, i32 3
  %ellipticcurveaddunequal.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter107, align 8
  %i108 = load i128, i128* %i, align 4
  %idx109 = load i128, i128* %idx, align 4
  %array_getter110 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.a.read_input_outter, i128 0, i128 %i108, i128 %idx109
  %add111 = load i128, i128* %array_getter110, align 4
  call void @fn_intrinsic_add_constraint(i128 %add111, i128 %a105, i1* @constraint.407)
  %ptr_getter112 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %add, align 8
  %struct_getter113 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %ptr_getter112, i32 0, i32 3
  %ellipticcurveaddunequal.a.read_input_outter114 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter113, align 8
  %i115 = load i128, i128* %i, align 4
  %idx116 = load i128, i128* %idx, align 4
  %add117 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.a.read_input_outter114, i128 0, i128 %i115, i128 %idx116
  store i128 %a105, i128* %add117, align 4
  %i118 = load i128, i128* %i, align 4
  %eq = icmp eq i128 %i118, 0
  %idx119 = load i128, i128* %idx, align 4
  %eq120 = icmp eq i128 %idx119, 0
  %and = and i1 %eq, %eq120
  br i1 %and, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body100
  %b121 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.b.declare_input, align 8
  %i122 = load i128, i128* %i, align 4
  %idx123 = load i128, i128* %idx, align 4
  %array_getter124 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b121, i128 0, i128 %i122, i128 %idx123
  %b125 = load i128, i128* %array_getter124, align 4
  %x_equal126 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x_equal, align 8
  %struct_getter127 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %x_equal126, i32 0, i32 4
  %fpisequal.out.read_output_outter128 = load i128, i128* %struct_getter127, align 4
  %iz129 = load %struct_template_circuit_iszero*, %struct_template_circuit_iszero** %iz, align 8
  %struct_getter130 = getelementptr inbounds %struct_template_circuit_iszero, %struct_template_circuit_iszero* %iz129, i32 0, i32 2
  %iszero.out.read_output_outter = load i128, i128* %struct_getter130, align 4
  %b131 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.b.declare_input, align 8
  %i132 = load i128, i128* %i, align 4
  %idx133 = load i128, i128* %idx, align 4
  %array_getter134 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b131, i128 0, i128 %i132, i128 %idx133
  %b135 = load i128, i128* %array_getter134, align 4
  %sub = sub i128 %iszero.out.read_output_outter, %b135
  %mul136 = mul i128 %fpisequal.out.read_output_outter128, %sub
  %add137 = add i128 %b125, %mul136
  %add138 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %add, align 8
  %struct_getter139 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %add138, i32 0, i32 4
  %ellipticcurveaddunequal.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter139, align 8
  %i140 = load i128, i128* %i, align 4
  %idx141 = load i128, i128* %idx, align 4
  %array_getter142 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.b.read_input_outter, i128 0, i128 %i140, i128 %idx141
  %add143 = load i128, i128* %array_getter142, align 4
  call void @fn_intrinsic_add_constraint(i128 %add143, i128 %add137, i1* @constraint.408)
  %ptr_getter144 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %add, align 8
  %struct_getter145 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %ptr_getter144, i32 0, i32 4
  %ellipticcurveaddunequal.b.read_input_outter146 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter145, align 8
  %i147 = load i128, i128* %i, align 4
  %idx148 = load i128, i128* %idx, align 4
  %add149 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.b.read_input_outter146, i128 0, i128 %i147, i128 %idx148
  store i128 %add137, i128* %add149, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body100
  %b150 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.b.declare_input, align 8
  %i151 = load i128, i128* %i, align 4
  %idx152 = load i128, i128* %idx, align 4
  %array_getter153 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b150, i128 0, i128 %i151, i128 %idx152
  %b154 = load i128, i128* %array_getter153, align 4
  %add155 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %add, align 8
  %struct_getter156 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %add155, i32 0, i32 4
  %ellipticcurveaddunequal.b.read_input_outter157 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter156, align 8
  %i158 = load i128, i128* %i, align 4
  %idx159 = load i128, i128* %idx, align 4
  %array_getter160 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.b.read_input_outter157, i128 0, i128 %i158, i128 %idx159
  %add161 = load i128, i128* %array_getter160, align 4
  call void @fn_intrinsic_add_constraint(i128 %add161, i128 %b154, i1* @constraint.409)
  %ptr_getter162 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %add, align 8
  %struct_getter163 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %ptr_getter162, i32 0, i32 4
  %ellipticcurveaddunequal.b.read_input_outter164 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter163, align 8
  %i165 = load i128, i128* %i, align 4
  %idx166 = load i128, i128* %idx, align 4
  %add167 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.b.read_input_outter164, i128 0, i128 %i165, i128 %idx166
  store i128 %b154, i128* %add167, align 4
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  %a168 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.a.declare_input, align 8
  %i169 = load i128, i128* %i, align 4
  %idx170 = load i128, i128* %idx, align 4
  %array_getter171 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a168, i128 0, i128 %i169, i128 %idx170
  %a172 = load i128, i128* %array_getter171, align 4
  %doub173 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %doub, align 8
  %struct_getter174 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %doub173, i32 0, i32 5
  %ellipticcurvedouble.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter174, align 8
  %i175 = load i128, i128* %i, align 4
  %idx176 = load i128, i128* %idx, align 4
  %array_getter177 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.in.read_input_outter, i128 0, i128 %i175, i128 %idx176
  %doub178 = load i128, i128* %array_getter177, align 4
  call void @fn_intrinsic_add_constraint(i128 %doub178, i128 %a172, i1* @constraint.410)
  %ptr_getter179 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %doub, align 8
  %struct_getter180 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %ptr_getter179, i32 0, i32 5
  %ellipticcurvedouble.in.read_input_outter181 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter180, align 8
  %i182 = load i128, i128* %i, align 4
  %idx183 = load i128, i128* %idx, align 4
  %doub184 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.in.read_input_outter181, i128 0, i128 %i182, i128 %idx183
  store i128 %a172, i128* %doub184, align 4
  br label %loop.latch185

loop.latch185:                                    ; preds = %if.exit
  %idx186 = load i128, i128* %idx, align 4
  %add187 = add i128 %idx186, 1
  store i128 %add187, i128* %idx, align 4
  %idx188 = load i128, i128* %idx, align 4
  %k189 = load i128, i128* %ellipticcurveadd.k.declare_arg, align 4
  %slt190 = icmp slt i128 %idx188, %k189
  br i1 %slt190, label %loop.body100, label %loop.exit191

loop.exit191:                                     ; preds = %loop.latch185
  br label %loop.latch192

loop.latch192:                                    ; preds = %loop.exit191
  %i193 = load i128, i128* %i, align 4
  %add194 = add i128 %i193, 1
  store i128 %add194, i128* %i, align 4
  %i195 = load i128, i128* %i, align 4
  %slt196 = icmp slt i128 %i195, 2
  br i1 %slt196, label %loop.body99, label %loop.exit197

loop.exit197:                                     ; preds = %loop.latch192
  %aIsInfinity = load i128, i128* %ellipticcurveadd.aisinfinity.declare_input, align 4
  %bIsInfinity = load i128, i128* %ellipticcurveadd.bisinfinity.declare_input, align 4
  %mul198 = mul i128 %aIsInfinity, %bIsInfinity
  %ab0199 = load i128, i128* %ellipticcurveadd.ab0.declare_inter, align 4
  call void @fn_intrinsic_add_constraint(i128 %ab0199, i128 %mul198, i1* @constraint.411)
  %ptr_getter200 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %EllipticCurveAdd, align 8
  %ellipticcurveadd.ab0.write_inter_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %ptr_getter200, i32 0, i32 10
  store i128 %mul198, i128* %ellipticcurveadd.ab0.write_inter_inner, align 4
  %EllipticCurveAdd201 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %EllipticCurveAdd, align 8
  %struct_getter202 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %EllipticCurveAdd201, i32 0, i32 10
  %ellipticcurveadd.ab0.read_inter_inner = load i128, i128* %struct_getter202, align 4
  store i128 %ellipticcurveadd.ab0.read_inter_inner, i128* %ellipticcurveadd.ab0.declare_inter, align 4
  %x_equal203 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x_equal, align 8
  %struct_getter204 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %x_equal203, i32 0, i32 4
  %fpisequal.out.read_output_outter205 = load i128, i128* %struct_getter204, align 4
  %x_equal206 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %x_equal, align 8
  %struct_getter207 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %x_equal206, i32 0, i32 4
  %fpisequal.out.read_output_outter208 = load i128, i128* %struct_getter207, align 4
  %y_equal209 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %y_equal, align 8
  %struct_getter210 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %y_equal209, i32 0, i32 4
  %fpisequal.out.read_output_outter211 = load i128, i128* %struct_getter210, align 4
  %mul212 = mul i128 %fpisequal.out.read_output_outter208, %fpisequal.out.read_output_outter211
  %sub213 = sub i128 %fpisequal.out.read_output_outter205, %mul212
  %anegb214 = load i128, i128* %ellipticcurveadd.anegb.declare_inter, align 4
  call void @fn_intrinsic_add_constraint(i128 %anegb214, i128 %sub213, i1* @constraint.412)
  %ptr_getter215 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %EllipticCurveAdd, align 8
  %ellipticcurveadd.anegb.write_inter_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %ptr_getter215, i32 0, i32 11
  store i128 %sub213, i128* %ellipticcurveadd.anegb.write_inter_inner, align 4
  %EllipticCurveAdd216 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %EllipticCurveAdd, align 8
  %struct_getter217 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %EllipticCurveAdd216, i32 0, i32 11
  %ellipticcurveadd.anegb.read_inter_inner = load i128, i128* %struct_getter217, align 4
  store i128 %ellipticcurveadd.anegb.read_inter_inner, i128* %ellipticcurveadd.anegb.declare_inter, align 4
  %ab0218 = load i128, i128* %ellipticcurveadd.ab0.declare_inter, align 4
  %anegb219 = load i128, i128* %ellipticcurveadd.anegb.declare_inter, align 4
  %add220 = add i128 %ab0218, %anegb219
  %ab0221 = load i128, i128* %ellipticcurveadd.ab0.declare_inter, align 4
  %anegb222 = load i128, i128* %ellipticcurveadd.anegb.declare_inter, align 4
  %mul223 = mul i128 %ab0221, %anegb222
  %sub224 = sub i128 %add220, %mul223
  %isInfinity225 = load i128, i128* %ellipticcurveadd.isinfinity.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %isInfinity225, i128 %sub224, i1* @constraint.413)
  %ptr_getter226 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %EllipticCurveAdd, align 8
  %ellipticcurveadd.isinfinity.write_output_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %ptr_getter226, i32 0, i32 14
  store i128 %sub224, i128* %ellipticcurveadd.isinfinity.write_output_inner, align 4
  %EllipticCurveAdd227 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %EllipticCurveAdd, align 8
  %struct_getter228 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %EllipticCurveAdd227, i32 0, i32 14
  %ellipticcurveadd.isinfinity.read_output_inner = load i128, i128* %struct_getter228, align 4
  store i128 %ellipticcurveadd.isinfinity.read_output_inner, i128* %ellipticcurveadd.isinfinity.declare_output, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body229

loop.body229:                                     ; preds = %loop.latch354, %loop.exit197
  store i128 0, i128* %idx, align 4
  br label %loop.body230

loop.body230:                                     ; preds = %loop.latch347, %loop.body229
  %add231 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %add, align 8
  %struct_getter232 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %add231, i32 0, i32 5
  %ellipticcurveaddunequal.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter232, align 8
  %i233 = load i128, i128* %i, align 4
  %idx234 = load i128, i128* %idx, align 4
  %array_getter235 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.out.read_output_outter, i128 0, i128 %i233, i128 %idx234
  %add236 = load i128, i128* %array_getter235, align 4
  %add_is_double237 = load i128, i128* %ellipticcurveadd.add_is_double.declare_inter, align 4
  %doub238 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %doub, align 8
  %struct_getter239 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %doub238, i32 0, i32 6
  %ellipticcurvedouble.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter239, align 8
  %i240 = load i128, i128* %i, align 4
  %idx241 = load i128, i128* %idx, align 4
  %array_getter242 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.out.read_output_outter, i128 0, i128 %i240, i128 %idx241
  %doub243 = load i128, i128* %array_getter242, align 4
  %add244 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %add, align 8
  %struct_getter245 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %add244, i32 0, i32 5
  %ellipticcurveaddunequal.out.read_output_outter246 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter245, align 8
  %i247 = load i128, i128* %i, align 4
  %idx248 = load i128, i128* %idx, align 4
  %array_getter249 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.out.read_output_outter246, i128 0, i128 %i247, i128 %idx248
  %add250 = load i128, i128* %array_getter249, align 4
  %sub251 = sub i128 %doub243, %add250
  %mul252 = mul i128 %add_is_double237, %sub251
  %add253 = add i128 %add236, %mul252
  %tmp254 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i255 = load i128, i128* %i, align 4
  %idx256 = load i128, i128* %idx, align 4
  %array_getter257 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %tmp254, i128 0, i128 0, i128 %i255, i128 %idx256
  %tmp258 = load i128, i128* %array_getter257, align 4
  call void @fn_intrinsic_add_constraint(i128 %tmp258, i128 %add253, i1* @constraint.414)
  %ptr_getter259 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i260 = load i128, i128* %i, align 4
  %idx261 = load i128, i128* %idx, align 4
  %tmp262 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter259, i128 0, i128 0, i128 %i260, i128 %idx261
  store i128 %add253, i128* %tmp262, align 4
  %tmp263 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i264 = load i128, i128* %i, align 4
  %idx265 = load i128, i128* %idx, align 4
  %array_getter266 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %tmp263, i128 0, i128 0, i128 %i264, i128 %idx265
  %tmp267 = load i128, i128* %array_getter266, align 4
  %aIsInfinity268 = load i128, i128* %ellipticcurveadd.aisinfinity.declare_input, align 4
  %b269 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.b.declare_input, align 8
  %i270 = load i128, i128* %i, align 4
  %idx271 = load i128, i128* %idx, align 4
  %array_getter272 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %b269, i128 0, i128 %i270, i128 %idx271
  %b273 = load i128, i128* %array_getter272, align 4
  %tmp274 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i275 = load i128, i128* %i, align 4
  %idx276 = load i128, i128* %idx, align 4
  %array_getter277 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %tmp274, i128 0, i128 0, i128 %i275, i128 %idx276
  %tmp278 = load i128, i128* %array_getter277, align 4
  %sub279 = sub i128 %b273, %tmp278
  %mul280 = mul i128 %aIsInfinity268, %sub279
  %add281 = add i128 %tmp267, %mul280
  %tmp282 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i283 = load i128, i128* %i, align 4
  %idx284 = load i128, i128* %idx, align 4
  %array_getter285 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %tmp282, i128 0, i128 1, i128 %i283, i128 %idx284
  %tmp286 = load i128, i128* %array_getter285, align 4
  call void @fn_intrinsic_add_constraint(i128 %tmp286, i128 %add281, i1* @constraint.415)
  %ptr_getter287 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i288 = load i128, i128* %i, align 4
  %idx289 = load i128, i128* %idx, align 4
  %tmp290 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter287, i128 0, i128 1, i128 %i288, i128 %idx289
  store i128 %add281, i128* %tmp290, align 4
  %tmp291 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i292 = load i128, i128* %i, align 4
  %idx293 = load i128, i128* %idx, align 4
  %array_getter294 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %tmp291, i128 0, i128 1, i128 %i292, i128 %idx293
  %tmp295 = load i128, i128* %array_getter294, align 4
  %bIsInfinity296 = load i128, i128* %ellipticcurveadd.bisinfinity.declare_input, align 4
  %a297 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.a.declare_input, align 8
  %i298 = load i128, i128* %i, align 4
  %idx299 = load i128, i128* %idx, align 4
  %array_getter300 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a297, i128 0, i128 %i298, i128 %idx299
  %a301 = load i128, i128* %array_getter300, align 4
  %tmp302 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i303 = load i128, i128* %i, align 4
  %idx304 = load i128, i128* %idx, align 4
  %array_getter305 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %tmp302, i128 0, i128 1, i128 %i303, i128 %idx304
  %tmp306 = load i128, i128* %array_getter305, align 4
  %sub307 = sub i128 %a301, %tmp306
  %mul308 = mul i128 %bIsInfinity296, %sub307
  %add309 = add i128 %tmp295, %mul308
  %tmp310 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i311 = load i128, i128* %i, align 4
  %idx312 = load i128, i128* %idx, align 4
  %array_getter313 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %tmp310, i128 0, i128 2, i128 %i311, i128 %idx312
  %tmp314 = load i128, i128* %array_getter313, align 4
  call void @fn_intrinsic_add_constraint(i128 %tmp314, i128 %add309, i1* @constraint.416)
  %ptr_getter315 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i316 = load i128, i128* %i, align 4
  %idx317 = load i128, i128* %idx, align 4
  %tmp318 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter315, i128 0, i128 2, i128 %i316, i128 %idx317
  store i128 %add309, i128* %tmp318, align 4
  %tmp319 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i320 = load i128, i128* %i, align 4
  %idx321 = load i128, i128* %idx, align 4
  %array_getter322 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %tmp319, i128 0, i128 2, i128 %i320, i128 %idx321
  %tmp323 = load i128, i128* %array_getter322, align 4
  %isInfinity324 = load i128, i128* %ellipticcurveadd.isinfinity.declare_output, align 4
  %a325 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.a.declare_input, align 8
  %i326 = load i128, i128* %i, align 4
  %idx327 = load i128, i128* %idx, align 4
  %array_getter328 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %a325, i128 0, i128 %i326, i128 %idx327
  %a329 = load i128, i128* %array_getter328, align 4
  %tmp330 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %i331 = load i128, i128* %i, align 4
  %idx332 = load i128, i128* %idx, align 4
  %array_getter333 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %tmp330, i128 0, i128 2, i128 %i331, i128 %idx332
  %tmp334 = load i128, i128* %array_getter333, align 4
  %sub335 = sub i128 %a329, %tmp334
  %mul336 = mul i128 %isInfinity324, %sub335
  %add337 = add i128 %tmp323, %mul336
  %out338 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.out.declare_output, align 8
  %i339 = load i128, i128* %i, align 4
  %idx340 = load i128, i128* %idx, align 4
  %array_getter341 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out338, i128 0, i128 %i339, i128 %idx340
  %out342 = load i128, i128* %array_getter341, align 4
  call void @fn_intrinsic_add_constraint(i128 %out342, i128 %add337, i1* @constraint.417)
  %ptr_getter343 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.out.declare_output, align 8
  %i344 = load i128, i128* %i, align 4
  %idx345 = load i128, i128* %idx, align 4
  %out346 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter343, i128 0, i128 %i344, i128 %idx345
  store i128 %add337, i128* %out346, align 4
  br label %loop.latch347

loop.latch347:                                    ; preds = %loop.body230
  %idx348 = load i128, i128* %idx, align 4
  %add349 = add i128 %idx348, 1
  store i128 %add349, i128* %idx, align 4
  %idx350 = load i128, i128* %idx, align 4
  %k351 = load i128, i128* %ellipticcurveadd.k.declare_arg, align 4
  %slt352 = icmp slt i128 %idx350, %k351
  br i1 %slt352, label %loop.body230, label %loop.exit353

loop.exit353:                                     ; preds = %loop.latch347
  br label %loop.latch354

loop.latch354:                                    ; preds = %loop.exit353
  %i355 = load i128, i128* %i, align 4
  %add356 = add i128 %i355, 1
  store i128 %add356, i128* %i, align 4
  %i357 = load i128, i128* %i, align 4
  %slt358 = icmp slt i128 %i357, 2
  br i1 %slt358, label %loop.body229, label %loop.exit359

loop.exit359:                                     ; preds = %loop.latch354
  br label %exit

exit:                                             ; preds = %loop.exit359
  %add_is_double360 = load i128, i128* %ellipticcurveadd.add_is_double.declare_inter, align 4
  %ellipticcurveadd.add_is_double.write_inter_inner361 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 9
  store i128 %add_is_double360, i128* %ellipticcurveadd.add_is_double.write_inter_inner361, align 4
  %ab0362 = load i128, i128* %ellipticcurveadd.ab0.declare_inter, align 4
  %ellipticcurveadd.ab0.write_inter_inner363 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 10
  store i128 %ab0362, i128* %ellipticcurveadd.ab0.write_inter_inner363, align 4
  %anegb364 = load i128, i128* %ellipticcurveadd.anegb.declare_inter, align 4
  %ellipticcurveadd.anegb.write_inter_inner365 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 11
  store i128 %anegb364, i128* %ellipticcurveadd.anegb.write_inter_inner365, align 4
  %tmp366 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.declare_inter, align 8
  %ellipticcurveadd.tmp.write_inter_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 12
  store [256 x [256 x [256 x i128]]]* %tmp366, [256 x [256 x [256 x i128]]]** %ellipticcurveadd.tmp.write_inter_inner, align 8
  %out367 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurveadd.out.declare_output, align 8
  %ellipticcurveadd.out.write_output_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 13
  store [256 x [256 x i128]]* %out367, [256 x [256 x i128]]** %ellipticcurveadd.out.write_output_inner, align 8
  %isInfinity368 = load i128, i128* %ellipticcurveadd.isinfinity.declare_output, align 4
  %ellipticcurveadd.isinfinity.write_output_inner369 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %0, i32 0, i32 14
  store i128 %isInfinity368, i128* %ellipticcurveadd.isinfinity.write_output_inner369, align 4
  ret void
}

define %struct_template_circuit_ellipticcurveadd* @fn_template_build_ellipticcurveadd(i128 %0, i128 %1, i128 %2, i128 %3, [256 x i128]* %4) {
entry:
  %struct_template_circuit_ellipticcurveadd = alloca %struct_template_circuit_ellipticcurveadd, align 8
  %ellipticcurveadd.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %struct_template_circuit_ellipticcurveadd, i32 0, i32 0
  store i128 %0, i128* %ellipticcurveadd.n.write_arg_inner, align 4
  %ellipticcurveadd.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %struct_template_circuit_ellipticcurveadd, i32 0, i32 1
  store i128 %1, i128* %ellipticcurveadd.k.write_arg_inner, align 4
  %ellipticcurveadd.a1.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %struct_template_circuit_ellipticcurveadd, i32 0, i32 2
  store i128 %2, i128* %ellipticcurveadd.a1.write_arg_inner, align 4
  %ellipticcurveadd.b1.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %struct_template_circuit_ellipticcurveadd, i32 0, i32 3
  store i128 %3, i128* %ellipticcurveadd.b1.write_arg_inner, align 4
  %ellipticcurveadd.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %struct_template_circuit_ellipticcurveadd, i32 0, i32 4
  store [256 x i128]* %4, [256 x i128]** %ellipticcurveadd.p.write_arg_inner, align 8
  ret %struct_template_circuit_ellipticcurveadd* %struct_template_circuit_ellipticcurveadd
}

define void @fn_template_init_ellipticcurvescalarmultiplyunequal(%struct_template_circuit_ellipticcurvescalarmultiplyunequal* %0) {
entry:
  %EllipticCurveScalarMultiplyUnequal = alloca %struct_template_circuit_ellipticcurvescalarmultiplyunequal*, align 8
  store %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %0, %struct_template_circuit_ellipticcurvescalarmultiplyunequal** %EllipticCurveScalarMultiplyUnequal, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %0, i32 0, i32 0
  %ellipticcurvescalarmultiplyunequal.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %ellipticcurvescalarmultiplyunequal.n.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvescalarmultiplyunequal.n.read_arg_inner, i128* %ellipticcurvescalarmultiplyunequal.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %0, i32 0, i32 1
  %ellipticcurvescalarmultiplyunequal.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %ellipticcurvescalarmultiplyunequal.k.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvescalarmultiplyunequal.k.read_arg_inner, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %0, i32 0, i32 2
  %ellipticcurvescalarmultiplyunequal.b.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %ellipticcurvescalarmultiplyunequal.b.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvescalarmultiplyunequal.b.read_arg_inner, i128* %ellipticcurvescalarmultiplyunequal.b.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %0, i32 0, i32 3
  %ellipticcurvescalarmultiplyunequal.x.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %ellipticcurvescalarmultiplyunequal.x.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvescalarmultiplyunequal.x.read_arg_inner, i128* %ellipticcurvescalarmultiplyunequal.x.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %0, i32 0, i32 4
  %ellipticcurvescalarmultiplyunequal.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %ellipticcurvescalarmultiplyunequal.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %ellipticcurvescalarmultiplyunequal.p.read_arg_inner, [256 x i128]** %ellipticcurvescalarmultiplyunequal.p.declare_arg, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %0, i32 0, i32 5
  %ellipticcurvescalarmultiplyunequal.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %ellipticcurvescalarmultiplyunequal.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %ellipticcurvescalarmultiplyunequal.in.read_input_inner, [256 x [256 x i128]]** %ellipticcurvescalarmultiplyunequal.in.declare_input, align 8
  %Bits = alloca [256 x i128]*, align 8
  %Bits6 = alloca [256 x i128], align 8
  store [256 x i128]* %Bits6, [256 x i128]** %Bits, align 8
  %ellipticcurvescalarmultiplyunequal.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %ellipticcurvescalarmultiplyunequal.out.declare_output, align 8
  %ellipticcurvescalarmultiplyunequal.r.declare_inter = alloca [256 x [256 x [256 x i128]]]*, align 8
  %malloccall7 = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x [256 x i128]]]* getelementptr ([256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* null, i32 1) to i32))
  %R = bitcast i8* %malloccall7 to [256 x [256 x [256 x i128]]]*
  store [256 x [256 x [256 x i128]]]* %R, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.declare_inter, align 8
  %curid = alloca i128, align 8
  %curid8 = call i128 @fn_intrinsic_inline_init()
  store i128 %curid8, i128* %curid, align 4
  %LOGK = alloca i128, align 8
  %LOGK9 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK9, i128* %LOGK, align 4
  %idx = alloca i128, align 8
  %idx10 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx10, i128* %idx, align 4
  %BitLength = alloca i128, align 8
  %BitLength11 = call i128 @fn_intrinsic_inline_init()
  store i128 %BitLength11, i128* %BitLength, align 4
  %j = alloca i128, align 8
  %j12 = call i128 @fn_intrinsic_inline_init()
  store i128 %j12, i128* %j, align 4
  %Padd = alloca [256 x %struct_template_circuit_ellipticcurveaddunequal*]*, align 8
  %Padd13 = alloca [256 x %struct_template_circuit_ellipticcurveaddunequal*], align 8
  store [256 x %struct_template_circuit_ellipticcurveaddunequal*]* %Padd13, [256 x %struct_template_circuit_ellipticcurveaddunequal*]** %Padd, align 8
  %i = alloca i128, align 8
  %i14 = call i128 @fn_intrinsic_inline_init()
  store i128 %i14, i128* %i, align 4
  %Pdouble = alloca [256 x %struct_template_circuit_ellipticcurvedouble*]*, align 8
  %Pdouble15 = alloca [256 x %struct_template_circuit_ellipticcurvedouble*], align 8
  store [256 x %struct_template_circuit_ellipticcurvedouble*]* %Pdouble15, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %add_exception = alloca [256 x %struct_template_circuit_fpisequal*]*, align 8
  %add_exception16 = alloca [256 x %struct_template_circuit_fpisequal*], align 8
  store [256 x %struct_template_circuit_fpisequal*]* %add_exception16, [256 x %struct_template_circuit_fpisequal*]** %add_exception, align 8
  %SigBits = alloca i128, align 8
  %SigBits17 = call i128 @fn_intrinsic_inline_init()
  store i128 %SigBits17, i128* %SigBits, align 4
  %k = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %call = call i128 @log_ceil(i128 %k)
  store i128 %call, i128* %LOGK, align 4
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %Bits, align 8
  store i128 0, i128* %BitLength, align 4
  store i128 0, i128* %SigBits, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %x = load i128, i128* %ellipticcurvescalarmultiplyunequal.x.declare_arg, align 4
  %i18 = load i128, i128* %i, align 4
  %rshift = lshr i128 %x, %i18
  %and = and i128 %rshift, 1
  %ptr_getter = load [256 x i128]*, [256 x i128]** %Bits, align 8
  %i19 = load i128, i128* %i, align 4
  %Bits20 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i19
  store i128 %and, i128* %Bits20, align 4
  %Bits21 = load [256 x i128]*, [256 x i128]** %Bits, align 8
  %i22 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %Bits21, i128 0, i128 %i22
  %Bits23 = load i128, i128* %array_getter, align 4
  %eq = icmp eq i128 %Bits23, 1
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  %SigBits24 = load i128, i128* %SigBits, align 4
  %add = add i128 %SigBits24, 1
  store i128 %add, i128* %SigBits, align 4
  %i25 = load i128, i128* %i, align 4
  %add26 = add i128 %i25, 1
  store i128 %add26, i128* %BitLength, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %i27 = load i128, i128* %i, align 4
  %add28 = add i128 %i27, 1
  store i128 %add28, i128* %i, align 4
  %i29 = load i128, i128* %i, align 4
  %slt = icmp slt i128 %i29, 250
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %curid, align 4
  %BitLength30 = load i128, i128* %BitLength, align 4
  %sub = sub i128 %BitLength30, 1
  store i128 %sub, i128* %i, align 4
  br label %loop.body31

loop.body31:                                      ; preds = %loop.latch333, %loop.exit
  %i34 = load i128, i128* %i, align 4
  %BitLength35 = load i128, i128* %BitLength, align 4
  %sub36 = sub i128 %BitLength35, 1
  %eq37 = icmp eq i128 %i34, %sub36
  br i1 %eq37, label %if.true32, label %if.false33

if.true32:                                        ; preds = %loop.body31
  store i128 0, i128* %j, align 4
  br label %loop.body38

if.false33:                                       ; preds = %loop.body31
  %n = load i128, i128* %ellipticcurvescalarmultiplyunequal.n.declare_arg, align 4
  %k68 = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %b = load i128, i128* %ellipticcurvescalarmultiplyunequal.b.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiplyunequal.p.declare_arg, align 8
  %call69 = call %struct_template_circuit_ellipticcurvedouble* @fn_template_build_ellipticcurvedouble(i128 %n, i128 %k68, i128 0, i128 %b, [256 x i128]* %p)
  %ptr_getter70 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i71 = load i128, i128* %i, align 4
  %Pdouble72 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %ptr_getter70, i128 0, i128 %i71
  store %struct_template_circuit_ellipticcurvedouble* %call69, %struct_template_circuit_ellipticcurvedouble** %Pdouble72, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body73

loop.body38:                                      ; preds = %loop.latch62, %if.true32
  store i128 0, i128* %idx, align 4
  br label %loop.body39

loop.body39:                                      ; preds = %loop.latch55, %loop.body38
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiplyunequal.in.declare_input, align 8
  %j40 = load i128, i128* %j, align 4
  %idx41 = load i128, i128* %idx, align 4
  %array_getter42 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %j40, i128 %idx41
  %in43 = load i128, i128* %array_getter42, align 4
  %R44 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.declare_inter, align 8
  %i45 = load i128, i128* %i, align 4
  %j46 = load i128, i128* %j, align 4
  %idx47 = load i128, i128* %idx, align 4
  %array_getter48 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R44, i128 0, i128 %i45, i128 %j46, i128 %idx47
  %R49 = load i128, i128* %array_getter48, align 4
  call void @fn_intrinsic_add_constraint(i128 %R49, i128 %in43, i1* @constraint.418)
  %ptr_getter50 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.declare_inter, align 8
  %i51 = load i128, i128* %i, align 4
  %j52 = load i128, i128* %j, align 4
  %idx53 = load i128, i128* %idx, align 4
  %R54 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter50, i128 0, i128 %i51, i128 %j52, i128 %idx53
  store i128 %in43, i128* %R54, align 4
  br label %loop.latch55

loop.latch55:                                     ; preds = %loop.body39
  %idx56 = load i128, i128* %idx, align 4
  %add57 = add i128 %idx56, 1
  store i128 %add57, i128* %idx, align 4
  %idx58 = load i128, i128* %idx, align 4
  %k59 = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %slt60 = icmp slt i128 %idx58, %k59
  br i1 %slt60, label %loop.body39, label %loop.exit61

loop.exit61:                                      ; preds = %loop.latch55
  br label %loop.latch62

loop.latch62:                                     ; preds = %loop.exit61
  %j63 = load i128, i128* %j, align 4
  %add64 = add i128 %j63, 1
  store i128 %add64, i128* %j, align 4
  %j65 = load i128, i128* %j, align 4
  %slt66 = icmp slt i128 %j65, 2
  br i1 %slt66, label %loop.body38, label %loop.exit67

loop.exit67:                                      ; preds = %loop.latch62
  br label %if.exit332

loop.body73:                                      ; preds = %loop.latch107, %if.false33
  store i128 0, i128* %idx, align 4
  br label %loop.body74

loop.body74:                                      ; preds = %loop.latch100, %loop.body73
  %R75 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.declare_inter, align 8
  %i76 = load i128, i128* %i, align 4
  %add77 = add i128 %i76, 1
  %j78 = load i128, i128* %j, align 4
  %idx79 = load i128, i128* %idx, align 4
  %array_getter80 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R75, i128 0, i128 %add77, i128 %j78, i128 %idx79
  %R81 = load i128, i128* %array_getter80, align 4
  %Pdouble82 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i83 = load i128, i128* %i, align 4
  %array_getter84 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %Pdouble82, i128 0, i128 %i83
  %Pdouble85 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %array_getter84, align 8
  %struct_getter86 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %Pdouble85, i32 0, i32 5
  %ellipticcurvedouble.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter86, align 8
  %j87 = load i128, i128* %j, align 4
  %idx88 = load i128, i128* %idx, align 4
  %array_getter89 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.in.read_input_outter, i128 0, i128 %j87, i128 %idx88
  %Pdouble90 = load i128, i128* %array_getter89, align 4
  call void @fn_intrinsic_add_constraint(i128 %Pdouble90, i128 %R81, i1* @constraint.419)
  %ptr_getter91 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i92 = load i128, i128* %i, align 4
  %array_getter93 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %ptr_getter91, i128 0, i128 %i92
  %Pdouble94 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %array_getter93, align 8
  %struct_getter95 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %Pdouble94, i32 0, i32 5
  %ellipticcurvedouble.in.read_input_outter96 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter95, align 8
  %j97 = load i128, i128* %j, align 4
  %idx98 = load i128, i128* %idx, align 4
  %Pdouble99 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.in.read_input_outter96, i128 0, i128 %j97, i128 %idx98
  store i128 %R81, i128* %Pdouble99, align 4
  br label %loop.latch100

loop.latch100:                                    ; preds = %loop.body74
  %idx101 = load i128, i128* %idx, align 4
  %add102 = add i128 %idx101, 1
  store i128 %add102, i128* %idx, align 4
  %idx103 = load i128, i128* %idx, align 4
  %k104 = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %slt105 = icmp slt i128 %idx103, %k104
  br i1 %slt105, label %loop.body74, label %loop.exit106

loop.exit106:                                     ; preds = %loop.latch100
  br label %loop.latch107

loop.latch107:                                    ; preds = %loop.exit106
  %j108 = load i128, i128* %j, align 4
  %add109 = add i128 %j108, 1
  store i128 %add109, i128* %j, align 4
  %j110 = load i128, i128* %j, align 4
  %slt111 = icmp slt i128 %j110, 2
  br i1 %slt111, label %loop.body73, label %loop.exit112

loop.exit112:                                     ; preds = %loop.latch107
  %Bits115 = load [256 x i128]*, [256 x i128]** %Bits, align 8
  %i116 = load i128, i128* %i, align 4
  %array_getter117 = getelementptr inbounds [256 x i128], [256 x i128]* %Bits115, i128 0, i128 %i116
  %Bits118 = load i128, i128* %array_getter117, align 4
  %eq119 = icmp eq i128 %Bits118, 0
  br i1 %eq119, label %if.true113, label %if.false114

if.true113:                                       ; preds = %loop.exit112
  store i128 0, i128* %j, align 4
  br label %loop.body120

if.false114:                                      ; preds = %loop.exit112
  %n155 = load i128, i128* %ellipticcurvescalarmultiplyunequal.n.declare_arg, align 4
  %k156 = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %p157 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiplyunequal.p.declare_arg, align 8
  %call158 = call %struct_template_circuit_fpisequal* @fn_template_build_fpisequal(i128 %n155, i128 %k156, [256 x i128]* %p157)
  %ptr_getter159 = load [256 x %struct_template_circuit_fpisequal*]*, [256 x %struct_template_circuit_fpisequal*]** %add_exception, align 8
  %curid160 = load i128, i128* %curid, align 4
  %add_exception161 = getelementptr inbounds [256 x %struct_template_circuit_fpisequal*], [256 x %struct_template_circuit_fpisequal*]* %ptr_getter159, i128 0, i128 %curid160
  store %struct_template_circuit_fpisequal* %call158, %struct_template_circuit_fpisequal** %add_exception161, align 8
  store i128 0, i128* %idx, align 4
  br label %loop.body162

loop.body120:                                     ; preds = %loop.latch149, %if.true113
  store i128 0, i128* %idx, align 4
  br label %loop.body121

loop.body121:                                     ; preds = %loop.latch142, %loop.body120
  %Pdouble122 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i123 = load i128, i128* %i, align 4
  %array_getter124 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %Pdouble122, i128 0, i128 %i123
  %Pdouble125 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %array_getter124, align 8
  %struct_getter126 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %Pdouble125, i32 0, i32 6
  %ellipticcurvedouble.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter126, align 8
  %j127 = load i128, i128* %j, align 4
  %idx128 = load i128, i128* %idx, align 4
  %array_getter129 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.out.read_output_outter, i128 0, i128 %j127, i128 %idx128
  %Pdouble130 = load i128, i128* %array_getter129, align 4
  %R131 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.declare_inter, align 8
  %i132 = load i128, i128* %i, align 4
  %j133 = load i128, i128* %j, align 4
  %idx134 = load i128, i128* %idx, align 4
  %array_getter135 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R131, i128 0, i128 %i132, i128 %j133, i128 %idx134
  %R136 = load i128, i128* %array_getter135, align 4
  call void @fn_intrinsic_add_constraint(i128 %R136, i128 %Pdouble130, i1* @constraint.420)
  %ptr_getter137 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.declare_inter, align 8
  %i138 = load i128, i128* %i, align 4
  %j139 = load i128, i128* %j, align 4
  %idx140 = load i128, i128* %idx, align 4
  %R141 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter137, i128 0, i128 %i138, i128 %j139, i128 %idx140
  store i128 %Pdouble130, i128* %R141, align 4
  br label %loop.latch142

loop.latch142:                                    ; preds = %loop.body121
  %idx143 = load i128, i128* %idx, align 4
  %add144 = add i128 %idx143, 1
  store i128 %add144, i128* %idx, align 4
  %idx145 = load i128, i128* %idx, align 4
  %k146 = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %slt147 = icmp slt i128 %idx145, %k146
  br i1 %slt147, label %loop.body121, label %loop.exit148

loop.exit148:                                     ; preds = %loop.latch142
  br label %loop.latch149

loop.latch149:                                    ; preds = %loop.exit148
  %j150 = load i128, i128* %j, align 4
  %add151 = add i128 %j150, 1
  store i128 %add151, i128* %j, align 4
  %j152 = load i128, i128* %j, align 4
  %slt153 = icmp slt i128 %j152, 2
  br i1 %slt153, label %loop.body120, label %loop.exit154

loop.exit154:                                     ; preds = %loop.latch149
  br label %if.exit331

loop.body162:                                     ; preds = %loop.latch209, %if.false114
  %Pdouble163 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i164 = load i128, i128* %i, align 4
  %array_getter165 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %Pdouble163, i128 0, i128 %i164
  %Pdouble166 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %array_getter165, align 8
  %struct_getter167 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %Pdouble166, i32 0, i32 6
  %ellipticcurvedouble.out.read_output_outter168 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter167, align 8
  %idx169 = load i128, i128* %idx, align 4
  %array_getter170 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.out.read_output_outter168, i128 0, i128 0, i128 %idx169
  %Pdouble171 = load i128, i128* %array_getter170, align 4
  %add_exception172 = load [256 x %struct_template_circuit_fpisequal*]*, [256 x %struct_template_circuit_fpisequal*]** %add_exception, align 8
  %curid173 = load i128, i128* %curid, align 4
  %array_getter174 = getelementptr inbounds [256 x %struct_template_circuit_fpisequal*], [256 x %struct_template_circuit_fpisequal*]* %add_exception172, i128 0, i128 %curid173
  %add_exception175 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %array_getter174, align 8
  %struct_getter176 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %add_exception175, i32 0, i32 3
  %fpisequal.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter176, align 8
  %idx177 = load i128, i128* %idx, align 4
  %array_getter178 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter, i128 0, i128 0, i128 %idx177
  %add_exception179 = load i128, i128* %array_getter178, align 4
  call void @fn_intrinsic_add_constraint(i128 %add_exception179, i128 %Pdouble171, i1* @constraint.421)
  %ptr_getter180 = load [256 x %struct_template_circuit_fpisequal*]*, [256 x %struct_template_circuit_fpisequal*]** %add_exception, align 8
  %curid181 = load i128, i128* %curid, align 4
  %array_getter182 = getelementptr inbounds [256 x %struct_template_circuit_fpisequal*], [256 x %struct_template_circuit_fpisequal*]* %ptr_getter180, i128 0, i128 %curid181
  %add_exception183 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %array_getter182, align 8
  %struct_getter184 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %add_exception183, i32 0, i32 3
  %fpisequal.in.read_input_outter185 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter184, align 8
  %idx186 = load i128, i128* %idx, align 4
  %add_exception187 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter185, i128 0, i128 0, i128 %idx186
  store i128 %Pdouble171, i128* %add_exception187, align 4
  %in188 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiplyunequal.in.declare_input, align 8
  %idx189 = load i128, i128* %idx, align 4
  %array_getter190 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in188, i128 0, i128 0, i128 %idx189
  %in191 = load i128, i128* %array_getter190, align 4
  %add_exception192 = load [256 x %struct_template_circuit_fpisequal*]*, [256 x %struct_template_circuit_fpisequal*]** %add_exception, align 8
  %curid193 = load i128, i128* %curid, align 4
  %array_getter194 = getelementptr inbounds [256 x %struct_template_circuit_fpisequal*], [256 x %struct_template_circuit_fpisequal*]* %add_exception192, i128 0, i128 %curid193
  %add_exception195 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %array_getter194, align 8
  %struct_getter196 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %add_exception195, i32 0, i32 3
  %fpisequal.in.read_input_outter197 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter196, align 8
  %idx198 = load i128, i128* %idx, align 4
  %array_getter199 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter197, i128 0, i128 1, i128 %idx198
  %add_exception200 = load i128, i128* %array_getter199, align 4
  call void @fn_intrinsic_add_constraint(i128 %add_exception200, i128 %in191, i1* @constraint.422)
  %ptr_getter201 = load [256 x %struct_template_circuit_fpisequal*]*, [256 x %struct_template_circuit_fpisequal*]** %add_exception, align 8
  %curid202 = load i128, i128* %curid, align 4
  %array_getter203 = getelementptr inbounds [256 x %struct_template_circuit_fpisequal*], [256 x %struct_template_circuit_fpisequal*]* %ptr_getter201, i128 0, i128 %curid202
  %add_exception204 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %array_getter203, align 8
  %struct_getter205 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %add_exception204, i32 0, i32 3
  %fpisequal.in.read_input_outter206 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter205, align 8
  %idx207 = load i128, i128* %idx, align 4
  %add_exception208 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fpisequal.in.read_input_outter206, i128 0, i128 1, i128 %idx207
  store i128 %in191, i128* %add_exception208, align 4
  br label %loop.latch209

loop.latch209:                                    ; preds = %loop.body162
  %idx210 = load i128, i128* %idx, align 4
  %add211 = add i128 %idx210, 1
  store i128 %add211, i128* %idx, align 4
  %idx212 = load i128, i128* %idx, align 4
  %k213 = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %slt214 = icmp slt i128 %idx212, %k213
  br i1 %slt214, label %loop.body162, label %loop.exit215

loop.exit215:                                     ; preds = %loop.latch209
  %add_exception216 = load [256 x %struct_template_circuit_fpisequal*]*, [256 x %struct_template_circuit_fpisequal*]** %add_exception, align 8
  %curid217 = load i128, i128* %curid, align 4
  %array_getter218 = getelementptr inbounds [256 x %struct_template_circuit_fpisequal*], [256 x %struct_template_circuit_fpisequal*]* %add_exception216, i128 0, i128 %curid217
  %add_exception219 = load %struct_template_circuit_fpisequal*, %struct_template_circuit_fpisequal** %array_getter218, align 8
  %struct_getter220 = getelementptr inbounds %struct_template_circuit_fpisequal, %struct_template_circuit_fpisequal* %add_exception219, i32 0, i32 4
  %fpisequal.out.read_output_outter = load i128, i128* %struct_getter220, align 4
  call void @fn_intrinsic_add_constraint(i128 %fpisequal.out.read_output_outter, i128 0, i1* @constraint.423)
  %n221 = load i128, i128* %ellipticcurvescalarmultiplyunequal.n.declare_arg, align 4
  %k222 = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %p223 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiplyunequal.p.declare_arg, align 8
  %call224 = call %struct_template_circuit_ellipticcurveaddunequal* @fn_template_build_ellipticcurveaddunequal(i128 %n221, i128 %k222, [256 x i128]* %p223)
  %ptr_getter225 = load [256 x %struct_template_circuit_ellipticcurveaddunequal*]*, [256 x %struct_template_circuit_ellipticcurveaddunequal*]** %Padd, align 8
  %curid226 = load i128, i128* %curid, align 4
  %Padd227 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveaddunequal*], [256 x %struct_template_circuit_ellipticcurveaddunequal*]* %ptr_getter225, i128 0, i128 %curid226
  store %struct_template_circuit_ellipticcurveaddunequal* %call224, %struct_template_circuit_ellipticcurveaddunequal** %Padd227, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body228

loop.body228:                                     ; preds = %loop.latch288, %loop.exit215
  store i128 0, i128* %idx, align 4
  br label %loop.body229

loop.body229:                                     ; preds = %loop.latch281, %loop.body228
  %Pdouble230 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i231 = load i128, i128* %i, align 4
  %array_getter232 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %Pdouble230, i128 0, i128 %i231
  %Pdouble233 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %array_getter232, align 8
  %struct_getter234 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %Pdouble233, i32 0, i32 6
  %ellipticcurvedouble.out.read_output_outter235 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter234, align 8
  %j236 = load i128, i128* %j, align 4
  %idx237 = load i128, i128* %idx, align 4
  %array_getter238 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.out.read_output_outter235, i128 0, i128 %j236, i128 %idx237
  %Pdouble239 = load i128, i128* %array_getter238, align 4
  %Padd240 = load [256 x %struct_template_circuit_ellipticcurveaddunequal*]*, [256 x %struct_template_circuit_ellipticcurveaddunequal*]** %Padd, align 8
  %curid241 = load i128, i128* %curid, align 4
  %array_getter242 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveaddunequal*], [256 x %struct_template_circuit_ellipticcurveaddunequal*]* %Padd240, i128 0, i128 %curid241
  %Padd243 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %array_getter242, align 8
  %struct_getter244 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %Padd243, i32 0, i32 3
  %ellipticcurveaddunequal.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter244, align 8
  %j245 = load i128, i128* %j, align 4
  %idx246 = load i128, i128* %idx, align 4
  %array_getter247 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.a.read_input_outter, i128 0, i128 %j245, i128 %idx246
  %Padd248 = load i128, i128* %array_getter247, align 4
  call void @fn_intrinsic_add_constraint(i128 %Padd248, i128 %Pdouble239, i1* @constraint.424)
  %ptr_getter249 = load [256 x %struct_template_circuit_ellipticcurveaddunequal*]*, [256 x %struct_template_circuit_ellipticcurveaddunequal*]** %Padd, align 8
  %curid250 = load i128, i128* %curid, align 4
  %array_getter251 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveaddunequal*], [256 x %struct_template_circuit_ellipticcurveaddunequal*]* %ptr_getter249, i128 0, i128 %curid250
  %Padd252 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %array_getter251, align 8
  %struct_getter253 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %Padd252, i32 0, i32 3
  %ellipticcurveaddunequal.a.read_input_outter254 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter253, align 8
  %j255 = load i128, i128* %j, align 4
  %idx256 = load i128, i128* %idx, align 4
  %Padd257 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.a.read_input_outter254, i128 0, i128 %j255, i128 %idx256
  store i128 %Pdouble239, i128* %Padd257, align 4
  %in258 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiplyunequal.in.declare_input, align 8
  %j259 = load i128, i128* %j, align 4
  %idx260 = load i128, i128* %idx, align 4
  %array_getter261 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in258, i128 0, i128 %j259, i128 %idx260
  %in262 = load i128, i128* %array_getter261, align 4
  %Padd263 = load [256 x %struct_template_circuit_ellipticcurveaddunequal*]*, [256 x %struct_template_circuit_ellipticcurveaddunequal*]** %Padd, align 8
  %curid264 = load i128, i128* %curid, align 4
  %array_getter265 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveaddunequal*], [256 x %struct_template_circuit_ellipticcurveaddunequal*]* %Padd263, i128 0, i128 %curid264
  %Padd266 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %array_getter265, align 8
  %struct_getter267 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %Padd266, i32 0, i32 4
  %ellipticcurveaddunequal.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter267, align 8
  %j268 = load i128, i128* %j, align 4
  %idx269 = load i128, i128* %idx, align 4
  %array_getter270 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.b.read_input_outter, i128 0, i128 %j268, i128 %idx269
  %Padd271 = load i128, i128* %array_getter270, align 4
  call void @fn_intrinsic_add_constraint(i128 %Padd271, i128 %in262, i1* @constraint.425)
  %ptr_getter272 = load [256 x %struct_template_circuit_ellipticcurveaddunequal*]*, [256 x %struct_template_circuit_ellipticcurveaddunequal*]** %Padd, align 8
  %curid273 = load i128, i128* %curid, align 4
  %array_getter274 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveaddunequal*], [256 x %struct_template_circuit_ellipticcurveaddunequal*]* %ptr_getter272, i128 0, i128 %curid273
  %Padd275 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %array_getter274, align 8
  %struct_getter276 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %Padd275, i32 0, i32 4
  %ellipticcurveaddunequal.b.read_input_outter277 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter276, align 8
  %j278 = load i128, i128* %j, align 4
  %idx279 = load i128, i128* %idx, align 4
  %Padd280 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.b.read_input_outter277, i128 0, i128 %j278, i128 %idx279
  store i128 %in262, i128* %Padd280, align 4
  br label %loop.latch281

loop.latch281:                                    ; preds = %loop.body229
  %idx282 = load i128, i128* %idx, align 4
  %add283 = add i128 %idx282, 1
  store i128 %add283, i128* %idx, align 4
  %idx284 = load i128, i128* %idx, align 4
  %k285 = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %slt286 = icmp slt i128 %idx284, %k285
  br i1 %slt286, label %loop.body229, label %loop.exit287

loop.exit287:                                     ; preds = %loop.latch281
  br label %loop.latch288

loop.latch288:                                    ; preds = %loop.exit287
  %j289 = load i128, i128* %j, align 4
  %add290 = add i128 %j289, 1
  store i128 %add290, i128* %j, align 4
  %j291 = load i128, i128* %j, align 4
  %slt292 = icmp slt i128 %j291, 2
  br i1 %slt292, label %loop.body228, label %loop.exit293

loop.exit293:                                     ; preds = %loop.latch288
  store i128 0, i128* %j, align 4
  br label %loop.body294

loop.body294:                                     ; preds = %loop.latch323, %loop.exit293
  store i128 0, i128* %idx, align 4
  br label %loop.body295

loop.body295:                                     ; preds = %loop.latch316, %loop.body294
  %Padd296 = load [256 x %struct_template_circuit_ellipticcurveaddunequal*]*, [256 x %struct_template_circuit_ellipticcurveaddunequal*]** %Padd, align 8
  %curid297 = load i128, i128* %curid, align 4
  %array_getter298 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveaddunequal*], [256 x %struct_template_circuit_ellipticcurveaddunequal*]* %Padd296, i128 0, i128 %curid297
  %Padd299 = load %struct_template_circuit_ellipticcurveaddunequal*, %struct_template_circuit_ellipticcurveaddunequal** %array_getter298, align 8
  %struct_getter300 = getelementptr inbounds %struct_template_circuit_ellipticcurveaddunequal, %struct_template_circuit_ellipticcurveaddunequal* %Padd299, i32 0, i32 5
  %ellipticcurveaddunequal.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter300, align 8
  %j301 = load i128, i128* %j, align 4
  %idx302 = load i128, i128* %idx, align 4
  %array_getter303 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveaddunequal.out.read_output_outter, i128 0, i128 %j301, i128 %idx302
  %Padd304 = load i128, i128* %array_getter303, align 4
  %R305 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.declare_inter, align 8
  %i306 = load i128, i128* %i, align 4
  %j307 = load i128, i128* %j, align 4
  %idx308 = load i128, i128* %idx, align 4
  %array_getter309 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R305, i128 0, i128 %i306, i128 %j307, i128 %idx308
  %R310 = load i128, i128* %array_getter309, align 4
  call void @fn_intrinsic_add_constraint(i128 %R310, i128 %Padd304, i1* @constraint.426)
  %ptr_getter311 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.declare_inter, align 8
  %i312 = load i128, i128* %i, align 4
  %j313 = load i128, i128* %j, align 4
  %idx314 = load i128, i128* %idx, align 4
  %R315 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter311, i128 0, i128 %i312, i128 %j313, i128 %idx314
  store i128 %Padd304, i128* %R315, align 4
  br label %loop.latch316

loop.latch316:                                    ; preds = %loop.body295
  %idx317 = load i128, i128* %idx, align 4
  %add318 = add i128 %idx317, 1
  store i128 %add318, i128* %idx, align 4
  %idx319 = load i128, i128* %idx, align 4
  %k320 = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %slt321 = icmp slt i128 %idx319, %k320
  br i1 %slt321, label %loop.body295, label %loop.exit322

loop.exit322:                                     ; preds = %loop.latch316
  br label %loop.latch323

loop.latch323:                                    ; preds = %loop.exit322
  %j324 = load i128, i128* %j, align 4
  %add325 = add i128 %j324, 1
  store i128 %add325, i128* %j, align 4
  %j326 = load i128, i128* %j, align 4
  %slt327 = icmp slt i128 %j326, 2
  br i1 %slt327, label %loop.body294, label %loop.exit328

loop.exit328:                                     ; preds = %loop.latch323
  %curid329 = load i128, i128* %curid, align 4
  %add330 = add i128 %curid329, 1
  store i128 %add330, i128* %curid, align 4
  br label %if.exit331

if.exit331:                                       ; preds = %loop.exit328, %loop.exit154
  br label %if.exit332

if.exit332:                                       ; preds = %if.exit331, %loop.exit67
  br label %loop.latch333

loop.latch333:                                    ; preds = %if.exit332
  %i334 = load i128, i128* %i, align 4
  %sub335 = sub i128 %i334, 1
  store i128 %sub335, i128* %i, align 4
  %i336 = load i128, i128* %i, align 4
  %sge = icmp sge i128 %i336, 0
  br i1 %sge, label %loop.body31, label %loop.exit337

loop.exit337:                                     ; preds = %loop.latch333
  store i128 0, i128* %i, align 4
  br label %loop.body338

loop.body338:                                     ; preds = %loop.latch361, %loop.exit337
  store i128 0, i128* %idx, align 4
  br label %loop.body339

loop.body339:                                     ; preds = %loop.latch354, %loop.body338
  %R340 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.declare_inter, align 8
  %i341 = load i128, i128* %i, align 4
  %idx342 = load i128, i128* %idx, align 4
  %array_getter343 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R340, i128 0, i128 0, i128 %i341, i128 %idx342
  %R344 = load i128, i128* %array_getter343, align 4
  %out345 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiplyunequal.out.declare_output, align 8
  %i346 = load i128, i128* %i, align 4
  %idx347 = load i128, i128* %idx, align 4
  %array_getter348 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out345, i128 0, i128 %i346, i128 %idx347
  %out349 = load i128, i128* %array_getter348, align 4
  call void @fn_intrinsic_add_constraint(i128 %out349, i128 %R344, i1* @constraint.427)
  %ptr_getter350 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiplyunequal.out.declare_output, align 8
  %i351 = load i128, i128* %i, align 4
  %idx352 = load i128, i128* %idx, align 4
  %out353 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter350, i128 0, i128 %i351, i128 %idx352
  store i128 %R344, i128* %out353, align 4
  br label %loop.latch354

loop.latch354:                                    ; preds = %loop.body339
  %idx355 = load i128, i128* %idx, align 4
  %add356 = add i128 %idx355, 1
  store i128 %add356, i128* %idx, align 4
  %idx357 = load i128, i128* %idx, align 4
  %k358 = load i128, i128* %ellipticcurvescalarmultiplyunequal.k.declare_arg, align 4
  %slt359 = icmp slt i128 %idx357, %k358
  br i1 %slt359, label %loop.body339, label %loop.exit360

loop.exit360:                                     ; preds = %loop.latch354
  br label %loop.latch361

loop.latch361:                                    ; preds = %loop.exit360
  %i362 = load i128, i128* %i, align 4
  %add363 = add i128 %i362, 1
  store i128 %add363, i128* %i, align 4
  %i364 = load i128, i128* %i, align 4
  %slt365 = icmp slt i128 %i364, 2
  br i1 %slt365, label %loop.body338, label %loop.exit366

loop.exit366:                                     ; preds = %loop.latch361
  br label %exit

exit:                                             ; preds = %loop.exit366
  %R367 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.declare_inter, align 8
  %ellipticcurvescalarmultiplyunequal.r.write_inter_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %0, i32 0, i32 6
  store [256 x [256 x [256 x i128]]]* %R367, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiplyunequal.r.write_inter_inner, align 8
  %out368 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiplyunequal.out.declare_output, align 8
  %ellipticcurvescalarmultiplyunequal.out.write_output_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %0, i32 0, i32 7
  store [256 x [256 x i128]]* %out368, [256 x [256 x i128]]** %ellipticcurvescalarmultiplyunequal.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_ellipticcurvescalarmultiplyunequal* @fn_template_build_ellipticcurvescalarmultiplyunequal(i128 %0, i128 %1, i128 %2, i128 %3, [256 x i128]* %4) {
entry:
  %struct_template_circuit_ellipticcurvescalarmultiplyunequal = alloca %struct_template_circuit_ellipticcurvescalarmultiplyunequal, align 8
  %ellipticcurvescalarmultiplyunequal.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %struct_template_circuit_ellipticcurvescalarmultiplyunequal, i32 0, i32 0
  store i128 %0, i128* %ellipticcurvescalarmultiplyunequal.n.write_arg_inner, align 4
  %ellipticcurvescalarmultiplyunequal.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %struct_template_circuit_ellipticcurvescalarmultiplyunequal, i32 0, i32 1
  store i128 %1, i128* %ellipticcurvescalarmultiplyunequal.k.write_arg_inner, align 4
  %ellipticcurvescalarmultiplyunequal.b.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %struct_template_circuit_ellipticcurvescalarmultiplyunequal, i32 0, i32 2
  store i128 %2, i128* %ellipticcurvescalarmultiplyunequal.b.write_arg_inner, align 4
  %ellipticcurvescalarmultiplyunequal.x.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %struct_template_circuit_ellipticcurvescalarmultiplyunequal, i32 0, i32 3
  store i128 %3, i128* %ellipticcurvescalarmultiplyunequal.x.write_arg_inner, align 4
  %ellipticcurvescalarmultiplyunequal.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiplyunequal, %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %struct_template_circuit_ellipticcurvescalarmultiplyunequal, i32 0, i32 4
  store [256 x i128]* %4, [256 x i128]** %ellipticcurvescalarmultiplyunequal.p.write_arg_inner, align 8
  ret %struct_template_circuit_ellipticcurvescalarmultiplyunequal* %struct_template_circuit_ellipticcurvescalarmultiplyunequal
}

define void @fn_template_init_fp2invert(%struct_template_circuit_fp2invert* %0) {
entry:
  %Fp2Invert = alloca %struct_template_circuit_fp2invert*, align 8
  store %struct_template_circuit_fp2invert* %0, %struct_template_circuit_fp2invert** %Fp2Invert, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_fp2invert, %struct_template_circuit_fp2invert* %0, i32 0, i32 0
  %fp2invert.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %fp2invert.n.declare_arg = alloca i128, align 8
  store i128 %fp2invert.n.read_arg_inner, i128* %fp2invert.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_fp2invert, %struct_template_circuit_fp2invert* %0, i32 0, i32 1
  %fp2invert.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %fp2invert.k.declare_arg = alloca i128, align 8
  store i128 %fp2invert.k.read_arg_inner, i128* %fp2invert.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_fp2invert, %struct_template_circuit_fp2invert* %0, i32 0, i32 2
  %fp2invert.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter2, align 8
  %fp2invert.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %fp2invert.p.read_arg_inner, [256 x i128]** %fp2invert.p.declare_arg, align 8
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_fp2invert, %struct_template_circuit_fp2invert* %0, i32 0, i32 3
  %fp2invert.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter3, align 8
  %fp2invert.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %fp2invert.in.read_input_inner, [256 x [256 x i128]]** %fp2invert.in.declare_input, align 8
  %inverse = alloca [256 x [256 x i128]]*, align 8
  %inverse4 = alloca [256 x [256 x i128]], align 8
  store [256 x [256 x i128]]* %inverse4, [256 x [256 x i128]]** %inverse, align 8
  %outRangeChecks = alloca [256 x [256 x %struct_template_circuit_num2bits*]]*, align 8
  %outRangeChecks5 = alloca [256 x [256 x %struct_template_circuit_num2bits*]], align 8
  store [256 x [256 x %struct_template_circuit_num2bits*]]* %outRangeChecks5, [256 x [256 x %struct_template_circuit_num2bits*]]** %outRangeChecks, align 8
  %j = alloca i128, align 8
  %j6 = call i128 @fn_intrinsic_inline_init()
  store i128 %j6, i128* %j, align 4
  %fp2invert.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %fp2invert.out.declare_output, align 8
  %i = alloca i128, align 8
  %i7 = call i128 @fn_intrinsic_inline_init()
  store i128 %i7, i128* %i, align 4
  %in_out = alloca %struct_template_circuit_fp2multiply*, align 8
  %n = load i128, i128* %fp2invert.n.declare_arg, align 4
  %k = load i128, i128* %fp2invert.k.declare_arg, align 4
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2invert.in.declare_input, align 8
  %p = load [256 x i128]*, [256 x i128]** %fp2invert.p.declare_arg, align 8
  %call = call [256 x [256 x i128]]* @find_Fp2_inverse(i128 %n, i128 %k, [256 x [256 x i128]]* %in, [256 x i128]* %p)
  store [256 x [256 x i128]]* %call, [256 x [256 x i128]]** %inverse, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch19, %entry
  store i128 0, i128* %j, align 4
  br label %loop.body8

loop.body8:                                       ; preds = %loop.latch, %loop.body
  %inverse9 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %inverse, align 8
  %i10 = load i128, i128* %i, align 4
  %j11 = load i128, i128* %j, align 4
  %array_getter = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %inverse9, i128 0, i128 %i10, i128 %j11
  %inverse12 = load i128, i128* %array_getter, align 4
  %ptr_getter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2invert.out.declare_output, align 8
  %i13 = load i128, i128* %i, align 4
  %j14 = load i128, i128* %j, align 4
  %out15 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter, i128 0, i128 %i13, i128 %j14
  store i128 %inverse12, i128* %out15, align 4
  br label %loop.latch

loop.latch:                                       ; preds = %loop.body8
  %j16 = load i128, i128* %j, align 4
  %add = add i128 %j16, 1
  store i128 %add, i128* %j, align 4
  %j17 = load i128, i128* %j, align 4
  %k18 = load i128, i128* %fp2invert.k.declare_arg, align 4
  %slt = icmp slt i128 %j17, %k18
  br i1 %slt, label %loop.body8, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  br label %loop.latch19

loop.latch19:                                     ; preds = %loop.exit
  %i20 = load i128, i128* %i, align 4
  %add21 = add i128 %i20, 1
  store i128 %add21, i128* %i, align 4
  %i22 = load i128, i128* %i, align 4
  %slt23 = icmp slt i128 %i22, 2
  br i1 %slt23, label %loop.body, label %loop.exit24

loop.exit24:                                      ; preds = %loop.latch19
  store i128 0, i128* %i, align 4
  br label %loop.body25

loop.body25:                                      ; preds = %loop.latch56, %loop.exit24
  store i128 0, i128* %j, align 4
  br label %loop.body26

loop.body26:                                      ; preds = %loop.latch49, %loop.body25
  %n27 = load i128, i128* %fp2invert.n.declare_arg, align 4
  %call28 = call %struct_template_circuit_num2bits* @fn_template_build_num2bits(i128 %n27)
  %ptr_getter29 = load [256 x [256 x %struct_template_circuit_num2bits*]]*, [256 x [256 x %struct_template_circuit_num2bits*]]** %outRangeChecks, align 8
  %i30 = load i128, i128* %i, align 4
  %j31 = load i128, i128* %j, align 4
  %outRangeChecks32 = getelementptr inbounds [256 x [256 x %struct_template_circuit_num2bits*]], [256 x [256 x %struct_template_circuit_num2bits*]]* %ptr_getter29, i128 0, i128 %i30, i128 %j31
  store %struct_template_circuit_num2bits* %call28, %struct_template_circuit_num2bits** %outRangeChecks32, align 8
  %out33 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2invert.out.declare_output, align 8
  %i34 = load i128, i128* %i, align 4
  %j35 = load i128, i128* %j, align 4
  %array_getter36 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out33, i128 0, i128 %i34, i128 %j35
  %out37 = load i128, i128* %array_getter36, align 4
  %outRangeChecks38 = load [256 x [256 x %struct_template_circuit_num2bits*]]*, [256 x [256 x %struct_template_circuit_num2bits*]]** %outRangeChecks, align 8
  %i39 = load i128, i128* %i, align 4
  %j40 = load i128, i128* %j, align 4
  %array_getter41 = getelementptr inbounds [256 x [256 x %struct_template_circuit_num2bits*]], [256 x [256 x %struct_template_circuit_num2bits*]]* %outRangeChecks38, i128 0, i128 %i39, i128 %j40
  %outRangeChecks42 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter41, align 8
  %struct_getter43 = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %outRangeChecks42, i32 0, i32 1
  %num2bits.in.read_input_outter = load i128, i128* %struct_getter43, align 4
  call void @fn_intrinsic_add_constraint(i128 %num2bits.in.read_input_outter, i128 %out37, i1* @constraint.428)
  %ptr_getter44 = load [256 x [256 x %struct_template_circuit_num2bits*]]*, [256 x [256 x %struct_template_circuit_num2bits*]]** %outRangeChecks, align 8
  %i45 = load i128, i128* %i, align 4
  %j46 = load i128, i128* %j, align 4
  %array_getter47 = getelementptr inbounds [256 x [256 x %struct_template_circuit_num2bits*]], [256 x [256 x %struct_template_circuit_num2bits*]]* %ptr_getter44, i128 0, i128 %i45, i128 %j46
  %outRangeChecks48 = load %struct_template_circuit_num2bits*, %struct_template_circuit_num2bits** %array_getter47, align 8
  %num2bits.in.write_input_outter = getelementptr inbounds %struct_template_circuit_num2bits, %struct_template_circuit_num2bits* %outRangeChecks48, i32 0, i32 1
  store i128 %out37, i128* %num2bits.in.write_input_outter, align 4
  br label %loop.latch49

loop.latch49:                                     ; preds = %loop.body26
  %j50 = load i128, i128* %j, align 4
  %add51 = add i128 %j50, 1
  store i128 %add51, i128* %j, align 4
  %j52 = load i128, i128* %j, align 4
  %k53 = load i128, i128* %fp2invert.k.declare_arg, align 4
  %slt54 = icmp slt i128 %j52, %k53
  br i1 %slt54, label %loop.body26, label %loop.exit55

loop.exit55:                                      ; preds = %loop.latch49
  br label %loop.latch56

loop.latch56:                                     ; preds = %loop.exit55
  %i57 = load i128, i128* %i, align 4
  %add58 = add i128 %i57, 1
  store i128 %add58, i128* %i, align 4
  %i59 = load i128, i128* %i, align 4
  %slt60 = icmp slt i128 %i59, 2
  br i1 %slt60, label %loop.body25, label %loop.exit61

loop.exit61:                                      ; preds = %loop.latch56
  %n62 = load i128, i128* %fp2invert.n.declare_arg, align 4
  %k63 = load i128, i128* %fp2invert.k.declare_arg, align 4
  %p64 = load [256 x i128]*, [256 x i128]** %fp2invert.p.declare_arg, align 8
  %call65 = call %struct_template_circuit_fp2multiply* @fn_template_build_fp2multiply(i128 %n62, i128 %k63, [256 x i128]* %p64)
  store %struct_template_circuit_fp2multiply* %call65, %struct_template_circuit_fp2multiply** %in_out, align 8
  store i128 0, i128* %i, align 4
  br label %loop.body66

loop.body66:                                      ; preds = %loop.latch109, %loop.exit61
  store i128 0, i128* %j, align 4
  br label %loop.body67

loop.body67:                                      ; preds = %loop.latch102, %loop.body66
  %in68 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2invert.in.declare_input, align 8
  %i69 = load i128, i128* %i, align 4
  %j70 = load i128, i128* %j, align 4
  %array_getter71 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in68, i128 0, i128 %i69, i128 %j70
  %in72 = load i128, i128* %array_getter71, align 4
  %in_out73 = load %struct_template_circuit_fp2multiply*, %struct_template_circuit_fp2multiply** %in_out, align 8
  %struct_getter74 = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %in_out73, i32 0, i32 3
  %fp2multiply.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter74, align 8
  %i75 = load i128, i128* %i, align 4
  %j76 = load i128, i128* %j, align 4
  %array_getter77 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2multiply.a.read_input_outter, i128 0, i128 %i75, i128 %j76
  %in_out78 = load i128, i128* %array_getter77, align 4
  call void @fn_intrinsic_add_constraint(i128 %in_out78, i128 %in72, i1* @constraint.429)
  %ptr_getter79 = load %struct_template_circuit_fp2multiply*, %struct_template_circuit_fp2multiply** %in_out, align 8
  %struct_getter80 = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %ptr_getter79, i32 0, i32 3
  %fp2multiply.a.read_input_outter81 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter80, align 8
  %i82 = load i128, i128* %i, align 4
  %j83 = load i128, i128* %j, align 4
  %in_out84 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2multiply.a.read_input_outter81, i128 0, i128 %i82, i128 %j83
  store i128 %in72, i128* %in_out84, align 4
  %out85 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2invert.out.declare_output, align 8
  %i86 = load i128, i128* %i, align 4
  %j87 = load i128, i128* %j, align 4
  %array_getter88 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out85, i128 0, i128 %i86, i128 %j87
  %out89 = load i128, i128* %array_getter88, align 4
  %in_out90 = load %struct_template_circuit_fp2multiply*, %struct_template_circuit_fp2multiply** %in_out, align 8
  %struct_getter91 = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %in_out90, i32 0, i32 4
  %fp2multiply.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter91, align 8
  %i92 = load i128, i128* %i, align 4
  %j93 = load i128, i128* %j, align 4
  %array_getter94 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2multiply.b.read_input_outter, i128 0, i128 %i92, i128 %j93
  %in_out95 = load i128, i128* %array_getter94, align 4
  call void @fn_intrinsic_add_constraint(i128 %in_out95, i128 %out89, i1* @constraint.430)
  %ptr_getter96 = load %struct_template_circuit_fp2multiply*, %struct_template_circuit_fp2multiply** %in_out, align 8
  %struct_getter97 = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %ptr_getter96, i32 0, i32 4
  %fp2multiply.b.read_input_outter98 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter97, align 8
  %i99 = load i128, i128* %i, align 4
  %j100 = load i128, i128* %j, align 4
  %in_out101 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2multiply.b.read_input_outter98, i128 0, i128 %i99, i128 %j100
  store i128 %out89, i128* %in_out101, align 4
  br label %loop.latch102

loop.latch102:                                    ; preds = %loop.body67
  %j103 = load i128, i128* %j, align 4
  %add104 = add i128 %j103, 1
  store i128 %add104, i128* %j, align 4
  %j105 = load i128, i128* %j, align 4
  %k106 = load i128, i128* %fp2invert.k.declare_arg, align 4
  %slt107 = icmp slt i128 %j105, %k106
  br i1 %slt107, label %loop.body67, label %loop.exit108

loop.exit108:                                     ; preds = %loop.latch102
  br label %loop.latch109

loop.latch109:                                    ; preds = %loop.exit108
  %i110 = load i128, i128* %i, align 4
  %add111 = add i128 %i110, 1
  store i128 %add111, i128* %i, align 4
  %i112 = load i128, i128* %i, align 4
  %slt113 = icmp slt i128 %i112, 2
  br i1 %slt113, label %loop.body66, label %loop.exit114

loop.exit114:                                     ; preds = %loop.latch109
  store i128 0, i128* %i, align 4
  br label %loop.body115

loop.body115:                                     ; preds = %loop.latch140, %loop.exit114
  store i128 0, i128* %j, align 4
  br label %loop.body116

loop.body116:                                     ; preds = %loop.latch133, %loop.body115
  %i117 = load i128, i128* %i, align 4
  %eq = icmp eq i128 %i117, 0
  %j118 = load i128, i128* %j, align 4
  %eq119 = icmp eq i128 %j118, 0
  %and = and i1 %eq, %eq119
  br i1 %and, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body116
  %in_out120 = load %struct_template_circuit_fp2multiply*, %struct_template_circuit_fp2multiply** %in_out, align 8
  %struct_getter121 = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %in_out120, i32 0, i32 5
  %fp2multiply.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter121, align 8
  %i122 = load i128, i128* %i, align 4
  %j123 = load i128, i128* %j, align 4
  %array_getter124 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2multiply.out.read_output_outter, i128 0, i128 %i122, i128 %j123
  %in_out125 = load i128, i128* %array_getter124, align 4
  call void @fn_intrinsic_add_constraint(i128 %in_out125, i128 1, i1* @constraint.431)
  br label %if.exit

if.false:                                         ; preds = %loop.body116
  %in_out126 = load %struct_template_circuit_fp2multiply*, %struct_template_circuit_fp2multiply** %in_out, align 8
  %struct_getter127 = getelementptr inbounds %struct_template_circuit_fp2multiply, %struct_template_circuit_fp2multiply* %in_out126, i32 0, i32 5
  %fp2multiply.out.read_output_outter128 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter127, align 8
  %i129 = load i128, i128* %i, align 4
  %j130 = load i128, i128* %j, align 4
  %array_getter131 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %fp2multiply.out.read_output_outter128, i128 0, i128 %i129, i128 %j130
  %in_out132 = load i128, i128* %array_getter131, align 4
  call void @fn_intrinsic_add_constraint(i128 %in_out132, i128 0, i1* @constraint.432)
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch133

loop.latch133:                                    ; preds = %if.exit
  %j134 = load i128, i128* %j, align 4
  %add135 = add i128 %j134, 1
  store i128 %add135, i128* %j, align 4
  %j136 = load i128, i128* %j, align 4
  %k137 = load i128, i128* %fp2invert.k.declare_arg, align 4
  %slt138 = icmp slt i128 %j136, %k137
  br i1 %slt138, label %loop.body116, label %loop.exit139

loop.exit139:                                     ; preds = %loop.latch133
  br label %loop.latch140

loop.latch140:                                    ; preds = %loop.exit139
  %i141 = load i128, i128* %i, align 4
  %add142 = add i128 %i141, 1
  store i128 %add142, i128* %i, align 4
  %i143 = load i128, i128* %i, align 4
  %slt144 = icmp slt i128 %i143, 2
  br i1 %slt144, label %loop.body115, label %loop.exit145

loop.exit145:                                     ; preds = %loop.latch140
  br label %exit

exit:                                             ; preds = %loop.exit145
  %out146 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %fp2invert.out.declare_output, align 8
  %fp2invert.out.write_output_inner = getelementptr inbounds %struct_template_circuit_fp2invert, %struct_template_circuit_fp2invert* %0, i32 0, i32 4
  store [256 x [256 x i128]]* %out146, [256 x [256 x i128]]** %fp2invert.out.write_output_inner, align 8
  ret void
}

define %struct_template_circuit_fp2invert* @fn_template_build_fp2invert(i128 %0, i128 %1, [256 x i128]* %2) {
entry:
  %struct_template_circuit_fp2invert = alloca %struct_template_circuit_fp2invert, align 8
  %fp2invert.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2invert, %struct_template_circuit_fp2invert* %struct_template_circuit_fp2invert, i32 0, i32 0
  store i128 %0, i128* %fp2invert.n.write_arg_inner, align 4
  %fp2invert.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2invert, %struct_template_circuit_fp2invert* %struct_template_circuit_fp2invert, i32 0, i32 1
  store i128 %1, i128* %fp2invert.k.write_arg_inner, align 4
  %fp2invert.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_fp2invert, %struct_template_circuit_fp2invert* %struct_template_circuit_fp2invert, i32 0, i32 2
  store [256 x i128]* %2, [256 x i128]** %fp2invert.p.write_arg_inner, align 8
  ret %struct_template_circuit_fp2invert* %struct_template_circuit_fp2invert
}

define void @fn_template_init_ellipticcurvescalarmultiply(%struct_template_circuit_ellipticcurvescalarmultiply* %0) {
entry:
  %EllipticCurveScalarMultiply = alloca %struct_template_circuit_ellipticcurvescalarmultiply*, align 8
  store %struct_template_circuit_ellipticcurvescalarmultiply* %0, %struct_template_circuit_ellipticcurvescalarmultiply** %EllipticCurveScalarMultiply, align 8
  %struct_getter = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 0
  %ellipticcurvescalarmultiply.n.read_arg_inner = load i128, i128* %struct_getter, align 4
  %ellipticcurvescalarmultiply.n.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvescalarmultiply.n.read_arg_inner, i128* %ellipticcurvescalarmultiply.n.declare_arg, align 4
  %struct_getter1 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 1
  %ellipticcurvescalarmultiply.k.read_arg_inner = load i128, i128* %struct_getter1, align 4
  %ellipticcurvescalarmultiply.k.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvescalarmultiply.k.read_arg_inner, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %struct_getter2 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 2
  %ellipticcurvescalarmultiply.b.read_arg_inner = load i128, i128* %struct_getter2, align 4
  %ellipticcurvescalarmultiply.b.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvescalarmultiply.b.read_arg_inner, i128* %ellipticcurvescalarmultiply.b.declare_arg, align 4
  %struct_getter3 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 3
  %ellipticcurvescalarmultiply.x.read_arg_inner = load i128, i128* %struct_getter3, align 4
  %ellipticcurvescalarmultiply.x.declare_arg = alloca i128, align 8
  store i128 %ellipticcurvescalarmultiply.x.read_arg_inner, i128* %ellipticcurvescalarmultiply.x.declare_arg, align 4
  %struct_getter4 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 4
  %ellipticcurvescalarmultiply.p.read_arg_inner = load [256 x i128]*, [256 x i128]** %struct_getter4, align 8
  %ellipticcurvescalarmultiply.p.declare_arg = alloca [256 x i128]*, align 8
  store [256 x i128]* %ellipticcurvescalarmultiply.p.read_arg_inner, [256 x i128]** %ellipticcurvescalarmultiply.p.declare_arg, align 8
  %struct_getter5 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 5
  %ellipticcurvescalarmultiply.in.read_input_inner = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter5, align 8
  %ellipticcurvescalarmultiply.in.declare_input = alloca [256 x [256 x i128]]*, align 8
  store [256 x [256 x i128]]* %ellipticcurvescalarmultiply.in.read_input_inner, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.in.declare_input, align 8
  %struct_getter6 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 6
  %ellipticcurvescalarmultiply.inisinfinity.read_input_inner = load i128, i128* %struct_getter6, align 4
  %ellipticcurvescalarmultiply.inisinfinity.declare_input = alloca i128, align 8
  store i128 %ellipticcurvescalarmultiply.inisinfinity.read_input_inner, i128* %ellipticcurvescalarmultiply.inisinfinity.declare_input, align 4
  %ellipticcurvescalarmultiply.r_iso.declare_inter = alloca [256 x i128]*, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint ([256 x i128]* getelementptr ([256 x i128], [256 x i128]* null, i32 1) to i32))
  %R_isO = bitcast i8* %malloccall to [256 x i128]*
  store [256 x i128]* %R_isO, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %ellipticcurvescalarmultiply.p.declare_inter = alloca [256 x [256 x i128]]*, align 8
  %malloccall7 = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %P = bitcast i8* %malloccall7 to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %P, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.p.declare_inter, align 8
  %SigBits = alloca i128, align 8
  %SigBits8 = call i128 @fn_intrinsic_inline_init()
  store i128 %SigBits8, i128* %SigBits, align 4
  %LOGK = alloca i128, align 8
  %LOGK9 = call i128 @fn_intrinsic_inline_init()
  store i128 %LOGK9, i128* %LOGK, align 4
  %ellipticcurvescalarmultiply.r.declare_inter = alloca [256 x [256 x [256 x i128]]]*, align 8
  %malloccall10 = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x [256 x i128]]]* getelementptr ([256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* null, i32 1) to i32))
  %R = bitcast i8* %malloccall10 to [256 x [256 x [256 x i128]]]*
  store [256 x [256 x [256 x i128]]]* %R, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %BitLength = alloca i128, align 8
  %BitLength11 = call i128 @fn_intrinsic_inline_init()
  store i128 %BitLength11, i128* %BitLength, align 4
  %ellipticcurvescalarmultiply.isinfinity.declare_output = alloca i128, align 8
  %isInfinity = call i128 @fn_intrinsic_inline_init()
  store i128 %isInfinity, i128* %ellipticcurvescalarmultiply.isinfinity.declare_output, align 4
  %curid = alloca i128, align 8
  %curid12 = call i128 @fn_intrinsic_inline_init()
  store i128 %curid12, i128* %curid, align 4
  %ellipticcurvescalarmultiply.out.declare_output = alloca [256 x [256 x i128]]*, align 8
  %malloccall13 = tail call i8* @malloc(i32 ptrtoint ([256 x [256 x i128]]* getelementptr ([256 x [256 x i128]], [256 x [256 x i128]]* null, i32 1) to i32))
  %out = bitcast i8* %malloccall13 to [256 x [256 x i128]]*
  store [256 x [256 x i128]]* %out, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.out.declare_output, align 8
  %Bits = alloca [256 x i128]*, align 8
  %Bits14 = alloca [256 x i128], align 8
  store [256 x i128]* %Bits14, [256 x i128]** %Bits, align 8
  %j = alloca i128, align 8
  %j15 = call i128 @fn_intrinsic_inline_init()
  store i128 %j15, i128* %j, align 4
  %idx = alloca i128, align 8
  %idx16 = call i128 @fn_intrinsic_inline_init()
  store i128 %idx16, i128* %idx, align 4
  %i = alloca i128, align 8
  %i17 = call i128 @fn_intrinsic_inline_init()
  store i128 %i17, i128* %i, align 4
  %Pdouble = alloca [256 x %struct_template_circuit_ellipticcurvedouble*]*, align 8
  %Pdouble18 = alloca [256 x %struct_template_circuit_ellipticcurvedouble*], align 8
  store [256 x %struct_template_circuit_ellipticcurvedouble*]* %Pdouble18, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %Padd = alloca [256 x %struct_template_circuit_ellipticcurveadd*]*, align 8
  %Padd19 = alloca [256 x %struct_template_circuit_ellipticcurveadd*], align 8
  store [256 x %struct_template_circuit_ellipticcurveadd*]* %Padd19, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %k = load i128, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %call = call i128 @log_ceil(i128 %k)
  store i128 %call, i128* %LOGK, align 4
  %uniform_array = alloca [256 x i128], align 8
  store [256 x i128]* %uniform_array, [256 x i128]** %Bits, align 8
  store i128 0, i128* %BitLength, align 4
  store i128 0, i128* %SigBits, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body

loop.body:                                        ; preds = %loop.latch, %entry
  %x = load i128, i128* %ellipticcurvescalarmultiply.x.declare_arg, align 4
  %i20 = load i128, i128* %i, align 4
  %rshift = lshr i128 %x, %i20
  %and = and i128 %rshift, 1
  %ptr_getter = load [256 x i128]*, [256 x i128]** %Bits, align 8
  %i21 = load i128, i128* %i, align 4
  %Bits22 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter, i128 0, i128 %i21
  store i128 %and, i128* %Bits22, align 4
  %Bits23 = load [256 x i128]*, [256 x i128]** %Bits, align 8
  %i24 = load i128, i128* %i, align 4
  %array_getter = getelementptr inbounds [256 x i128], [256 x i128]* %Bits23, i128 0, i128 %i24
  %Bits25 = load i128, i128* %array_getter, align 4
  %eq = icmp eq i128 %Bits25, 1
  br i1 %eq, label %if.true, label %if.false

if.true:                                          ; preds = %loop.body
  %SigBits26 = load i128, i128* %SigBits, align 4
  %add = add i128 %SigBits26, 1
  store i128 %add, i128* %SigBits, align 4
  %i27 = load i128, i128* %i, align 4
  %add28 = add i128 %i27, 1
  store i128 %add28, i128* %BitLength, align 4
  br label %if.exit

if.false:                                         ; preds = %loop.body
  br label %if.exit

if.exit:                                          ; preds = %if.false, %if.true
  br label %loop.latch

loop.latch:                                       ; preds = %if.exit
  %i29 = load i128, i128* %i, align 4
  %add30 = add i128 %i29, 1
  store i128 %add30, i128* %i, align 4
  %i31 = load i128, i128* %i, align 4
  %slt = icmp slt i128 %i31, 250
  br i1 %slt, label %loop.body, label %loop.exit

loop.exit:                                        ; preds = %loop.latch
  store i128 0, i128* %curid, align 4
  store i128 0, i128* %j, align 4
  br label %loop.body32

loop.body32:                                      ; preds = %loop.latch54, %loop.exit
  store i128 0, i128* %idx, align 4
  br label %loop.body33

loop.body33:                                      ; preds = %loop.latch47, %loop.body32
  %in = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.in.declare_input, align 8
  %j34 = load i128, i128* %j, align 4
  %idx35 = load i128, i128* %idx, align 4
  %array_getter36 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in, i128 0, i128 %j34, i128 %idx35
  %in37 = load i128, i128* %array_getter36, align 4
  %P38 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.p.declare_inter, align 8
  %j39 = load i128, i128* %j, align 4
  %idx40 = load i128, i128* %idx, align 4
  %array_getter41 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %P38, i128 0, i128 %j39, i128 %idx40
  %P42 = load i128, i128* %array_getter41, align 4
  call void @fn_intrinsic_add_constraint(i128 %P42, i128 %in37, i1* @constraint.433)
  %ptr_getter43 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.p.declare_inter, align 8
  %j44 = load i128, i128* %j, align 4
  %idx45 = load i128, i128* %idx, align 4
  %P46 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter43, i128 0, i128 %j44, i128 %idx45
  store i128 %in37, i128* %P46, align 4
  br label %loop.latch47

loop.latch47:                                     ; preds = %loop.body33
  %idx48 = load i128, i128* %idx, align 4
  %add49 = add i128 %idx48, 1
  store i128 %add49, i128* %idx, align 4
  %idx50 = load i128, i128* %idx, align 4
  %k51 = load i128, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %slt52 = icmp slt i128 %idx50, %k51
  br i1 %slt52, label %loop.body33, label %loop.exit53

loop.exit53:                                      ; preds = %loop.latch47
  br label %loop.latch54

loop.latch54:                                     ; preds = %loop.exit53
  %j55 = load i128, i128* %j, align 4
  %add56 = add i128 %j55, 1
  store i128 %add56, i128* %j, align 4
  %j57 = load i128, i128* %j, align 4
  %slt58 = icmp slt i128 %j57, 2
  br i1 %slt58, label %loop.body32, label %loop.exit59

loop.exit59:                                      ; preds = %loop.latch54
  %BitLength60 = load i128, i128* %BitLength, align 4
  %sub = sub i128 %BitLength60, 1
  store i128 %sub, i128* %i, align 4
  br label %loop.body61

loop.body61:                                      ; preds = %loop.latch353, %loop.exit59
  %i64 = load i128, i128* %i, align 4
  %BitLength65 = load i128, i128* %BitLength, align 4
  %sub66 = sub i128 %BitLength65, 1
  %eq67 = icmp eq i128 %i64, %sub66
  br i1 %eq67, label %if.true62, label %if.false63

if.true62:                                        ; preds = %loop.body61
  store i128 0, i128* %j, align 4
  br label %loop.body68

if.false63:                                       ; preds = %loop.body61
  %n = load i128, i128* %ellipticcurvescalarmultiply.n.declare_arg, align 4
  %k106 = load i128, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %b = load i128, i128* %ellipticcurvescalarmultiply.b.declare_arg, align 4
  %p = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.p.declare_arg, align 8
  %call107 = call %struct_template_circuit_ellipticcurvedouble* @fn_template_build_ellipticcurvedouble(i128 %n, i128 %k106, i128 0, i128 %b, [256 x i128]* %p)
  %ptr_getter108 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i109 = load i128, i128* %i, align 4
  %Pdouble110 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %ptr_getter108, i128 0, i128 %i109
  store %struct_template_circuit_ellipticcurvedouble* %call107, %struct_template_circuit_ellipticcurvedouble** %Pdouble110, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body111

loop.body68:                                      ; preds = %loop.latch93, %if.true62
  store i128 0, i128* %idx, align 4
  br label %loop.body69

loop.body69:                                      ; preds = %loop.latch86, %loop.body68
  %P70 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.p.declare_inter, align 8
  %j71 = load i128, i128* %j, align 4
  %idx72 = load i128, i128* %idx, align 4
  %array_getter73 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %P70, i128 0, i128 %j71, i128 %idx72
  %P74 = load i128, i128* %array_getter73, align 4
  %R75 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %i76 = load i128, i128* %i, align 4
  %j77 = load i128, i128* %j, align 4
  %idx78 = load i128, i128* %idx, align 4
  %array_getter79 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R75, i128 0, i128 %i76, i128 %j77, i128 %idx78
  %R80 = load i128, i128* %array_getter79, align 4
  call void @fn_intrinsic_add_constraint(i128 %R80, i128 %P74, i1* @constraint.434)
  %ptr_getter81 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %i82 = load i128, i128* %i, align 4
  %j83 = load i128, i128* %j, align 4
  %idx84 = load i128, i128* %idx, align 4
  %R85 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter81, i128 0, i128 %i82, i128 %j83, i128 %idx84
  store i128 %P74, i128* %R85, align 4
  br label %loop.latch86

loop.latch86:                                     ; preds = %loop.body69
  %idx87 = load i128, i128* %idx, align 4
  %add88 = add i128 %idx87, 1
  store i128 %add88, i128* %idx, align 4
  %idx89 = load i128, i128* %idx, align 4
  %k90 = load i128, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %slt91 = icmp slt i128 %idx89, %k90
  br i1 %slt91, label %loop.body69, label %loop.exit92

loop.exit92:                                      ; preds = %loop.latch86
  br label %loop.latch93

loop.latch93:                                     ; preds = %loop.exit92
  %j94 = load i128, i128* %j, align 4
  %add95 = add i128 %j94, 1
  store i128 %add95, i128* %j, align 4
  %j96 = load i128, i128* %j, align 4
  %slt97 = icmp slt i128 %j96, 2
  br i1 %slt97, label %loop.body68, label %loop.exit98

loop.exit98:                                      ; preds = %loop.latch93
  %R_isO99 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %i100 = load i128, i128* %i, align 4
  %array_getter101 = getelementptr inbounds [256 x i128], [256 x i128]* %R_isO99, i128 0, i128 %i100
  %R_isO102 = load i128, i128* %array_getter101, align 4
  call void @fn_intrinsic_add_constraint(i128 %R_isO102, i128 0, i1* @constraint.435)
  %ptr_getter103 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %i104 = load i128, i128* %i, align 4
  %R_isO105 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter103, i128 0, i128 %i104
  store i128 0, i128* %R_isO105, align 4
  br label %if.exit352

loop.body111:                                     ; preds = %loop.latch145, %if.false63
  store i128 0, i128* %idx, align 4
  br label %loop.body112

loop.body112:                                     ; preds = %loop.latch138, %loop.body111
  %R113 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %i114 = load i128, i128* %i, align 4
  %add115 = add i128 %i114, 1
  %j116 = load i128, i128* %j, align 4
  %idx117 = load i128, i128* %idx, align 4
  %array_getter118 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R113, i128 0, i128 %add115, i128 %j116, i128 %idx117
  %R119 = load i128, i128* %array_getter118, align 4
  %Pdouble120 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i121 = load i128, i128* %i, align 4
  %array_getter122 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %Pdouble120, i128 0, i128 %i121
  %Pdouble123 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %array_getter122, align 8
  %struct_getter124 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %Pdouble123, i32 0, i32 5
  %ellipticcurvedouble.in.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter124, align 8
  %j125 = load i128, i128* %j, align 4
  %idx126 = load i128, i128* %idx, align 4
  %array_getter127 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.in.read_input_outter, i128 0, i128 %j125, i128 %idx126
  %Pdouble128 = load i128, i128* %array_getter127, align 4
  call void @fn_intrinsic_add_constraint(i128 %Pdouble128, i128 %R119, i1* @constraint.436)
  %ptr_getter129 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i130 = load i128, i128* %i, align 4
  %array_getter131 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %ptr_getter129, i128 0, i128 %i130
  %Pdouble132 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %array_getter131, align 8
  %struct_getter133 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %Pdouble132, i32 0, i32 5
  %ellipticcurvedouble.in.read_input_outter134 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter133, align 8
  %j135 = load i128, i128* %j, align 4
  %idx136 = load i128, i128* %idx, align 4
  %Pdouble137 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.in.read_input_outter134, i128 0, i128 %j135, i128 %idx136
  store i128 %R119, i128* %Pdouble137, align 4
  br label %loop.latch138

loop.latch138:                                    ; preds = %loop.body112
  %idx139 = load i128, i128* %idx, align 4
  %add140 = add i128 %idx139, 1
  store i128 %add140, i128* %idx, align 4
  %idx141 = load i128, i128* %idx, align 4
  %k142 = load i128, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %slt143 = icmp slt i128 %idx141, %k142
  br i1 %slt143, label %loop.body112, label %loop.exit144

loop.exit144:                                     ; preds = %loop.latch138
  br label %loop.latch145

loop.latch145:                                    ; preds = %loop.exit144
  %j146 = load i128, i128* %j, align 4
  %add147 = add i128 %j146, 1
  store i128 %add147, i128* %j, align 4
  %j148 = load i128, i128* %j, align 4
  %slt149 = icmp slt i128 %j148, 2
  br i1 %slt149, label %loop.body111, label %loop.exit150

loop.exit150:                                     ; preds = %loop.latch145
  %Bits153 = load [256 x i128]*, [256 x i128]** %Bits, align 8
  %i154 = load i128, i128* %i, align 4
  %array_getter155 = getelementptr inbounds [256 x i128], [256 x i128]* %Bits153, i128 0, i128 %i154
  %Bits156 = load i128, i128* %array_getter155, align 4
  %eq157 = icmp eq i128 %Bits156, 0
  br i1 %eq157, label %if.true151, label %if.false152

if.true151:                                       ; preds = %loop.exit150
  store i128 0, i128* %j, align 4
  br label %loop.body158

if.false152:                                      ; preds = %loop.exit150
  %n205 = load i128, i128* %ellipticcurvescalarmultiply.n.declare_arg, align 4
  %k206 = load i128, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %b207 = load i128, i128* %ellipticcurvescalarmultiply.b.declare_arg, align 4
  %p208 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.p.declare_arg, align 8
  %call209 = call %struct_template_circuit_ellipticcurveadd* @fn_template_build_ellipticcurveadd(i128 %n205, i128 %k206, i128 0, i128 %b207, [256 x i128]* %p208)
  %ptr_getter210 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid211 = load i128, i128* %curid, align 4
  %Padd212 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %ptr_getter210, i128 0, i128 %curid211
  store %struct_template_circuit_ellipticcurveadd* %call209, %struct_template_circuit_ellipticcurveadd** %Padd212, align 8
  store i128 0, i128* %j, align 4
  br label %loop.body213

loop.body158:                                     ; preds = %loop.latch187, %if.true151
  store i128 0, i128* %idx, align 4
  br label %loop.body159

loop.body159:                                     ; preds = %loop.latch180, %loop.body158
  %Pdouble160 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i161 = load i128, i128* %i, align 4
  %array_getter162 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %Pdouble160, i128 0, i128 %i161
  %Pdouble163 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %array_getter162, align 8
  %struct_getter164 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %Pdouble163, i32 0, i32 6
  %ellipticcurvedouble.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter164, align 8
  %j165 = load i128, i128* %j, align 4
  %idx166 = load i128, i128* %idx, align 4
  %array_getter167 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.out.read_output_outter, i128 0, i128 %j165, i128 %idx166
  %Pdouble168 = load i128, i128* %array_getter167, align 4
  %R169 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %i170 = load i128, i128* %i, align 4
  %j171 = load i128, i128* %j, align 4
  %idx172 = load i128, i128* %idx, align 4
  %array_getter173 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R169, i128 0, i128 %i170, i128 %j171, i128 %idx172
  %R174 = load i128, i128* %array_getter173, align 4
  call void @fn_intrinsic_add_constraint(i128 %R174, i128 %Pdouble168, i1* @constraint.437)
  %ptr_getter175 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %i176 = load i128, i128* %i, align 4
  %j177 = load i128, i128* %j, align 4
  %idx178 = load i128, i128* %idx, align 4
  %R179 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter175, i128 0, i128 %i176, i128 %j177, i128 %idx178
  store i128 %Pdouble168, i128* %R179, align 4
  br label %loop.latch180

loop.latch180:                                    ; preds = %loop.body159
  %idx181 = load i128, i128* %idx, align 4
  %add182 = add i128 %idx181, 1
  store i128 %add182, i128* %idx, align 4
  %idx183 = load i128, i128* %idx, align 4
  %k184 = load i128, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %slt185 = icmp slt i128 %idx183, %k184
  br i1 %slt185, label %loop.body159, label %loop.exit186

loop.exit186:                                     ; preds = %loop.latch180
  br label %loop.latch187

loop.latch187:                                    ; preds = %loop.exit186
  %j188 = load i128, i128* %j, align 4
  %add189 = add i128 %j188, 1
  store i128 %add189, i128* %j, align 4
  %j190 = load i128, i128* %j, align 4
  %slt191 = icmp slt i128 %j190, 2
  br i1 %slt191, label %loop.body158, label %loop.exit192

loop.exit192:                                     ; preds = %loop.latch187
  %R_isO193 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %i194 = load i128, i128* %i, align 4
  %add195 = add i128 %i194, 1
  %array_getter196 = getelementptr inbounds [256 x i128], [256 x i128]* %R_isO193, i128 0, i128 %add195
  %R_isO197 = load i128, i128* %array_getter196, align 4
  %R_isO198 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %i199 = load i128, i128* %i, align 4
  %array_getter200 = getelementptr inbounds [256 x i128], [256 x i128]* %R_isO198, i128 0, i128 %i199
  %R_isO201 = load i128, i128* %array_getter200, align 4
  call void @fn_intrinsic_add_constraint(i128 %R_isO201, i128 %R_isO197, i1* @constraint.438)
  %ptr_getter202 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %i203 = load i128, i128* %i, align 4
  %R_isO204 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter202, i128 0, i128 %i203
  store i128 %R_isO197, i128* %R_isO204, align 4
  br label %if.exit351

loop.body213:                                     ; preds = %loop.latch273, %if.false152
  store i128 0, i128* %idx, align 4
  br label %loop.body214

loop.body214:                                     ; preds = %loop.latch266, %loop.body213
  %Pdouble215 = load [256 x %struct_template_circuit_ellipticcurvedouble*]*, [256 x %struct_template_circuit_ellipticcurvedouble*]** %Pdouble, align 8
  %i216 = load i128, i128* %i, align 4
  %array_getter217 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurvedouble*], [256 x %struct_template_circuit_ellipticcurvedouble*]* %Pdouble215, i128 0, i128 %i216
  %Pdouble218 = load %struct_template_circuit_ellipticcurvedouble*, %struct_template_circuit_ellipticcurvedouble** %array_getter217, align 8
  %struct_getter219 = getelementptr inbounds %struct_template_circuit_ellipticcurvedouble, %struct_template_circuit_ellipticcurvedouble* %Pdouble218, i32 0, i32 6
  %ellipticcurvedouble.out.read_output_outter220 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter219, align 8
  %j221 = load i128, i128* %j, align 4
  %idx222 = load i128, i128* %idx, align 4
  %array_getter223 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurvedouble.out.read_output_outter220, i128 0, i128 %j221, i128 %idx222
  %Pdouble224 = load i128, i128* %array_getter223, align 4
  %Padd225 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid226 = load i128, i128* %curid, align 4
  %array_getter227 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %Padd225, i128 0, i128 %curid226
  %Padd228 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %array_getter227, align 8
  %struct_getter229 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %Padd228, i32 0, i32 5
  %ellipticcurveadd.a.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter229, align 8
  %j230 = load i128, i128* %j, align 4
  %idx231 = load i128, i128* %idx, align 4
  %array_getter232 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveadd.a.read_input_outter, i128 0, i128 %j230, i128 %idx231
  %Padd233 = load i128, i128* %array_getter232, align 4
  call void @fn_intrinsic_add_constraint(i128 %Padd233, i128 %Pdouble224, i1* @constraint.439)
  %ptr_getter234 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid235 = load i128, i128* %curid, align 4
  %array_getter236 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %ptr_getter234, i128 0, i128 %curid235
  %Padd237 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %array_getter236, align 8
  %struct_getter238 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %Padd237, i32 0, i32 5
  %ellipticcurveadd.a.read_input_outter239 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter238, align 8
  %j240 = load i128, i128* %j, align 4
  %idx241 = load i128, i128* %idx, align 4
  %Padd242 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveadd.a.read_input_outter239, i128 0, i128 %j240, i128 %idx241
  store i128 %Pdouble224, i128* %Padd242, align 4
  %P243 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.p.declare_inter, align 8
  %j244 = load i128, i128* %j, align 4
  %idx245 = load i128, i128* %idx, align 4
  %array_getter246 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %P243, i128 0, i128 %j244, i128 %idx245
  %P247 = load i128, i128* %array_getter246, align 4
  %Padd248 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid249 = load i128, i128* %curid, align 4
  %array_getter250 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %Padd248, i128 0, i128 %curid249
  %Padd251 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %array_getter250, align 8
  %struct_getter252 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %Padd251, i32 0, i32 7
  %ellipticcurveadd.b.read_input_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter252, align 8
  %j253 = load i128, i128* %j, align 4
  %idx254 = load i128, i128* %idx, align 4
  %array_getter255 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveadd.b.read_input_outter, i128 0, i128 %j253, i128 %idx254
  %Padd256 = load i128, i128* %array_getter255, align 4
  call void @fn_intrinsic_add_constraint(i128 %Padd256, i128 %P247, i1* @constraint.440)
  %ptr_getter257 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid258 = load i128, i128* %curid, align 4
  %array_getter259 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %ptr_getter257, i128 0, i128 %curid258
  %Padd260 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %array_getter259, align 8
  %struct_getter261 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %Padd260, i32 0, i32 7
  %ellipticcurveadd.b.read_input_outter262 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter261, align 8
  %j263 = load i128, i128* %j, align 4
  %idx264 = load i128, i128* %idx, align 4
  %Padd265 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveadd.b.read_input_outter262, i128 0, i128 %j263, i128 %idx264
  store i128 %P247, i128* %Padd265, align 4
  br label %loop.latch266

loop.latch266:                                    ; preds = %loop.body214
  %idx267 = load i128, i128* %idx, align 4
  %add268 = add i128 %idx267, 1
  store i128 %add268, i128* %idx, align 4
  %idx269 = load i128, i128* %idx, align 4
  %k270 = load i128, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %slt271 = icmp slt i128 %idx269, %k270
  br i1 %slt271, label %loop.body214, label %loop.exit272

loop.exit272:                                     ; preds = %loop.latch266
  br label %loop.latch273

loop.latch273:                                    ; preds = %loop.exit272
  %j274 = load i128, i128* %j, align 4
  %add275 = add i128 %j274, 1
  store i128 %add275, i128* %j, align 4
  %j276 = load i128, i128* %j, align 4
  %slt277 = icmp slt i128 %j276, 2
  br i1 %slt277, label %loop.body213, label %loop.exit278

loop.exit278:                                     ; preds = %loop.latch273
  %R_isO279 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %i280 = load i128, i128* %i, align 4
  %add281 = add i128 %i280, 1
  %array_getter282 = getelementptr inbounds [256 x i128], [256 x i128]* %R_isO279, i128 0, i128 %add281
  %R_isO283 = load i128, i128* %array_getter282, align 4
  %Padd284 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid285 = load i128, i128* %curid, align 4
  %array_getter286 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %Padd284, i128 0, i128 %curid285
  %Padd287 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %array_getter286, align 8
  %struct_getter288 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %Padd287, i32 0, i32 6
  %ellipticcurveadd.aisinfinity.read_input_outter = load i128, i128* %struct_getter288, align 4
  call void @fn_intrinsic_add_constraint(i128 %ellipticcurveadd.aisinfinity.read_input_outter, i128 %R_isO283, i1* @constraint.441)
  %ptr_getter289 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid290 = load i128, i128* %curid, align 4
  %array_getter291 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %ptr_getter289, i128 0, i128 %curid290
  %Padd292 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %array_getter291, align 8
  %ellipticcurveadd.aisinfinity.write_input_outter = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %Padd292, i32 0, i32 6
  store i128 %R_isO283, i128* %ellipticcurveadd.aisinfinity.write_input_outter, align 4
  %Padd293 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid294 = load i128, i128* %curid, align 4
  %array_getter295 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %Padd293, i128 0, i128 %curid294
  %Padd296 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %array_getter295, align 8
  %struct_getter297 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %Padd296, i32 0, i32 8
  %ellipticcurveadd.bisinfinity.read_input_outter = load i128, i128* %struct_getter297, align 4
  call void @fn_intrinsic_add_constraint(i128 %ellipticcurveadd.bisinfinity.read_input_outter, i128 0, i1* @constraint.442)
  %ptr_getter298 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid299 = load i128, i128* %curid, align 4
  %array_getter300 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %ptr_getter298, i128 0, i128 %curid299
  %Padd301 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %array_getter300, align 8
  %ellipticcurveadd.bisinfinity.write_input_outter = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %Padd301, i32 0, i32 8
  store i128 0, i128* %ellipticcurveadd.bisinfinity.write_input_outter, align 4
  %Padd302 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid303 = load i128, i128* %curid, align 4
  %array_getter304 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %Padd302, i128 0, i128 %curid303
  %Padd305 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %array_getter304, align 8
  %struct_getter306 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %Padd305, i32 0, i32 14
  %ellipticcurveadd.isinfinity.read_output_outter = load i128, i128* %struct_getter306, align 4
  %R_isO307 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %i308 = load i128, i128* %i, align 4
  %array_getter309 = getelementptr inbounds [256 x i128], [256 x i128]* %R_isO307, i128 0, i128 %i308
  %R_isO310 = load i128, i128* %array_getter309, align 4
  call void @fn_intrinsic_add_constraint(i128 %R_isO310, i128 %ellipticcurveadd.isinfinity.read_output_outter, i1* @constraint.443)
  %ptr_getter311 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %i312 = load i128, i128* %i, align 4
  %R_isO313 = getelementptr inbounds [256 x i128], [256 x i128]* %ptr_getter311, i128 0, i128 %i312
  store i128 %ellipticcurveadd.isinfinity.read_output_outter, i128* %R_isO313, align 4
  store i128 0, i128* %j, align 4
  br label %loop.body314

loop.body314:                                     ; preds = %loop.latch343, %loop.exit278
  store i128 0, i128* %idx, align 4
  br label %loop.body315

loop.body315:                                     ; preds = %loop.latch336, %loop.body314
  %Padd316 = load [256 x %struct_template_circuit_ellipticcurveadd*]*, [256 x %struct_template_circuit_ellipticcurveadd*]** %Padd, align 8
  %curid317 = load i128, i128* %curid, align 4
  %array_getter318 = getelementptr inbounds [256 x %struct_template_circuit_ellipticcurveadd*], [256 x %struct_template_circuit_ellipticcurveadd*]* %Padd316, i128 0, i128 %curid317
  %Padd319 = load %struct_template_circuit_ellipticcurveadd*, %struct_template_circuit_ellipticcurveadd** %array_getter318, align 8
  %struct_getter320 = getelementptr inbounds %struct_template_circuit_ellipticcurveadd, %struct_template_circuit_ellipticcurveadd* %Padd319, i32 0, i32 13
  %ellipticcurveadd.out.read_output_outter = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %struct_getter320, align 8
  %j321 = load i128, i128* %j, align 4
  %idx322 = load i128, i128* %idx, align 4
  %array_getter323 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ellipticcurveadd.out.read_output_outter, i128 0, i128 %j321, i128 %idx322
  %Padd324 = load i128, i128* %array_getter323, align 4
  %R325 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %i326 = load i128, i128* %i, align 4
  %j327 = load i128, i128* %j, align 4
  %idx328 = load i128, i128* %idx, align 4
  %array_getter329 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R325, i128 0, i128 %i326, i128 %j327, i128 %idx328
  %R330 = load i128, i128* %array_getter329, align 4
  call void @fn_intrinsic_add_constraint(i128 %R330, i128 %Padd324, i1* @constraint.444)
  %ptr_getter331 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %i332 = load i128, i128* %i, align 4
  %j333 = load i128, i128* %j, align 4
  %idx334 = load i128, i128* %idx, align 4
  %R335 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %ptr_getter331, i128 0, i128 %i332, i128 %j333, i128 %idx334
  store i128 %Padd324, i128* %R335, align 4
  br label %loop.latch336

loop.latch336:                                    ; preds = %loop.body315
  %idx337 = load i128, i128* %idx, align 4
  %add338 = add i128 %idx337, 1
  store i128 %add338, i128* %idx, align 4
  %idx339 = load i128, i128* %idx, align 4
  %k340 = load i128, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %slt341 = icmp slt i128 %idx339, %k340
  br i1 %slt341, label %loop.body315, label %loop.exit342

loop.exit342:                                     ; preds = %loop.latch336
  br label %loop.latch343

loop.latch343:                                    ; preds = %loop.exit342
  %j344 = load i128, i128* %j, align 4
  %add345 = add i128 %j344, 1
  store i128 %add345, i128* %j, align 4
  %j346 = load i128, i128* %j, align 4
  %slt347 = icmp slt i128 %j346, 2
  br i1 %slt347, label %loop.body314, label %loop.exit348

loop.exit348:                                     ; preds = %loop.latch343
  %curid349 = load i128, i128* %curid, align 4
  %add350 = add i128 %curid349, 1
  store i128 %add350, i128* %curid, align 4
  br label %if.exit351

if.exit351:                                       ; preds = %loop.exit348, %loop.exit192
  br label %if.exit352

if.exit352:                                       ; preds = %if.exit351, %loop.exit98
  br label %loop.latch353

loop.latch353:                                    ; preds = %if.exit352
  %i354 = load i128, i128* %i, align 4
  %sub355 = sub i128 %i354, 1
  store i128 %sub355, i128* %i, align 4
  %i356 = load i128, i128* %i, align 4
  %sge = icmp sge i128 %i356, 0
  br i1 %sge, label %loop.body61, label %loop.exit357

loop.exit357:                                     ; preds = %loop.latch353
  %inIsInfinity = load i128, i128* %ellipticcurvescalarmultiply.inisinfinity.declare_input, align 4
  %R_isO358 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %array_getter359 = getelementptr inbounds [256 x i128], [256 x i128]* %R_isO358, i128 0, i128 0
  %R_isO360 = load i128, i128* %array_getter359, align 4
  %add361 = add i128 %inIsInfinity, %R_isO360
  %inIsInfinity362 = load i128, i128* %ellipticcurvescalarmultiply.inisinfinity.declare_input, align 4
  %R_isO363 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %array_getter364 = getelementptr inbounds [256 x i128], [256 x i128]* %R_isO363, i128 0, i128 0
  %R_isO365 = load i128, i128* %array_getter364, align 4
  %mul = mul i128 %inIsInfinity362, %R_isO365
  %sub366 = sub i128 %add361, %mul
  %isInfinity367 = load i128, i128* %ellipticcurvescalarmultiply.isinfinity.declare_output, align 4
  call void @fn_intrinsic_add_constraint(i128 %isInfinity367, i128 %sub366, i1* @constraint.445)
  %ptr_getter368 = load %struct_template_circuit_ellipticcurvescalarmultiply*, %struct_template_circuit_ellipticcurvescalarmultiply** %EllipticCurveScalarMultiply, align 8
  %ellipticcurvescalarmultiply.isinfinity.write_output_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %ptr_getter368, i32 0, i32 11
  store i128 %sub366, i128* %ellipticcurvescalarmultiply.isinfinity.write_output_inner, align 4
  %EllipticCurveScalarMultiply369 = load %struct_template_circuit_ellipticcurvescalarmultiply*, %struct_template_circuit_ellipticcurvescalarmultiply** %EllipticCurveScalarMultiply, align 8
  %struct_getter370 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %EllipticCurveScalarMultiply369, i32 0, i32 11
  %ellipticcurvescalarmultiply.isinfinity.read_output_inner = load i128, i128* %struct_getter370, align 4
  store i128 %ellipticcurvescalarmultiply.isinfinity.read_output_inner, i128* %ellipticcurvescalarmultiply.isinfinity.declare_output, align 4
  store i128 0, i128* %i, align 4
  br label %loop.body371

loop.body371:                                     ; preds = %loop.latch408, %loop.exit357
  store i128 0, i128* %idx, align 4
  br label %loop.body372

loop.body372:                                     ; preds = %loop.latch401, %loop.body371
  %R373 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %i374 = load i128, i128* %i, align 4
  %idx375 = load i128, i128* %idx, align 4
  %array_getter376 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R373, i128 0, i128 0, i128 %i374, i128 %idx375
  %R377 = load i128, i128* %array_getter376, align 4
  %isInfinity378 = load i128, i128* %ellipticcurvescalarmultiply.isinfinity.declare_output, align 4
  %in379 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.in.declare_input, align 8
  %i380 = load i128, i128* %i, align 4
  %idx381 = load i128, i128* %idx, align 4
  %array_getter382 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %in379, i128 0, i128 %i380, i128 %idx381
  %in383 = load i128, i128* %array_getter382, align 4
  %R384 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %i385 = load i128, i128* %i, align 4
  %idx386 = load i128, i128* %idx, align 4
  %array_getter387 = getelementptr inbounds [256 x [256 x [256 x i128]]], [256 x [256 x [256 x i128]]]* %R384, i128 0, i128 0, i128 %i385, i128 %idx386
  %R388 = load i128, i128* %array_getter387, align 4
  %sub389 = sub i128 %in383, %R388
  %mul390 = mul i128 %isInfinity378, %sub389
  %add391 = add i128 %R377, %mul390
  %out392 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.out.declare_output, align 8
  %i393 = load i128, i128* %i, align 4
  %idx394 = load i128, i128* %idx, align 4
  %array_getter395 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %out392, i128 0, i128 %i393, i128 %idx394
  %out396 = load i128, i128* %array_getter395, align 4
  call void @fn_intrinsic_add_constraint(i128 %out396, i128 %add391, i1* @constraint.446)
  %ptr_getter397 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.out.declare_output, align 8
  %i398 = load i128, i128* %i, align 4
  %idx399 = load i128, i128* %idx, align 4
  %out400 = getelementptr inbounds [256 x [256 x i128]], [256 x [256 x i128]]* %ptr_getter397, i128 0, i128 %i398, i128 %idx399
  store i128 %add391, i128* %out400, align 4
  br label %loop.latch401

loop.latch401:                                    ; preds = %loop.body372
  %idx402 = load i128, i128* %idx, align 4
  %add403 = add i128 %idx402, 1
  store i128 %add403, i128* %idx, align 4
  %idx404 = load i128, i128* %idx, align 4
  %k405 = load i128, i128* %ellipticcurvescalarmultiply.k.declare_arg, align 4
  %slt406 = icmp slt i128 %idx404, %k405
  br i1 %slt406, label %loop.body372, label %loop.exit407

loop.exit407:                                     ; preds = %loop.latch401
  br label %loop.latch408

loop.latch408:                                    ; preds = %loop.exit407
  %i409 = load i128, i128* %i, align 4
  %add410 = add i128 %i409, 1
  store i128 %add410, i128* %i, align 4
  %i411 = load i128, i128* %i, align 4
  %slt412 = icmp slt i128 %i411, 2
  br i1 %slt412, label %loop.body371, label %loop.exit413

loop.exit413:                                     ; preds = %loop.latch408
  br label %exit

exit:                                             ; preds = %loop.exit413
  %R414 = load [256 x [256 x [256 x i128]]]*, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.declare_inter, align 8
  %ellipticcurvescalarmultiply.r.write_inter_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 7
  store [256 x [256 x [256 x i128]]]* %R414, [256 x [256 x [256 x i128]]]** %ellipticcurvescalarmultiply.r.write_inter_inner, align 8
  %R_isO415 = load [256 x i128]*, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.declare_inter, align 8
  %ellipticcurvescalarmultiply.r_iso.write_inter_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 8
  store [256 x i128]* %R_isO415, [256 x i128]** %ellipticcurvescalarmultiply.r_iso.write_inter_inner, align 8
  %P416 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.p.declare_inter, align 8
  %ellipticcurvescalarmultiply.p.write_inter_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 9
  store [256 x [256 x i128]]* %P416, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.p.write_inter_inner, align 8
  %out417 = load [256 x [256 x i128]]*, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.out.declare_output, align 8
  %ellipticcurvescalarmultiply.out.write_output_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 10
  store [256 x [256 x i128]]* %out417, [256 x [256 x i128]]** %ellipticcurvescalarmultiply.out.write_output_inner, align 8
  %isInfinity418 = load i128, i128* %ellipticcurvescalarmultiply.isinfinity.declare_output, align 4
  %ellipticcurvescalarmultiply.isinfinity.write_output_inner419 = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %0, i32 0, i32 11
  store i128 %isInfinity418, i128* %ellipticcurvescalarmultiply.isinfinity.write_output_inner419, align 4
  ret void
}

define %struct_template_circuit_ellipticcurvescalarmultiply* @fn_template_build_ellipticcurvescalarmultiply(i128 %0, i128 %1, i128 %2, i128 %3, [256 x i128]* %4) {
entry:
  %struct_template_circuit_ellipticcurvescalarmultiply = alloca %struct_template_circuit_ellipticcurvescalarmultiply, align 8
  %ellipticcurvescalarmultiply.n.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %struct_template_circuit_ellipticcurvescalarmultiply, i32 0, i32 0
  store i128 %0, i128* %ellipticcurvescalarmultiply.n.write_arg_inner, align 4
  %ellipticcurvescalarmultiply.k.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %struct_template_circuit_ellipticcurvescalarmultiply, i32 0, i32 1
  store i128 %1, i128* %ellipticcurvescalarmultiply.k.write_arg_inner, align 4
  %ellipticcurvescalarmultiply.b.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %struct_template_circuit_ellipticcurvescalarmultiply, i32 0, i32 2
  store i128 %2, i128* %ellipticcurvescalarmultiply.b.write_arg_inner, align 4
  %ellipticcurvescalarmultiply.x.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %struct_template_circuit_ellipticcurvescalarmultiply, i32 0, i32 3
  store i128 %3, i128* %ellipticcurvescalarmultiply.x.write_arg_inner, align 4
  %ellipticcurvescalarmultiply.p.write_arg_inner = getelementptr inbounds %struct_template_circuit_ellipticcurvescalarmultiply, %struct_template_circuit_ellipticcurvescalarmultiply* %struct_template_circuit_ellipticcurvescalarmultiply, i32 0, i32 4
  store [256 x i128]* %4, [256 x i128]** %ellipticcurvescalarmultiply.p.write_arg_inner, align 8
  ret %struct_template_circuit_ellipticcurvescalarmultiply* %struct_template_circuit_ellipticcurvescalarmultiply
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare noalias i8* @malloc(i32)

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #1 = { argmemonly nofree nounwind willreturn }
