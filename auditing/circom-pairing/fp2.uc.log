https://github.com/yi-sun/circom-pairing/tree/master/circuits/fp2.circom
Detecting: aliascheck
Template: aliascheck
Arguments: 
Input Signals: 
in
Inter Signals: 
Output Signals: 
Components: 
compconstant

in --> compconstant


Detecting: and
Template: and
Arguments: 
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 

a --> out
b --> out


Detecting: bigadd
Template: bigadd
Arguments: 
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
modsumthree
modsum

a --> modsum
b --> modsum
modsum --> out
a --> modsumthree
b --> modsumthree
modsum --> modsumthree
modsumthree --> modsumthree
modsumthree --> out


Detecting: bigaddmodp
Template: bigaddmodp
Arguments: 
k
n
Input Signals: 
p
b
a
Inter Signals: 
Output Signals: 
out
Components: 
bigsub
biglessthan
bigadd

a --> bigadd
b --> bigadd
bigadd --> biglessthan
p --> biglessthan
bigadd --> bigsub
biglessthan --> bigsub
p --> bigsub
bigsub --> out


Detecting: bigisequal
Template: bigisequal
Arguments: 
k
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
iszero
isequal

a --> isequal
b --> isequal
isequal --> iszero
iszero --> out


Detecting: bigiszero
Template: bigiszero
Arguments: 
k
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
iszero

in --> iszero
iszero --> iszero
iszero --> out


Detecting: biglessthan
Template: biglessthan
Arguments: 
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
or
and
isequal
lessthan

a --> lessthan
b --> lessthan
a --> isequal
b --> isequal
isequal --> and
lessthan --> and
lessthan --> or
and --> or
and --> and
or --> or
or --> out


Detecting: bigmod
Template: bigmod
Arguments: 
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
mod
div
Components: 
biglessthan
bigadd
bigmult
num2bits

div --> num2bits
mod --> num2bits
div --> bigmult
b --> bigmult
bigmult --> bigadd
mod --> bigadd
a --> bigadd
mod --> biglessthan
b --> biglessthan


Detecting: bigmod2
Template: bigmod2
Arguments: 
m
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
mod
div
Components: 
biglessthan
bigadd
bigmult
num2bits

div --> num2bits
mod --> num2bits
div --> bigmult
b --> bigmult
bigmult --> bigadd
mod --> bigadd
a --> bigadd
mod --> biglessthan
b --> biglessthan


Detecting: bigmodinv
Unconstrainted output signal: out
Template: bigmodinv
Arguments: 
k
n
Input Signals: 
p
in
Inter Signals: 
Output Signals: 
out
Components: 
bigmod
bigmult
num2bits

out --> num2bits
in --> bigmult
out --> bigmult
bigmult --> bigmod
p --> bigmod


Detecting: bigmult
Unconstrainted output signal: out
Template: bigmult
Arguments: 
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
longtoshortnoendcarry
bigmultshortlong

a --> bigmultshortlong
b --> bigmultshortlong
bigmultshortlong --> longtoshortnoendcarry
longtoshortnoendcarry --> out


Detecting: bigmultmodp
Template: bigmultmodp
Arguments: 
k
n
Input Signals: 
p
b
a
Inter Signals: 
Output Signals: 
out
Components: 
bigmod
bigmult

a --> bigmult
b --> bigmult
bigmult --> bigmod
p --> bigmod
bigmod --> out


Detecting: bigmultshortlong
Unconstrainted output signal: out
Template: bigmultshortlong
Arguments: 
m_out
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 



Detecting: bigmultshortlong2d
Unconstrainted output signal: out
Template: bigmultshortlong2d
Arguments: 
l
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 



Detecting: bigmultshortlong2dunequal
Unconstrainted output signal: out
Template: bigmultshortlong2dunequal
Arguments: 
lb
la
ka
kb
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 



Detecting: bigmultshortlongunequal
Unconstrainted output signal: out
Template: bigmultshortlongunequal
Arguments: 
m_out
ka
kb
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 



Detecting: bigsub
Template: bigsub
Arguments: 
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
underflow
out
Components: 
modsubthree
modsub

a --> modsub
b --> modsub
modsub --> out
a --> modsubthree
b --> modsubthree
modsub --> modsubthree
modsubthree --> modsubthree
modsubthree --> out
modsubthree --> underflow


Detecting: bigsubmodp
Template: bigsubmodp
Arguments: 
k
n
Input Signals: 
p
b
a
Inter Signals: 
tmp
flag
Output Signals: 
out
Components: 
bigadd
bigsub

a --> bigsub
b --> bigsub
bigsub --> flag
bigsub --> bigadd
p --> bigadd
flag --> tmp
bigsub --> tmp
tmp --> out
flag --> out
bigadd --> out


Detecting: binsum
Template: binsum
Arguments: 
ops
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 

out --> in


Detecting: bits2num
Template: bits2num
Arguments: 
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 

in --> out


Detecting: bits2num_strict
Template: bits2num_strict
Arguments: 
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
bits2num
aliascheck

in --> bits2num
in --> aliascheck
bits2num --> out


Detecting: checkcarrymodp
Template: checkcarrymodp
Arguments: 
p
m
k
overflow
n
Input Signals: 
y
x
in
Inter Signals: 
Output Signals: 
Components: 
checkcarrytozero
bigmultshortlongunequal

x --> bigmultshortlongunequal
in --> checkcarrytozero
bigmultshortlongunequal --> checkcarrytozero
y --> checkcarrytozero


Detecting: checkcarrytozero
Template: checkcarrytozero
Arguments: 
k
m
n
Input Signals: 
in
Inter Signals: 
carry
Output Signals: 
Components: 
num2bits

carry --> in
carry --> carry
carry --> num2bits


Detecting: compconstant
Template: compconstant
Arguments: 
ct
Input Signals: 
in
Inter Signals: 
sout
parts
Output Signals: 
out
Components: 
num2bits

in --> parts
parts --> sout
sout --> num2bits
num2bits --> out


Detecting: forceequalifenabled
Template: forceequalifenabled
Arguments: 
Input Signals: 
in
enabled
Inter Signals: 
Output Signals: 
Components: 
iszero

in --> iszero


Detecting: fp2add
Template: fp2add
Arguments: 
p
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
fpadd

a --> fpadd
b --> fpadd
fpadd --> out


Detecting: fp2compress
Unconstrainted output signal: out
Template: fp2compress
Arguments: 
m_out
p
m
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
primereduce

in --> primereduce
primereduce --> out


Detecting: fp2conjugate
Template: fp2conjugate
Arguments: 
p
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
fpnegate

in --> fpnegate
in --> out
fpnegate --> out


Detecting: fp2frobeniusmap
Template: fp2frobeniusmap
Arguments: 
p
power
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
fpnegate

in --> out
in --> fpnegate
fpnegate --> out


Detecting: fp2invert
Unconstrainted output signal: out
Template: fp2invert
Arguments: 
p
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
fp2multiply
num2bits

out --> num2bits
in --> fp2multiply
out --> fp2multiply


Detecting: fp2isequal
Template: fp2isequal
Arguments: 
p
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
iszero
isequal
biglessthan

a --> biglessthan
b --> biglessthan
a --> isequal
b --> isequal
isequal --> iszero
iszero --> out


Detecting: fp2iszero
Template: fp2iszero
Arguments: 
p
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
iszero
biglessthan

in --> biglessthan
in --> iszero
iszero --> iszero
iszero --> out


Detecting: fp2multiply
Unconstrainted output signal: out
Template: fp2multiply
Arguments: 
p
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
signedfp2carrymodp
signedfp2multiplynocarrycompress

a --> signedfp2multiplynocarrycompress
b --> signedfp2multiplynocarrycompress
signedfp2multiplynocarrycompress --> signedfp2carrymodp
signedfp2carrymodp --> out


Detecting: fp2multiplythree
Unconstrainted output signal: out
Template: fp2multiplythree
Arguments: 
p
k
n
Input Signals: 
b
c
a
Inter Signals: 
Output Signals: 
out
Components: 
signedfp2carrymodp
signedfp2multiplynocarrycompressthree

a --> signedfp2multiplynocarrycompressthree
b --> signedfp2multiplynocarrycompressthree
c --> signedfp2multiplynocarrycompressthree
signedfp2multiplynocarrycompressthree --> signedfp2carrymodp
signedfp2carrymodp --> out


Detecting: fp2negate
Template: fp2negate
Arguments: 
p
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
fpnegate

in --> fpnegate
fpnegate --> out


Detecting: fp2sgn0
Template: fp2sgn0
Arguments: 
p
k
n
Input Signals: 
in
Inter Signals: 
sgn1
Output Signals: 
out
Components: 
bigiszero
fpsgn0

in --> fpsgn0
in --> bigiszero
bigiszero --> sgn1
fpsgn0 --> sgn1
fpsgn0 --> out
sgn1 --> out


Detecting: fp2subtract
Template: fp2subtract
Arguments: 
p
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
fpsubtract

a --> fpsubtract
b --> fpsubtract
fpsubtract --> out


Detecting: fpadd
Template: fpadd
Arguments: 
p
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
bigsub
biglessthan
bigadd

a --> bigadd
b --> bigadd
bigadd --> biglessthan
bigadd --> bigsub
biglessthan --> bigsub
bigsub --> out


Detecting: fpisequal
Template: fpisequal
Arguments: 
p
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
isequal
biglessthan

in --> biglessthan
in --> isequal
isequal --> isequal
isequal --> out


Detecting: fpiszero
Template: fpiszero
Arguments: 
p
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
bigiszero
biglessthan

in --> biglessthan
in --> bigiszero
bigiszero --> out


Detecting: fpmultiply
Unconstrainted output signal: out
Template: fpmultiply
Arguments: 
p
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
signedfpcarrymodp
primereduce
bigmultshortlong

a --> bigmultshortlong
b --> bigmultshortlong
bigmultshortlong --> primereduce
primereduce --> signedfpcarrymodp
signedfpcarrymodp --> out


Detecting: fpnegate
Template: fpnegate
Arguments: 
p
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
bigiszero
bigsub

in --> bigsub
in --> bigiszero
bigiszero --> out
bigsub --> out


Detecting: fpsgn0
Template: fpsgn0
Arguments: 
p
k
n
Input Signals: 
in
Inter Signals: 
div
Output Signals: 
out
Components: 
biglessthan

in --> biglessthan
div --> in
out --> in


Detecting: fpsubtract
Template: fpsubtract
Arguments: 
p
k
n
Input Signals: 
b
a
Inter Signals: 
tmp
flag
Output Signals: 
out
Components: 
bigadd
bigsub

a --> bigsub
b --> bigsub
bigsub --> flag
bigsub --> bigadd
flag --> tmp
bigsub --> tmp
tmp --> out
flag --> out
bigadd --> out


Detecting: greatereqthan
Template: greatereqthan
Arguments: 
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
lessthan

in --> lessthan
lessthan --> out


Detecting: greaterthan
Template: greaterthan
Arguments: 
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
lessthan

in --> lessthan
lessthan --> out


Detecting: isequal
Template: isequal
Arguments: 
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
iszero

in --> iszero
iszero --> out


Detecting: iszero
Template: iszero
Arguments: 
Input Signals: 
in
Inter Signals: 
inv
Output Signals: 
out
Components: 

in --> out
inv --> out


Detecting: lesseqthan
Template: lesseqthan
Arguments: 
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
lessthan

in --> lessthan
lessthan --> out


Detecting: lessthan
Template: lessthan
Arguments: 
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
num2bits

in --> num2bits
num2bits --> out


Detecting: longtoshortnoendcarry
Unconstrainted output signal: out
Template: longtoshortnoendcarry
Arguments: 
k
n
Input Signals: 
in
Inter Signals: 
runningcarry
Output Signals: 
out
Components: 
num2bits

out --> num2bits


Detecting: modprod
Template: modprod
Arguments: 
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
carry
prod
Components: 
bits2num
num2bits

a --> num2bits
b --> num2bits
num2bits --> bits2num
bits2num --> prod
bits2num --> carry


Detecting: modsub
Template: modsub
Arguments: 
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
borrow
out
Components: 
lessthan

a --> lessthan
b --> lessthan
lessthan --> borrow
borrow --> out
a --> out
b --> out


Detecting: modsubthree
Template: modsubthree
Arguments: 
n
Input Signals: 
b
c
a
Inter Signals: 
b_plus_c
Output Signals: 
borrow
out
Components: 
lessthan

b --> b_plus_c
c --> b_plus_c
a --> lessthan
b_plus_c --> lessthan
lessthan --> borrow
borrow --> out
a --> out
b_plus_c --> out


Detecting: modsum
Template: modsum
Arguments: 
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
carry
sum
Components: 
num2bits

a --> num2bits
b --> num2bits
num2bits --> carry
a --> sum
b --> sum
carry --> sum


Detecting: modsumfour
Template: modsumfour
Arguments: 
n
Input Signals: 
d
b
c
a
Inter Signals: 
Output Signals: 
carry
sum
Components: 
num2bits

a --> num2bits
b --> num2bits
c --> num2bits
d --> num2bits
num2bits --> carry
a --> sum
b --> sum
c --> sum
d --> sum
carry --> sum


Detecting: modsumthree
Template: modsumthree
Arguments: 
n
Input Signals: 
b
c
a
Inter Signals: 
Output Signals: 
carry
sum
Components: 
num2bits

a --> num2bits
b --> num2bits
c --> num2bits
num2bits --> carry
a --> sum
b --> sum
c --> sum
carry --> sum


Detecting: multiand
Template: multiand
Arguments: 
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
multiand
and

in --> out
in --> and
and --> out
in --> in
out --> and


Detecting: nand
Template: nand
Arguments: 
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 

a --> out
b --> out


Detecting: nor
Template: nor
Arguments: 
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 

a --> out
b --> out


Detecting: not
Template: not
Arguments: 
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 

in --> out


Detecting: num2bits
Template: num2bits
Arguments: 
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 

in --> out


Detecting: num2bits_strict
Template: num2bits_strict
Arguments: 
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
num2bits
aliascheck

in --> num2bits
num2bits --> out
num2bits --> aliascheck


Detecting: num2bitsneg
Template: num2bitsneg
Arguments: 
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
iszero

in --> iszero
in --> out


Detecting: or
Template: or
Arguments: 
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 

a --> out
b --> out


Detecting: primereduce
Unconstrainted output signal: out
Template: primereduce
Arguments: 
m_out
p
m
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 



Detecting: rangecheck2d
Template: rangecheck2d
Arguments: 
k
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
Components: 
num2bits

in --> num2bits


Detecting: signedcheckcarrymodtozero
Unconstrainted output signal: x
Template: signedcheckcarrymodtozero
Arguments: 
p
k
overflow
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
x
Components: 
checkcarrymodp
num2bits

in --> checkcarrymodp


Detecting: signedfp2carrymodp
Unconstrainted output signal: out
Unconstrainted output signal: x
Template: signedfp2carrymodp
Arguments: 
p
k
overflow
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
x
Components: 
signedfpcarrymodp

in --> signedfpcarrymodp
signedfpcarrymodp --> out


Detecting: signedfp2compresscarry
Unconstrainted output signal: out
Template: signedfp2compresscarry
Arguments: 
p
m
k
overflow
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
Components: 
signedfp2carrymodp
fp2compress

in --> fp2compress
fp2compress --> signedfp2carrymodp
signedfp2carrymodp --> out


Detecting: signedfp2divide
Unconstrainted output signal: out
Template: signedfp2divide
Arguments: 
p
overflowb
overflowa
k
n
Input Signals: 
b
a
Inter Signals: 
x
Output Signals: 
out
Components: 
num2bits
signedfp2multiplynocarrycompress
checkcarrymodp
rangecheck2d

out --> rangecheck2d
out --> signedfp2multiplynocarrycompress
b --> signedfp2multiplynocarrycompress
signedfp2multiplynocarrycompress --> checkcarrymodp
a --> checkcarrymodp


Detecting: signedfp2multiplynocarry
Unconstrainted output signal: out
Template: signedfp2multiplynocarry
Arguments: 
m_out
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
signedfp2multiplynocarryunequal

a --> signedfp2multiplynocarryunequal
b --> signedfp2multiplynocarryunequal
signedfp2multiplynocarryunequal --> out


Detecting: signedfp2multiplynocarrycompress
Unconstrainted output signal: out
Template: signedfp2multiplynocarrycompress
Arguments: 
m_out
p
m_in
k
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
fp2compress
signedfp2multiplynocarry

a --> signedfp2multiplynocarry
b --> signedfp2multiplynocarry
signedfp2multiplynocarry --> fp2compress
fp2compress --> out


Detecting: signedfp2multiplynocarrycompressthree
Unconstrainted output signal: out
Template: signedfp2multiplynocarrycompressthree
Arguments: 
m_out
p
m_in
k
n
Input Signals: 
b
c
a
Inter Signals: 
Output Signals: 
out
Components: 
signedfp2multiplynocarryunequal
fp2compress
signedfp2multiplynocarry

a --> signedfp2multiplynocarry
b --> signedfp2multiplynocarry
signedfp2multiplynocarry --> signedfp2multiplynocarryunequal
c --> signedfp2multiplynocarryunequal
signedfp2multiplynocarryunequal --> fp2compress
fp2compress --> out


Detecting: signedfp2multiplynocarryunequal
Unconstrainted output signal: out
Template: signedfp2multiplynocarryunequal
Arguments: 
m_out
ka
kb
n
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 
bigmultshortlongunequal

a --> bigmultshortlongunequal
b --> bigmultshortlongunequal
bigmultshortlongunequal --> out


Detecting: signedfpcarrymodp
Unconstrainted output signal: x
Template: signedfpcarrymodp
Arguments: 
p
k
overflow
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
out
x
Components: 
checkcarrymodp
num2bits

out --> num2bits
in --> checkcarrymodp
out --> checkcarrymodp


Detecting: split
Template: split
Arguments: 
m
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
big
small
Components: 
num2bits

small --> num2bits
big --> num2bits
small --> in
big --> in


Detecting: splitthree
Template: splitthree
Arguments: 
k
m
n
Input Signals: 
in
Inter Signals: 
Output Signals: 
big
medium
small
Components: 
num2bits

small --> num2bits
medium --> num2bits
big --> num2bits
small --> in
medium --> in
big --> in


Detecting: xor
Template: xor
Arguments: 
Input Signals: 
b
a
Inter Signals: 
Output Signals: 
out
Components: 

a --> out
b --> out


